package org.com.accesser;

import static java.util.Map.Entry.comparingByValue;
import static java.util.stream.Collectors.toMap;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.dbcp.BasicDataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import org.apache.log4j.Logger;
import org.apache.poi.util.SystemOutLogger;
import org.com.maauli.BackupExcel;
import org.com.maauli.CSVToExcelConverter;
import org.com.maauli.Common;
import org.com.maauli.CreateExcel;
import org.com.maauli.CreateExcelScholarship;
import org.com.maauli.CreateExcelStatA;
import org.com.maauli.CreateExcelStatB;
import org.com.maauli.CreateGradeClassExcel;
import org.com.maauli.CreateMarksGradeExcel;
import org.com.maauli.MarksEntryTemplateExcel;
import org.com.maauli.ResultGradePDF;
import org.com.maauli.ResultUnitTestPDF;
import org.com.security.EncryptDecryptStr;
import com.mysql.jdbc.PreparedStatement;
import java.util.Collections;
import static java.util.stream.Collectors.*;
import static java.util.Map.Entry.*;

public class DBValidate {

	static Logger logger = Logger.getLogger(DBValidate.class.getName());

	static ResourceBundle bundle = ResourceBundle.getBundle("org.com.accesser.school");

	static String driver = "";

	static String user = "";

	static String pwd = "";

	static String timeZoneClass = "";

	static int screenWidth;

	static int screenHeight;

	static int mainCentre;

	Connection connection = null;

	Statement statement = null;

	ResultSet resultSet = null;

	boolean validateUserFlag = false;

	boolean admitFormFlag = false;

	Common cm = new Common();

	CreateExcel ce = new CreateExcel();
	CreateGradeClassExcel cgce = new CreateGradeClassExcel();
	CreateMarksGradeExcel cmge = new CreateMarksGradeExcel();
	CreateExcelScholarship ceScholar = new CreateExcelScholarship();

	EncryptDecryptStr encdec = new EncryptDecryptStr();

	/*
	 * public boolean connectDatabase(SessionData sessiontData1) { boolean
	 * dbConnection = false; try { String url =
	 * sessionData.getConfigMap().get("DBURL_"+sessionData.getDBName()); String dbUser =
	 * sessionData.getDBUser(); String dbPass = sessionData.getDBPass();
	 * if(dbUser.equalsIgnoreCase(null) || dbUser.equalsIgnoreCase("")){
	 * sessionData.setDBUser(encdec.decryptString(user));
	 * sessionData.setDBPass(encdec.decryptString(pwd)); dbUser =
	 * sessionData.getDBUser(); dbPass = sessionData.getDBPass(); } DataSource
	 * dataSource = DataTransaction.getDataSource(sessionData); connection =
	 * dataSource.getConnection(); dbConnection = true; } catch (Exception e) {
	 * logger.error("Database connectivity issue...");
	 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); return
	 * dbConnection; } return dbConnection; }
	 */
	public boolean connectDatabaseForSQL(String dburl) {
		boolean dbConnection = false;
		String dbUser = "";
		String dbPass = "";

		try {
			dbUser = "psUkfKpV6xHmdvuIMk05CQ==";
			dbPass = "gHgrdxTlGCUy0nEW4A1QPg==";
			dbUser = encdec.decryptString(dbUser);
			dbPass = encdec.decryptString(dbPass);

			Class.forName("com.mysql.jdbc.Driver");
			connection = DriverManager.getConnection(dburl, dbUser, dbPass);
			dbConnection = true;
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Database connectivity issue...");
			return dbConnection;
		}
		return dbConnection;
	}

	public boolean connectDatabase(SessionData sessionData) {
		boolean dbConnection = false;
		String dbUser = "";
		String dbPass = "";
		
		driver = sessionData.getConfigMap().get("DBDRIVER");

		user = sessionData.getConfigMap().get("DBUSER");

		pwd = sessionData.getConfigMap().get("DBPASSWD");

		timeZoneClass = sessionData.getConfigMap().get("TIME_ZONE");

		try {
			String url = sessionData.getConfigMap().get("DBURL_" + sessionData.getDBName());
			dbUser = sessionData.getDBUser();
			dbPass = sessionData.getDBPass();
			if (dbUser.equalsIgnoreCase(null) || dbUser.equalsIgnoreCase("")) {
				sessionData.setDBUser(encdec.decryptString(user));
				sessionData.setDBPass(encdec.decryptString(pwd));
				dbUser = sessionData.getDBUser();
				dbPass = sessionData.getDBPass();
			}

//			if(sessionData.getConnection() == null || sessionData.getConnection().isClosed()) {
			Class.forName(driver);
			connection = DriverManager.getConnection(url, dbUser, dbPass);
			dbConnection = true;
			sessionData.setConnection(connection);
//			}
//			else {
//				dbConnection = true;
//			}
		} catch (Exception e) {
			cm.logException(e);
			JOptionPane.showMessageDialog(null, "Database connectivity issue...");
			return dbConnection;
		}
		return dbConnection;
	}
	
	public Connection connectToDatabase(SessionData sessionData) {
		boolean dbConnection = false;
		String dbUser 	= "";
		String dbPass 	= "";
		driver = sessionData.getConfigMap().get("DBDRIVER");
		user = sessionData.getConfigMap().get("DBUSER");
		pwd = sessionData.getConfigMap().get("DBPASSWD");
		
		try {
			dbUser = sessionData.getDBUser();
			dbPass = sessionData.getDBPass();
			if(dbUser.equalsIgnoreCase(null) || dbUser.equalsIgnoreCase("")){
				sessionData.setDBUser(encdec.decryptString(user));
				sessionData.setDBPass(encdec.decryptString(pwd));
				dbUser = sessionData.getDBUser();
				dbPass = sessionData.getDBPass();
			}
			
			Class.forName(driver);
			connection = DriverManager.getConnection(sessionData.getDbURL(), dbUser, dbPass);
			dbConnection = true;
			sessionData.setConnection(connection);
		} catch (Exception e) {
			cm.logException(e);
			JOptionPane.showMessageDialog(null, "Database connectivity issue...");
			return connection;
		}
		return connection;
	}

	public boolean closeDatabase(SessionData sessionData) {

		boolean dbClose = false;
		try {
			if (resultSet != null) {
				resultSet.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (connection != null && !connection.isClosed()) {
				connection.close();
			}
			sessionData.setConnection(null);
			dbClose = true;
		} catch (Exception e) {
			cm.logException(e);
			JOptionPane.showMessageDialog(null, "Database Closing issue...");
			return dbClose;
		}
		return dbClose;
	}

	////// validateUser/////////////
	public boolean validateUser(SessionData sessionData, String userName, String password, String role)
			throws Exception {

		try {
			String userDB = "";
			String query = "";
			validateUserFlag = false;

			if (!userName.equalsIgnoreCase("") && !password.equalsIgnoreCase("") && !role.equalsIgnoreCase("")) {
				query = "SELECT UPPER(USERNAME) AS USERNAME, UPPER(ROLE) AS ROLE, UPPER(USER_STATUS) AS USER_STATUS, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME,UPPER(LAST_NAME) AS LAST_NAME,"
						+ "CONTACT,EMAIL,SECRET_QUEST_1,SECRET_QUEST_2,SECRET_QUEST_3,SECRET_ANS_1,SECRET_ANS_2,"
						+ "SECRET_ANS_3,USER_STATUS FROM " + sessionData.getDBName() + "." + "APP_USERS WHERE "
						+ "UPPER(USERNAME)=UPPER('" + userName.trim() + "') AND PASSWORD = BINARY '" + password.trim()
						+ "' AND ROLE='" + role.trim() + "'";
			} else if (!userName.equalsIgnoreCase("")) {
				query = "SELECT UPPER(USERNAME) AS USERNAME, UPPER(ROLE) AS ROLE, UPPER(USER_STATUS) AS USER_STATUS, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME,UPPER(LAST_NAME) AS LAST_NAME,"
						+ "CONTACT,EMAIL,SECRET_QUEST_1,SECRET_QUEST_2,SECRET_QUEST_3,SECRET_ANS_1,SECRET_ANS_2,"
						+ "SECRET_ANS_3,USER_STATUS FROM " + sessionData.getDBName() + "." + "APP_USERS WHERE "
						+ "UPPER(USERNAME)=UPPER('" + userName.trim() + "')";
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				userDB = resultSet.getString("USERNAME") == null ? " " : (resultSet.getString("USERNAME"));
				sessionData.setUserName(userDB);
				sessionData.setUserRole(resultSet.getString("ROLE") == null ? " " : (resultSet.getString("ROLE")));
				sessionData.setUserStatus(
						resultSet.getString("USER_STATUS") == null ? " " : (resultSet.getString("USER_STATUS")));
				sessionData.setFirstName(
						resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME")));
				sessionData.setLastName(
						resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME")));
				sessionData.setUserContact(
						resultSet.getString("CONTACT") == null ? " " : (resultSet.getString("CONTACT")));
				sessionData.setUserEmail(resultSet.getString("EMAIL") == null ? " " : (resultSet.getString("EMAIL")));

				sessionData.setSecretQuestion1(
						resultSet.getString("SECRET_QUEST_1") == null ? " " : (resultSet.getString("SECRET_QUEST_1")));
				sessionData.setSecretQuestion2(
						resultSet.getString("SECRET_QUEST_2") == null ? " " : (resultSet.getString("SECRET_QUEST_2")));
				sessionData.setSecretQuestion3(
						resultSet.getString("SECRET_QUEST_3") == null ? " " : (resultSet.getString("SECRET_QUEST_3")));
				sessionData.setSecretAnswer1(
						resultSet.getString("SECRET_ANS_1") == null ? " " : (resultSet.getString("SECRET_ANS_1")));
				sessionData.setSecretAnswer2(
						resultSet.getString("SECRET_ANS_2") == null ? " " : (resultSet.getString("SECRET_ANS_2")));
				sessionData.setSecretAnswer3(
						resultSet.getString("SECRET_ANS_3") == null ? " " : (resultSet.getString("SECRET_ANS_3")));
				sessionData.setUserStatus(
						resultSet.getString("USER_STATUS") == null ? " " : (resultSet.getString("USER_STATUS")));
				validateUserFlag = true;
//				logger.info("User==>" + cm.fileWriter(userDB));
			}

			/// add admin contact details///
			String adminuser = "admin";
			if (userName.equalsIgnoreCase("prp")) {
				adminuser = "prp";
			}
			query = "SELECT * FROM " + sessionData.getDBName() + "." + "APP_USERS WHERE USERNAME='" + adminuser
					+ "' AND ROLE='ADMINISTRATOR'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				sessionData.setAdminContact(resultSet.getString("CONTACT"));
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return validateUserFlag;
	}

	////// isUserNew/////////////
	public boolean isUserNew(SessionData sessionData, String userName, String password, String role) throws Exception {

		boolean validateStatusFlag = false;
		try {
			String userDB = "";
			String roleDB = "";
			String userStatusDB = "";
			String query = "";

			if (!userName.equalsIgnoreCase("") && !password.equalsIgnoreCase("") && !role.equalsIgnoreCase("")) {
				query = "SELECT UPPER(USERNAME) AS USERNAME, UPPER(ROLE) AS ROLE, UPPER(USER_STATUS) AS USER_STATUS FROM "
						+ sessionData.getDBName() + "." + "APP_USERS WHERE " + "UPPER(USERNAME)=UPPER('"
						+ userName.trim() + "') AND PASSWORD='" + password.trim() + "' AND ROLE='" + role.trim() + "'";
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				userDB = resultSet.getString("USERNAME");
				roleDB = resultSet.getString("ROLE");
				userStatusDB = resultSet.getString("USER_STATUS");
				if (userStatusDB.equalsIgnoreCase("NEW")) {
					validateStatusFlag = true;
				}
				logger.info("User==>" + cm.fileWriter(userDB));
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return validateStatusFlag;
	}

	public boolean validateGrNo(SessionData sessionData, String gr_no, String section, String tableName)
			throws Exception {

		boolean checkGrNo = false;
		try {
			String userDB = "";
			String user_gr_no = "";
			String query = "SELECT GR_NO FROM " + sessionData.getDBName() + "." + tableName + " WHERE GR_NO='"
					+ gr_no.trim() + "' AND SECTION_NM='" + section + "'";
			logger.info(query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				user_gr_no = resultSet.getString("GR_NO");
				checkGrNo = true;
			}
			logger.info("user_gr_no=" + user_gr_no);
			logger.info("checkGrNo=" + checkGrNo);
		} catch (Exception e) {
			logger.error("validateGrNo Exception :: " + e);
		}
		logger.info("checkGrNo:::" + checkGrNo);
		return checkGrNo;
	}

	public boolean admitForm(SessionData sessionData, String gr_no, String last_name, String first_name,
			String father_name, String mother_name, String gender, String email, String permanent_add, String res_add,
			String contact1, String contact2, String dob, String dob_words, String birth_place, String nationality,
			String religion, String category, String cast, String mother_tongue, String last_school,
			String admitted_std, String admitted_div, String present_std, String present_div, String date_admitted,
			String paying_free, String created_by, String section, String adhaarCard, String otherReligion, String suid,
			String taluka, String district, String state, String country, String subcast, String academicYear,
			String hobbies, String lastSchoolUdise, String pen) throws SQLException {

		try {
			String uniqueStr = first_name + cm.timeInMillis();
			long c1 = 0;
			long c2 = 0;
			try {
				if (!contact1.equalsIgnoreCase(""))
					c1 = Long.parseLong(contact1);
				if (!contact2.equalsIgnoreCase(""))
					c2 = Long.parseLong(contact2);
			} catch (Exception e) {
				logger.error("Exception 123 ==>" + e);
			}

			int roll = getDistinctCount(sessionData, "CLASS_ALLOTMENT", "ROLL_NO", present_std, present_div,
					academicYear);
			roll = roll + 1;

//			String academicYear = cm.getAcademicYear(sessionData,date_admitted.trim());
			String insertAdmit = "INSERT INTO HS_GENERAL_REGISTER " + "(LAST_NAME,FIRST_NAME,FATHER_NAME,MOTHER_NAME,"
					+ "GENDER,EMAIL,PERMANENT_ADDRESS,RESIDENTIAL_ADDRESS,CONTACT_1,"
					+ "CONTACT_2,DOB,DOB_WORDS,BIRTH_PLACE,NATIONALITY,"
					+ "RELIGION,CATEGORY,CAST,MOTHER_TONGUE,LAST_SCHOOL,"
					+ "ADMITTED_STD,ADMITTED_DIV,PRESENT_STD,PRESENT_DIV,ACADEMIC_YEAR,DATE_ADMITTED,PAYING_FREE,"
					+ "CREATED_DATE,CREATED_BY,SECTION_NM,UNIQUE_ID,GR_NO,ADHAAR_CARD,SUB_RELIGION,SUID,TALUKA,DISTRICT,"
					+ "STATE,COUNTRY,SUB_CASTE,EXTRA_1,LAST_SCH_UDISE,PEN) " + "VALUES ('" + last_name.trim().toUpperCase()
					+ "','" + first_name.trim().toUpperCase() + "'," + "'" + father_name.trim().toUpperCase() + "','"
					+ mother_name.trim().toUpperCase() + "'," + "'" + gender.trim().toUpperCase() + "','"
					+ email.trim().toUpperCase() + "','" + permanent_add.trim() + "','" + res_add.trim() + "','" + c1
					+ "'," + "'" + c2 + "',STR_TO_DATE('" + dob.trim().toUpperCase() + "', '%d/%m/%Y'),'"
					+ dob_words.trim().toUpperCase() + "','" + birth_place.trim().toUpperCase() + "','"
					+ nationality.trim().toUpperCase() + "'," + "'" + religion.trim().toUpperCase() + "','"
					+ category.trim().toUpperCase() + "','" + cast.trim().toUpperCase() + "','"
					+ mother_tongue.trim().toUpperCase() + "','" + last_school.trim() + "'," + "'"
					+ admitted_std.trim().toUpperCase() + "','" + admitted_div.trim().toUpperCase() + "','"
					+ present_std.trim().toUpperCase() + "','" + present_div.trim().toUpperCase() + "','"
					+ academicYear.trim().toUpperCase() + "',STR_TO_DATE('" + date_admitted.trim().toUpperCase()
					+ "', '%d/%m/%Y'),'" + paying_free.trim().toUpperCase() + "'," + "SYSDATE(),'"
					+ created_by.trim().toUpperCase() + "','" + section.trim().toUpperCase() + "','"
					+ uniqueStr.trim().toUpperCase() + "','" + gr_no + "','" + adhaarCard + "','"
					+ otherReligion.trim().toUpperCase() + "'," + "'" + suid + "','" + taluka + "','" + district + "','"
					+ state + "','" + country + "','" + subcast + "','" + hobbies + "','" + lastSchoolUdise + "','" + pen + "')";

			logger.info("insertAdmit===>" + insertAdmit);
			statement = connection.createStatement();
			statement.executeUpdate(insertAdmit);
			logger.info("Admission data inserted successfully...");

			String grNoQuery = "SELECT GR_NO FROM " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER WHERE UNIQUE_ID='" + uniqueStr.trim() + "'";
			logger.info(grNoQuery);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(grNoQuery);

			while (resultSet.next()) {
				gr_no = resultSet.getString("GR_NO");
			}
			logger.info("GR No. for " + first_name + " is " + gr_no);

			try {
				String insertClassAllot = "INSERT INTO " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
						+ "(GR_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,ROLL_NO,"
						+ "PRESENT_STD,PRESENT_DIV,PREVIOUS_DIV,DATE_ADMITTED,ACADEMIC_YEAR,REMARK_0,"
						+ "CREATED_DATE,CREATED_BY,SECTION_NM,SUID) " + "VALUES ('" + gr_no.trim().toUpperCase() + "','"
						+ last_name.trim().toUpperCase() + "','" + first_name.trim().toUpperCase() + "'," + "'"
						+ father_name.trim().toUpperCase() + "'," + roll + "," + "'" + present_std.trim().toUpperCase()
						+ "','" + present_div.trim().toUpperCase() + "','" + admitted_div.trim().toUpperCase() + "',"
						+ "STR_TO_DATE('" + date_admitted.trim().toUpperCase() + "', '%d/%m/%Y'),'"
						+ academicYear.trim().toUpperCase() + "','NEW'," + "SYSDATE(),'"
						+ created_by.trim().toUpperCase() + "','" + section.trim().toUpperCase() + "','" + suid + "')";

				logger.info("insertClassAllot===>" + insertClassAllot);
				statement = connection.createStatement();
				statement.executeUpdate(insertClassAllot);
				logger.info("Class Allotment data inserted successfully...");
			} catch (Exception e) {
				logger.warn("Exception :: Class Allotment data not inserted :: " + e);

				String delete_Gr_HS_GENERAL_REGISTER = "DELETE FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
						+ section.toUpperCase().trim() + "'";
				logger.warn("delete_Gr_HS_GENERAL_REGISTER query===>" + delete_Gr_HS_GENERAL_REGISTER);
				statement = connection.createStatement();
				statement.executeUpdate(delete_Gr_HS_GENERAL_REGISTER);

				admitFormFlag = false;
				return admitFormFlag;

			}

			try {
				String insertOptionalAllot = "INSERT INTO OPTIONAL_ALLOTMENT "
						+ "(GR_NO,PRESENT_STD,PRESENT_DIV,ACADEMIC_YEAR,"
						+ "CREATED_BY,SECTION_NM,ROLL_NO,CREATED_DATE,SUID) " + "VALUES ('" + gr_no.trim().toUpperCase()
						+ "','" + present_std.trim().toUpperCase() + "','" + present_div.trim().toUpperCase() + "','"
						+ academicYear.trim().toUpperCase() + "','" + created_by.trim().toUpperCase() + "','"
						+ section.trim().toUpperCase() + "'," + roll + ",SYSDATE(),'" + suid + "')";

				logger.info("insertOptionalAllot===>" + insertOptionalAllot);
				statement = connection.createStatement();
				statement.executeUpdate(insertOptionalAllot);
				logger.info("Optional Allotment data inserted successfully...");

				admitFormFlag = true;
				logger.info("admitflag 1 ::" + admitFormFlag);
			} catch (Exception e) {
				logger.warn("Exception :: Optional Allotment data not inserted :: " + e);

				String delete_Gr_HS_GENERAL_REGISTER = "DELETE FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
						+ section.toUpperCase().trim() + "'";
				logger.warn("delete_Gr_HS_GENERAL_REGISTER query===>" + delete_Gr_HS_GENERAL_REGISTER);
				statement = connection.createStatement();
				statement.executeUpdate(delete_Gr_HS_GENERAL_REGISTER);

				String delete_Gr_CLASS_ALLOTMENT = "DELETE FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
						+ section.toUpperCase().trim() + "'";
				logger.warn("delete_Gr_CLASS_ALLOTMENT query===>" + delete_Gr_CLASS_ALLOTMENT);
				statement = connection.createStatement();
				statement.executeUpdate(delete_Gr_CLASS_ALLOTMENT);

				admitFormFlag = false;
				return admitFormFlag;

			}

			try {
				String insertMarksEntry = "INSERT INTO MARKS_ENTRY "
						+ "(GR_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,ACADEMIC_YEAR,"
						+ "CREATED_BY,SECTION_NM,ROLL_NO,CREATED_DATE,CHANGED,SUID) " + "VALUES ('"
						+ gr_no.trim().toUpperCase() + "','" + last_name.trim().toUpperCase() + "','"
						+ first_name.trim().toUpperCase() + "'," + "'" + father_name.trim().toUpperCase() + "','"
						+ present_std.trim().toUpperCase() + "','" + present_div.trim().toUpperCase() + "','"
						+ academicYear.trim().toUpperCase() + "','" + created_by.trim().toUpperCase() + "','"
						+ section.trim().toUpperCase() + "'," + roll + ",SYSDATE(),1,'" + suid + "')";

				logger.info("insertMarksEntry===>" + insertMarksEntry);
				statement = connection.createStatement();
				statement.executeUpdate(insertMarksEntry);
				logger.info("Optional Allotment data inserted successfully...");

				admitFormFlag = true;
				JOptionPane.showMessageDialog(null, "GR No. for " + first_name + " is " + gr_no);
				logger.info("admitflag 1 ::" + admitFormFlag);
			} catch (Exception e) {
				logger.info("Exception :: Optional Allotment data not inserted :: " + e);

				String delete_Gr_HS_GENERAL_REGISTER = "DELETE FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
						+ section.toUpperCase().trim() + "'";
				logger.warn("delete_Gr_HS_GENERAL_REGISTER query===>" + delete_Gr_HS_GENERAL_REGISTER);
				statement = connection.createStatement();
				statement.executeUpdate(delete_Gr_HS_GENERAL_REGISTER);

				String delete_Gr_CLASS_ALLOTMENT = "DELETE FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
						+ section.toUpperCase().trim() + "'";
				logger.warn("delete_Gr_CLASS_ALLOTMENT query===>" + delete_Gr_CLASS_ALLOTMENT);
				statement = connection.createStatement();
				statement.executeUpdate(delete_Gr_CLASS_ALLOTMENT);

				String delete_Gr_OPTIONAL_ALLOTMENT = "DELETE FROM " + sessionData.getDBName() + "."
						+ "OPTIONAL_ALLOTMENT WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
						+ section.toUpperCase().trim() + "'";
				logger.warn("delete_Gr_OPTIONAL_ALLOTMENT query===>" + delete_Gr_OPTIONAL_ALLOTMENT);
				statement = connection.createStatement();
				statement.executeUpdate(delete_Gr_OPTIONAL_ALLOTMENT);

				admitFormFlag = false;
				return admitFormFlag;
			}

			try {
				String updateNewFeesMandatory = "INSERT INTO fees_data_mandatory (GR_NO,STD_1,DIV_1,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,"
						+ "SECTION_NM,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME) " + "VALUES ('" + gr_no + "','"
						+ present_std + "','" + present_div + "','" + academicYear + "',SYSDATE(), " + "'"
						+ sessionData.getUserName() + "','" + section.trim().toUpperCase() + "'," + roll + "," + "'"
						+ last_name.trim().toUpperCase() + "','" + first_name.trim().toUpperCase() + "'," + "" + "'"
						+ father_name.trim().toUpperCase() + "')";

				statement = connection.createStatement();
				statement.executeUpdate(updateNewFeesMandatory);

				String updateNewFeesOptional = "INSERT INTO fees_data_optional (GR_NO,STD_1,DIV_1,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,"
						+ "SECTION_NM) " + "VALUES ('" + gr_no + "','" + present_std + "','" + present_div + "','"
						+ academicYear + "',SYSDATE()," + "'" + sessionData.getUserName() + "','"
						+ section.trim().toUpperCase() + "')";

				statement.executeUpdate(updateNewFeesOptional);
			} catch (Exception e) {

			}
		} catch (Exception e) {
			cm.logException(e);
			admitFormFlag = false;

		}
		logger.info("admitflag 2 ::" + admitFormFlag);
		return admitFormFlag;
	}

	public boolean deleteForm(SessionData sessionData, String gr_no, String section)
			throws SQLException {

		try {

			String delete_Gr_HS_GENERAL_REGISTER = "DELETE FROM " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
					+ section.toUpperCase().trim() + "'";
			logger.info("delete_Gr_HS_GENERAL_REGISTER query===>" + delete_Gr_HS_GENERAL_REGISTER);
			statement = connection.createStatement();
			statement.executeUpdate(delete_Gr_HS_GENERAL_REGISTER);

			String delete_Gr_CLASS_ALLOTMENT = "DELETE FROM " + sessionData.getDBName() + "."
					+ "CLASS_ALLOTMENT WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='" + section.toUpperCase().trim()
					+ "'";
			logger.info("delete_Gr_CLASS_ALLOTMENT query===>" + delete_Gr_CLASS_ALLOTMENT);
			statement = connection.createStatement();
			statement.executeUpdate(delete_Gr_CLASS_ALLOTMENT);

			String delete_Gr_OPTIONAL_ALLOTMENT = "DELETE FROM " + sessionData.getDBName() + "."
					+ "OPTIONAL_ALLOTMENT WHERE GR_NO='" + gr_no + "' " + "AND SECTION_NM='"
					+ section.toUpperCase().trim() + "'";
			logger.info("delete_Gr_OPTIONAL_ALLOTMENT query===>" + delete_Gr_OPTIONAL_ALLOTMENT);
			statement = connection.createStatement();
			statement.executeUpdate(delete_Gr_OPTIONAL_ALLOTMENT);

			String delete_Gr_MARKS_ENTRY = "DELETE FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE GR_NO='"
					+ gr_no + "' " + "AND SECTION_NM='" + section.toUpperCase().trim() + "'";
			logger.info("delete_Gr_MARKS_ENTRY query===>" + delete_Gr_MARKS_ENTRY);
			statement = connection.createStatement();
			statement.executeUpdate(delete_Gr_MARKS_ENTRY);

			String delete_Gr_result_data = "DELETE FROM " + sessionData.getDBName() + "." + "RESULT_DATA WHERE GR_NO='"
					+ gr_no + "' " + "AND SECTION_NM='" + section.toUpperCase().trim() + "'";
			logger.info("delete_Gr_result_data query===>" + delete_Gr_result_data);
			statement = connection.createStatement();
			statement.executeUpdate(delete_Gr_result_data);
			admitFormFlag = true;

			logger.info("Data deleted for :: " + gr_no + "by " + sessionData.getUserName());
		} catch (Exception e) {
			logger.error("Exception==" + e);
			logger.error("Data not deleted for :: " + gr_no);
			admitFormFlag = false;

		} finally {
			connection.close();
			logger.info("Close connections...");
		}
		logger.info("admitflag 2 ::" + admitFormFlag);
		return admitFormFlag;
	}

	public boolean editForm(SessionData session1, String gr_no, String last_name, String first_name, String father_name,
			String mother_name, String gender, String email, String permanent_add, String res_add, String contact1,
			String contact2, String dob, String dob_words, String birth_place, String nationality, String religion,
			String category, String cast, String mother_tongue, String last_school, String admitted_std,
			String admitted_div, String present_std, String present_div, String date_admitted, String paying_free,
			String modified_by, String section, String adhaarCard, String otherReligion, String academicYearDB,
			String suid, String taluka, String district, String state, String country, String subcast, String hobbies,
			String admittedStdBranch, String oldAcademicYear, String lastSchoolUdise, String pen) throws SQLException {

		try {
			logger.info("Edit Form");
			long c1 = 0;
			long c2 = 0;
//			String admittedYear = cm.getAcademicYear(sessionData,date_admitted);
			String dateToday = cm.getCurrentDate();
//			String currentAcademicYear = cm.getAcademicYear(sessionData,dateToday);

			try {
				logger.info("contact1----" + contact1);
				if (!contact1.equalsIgnoreCase(""))
					c1 = Long.parseLong(contact1);
				logger.info("c1----" + c1);

				if (!contact2.equalsIgnoreCase(""))
					c2 = Long.parseLong(contact2);
				logger.info("c2----" + c2);
			} catch (Exception e) {
				logger.error("Exception 123 ==>" + e);
			}
			String updateAdmit = "UPDATE " + session1.getDBName() + ".HS_GENERAL_REGISTER SET " + "GR_NO = '"
					+ gr_no.trim().toUpperCase() + "',LAST_NAME = '" + last_name.trim().toUpperCase()
					+ "',FIRST_NAME = '" + first_name.trim().toUpperCase() + "'," + "FATHER_NAME = '"
					+ father_name.trim().toUpperCase() + "',MOTHER_NAME = '" + mother_name.trim().toUpperCase() + "',"
					+ "GENDER = '" + gender.trim().toUpperCase() + "',EMAIL = '" + email.trim().toUpperCase()
					+ "',PERMANENT_ADDRESS = '" + permanent_add.trim().toUpperCase() + "'," + "RESIDENTIAL_ADDRESS = '"
					+ res_add.trim().toUpperCase() + "',CONTACT_1 = '" + c1 + "'," + "CONTACT_2 = '" + c2
					+ "',DOB = STR_TO_DATE('" + dob.trim().toUpperCase() + "', '%d/%m/%Y'),DOB_WORDS = '"
					+ dob_words.trim().toUpperCase() + "'," + "BIRTH_PLACE = '" + birth_place.trim().toUpperCase()
					+ "',NATIONALITY = '" + nationality.trim().toUpperCase() + "'," + "RELIGION = '"
					+ religion.trim().toUpperCase() + "',SUB_RELIGION = '" + otherReligion.trim().toUpperCase() + "',"
					+ "CATEGORY = '" + category.trim().toUpperCase() + "',CAST = '" + cast.trim().toUpperCase() + "',"
					+ "MOTHER_TONGUE = '" + mother_tongue.trim().toUpperCase() + "', LAST_SCHOOL = '"
					+ last_school.trim() + "'," + "ADMITTED_STD = '" + admitted_std.trim()
					+ "',ADMITTED_DIV = '" + admitted_div.trim().toUpperCase() + "'," + "PRESENT_STD = '"
					+ present_std.trim() + "',PRESENT_DIV = '" + present_div.trim().toUpperCase() + "',"
					+ "DATE_ADMITTED = STR_TO_DATE('" + date_admitted.trim().toUpperCase() + "', '%d/%m/%Y'),"
					+ "PAYING_FREE = '" + paying_free.trim().toUpperCase() + "',"
					+ "MODIFIED_DATE = SYSDATE(),MODIFIED_BY = '" + session1.getUserName().trim().toUpperCase() + "'"
					+ ",ADHAAR_CARD = '" + adhaarCard + "',SUID = '" + suid + "',TALUKA = '" + taluka + "',DISTRICT = '"
					+ district + "',STATE = '" + state + "'" + ",COUNTRY = '" + country + "',SUB_CASTE = '" + subcast
					+ "',EXTRA_1 = '" + hobbies + "'" + ", ADMITTEDSTDBRANCH = '" + admittedStdBranch
					+ "', ACADEMIC_YEAR='" + academicYearDB + "', LAST_SCH_UDISE='" + lastSchoolUdise + "', PEN='" + pen + "'"
					+ " WHERE GR_NO='" + gr_no.trim() + "' AND SECTION_NM='" + section.trim().toUpperCase()
					+ "' and ACADEMIC_YEAR='" + oldAcademicYear + "'";

			logger.info("updateAdmit===>" + updateAdmit);
			connectDatabase(session1);

			statement = connection.createStatement();
			logger.info(statement.executeUpdate(updateAdmit));

			String updateClassAllot = "UPDATE " + session1.getDBName() + ".CLASS_ALLOTMENT SET " + "LAST_NAME='"
					+ last_name.trim().toUpperCase() + "',FIRST_NAME='" + first_name.trim().toUpperCase()
					+ "',FATHER_NAME='" + father_name.trim().toUpperCase() + "'," + "PRESENT_STD='"
					+ present_std.trim().toUpperCase() + "',PRESENT_DIV='" + present_div.trim().toUpperCase() + "',"
					+ "PREVIOUS_DIV='" + admitted_div.trim().toUpperCase() + "',DATE_ADMITTED=STR_TO_DATE('"
					+ date_admitted.trim().toUpperCase() + "', '%d/%m/%Y')," + "MODIFIED_DATE=SYSDATE(),MODIFIED_BY='"
					+ session1.getUserName().trim().toUpperCase() + "',SUID = '" + suid + "', ACADEMIC_YEAR='"
					+ academicYearDB + "' WHERE GR_NO='" + gr_no.trim() + "' AND SECTION_NM='"
					+ section.trim().toUpperCase() + "' AND ACADEMIC_YEAR='" + oldAcademicYear.trim().toUpperCase()
					+ "'";
			logger.info(statement.executeUpdate(updateClassAllot));

			String updateOptionalAllot = "UPDATE " + session1.getDBName() + ".OPTIONAL_ALLOTMENT SET " + "PRESENT_STD='"
					+ present_std.trim().toUpperCase() + "',PRESENT_DIV='" + present_div.trim().toUpperCase() + "',"
					+ "MODIFIED_BY='" + session1.getUserName().trim().toUpperCase() + "'"
					+ ",MODIFIED_DATE=SYSDATE(),SUID = '" + suid + "', ACADEMIC_YEAR='" + academicYearDB
					+ "' WHERE GR_NO='" + gr_no.trim() + "' AND SECTION_NM='" + section.trim().toUpperCase()
					+ "' AND ACADEMIC_YEAR='" + oldAcademicYear.trim().toUpperCase() + "'";
			logger.info(statement.executeUpdate(updateOptionalAllot));

			String updateMarksEntry = "UPDATE " + session1.getDBName() + ".MARKS_ENTRY SET " + "LAST_NAME='"
					+ last_name.trim().toUpperCase() + "',FIRST_NAME='" + first_name.trim().toUpperCase()
					+ "',FATHER_NAME='" + father_name.trim().toUpperCase() + "'" + ",STD_1='"
					+ present_std.trim().toUpperCase() + "',DIV_1='" + present_div.trim().toUpperCase()
					+ "', MODIFIED_BY='" + session1.getUserName().trim().toUpperCase() + "',MODIFIED_DATE=SYSDATE()"
					+ ",SUID = '" + suid + "', ACADEMIC_YEAR='" + academicYearDB + "' WHERE GR_NO='" + gr_no.trim()
					+ "' AND SECTION_NM='" + section.trim().toUpperCase() + "' AND ACADEMIC_YEAR='"
					+ oldAcademicYear.trim().toUpperCase() + "'";
			logger.info(statement.executeUpdate(updateMarksEntry));

			String updateResultData = "UPDATE " + session1.getDBName() + ".RESULT_DATA SET " + "LAST_NAME='"
					+ last_name.trim().toUpperCase() + "',FIRST_NAME='" + first_name.trim().toUpperCase()
					+ "',FATHER_NAME='" + father_name.trim().toUpperCase() + "'" + ",STD_1='"
					+ present_std.trim().toUpperCase() + "',DIV_1='" + present_div.trim().toUpperCase()
					+ "', MODIFIED_BY='" + session1.getUserName().trim().toUpperCase() + "'"
					+ ",MODIFIED_DATE=SYSDATE(),SUID = '" + suid + "', ACADEMIC_YEAR='" + academicYearDB
					+ "' WHERE GR_NO='" + gr_no.trim() + "' AND SECTION_NM='" + section.trim().toUpperCase()
					+ "' AND ACADEMIC_YEAR='" + oldAcademicYear.trim().toUpperCase() + "'";
			logger.info(statement.executeUpdate(updateResultData));

			/// add column
			try {
				String insertCoulmn = "ALTER TABLE " + session1.getDBName()
						+ ".STUDENT_SUBJECT ADD (SECTION_NM  VARCHAR(20))";
				logger.info(statement.executeUpdate(insertCoulmn));
			} catch (Exception e) {
				logger.error("failed to modify varchar size Column query in Result_Data table >>> " + e);
			}

			String updateStudentSubject = "UPDATE " + session1.getDBName() + ".STUDENT_SUBJECT SET " + "LAST_NAME='"
					+ last_name.trim().toUpperCase() + "',FIRST_NAME='" + first_name.trim().toUpperCase()
					+ "',FATHER_NAME='" + father_name.trim().toUpperCase() + "'" + ",STD_1='"
					+ present_std.trim().toUpperCase() + "',DIV_1='" + present_div.trim().toUpperCase()
					+ "', MODIFIED_BY='" + session1.getUserName().trim().toUpperCase() + "'"
					+ ",MODIFIED_DATE=SYSDATE(),SUID = '" + suid + "', ACADEMIC_YEAR='" + academicYearDB
					+ "' WHERE GR_NO='" + gr_no.trim() + "' AND SECTION_NM='" + section.trim().toUpperCase()
					+ "' AND ACADEMIC_YEAR='" + oldAcademicYear.trim().toUpperCase() + "'";
			logger.info(statement.executeUpdate(updateStudentSubject));

			try {
				String updatefees_data_mandatory = "UPDATE " + session1.getDBName() + ".fees_data_mandatory SET STD_1='"
						+ present_std.trim().toUpperCase() + "',DIV_1='" + present_div.trim().toUpperCase() + "', "
						+ "LAST_NAME='" + last_name.trim().toUpperCase() + "',FIRST_NAME='"
						+ first_name.trim().toUpperCase() + "'," + "FATHER_NAME='" + father_name.trim().toUpperCase()
						+ "',MODIFIED_BY='" + session1.getUserName().trim().toUpperCase() + "'"
						+ ",MODIFIED_DATE=SYSDATE(), ACADEMIC_YEAR='" + academicYearDB + "' WHERE GR_NO='"
						+ gr_no.trim() + "' AND SECTION_NM='" + section.trim().toUpperCase() + "' AND ACADEMIC_YEAR='"
						+ oldAcademicYear.trim().toUpperCase() + "'";
				logger.info(statement.executeUpdate(updatefees_data_mandatory));
			} catch (Exception e) {
			}

			logger.info("Update data inserted successfully...");
			JOptionPane.showMessageDialog(null, "Data updated Sucessfully");
			admitFormFlag = true;
			logger.info("admitflag 1 ::" + admitFormFlag);
		} catch (Exception e) {
			logger.error("Exception ==" + e);
			JOptionPane.showMessageDialog(null, "Exception ==" + e);
			admitFormFlag = false;
			return admitFormFlag;

		} finally {
			connection.close();
			logger.info("Close connections...");
		}
		logger.info("admitflag 2 ::" + admitFormFlag);
		return admitFormFlag;
	}

	//////////// insert new students to fees table///////////////
	public void insertNewFeeStudents(SessionData sessionData, String std, String div, String academic) {
		String grNew, stdNew, divNew, rollNew, firstNew, lastNew, fatherNew = null;
		String section = sessionData.getSectionName();
		String updateNewFeesMandatory = "";
		String updateNewFeesOptional = "";
		String valuesStr = "", valuesStr2 = "", grNoDB = "", grStr = "", condition = "";
		int i = 0;

		try {

			String newStudentInFeesTable = "SELECT GR_NO FROM " + sessionData.getDBName() + "."
					+ "fees_data_mandatory WHERE " + "ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='"
					+ sessionData.getSectionName() + "'";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentInFeesTable);

			while (resultSet.next()) {
				grNoDB = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				grStr = grStr + ",'" + grNoDB + "'";
			}

			if (!grStr.equalsIgnoreCase("")) {
				grStr = grStr.substring(1);
				condition = "GR_NO NOT IN (" + grStr + ") AND";
			}

			newStudentInFeesTable = "SELECT GR_NO,PRESENT_STD,PRESENT_DIV,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME "
					+ "FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT " + "WHERE " + condition
					+ " ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='" + sessionData.getSectionName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentInFeesTable);

			while (resultSet.next()) {
				grNew = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				stdNew = resultSet.getString("PRESENT_STD") == null ? " " : (resultSet.getString("PRESENT_STD").trim());
				divNew = resultSet.getString("PRESENT_DIV") == null ? " " : (resultSet.getString("PRESENT_DIV").trim());
				rollNew = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				lastNew = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				firstNew = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim());
				fatherNew = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());

				valuesStr += "('" + grNew + "','" + stdNew + "','" + divNew + "','" + academic + "',SYSDATE(),'"
						+ sessionData.getUserName() + "','" + section.trim().toUpperCase() + "','" + rollNew + "','"
						+ lastNew + "','" + firstNew + "','" + fatherNew + "'),";

				valuesStr2 += "('" + grNew + "','" + stdNew + "','" + divNew + "','" + academic + "',SYSDATE(),'"
						+ sessionData.getUserName() + "','" + section.trim().toUpperCase() + "'),";
				i++;
			}
			if (!valuesStr.equalsIgnoreCase("")) {
				valuesStr = valuesStr.substring(0, valuesStr.length() - 1);
				valuesStr2 = valuesStr2.substring(0, valuesStr2.length() - 1);
				updateNewFeesMandatory = "INSERT INTO fees_data_mandatory (GR_NO,STD_1,DIV_1,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,"
						+ "SECTION_NM,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME) " + "VALUES" + valuesStr;

				statement = connection.createStatement();
				statement.executeUpdate(updateNewFeesMandatory);

				updateNewFeesOptional = "INSERT INTO fees_data_optional (GR_NO,STD_1,DIV_1,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,"
						+ "SECTION_NM) " + "VALUES" + valuesStr2;

				statement.executeUpdate(updateNewFeesOptional);
			}
			if (i > 0) {
				JOptionPane.showMessageDialog(null, "Insert Fee record completed");
			} else {
				JOptionPane.showMessageDialog(null, "No new Fee record found");
			}
		} catch (Exception e) {
			cm.logException(e);
		}
	}

	//////////// insert new students to fees allotment table///////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> insertNewFeeAllotStudents(SessionData sessionData,
			String std, String div, String academic, String category, String gender) {
		String grNew = "", grNo = "", optional = "", first = "", last = "", father = "", roll = "";
		String section = sessionData.getSectionName();
		String updateNewFeesAllot = "";
		String valuesStr = "", condition = "", addCondition = "";
		String genderCatCondition = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> studentMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();

		try {
			logger.info("=========insertNewFeeAllotStudents============");
			String newStudentInFeesAllot = "SELECT GR_NO FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
					+ "WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
					+ "optional_fee_allotment " + "WHERE ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='"
					+ sessionData.getSectionName() + "') AND ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='"
					+ sessionData.getSectionName() + "'";
			logger.info("newStudentInFeesAllot == " + newStudentInFeesAllot);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentInFeesAllot);

			while (resultSet.next()) {
				grNew = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				valuesStr += "('" + grNew + "','" + academic + "',SYSDATE(),'" + sessionData.getUserName() + "','"
						+ section.trim().toUpperCase() + "'),";
			}
			if (!valuesStr.equalsIgnoreCase("")) {
				valuesStr = valuesStr.substring(0, valuesStr.length() - 1);
				updateNewFeesAllot = "INSERT INTO optional_fee_allotment (GR_NO,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,SECTION_NM) "
						+ "VALUES" + valuesStr;

				logger.info("updateNewFeesAllot query===>" + updateNewFeesAllot);
				statement = connection.createStatement();
				statement.executeUpdate(updateNewFeesAllot);
			}
		} catch (Exception e) {
			cm.logException(e);
		}

		if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
			condition = " AND CLASS_ALLOTMENT.PRESENT_STD='" + std + "' AND CLASS_ALLOTMENT.PRESENT_DIV='" + div + "' ";
		}
		if (!gender.equalsIgnoreCase("")) {
			addCondition = " AND hs_general_register.GENDER='" + gender + "'";
		}
		if (!category.equalsIgnoreCase("")) {
			addCondition = addCondition + " AND hs_general_register.CATEGORY='" + category + "'";
		}

		if (!addCondition.equalsIgnoreCase("")) {
			genderCatCondition = " AND CLASS_ALLOTMENT.GR_NO IN (SELECT hs_general_register.GR_NO FROM "
					+ sessionData.getDBName() + "." + "hs_general_register "
					+ "WHERE hs_general_register.ACADEMIC_YEAR='" + academic + "' AND hs_general_register.SECTION_NM='"
					+ sessionData.getSectionName() + "' AND " + "hs_general_register.PRESENT_STD='" + std
					+ "' AND hs_general_register.PRESENT_DIV='" + div + "' " + addCondition + ")";
		}
		try {
			String studentInFeesAllot = "SELECT OPTIONAL_FEE_ALLOTMENT.GR_NO,OPTIONAL_FEE,FIRST_NAME,LAST_NAME,FATHER_NAME,ROLL_NO "
					+ "FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN " + sessionData.getDBName()
					+ "." + "OPTIONAL_FEE_ALLOTMENT "
					+ "ON CLASS_ALLOTMENT.GR_NO=OPTIONAL_FEE_ALLOTMENT.GR_NO AND CLASS_ALLOTMENT.SECTION_NM=OPTIONAL_FEE_ALLOTMENT.SECTION_NM "
					+ "AND CLASS_ALLOTMENT.ACADEMIC_YEAR=OPTIONAL_FEE_ALLOTMENT.ACADEMIC_YEAR "
					+ "WHERE OPTIONAL_FEE_ALLOTMENT.ACADEMIC_YEAR='" + academic
					+ "' AND OPTIONAL_FEE_ALLOTMENT.SECTION_NM='" + sessionData.getSectionName() + "'" + condition
					+ genderCatCondition + " ORDER BY ROLL_NO * 1";

			logger.info("studentInFeesAllot == " + studentInFeesAllot);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(studentInFeesAllot);

			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetail = new LinkedHashMap<String, String>();
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				optional = resultSet.getString("OPTIONAL_FEE") == null ? ""
						: (resultSet.getString("OPTIONAL_FEE").trim());
				first = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME").trim());
				last = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				father = resultSet.getString("FATHER_NAME") == null ? "" : (resultSet.getString("FATHER_NAME").trim());
				roll = resultSet.getString("ROLL_NO") == null ? "" : (resultSet.getString("ROLL_NO").trim());
				studentDetail.put("optional_fee", optional);
				studentDetail.put("first_name", first);
				studentDetail.put("last_name", last);
				studentDetail.put("father_name", father);
				studentDetail.put("name", last + " " + first + " " + father);
				studentDetail.put("roll", roll);
				studentMap.put(grNo, studentDetail);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentMap;
	}

	//////////// update fees allotment table///////////////
	public boolean updateFeeAllotStudents(SessionData sessionData, String std, String div, String academic,
			LinkedHashMap<String, LinkedHashMap<String, String>> studentMap) {

		try {
			String round = "";
			String updateQuery = "UPDATE " + sessionData.getDBName() + "."
					+ "optional_fee_allotment SET OPTIONAL_FEE =";
			Set setsc = studentMap.entrySet();
			Iterator isc = setsc.iterator();
			int i = 0;
			while (isc.hasNext()) {
				Map.Entry me = (Map.Entry) isc.next();

				String grNo = me.getKey().toString();
				String optFee = ((LinkedHashMap<?, ?>) studentMap.get(me.getKey())).get("optional_fee").toString();
				updateQuery = updateQuery + "IF (GR_NO='" + grNo + "' AND ACADEMIC_YEAR='" + academic + "' , '" + optFee
						+ "',";
				round = round + ")";
			}

			updateQuery = updateQuery + "" + "OPTIONAL_FEE" + round;
			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);

			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> findStudent(SessionData sessionData, String gr,
			String std, String div, String last, String first, String middle, String section, String academic,
			String oldAcademic, String oldStd) throws Exception {

		String grDB = "", contactNo1 = "", contactNo2 = "";
		String stdDB, divDB, originalLc = "", promoteStd = "", nextAcademic = "";
		String rollNo = "";
		String nameDB = "";
		String findQuery = "";
		boolean findFlag = false;
		String addToWhere = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> studentMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		logger.info("=========findStudent Query============");
		try {
			if (!oldAcademic.equalsIgnoreCase("")) {
				nextAcademic = academic;
				academic = oldAcademic;
				promoteStd = std;
				std = oldStd;
				addToWhere = addToWhere + " AND CLASS_ALLOTMENT.GR_NO NOT IN (SELECT CLASS_ALLOTMENT.GR_NO FROM "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT " + "WHERE CLASS_ALLOTMENT.PRESENT_STD='"
						+ promoteStd + "' AND CLASS_ALLOTMENT.PRESENT_DIV='" + div + "' AND "
						+ "CLASS_ALLOTMENT.ACADEMIC_YEAR='" + nextAcademic + "' AND CLASS_ALLOTMENT.SECTION_NM='"
						+ section + "') AND " + "ORIGINAL_LC IS NULL";
				if (!academic.equalsIgnoreCase("")) {
					addToWhere = addToWhere + " AND CLASS_ALLOTMENT.ACADEMIC_YEAR='" + academic + "' ";
				}
			} else if (!academic.equalsIgnoreCase("")) {
				addToWhere = " AND CLASS_ALLOTMENT.ACADEMIC_YEAR='" + academic + "' ";
			}

			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME ,"
						+ " UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,HS_GENERAL_REGISTER.PRESENT_STD,HS_GENERAL_REGISTER.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE HS_GENERAL_REGISTER.GR_NO='" + gr.trim() + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
						+ section + "' " + addToWhere + " ORDER BY ROLL_NO * 1";
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ "UPPER (HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY CLASS_ALLOTMENT.CREATED_DATE,ROLL_NO * 1";
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER(HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ " UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere + " "
						+ "ORDER BY CLASS_ALLOTMENT.CREATED_DATE,ROLL_NO * 1";
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,"
						+ "CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY CLASS_ALLOTMENT.CREATED_DATE,ROLL_NO * 1";
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER ('%" + last.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY CLASS_ALLOTMENT.CREATED_DATE,ROLL_NO * 1";
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY CLASS_ALLOTMENT.CREATED_DATE,ROLL_NO * 1";
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")
					&& !div.trim().equalsIgnoreCase("Select")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_STD = '" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
						+ div.trim() + "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY ROLL_NO * 1";
			} else if (!std.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_STD = '" + std.trim()
						+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY ROLL_NO * 1";
			} else if (!div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_DIV = '" + div.trim()
						+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY ROLL_NO * 1";
			}

			logger.info(findQuery);
			connectDatabase(sessionData);
			addPersonalDetailsColumns(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetailsMap = new LinkedHashMap<String, String>();
				grDB = resultSet.getString("GR_NO");
				studentDetailsMap.put("grNo", grDB);
				stdDB = resultSet.getString("PRESENT_STD") == null ? " " : (resultSet.getString("PRESENT_STD").trim());
				if (!oldAcademic.equalsIgnoreCase("")) {
					stdDB = cm.IntegerToRoman("a" + (cm.RomanToInteger(stdDB) + 1));
				}
				studentDetailsMap.put("std", stdDB);
				divDB = resultSet.getString("PRESENT_DIV") == null ? " " : (resultSet.getString("PRESENT_DIV").trim());
				studentDetailsMap.put("div", divDB);
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				studentDetailsMap.put("name", nameDB);
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				studentDetailsMap.put("rollNo", rollNo);
				originalLc = resultSet.getString("ORIGINAL_LC") == null ? ""
						: (resultSet.getString("ORIGINAL_LC").trim());
				studentDetailsMap.put("originalLc", originalLc);
				contactNo1 = resultSet.getString("CONTACT_1") == null ? "" : (resultSet.getString("CONTACT_1").trim());
				studentDetailsMap.put("contactNo1", contactNo1);
				contactNo2 = resultSet.getString("CONTACT_2") == null ? "" : (resultSet.getString("CONTACT_2").trim());
				studentDetailsMap.put("contactNo2", contactNo2);
				studentMap.put(grDB, studentDetailsMap);
				findFlag = true;
			}

			try {
				String querystudent_imgs = "CREATE TABLE `student_imgs` (`img_id` int(10) unsigned NOT NULL AUTO_INCREMENT, `img_title` varchar(45) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,  `img_data` blob NOT NULL, `GR_NO` varchar(7) NOT NULL DEFAULT '0', `SECTION_NM` varchar(20) DEFAULT NULL, PRIMARY KEY (`img_id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1";
				statement.executeUpdate(querystudent_imgs);
			} catch (Exception e) {
				if (!e.getMessage().contains("already exists")) {
					cm.logException(e);
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentMap;
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> findFeeStudent(SessionData sessionData, String gr,
			String std, String div, String last, String first, String middle, String section, String academic,
			String oldAcademic, String oldStd) throws Exception {

		String grDB = "", contactNo1 = "", contactNo2 = "";
		String stdDB, divDB, originalLc = "", promoteStd = "", nextAcademic = "";
		String rollNo = "";
		String nameDB = "";
		String findQuery = "";
		boolean findFlag = false;
		String addToWhere = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> studentMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		logger.info("=========findFeeStudent Query============");
		try {
			if (!oldAcademic.equalsIgnoreCase("")) {
				nextAcademic = academic;
				academic = oldAcademic;
				promoteStd = std;
				std = oldStd;
				addToWhere = addToWhere
						+ " AND fees_data_mandatory.GR_NO NOT IN (SELECT fees_data_mandatory.GR_NO FROM "
						+ sessionData.getDBName() + "." + "fees_data_mandatory " + "WHERE fees_data_mandatory.STD_1='"
						+ promoteStd + "' AND fees_data_mandatory.DIV_1='" + div + "' AND "
						+ "fees_data_mandatory.ACADEMIC_YEAR='" + nextAcademic
						+ "' AND fees_data_mandatory.SECTION_NM='" + section + "') AND " + "ORIGINAL_LC IS NULL";
				if (!academic.equalsIgnoreCase("")) {
					addToWhere = addToWhere + " AND fees_data_mandatory.ACADEMIC_YEAR='" + academic + "' ";
				}
			} else if (!academic.equalsIgnoreCase("")) {
				addToWhere = " AND fees_data_mandatory.ACADEMIC_YEAR='" + academic + "' ";
			}

			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE HS_GENERAL_REGISTER.GR_NO='" + gr.trim() + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
						+ section + "' " + addToWhere + " ORDER BY ROLL_NO * 1";

			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ "UPPER (HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY fees_data_mandatory.CREATED_DATE,ROLL_NO * 1";
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE UPPER(HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ " UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere + " "
						+ "ORDER BY fees_data_mandatory.CREATED_DATE,ROLL_NO * 1";
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,"
						+ "fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY fees_data_mandatory.CREATED_DATE,ROLL_NO * 1";
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER ('%" + last.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY fees_data_mandatory.CREATED_DATE,ROLL_NO * 1";
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%') AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY fees_data_mandatory.CREATED_DATE,ROLL_NO * 1";
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")
					&& !div.trim().equalsIgnoreCase("Select")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE fees_data_mandatory.STD_1 = '" + std.trim() + "' AND fees_data_mandatory.DIV_1 = '"
						+ div.trim() + "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' " + addToWhere
						+ " ORDER BY ROLL_NO * 1";
			} else if (!std.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE fees_data_mandatory.STD_1 = '" + std.trim() + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
						+ section + "' " + addToWhere + " ORDER BY ROLL_NO * 1";
			} else if (!div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT fees_data_mandatory.ROLL_NO,HS_GENERAL_REGISTER.GR_NO, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME, "
						+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME,fees_data_mandatory.STD_1,fees_data_mandatory.DIV_1,ORIGINAL_LC,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "fees_data_mandatory ON "
						+ "HS_GENERAL_REGISTER.GR_NO=fees_data_mandatory.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=fees_data_mandatory.SECTION_NM "
						+ "WHERE fees_data_mandatory.DIV_1 = '" + div.trim() + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
						+ section + "' " + addToWhere + " ORDER BY ROLL_NO * 1";
			}

			logger.info(findQuery);
			connectDatabase(sessionData);
			addPersonalDetailsColumns(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetailsMap = new LinkedHashMap<String, String>();
				grDB = resultSet.getString("GR_NO");
				studentDetailsMap.put("grNo", grDB);
				stdDB = resultSet.getString("STD_1") == null ? " " : (resultSet.getString("STD_1").trim());
				if (!oldAcademic.equalsIgnoreCase("")) {
					stdDB = cm.IntegerToRoman("a" + (cm.RomanToInteger(stdDB) + 1));
				}
				studentDetailsMap.put("std", stdDB);
				divDB = resultSet.getString("DIV_1") == null ? " " : (resultSet.getString("DIV_1").trim());
				studentDetailsMap.put("div", divDB);
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				studentDetailsMap.put("name", nameDB);
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				studentDetailsMap.put("rollNo", rollNo);
				originalLc = resultSet.getString("ORIGINAL_LC") == null ? ""
						: (resultSet.getString("ORIGINAL_LC").trim());
				studentDetailsMap.put("originalLc", originalLc);
				contactNo1 = resultSet.getString("CONTACT_1") == null ? "" : (resultSet.getString("CONTACT_1").trim());
				studentDetailsMap.put("contactNo1", contactNo1);
				contactNo2 = resultSet.getString("CONTACT_2") == null ? "" : (resultSet.getString("CONTACT_2").trim());
				studentDetailsMap.put("contactNo2", contactNo2);
				studentMap.put(grDB, studentDetailsMap);
				findFlag = true;
			}

			try {
				String querystudent_imgs = "CREATE TABLE `student_imgs` (`img_id` int(10) unsigned NOT NULL AUTO_INCREMENT, `img_title` varchar(45) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,  `img_data` blob NOT NULL, `GR_NO` varchar(7) NOT NULL DEFAULT '0', `SECTION_NM` varchar(20) DEFAULT NULL, PRIMARY KEY (`img_id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1";
				statement.executeUpdate(querystudent_imgs);
			} catch (Exception e) {
				if (!e.getMessage().contains("already exists")) {
					cm.logException(e);
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentMap;
	}

	public String[] viewStudentInfo(SessionData sessionData, String gr, String section) throws Exception {

		String retStr = "";
		String[] studentArray = new String[100];
		try {
			String grDB = "";
			String lastDB = "";
			String firstDB = "";
			String fatherDB = "";
			String motherDB = "";
			String genderDB = "";
			String emailDB = "";
			String permAddDB = "";
			String resAddDB = "";
			String c1DB = "";
			String c2DB = "";
			String dobDB = "";
			String dobWordsDB = "";
			String birthPlaceDB = "";
			String nationalityDB = "";
			String religionDB = "";
			String otherReligionDB = "";
			String categDB = "";
			String castDB = "";
			String mTongueDB = "";
			String doaDB = "";
			String lastSchoolDB = "";
			String admStdDB = "";
			String admDivDB = "";
			String presentStdDB = "";
			String presentDivDB = "";
			String payDB = "";
			String adhaarDB = "";
			String academicYearDB = "";
			String suidDB = "";
			String subCastDB = "";
			String talukaDB = "";
			String districtDB = "";
			String stateDB = "";
			String countryDB = "";
			String hobbiesDB = "", penDB = "";
			String admittedStdBranch = "";
			String lastSchoolUdise = "";

			String query = "SELECT * FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER WHERE GR_NO='"
					+ gr.trim() + "' AND SECTION_NM='" + section + "'";
			logger.info(query);
			connectDatabase(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO");
				lastDB = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				firstDB = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim());
				fatherDB = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				motherDB = resultSet.getString("MOTHER_NAME") == null ? " "
						: (resultSet.getString("MOTHER_NAME").trim());
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				emailDB = resultSet.getString("EMAIL") == null ? " " : (resultSet.getString("EMAIL").trim());
				permAddDB = resultSet.getString("PERMANENT_ADDRESS") == null ? " "
						: (resultSet.getString("PERMANENT_ADDRESS").trim());
				resAddDB = resultSet.getString("RESIDENTIAL_ADDRESS") == null ? " "
						: (resultSet.getString("RESIDENTIAL_ADDRESS").trim());
				c1DB = resultSet.getString("CONTACT_1") == null ? " " : (resultSet.getString("CONTACT_1").trim());
				if (c1DB.equalsIgnoreCase("0")) {
					c1DB = " ";
				}
				c2DB = resultSet.getString("CONTACT_2") == null ? " " : (resultSet.getString("CONTACT_2").trim());
				if (c2DB.equalsIgnoreCase("0")) {
					c2DB = " ";
				}
				dobDB = resultSet.getString("DOB") == null ? " " : (resultSet.getString("DOB").trim());
				dobWordsDB = resultSet.getString("DOB_WORDS") == null ? " " : (resultSet.getString("DOB_WORDS").trim());
				birthPlaceDB = resultSet.getString("BIRTH_PLACE") == null ? " "
						: (resultSet.getString("BIRTH_PLACE").trim());
				nationalityDB = resultSet.getString("NATIONALITY") == null ? " "
						: (resultSet.getString("NATIONALITY").trim());
				religionDB = resultSet.getString("RELIGION") == null ? " " : (resultSet.getString("RELIGION").trim());
				otherReligionDB = resultSet.getString("SUB_RELIGION") == null ? " "
						: (resultSet.getString("SUB_RELIGION").trim());
				if (otherReligionDB.equalsIgnoreCase("Select")) {
					otherReligionDB = " ";
				}
				categDB = resultSet.getString("CATEGORY") == null ? " " : (resultSet.getString("CATEGORY").trim());
				castDB = resultSet.getString("CAST") == null ? " " : (resultSet.getString("CAST").trim());
				mTongueDB = resultSet.getString("MOTHER_TONGUE") == null ? " "
						: (resultSet.getString("MOTHER_TONGUE").trim());
				doaDB = resultSet.getString("DATE_ADMITTED") == null ? " "
						: (resultSet.getString("DATE_ADMITTED").trim());
//				doaDB = Timestamp.valueOf(resultSet.getString("DATE_ADMITTED"));
				lastSchoolDB = resultSet.getString("LAST_SCHOOL") == null ? " "
						: (resultSet.getString("LAST_SCHOOL").trim());
				lastSchoolUdise = resultSet.getString("LAST_SCH_UDISE") == null ? " "
						: (resultSet.getString("LAST_SCH_UDISE").trim());
				admStdDB = resultSet.getString("ADMITTED_STD") == null ? " "
						: (resultSet.getString("ADMITTED_STD").trim());
				admDivDB = resultSet.getString("ADMITTED_DIV") == null ? " "
						: (resultSet.getString("ADMITTED_DIV").trim());
				presentStdDB = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				presentDivDB = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());
				payDB = resultSet.getString("PAYING_FREE") == null ? " " : (resultSet.getString("PAYING_FREE").trim());
				adhaarDB = resultSet.getString("ADHAAR_CARD") == null ? " "
						: (resultSet.getString("ADHAAR_CARD").trim());
				academicYearDB = resultSet.getString("ACADEMIC_YEAR") == null ? " "
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				suidDB = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());
				subCastDB = resultSet.getString("SUB_CASTE") == null ? " " : (resultSet.getString("SUB_CASTE").trim());
				talukaDB = resultSet.getString("TALUKA") == null ? " " : (resultSet.getString("TALUKA").trim());
				districtDB = resultSet.getString("DISTRICT") == null ? " " : (resultSet.getString("DISTRICT").trim());
				stateDB = resultSet.getString("STATE") == null ? " " : (resultSet.getString("STATE").trim());
				countryDB = resultSet.getString("COUNTRY") == null ? " " : (resultSet.getString("COUNTRY").trim());
				hobbiesDB = resultSet.getString("EXTRA_1") == null ? " " : (resultSet.getString("EXTRA_1").trim());
				penDB = resultSet.getString("PEN") == null ? " " : (resultSet.getString("PEN").trim());
				admittedStdBranch = resultSet.getString("admittedStdBranch") == null ? " "
						: (resultSet.getString("admittedStdBranch").trim());
			}

			retStr = grDB + "," + lastDB + "," + firstDB + "," + fatherDB + "," + motherDB + "," + genderDB + ","
					+ emailDB + "," + permAddDB + "," + resAddDB + "," + c1DB + "," + c2DB + "," + dobDB + ","
					+ dobWordsDB + "," + birthPlaceDB + "," + nationalityDB + "," + religionDB + "," + categDB + ","
					+ castDB + "," + mTongueDB + "," + doaDB + "," + lastSchoolDB + "," + admStdDB + "," + admDivDB
					+ "," + payDB + "," + adhaarDB + "," + otherReligionDB + "," + presentStdDB + "," + presentDivDB
					+ "," + academicYearDB + "," + suidDB + "," + subCastDB + "," + talukaDB + "," + districtDB + ","
					+ stateDB + "," + countryDB + "," + hobbiesDB + "," + admittedStdBranch + "," + lastSchoolUdise + "," + penDB;
			logger.info("retStr==>" + retStr);
			studentArray[0] = grDB;
			studentArray[1] = lastDB;
			studentArray[2] = firstDB;
			studentArray[3] = fatherDB;
			studentArray[4] = motherDB;
			studentArray[5] = genderDB;
			studentArray[6] = emailDB;
			studentArray[7] = permAddDB;
			studentArray[8] = resAddDB;
			studentArray[9] = c1DB;
			studentArray[10] = c2DB;
			studentArray[11] = dobDB;
			studentArray[12] = dobWordsDB;
			studentArray[13] = birthPlaceDB;
			studentArray[14] = nationalityDB;
			studentArray[15] = religionDB;
			studentArray[16] = categDB;
			studentArray[17] = castDB;
			studentArray[18] = mTongueDB;
			studentArray[19] = doaDB;
			studentArray[20] = lastSchoolDB;
			studentArray[21] = admStdDB;
			studentArray[22] = admDivDB;
			studentArray[23] = payDB;
			studentArray[24] = adhaarDB;
			studentArray[25] = otherReligionDB;
			studentArray[26] = presentStdDB;
			studentArray[27] = presentDivDB;
			studentArray[28] = academicYearDB;
			studentArray[29] = suidDB;
			studentArray[30] = subCastDB;
			studentArray[31] = talukaDB;
			studentArray[32] = districtDB;
			studentArray[33] = stateDB;
			studentArray[34] = countryDB;
			studentArray[35] = hobbiesDB;
			studentArray[36] = admittedStdBranch;
			studentArray[37] = lastSchoolUdise;
			studentArray[38] = penDB;
		} catch (Exception e) {
			cm.logException(e);
		}
//		finally {
//			closeDatabase(sessionData);
//		}
		return studentArray;
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> viewStudentInfoMap(SessionData sessionData,
			LinkedHashMap<String, String> grMap) throws Exception {

		LinkedHashMap<String, LinkedHashMap<String, String>> studentMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		try {
			String grList = "";
			String grDB = "";
			String lastDB = "";
			String firstDB = "";
			String fatherDB = "";
			String motherDB = "";
			String genderDB = "";
			String emailDB = "";
			String permAddDB = "";
			String resAddDB = "";
			String c1DB = "";
			String c2DB = "";
			String dobDB = "";
			String dobWordsDB = "";
			String birthPlaceDB = "";
			String nationalityDB = "";
			String religionDB = "";
			String otherReligionDB = "";
			String categDB = "";
			String castDB = "";
			String mTongueDB = "";
			String doaDB = "";
			String lastSchoolDB = "";
			String admStdDB = "";
			String admDivDB = "";
			String presentStdDB = "";
			String presentDivDB = "";
			String payDB = "";
			String adhaarDB = "";
			String academicYearDB = "";
			String suidDB = "";
			String subCastDB = "";
			String talukaDB = "";
			String districtDB = "";
			String stateDB = "";
			String countryDB = "";
			String hobbiesDB = "", penDB = "";
			String admittedStdBranch = "";

			Set set = grMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				grList = grList + ",'" + me.getKey() + "'";
			}
			grList = grList.substring(1);

			String query = "SELECT * FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER WHERE GR_NO IN ("
					+ grList.trim() + ") " + "AND SECTION_NM='" + sessionData.getSectionName() + "'";
			logger.info(query);
			connectDatabase(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetail = new LinkedHashMap<String, String>();
				grDB = resultSet.getString("GR_NO");
				lastDB = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				firstDB = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim());
				fatherDB = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				motherDB = resultSet.getString("MOTHER_NAME") == null ? " "
						: (resultSet.getString("MOTHER_NAME").trim());
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				emailDB = resultSet.getString("EMAIL") == null ? " " : (resultSet.getString("EMAIL").trim());
				permAddDB = resultSet.getString("PERMANENT_ADDRESS") == null ? " "
						: (resultSet.getString("PERMANENT_ADDRESS").trim());
				resAddDB = resultSet.getString("RESIDENTIAL_ADDRESS") == null ? " "
						: (resultSet.getString("RESIDENTIAL_ADDRESS").trim());
				c1DB = resultSet.getString("CONTACT_1") == null ? " " : (resultSet.getString("CONTACT_1").trim());
				if (c1DB.equalsIgnoreCase("0")) {
					c1DB = " ";
				}
				c2DB = resultSet.getString("CONTACT_2") == null ? " " : (resultSet.getString("CONTACT_2").trim());
				if (c2DB.equalsIgnoreCase("0")) {
					c2DB = " ";
				}
				dobDB = resultSet.getString("DOB") == null ? " " : (resultSet.getString("DOB").trim());
				dobWordsDB = resultSet.getString("DOB_WORDS") == null ? " " : (resultSet.getString("DOB_WORDS").trim());
				birthPlaceDB = resultSet.getString("BIRTH_PLACE") == null ? " "
						: (resultSet.getString("BIRTH_PLACE").trim());
				nationalityDB = resultSet.getString("NATIONALITY") == null ? " "
						: (resultSet.getString("NATIONALITY").trim());
				religionDB = resultSet.getString("RELIGION") == null ? " " : (resultSet.getString("RELIGION").trim());
				otherReligionDB = resultSet.getString("SUB_RELIGION") == null ? " "
						: (resultSet.getString("SUB_RELIGION").trim());
				if (otherReligionDB.equalsIgnoreCase("Select")) {
					otherReligionDB = " ";
				}
				categDB = resultSet.getString("CATEGORY") == null ? " " : (resultSet.getString("CATEGORY").trim());
				castDB = resultSet.getString("CAST") == null ? " " : (resultSet.getString("CAST").trim());
				mTongueDB = resultSet.getString("MOTHER_TONGUE") == null ? " "
						: (resultSet.getString("MOTHER_TONGUE").trim());
				doaDB = resultSet.getString("DATE_ADMITTED") == null ? " "
						: (resultSet.getString("DATE_ADMITTED").trim());
//				doaDB = Timestamp.valueOf(resultSet.getString("DATE_ADMITTED"));
				lastSchoolDB = resultSet.getString("LAST_SCHOOL") == null ? " "
						: (resultSet.getString("LAST_SCHOOL").trim());
				admStdDB = resultSet.getString("ADMITTED_STD") == null ? " "
						: (resultSet.getString("ADMITTED_STD").trim());
				admDivDB = resultSet.getString("ADMITTED_DIV") == null ? " "
						: (resultSet.getString("ADMITTED_DIV").trim());
				presentStdDB = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				presentDivDB = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());
				payDB = resultSet.getString("PAYING_FREE") == null ? " " : (resultSet.getString("PAYING_FREE").trim());
				adhaarDB = resultSet.getString("ADHAAR_CARD") == null ? " "
						: (resultSet.getString("ADHAAR_CARD").trim());
				academicYearDB = resultSet.getString("ACADEMIC_YEAR") == null ? " "
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				suidDB = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());
				subCastDB = resultSet.getString("SUB_CASTE") == null ? " " : (resultSet.getString("SUB_CASTE").trim());
				talukaDB = resultSet.getString("TALUKA") == null ? " " : (resultSet.getString("TALUKA").trim());
				districtDB = resultSet.getString("DISTRICT") == null ? " " : (resultSet.getString("DISTRICT").trim());
				stateDB = resultSet.getString("STATE") == null ? " " : (resultSet.getString("STATE").trim());
				countryDB = resultSet.getString("COUNTRY") == null ? " " : (resultSet.getString("COUNTRY").trim());
				hobbiesDB = resultSet.getString("EXTRA_1") == null ? " " : (resultSet.getString("EXTRA_1").trim());
				penDB = resultSet.getString("PEN") == null ? " " : (resultSet.getString("PEN").trim());
				admittedStdBranch = resultSet.getString("admittedStdBranch") == null ? " "
						: (resultSet.getString("admittedStdBranch").trim());

				studentDetail.put("grNo", grDB);
				studentDetail.put("lastName", lastDB);
				studentDetail.put("firstName", firstDB);
				studentDetail.put("fatherName", fatherDB);
				studentDetail.put("motherName", motherDB);
				studentDetail.put("gender", genderDB);
				studentDetail.put("email", emailDB);
				studentDetail.put("permanentAdd", permAddDB);
				studentDetail.put("residentAdd", resAddDB);
				studentDetail.put("contact1", c1DB);
				studentDetail.put("contact2", c2DB);
				studentDetail.put("dob", dobDB);
				studentDetail.put("dobWords", dobWordsDB);
				studentDetail.put("birthPlace", birthPlaceDB);
				studentDetail.put("nationality", nationalityDB);
				studentDetail.put("religion", religionDB);
				studentDetail.put("category", categDB);
				studentDetail.put("cast", castDB);
				studentDetail.put("motherTongue", mTongueDB);
				studentDetail.put("doa", doaDB);
				studentDetail.put("lastSchool", lastSchoolDB);
				studentDetail.put("admittedStd", admStdDB);
				studentDetail.put("admittedDiv", admDivDB);
				studentDetail.put("payment", payDB);
				studentDetail.put("adhaar", adhaarDB);
				studentDetail.put("otherReligion", otherReligionDB);
				studentDetail.put("presentStd", presentStdDB);
				studentDetail.put("presentDiv", presentDivDB);
				studentDetail.put("academicYear", academicYearDB);
				studentDetail.put("suid", suidDB);
				studentDetail.put("subCast", subCastDB);
				studentDetail.put("taluka", talukaDB);
				studentDetail.put("district", districtDB);
				studentDetail.put("state", stateDB);
				studentDetail.put("country", countryDB);
				studentDetail.put("hobbies", hobbiesDB);
				studentDetail.put("admittedStdBranch", admittedStdBranch);
				studentDetail.put("pen", penDB);
				studentMap.put(grDB, studentDetail);
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentMap;
	}

	// /////////Find student LC list////////////////////////////////////////
	public List<String> findStudentLC(SessionData sessionData, String gr, String std, String div, String last,
			String first, String middle, String academicYear, String section, String lcType, String grList)
			throws Exception {

		logger.info("=========findStudentLC Query============");
		String grDB = "";
		String rollDB = "";
		String nameDB = "";
		String findQuery = "";
		String originalLCDB = "";
		String duplicateLCDB = "";
		String triplicateLCDB = "";
		String lcTypeDB = "";
		String originalLCDateDB = "";
		String duplicateLCDateDB = "";
		String triplicateLCDateDB = "";
		boolean findFlag = false;
		List studentList = new ArrayList();
		String addToQuery = "";

		if (lcType.equalsIgnoreCase("Original")) {
			lcTypeDB = " AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)";
		} else if (lcType.equalsIgnoreCase("Duplicate")) {
			lcTypeDB = " AND ORIGINAL_LC IS NOT NULL AND DUPLICATE_LC IS NULL";
		} else if (lcType.equalsIgnoreCase("Triplicate")) {
			lcTypeDB = " AND DUPLICATE_LC IS NOT NULL";
		}
		if (!academicYear.equalsIgnoreCase("")) {
			addToQuery = " AND HS_GENERAL_REGISTER.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "'";
		}
		logger.info("addToQuery == " + addToQuery + lcTypeDB);
		try {

			if (lcType.equalsIgnoreCase("Update") && !grList.equalsIgnoreCase("")) {
				String[] grListSplit = grList.split(",");
				String grListForIn = "";
				for (int i = 0; i < grListSplit.length; i++) {
					if (i == 0) {
						grListForIn = "'" + grListSplit[i] + "'";
					} else {
						grListForIn = grListForIn + ",'" + grListSplit[i] + "'";
					}
				}
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, "
						+ "UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE HS_GENERAL_REGISTER.GR_NO IN ("
						+ grListForIn.trim() + ") " + addToQuery
						+ " AND ORIGINAL_LC IS NOT NULL ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 1 : " + findQuery);
			} else if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, "
						+ "UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE HS_GENERAL_REGISTER.GR_NO='"
						+ gr.trim() + "' " + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 1 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%"
						+ last.trim() + "%') AND " + "UPPER (HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%') AND UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%')" + "" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 2 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER(HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%"
						+ last.trim() + "%') AND " + " UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 3 : " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 4 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER ('%"
						+ last.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 5 : " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%"
						+ middle.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 6 : " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")
					&& !div.trim().equalsIgnoreCase("Select")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME "
						+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE "
						+ "HS_GENERAL_REGISTER.PRESENT_STD = '" + std.trim()
						+ "' AND HS_GENERAL_REGISTER.PRESENT_DIV = '" + div.trim() + "'" + addToQuery + lcTypeDB
						+ " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 7 : " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE PRESENT_STD = '"
						+ std.trim() + "'" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 8 : " + findQuery);
			} else if (!academicYear.equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE ACADEMIC_YEAR = '"
						+ academicYear + "'" + lcTypeDB + " ORDER BY ROLL_NO * 1, ORIGINAL_LC ASC";
				logger.info("findLcQuery 9 : " + findQuery);
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO");
				rollDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				originalLCDB = resultSet.getString("ORIGINAL_LC") == null ? " "
						: (resultSet.getString("ORIGINAL_LC").trim());
				duplicateLCDB = resultSet.getString("DUPLICATE_LC") == null ? " "
						: (resultSet.getString("DUPLICATE_LC").trim());
				triplicateLCDB = resultSet.getString("TRIPLICATE_LC") == null ? " "
						: (resultSet.getString("TRIPLICATE_LC").trim());
				originalLCDateDB = resultSet.getString("DATE_LEAVING") == null ? " "
						: (resultSet.getString("DATE_LEAVING").trim());
				duplicateLCDateDB = resultSet.getString("DUPLICATE_LC_DATE") == null ? " "
						: (resultSet.getString("DUPLICATE_LC_DATE").trim());
				triplicateLCDateDB = resultSet.getString("TRIPLICATE_LC_DATE") == null ? " "
						: (resultSet.getString("TRIPLICATE_LC_DATE").trim());

				studentList.add(grDB + "|" + nameDB + "||" + originalLCDB + "|||" + duplicateLCDB + "||||"
						+ originalLCDateDB + "|||||" + duplicateLCDateDB + "||||||" + triplicateLCDB + "|||||||"
						+ triplicateLCDateDB + "||||||||" + rollDB);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentList;
	}

	// /////////Find student data////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findStudentData(SessionData sessionData, String gr,
			String std, String div, String last, String first, String middle, String academicYear, String section,
			String lcType, String grList, String fromDate, String toDate) throws Exception {
		logger.info("=========findStudentData Query============");
		String grDB = "";
		String stdDB = "";
		String divDB = "";
		String contact1DB = "";
		String contact2DB = "";
		String rollDB = "";
		String nameDB = "";
		String findQuery = "";
		String lcTypeDB = "";
		boolean findFlag = false;
		ResultSet resultSetSms = null;
		String addToQuery = "";
		LinkedHashMap retStudentMap = new LinkedHashMap();
		LinkedHashMap smsStatusMap = new LinkedHashMap();
		String grListFromResult = "";
		int daysCheckStatus = Integer.parseInt(sessionData.getConfigMap().get("DAYS_STATUS_CHECK"));

		if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			addToQuery = " HS_GENERAL_REGISTER.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "'";
		} else if (!academicYear.equalsIgnoreCase("")) {
			addToQuery = " AND HS_GENERAL_REGISTER.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "'";
		}
		logger.info("addToQuery == " + addToQuery + lcTypeDB);
		try {
			String grListForIn = "";
			if (lcType.equalsIgnoreCase("Update") && !grList.equalsIgnoreCase("")) {
				String[] grListSplit = grList.split(",");
				for (int i = 0; i < grListSplit.length; i++) {
					if (i == 0) {
						grListForIn = "'" + grListSplit[i] + "'";
					} else {
						grListForIn = grListForIn + ",'" + grListSplit[i] + "'";
					}
				}
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, "
						+ "UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE HS_GENERAL_REGISTER.GR_NO IN ("
						+ grListForIn.trim() + ") " + addToQuery + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 1 : " + findQuery);
			} else if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, "
						+ "UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE HS_GENERAL_REGISTER.GR_NO='"
						+ gr.trim() + "' " + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 1 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%"
						+ last.trim() + "%') AND " + "UPPER (HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%') AND UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%')" + "" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 2 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER(HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER('%"
						+ last.trim() + "%') AND " + " UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 3 : " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER(HS_GENERAL_REGISTER.FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 4 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER (HS_GENERAL_REGISTER.LAST_NAME) LIKE UPPER ('%"
						+ last.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 5 : " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE UPPER(HS_GENERAL_REGISTER.FATHER_NAME) LIKE UPPER('%"
						+ middle.trim() + "%')" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 6 : " + findQuery);
			} else if (std.trim().equalsIgnoreCase("") && div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME "
						+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE "
						+ addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 71 : " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")
					&& !div.trim().equalsIgnoreCase("Select")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME "
						+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE "
						+ "HS_GENERAL_REGISTER.PRESENT_STD = '" + std.trim()
						+ "' AND HS_GENERAL_REGISTER.PRESENT_DIV = '" + div.trim() + "'" + addToQuery + lcTypeDB
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 7 : " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE PRESENT_STD = '"
						+ std.trim() + "'" + addToQuery + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 8 : " + findQuery);
			} else if (!academicYear.equalsIgnoreCase("")) {
				findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,CONTACT_1,CONTACT_2,CLASS_ALLOTMENT.ROLL_NO AS ROLL_NO,DATE_LEAVING,UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, UPPER(ORIGINAL_LC) AS ORIGINAL_LC, UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, "
						+ "DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, UPPER(TRIPLICATE_LC) AS TRIPLICATE_LC, DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, "
						+ "UPPER(DUPLICATE_LC) AS DUPLICATE_LC, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME"
						+ " FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE ACADEMIC_YEAR = '"
						+ academicYear + "'" + lcTypeDB + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findLcQuery 9 : " + findQuery);
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetailsMap = new LinkedHashMap<String, String>();
				grDB = resultSet.getString("GR_NO");
				grListFromResult = grListFromResult + ",'" + grDB + "'";
				studentDetailsMap.put("gr_no", grDB);
				stdDB = resultSet.getString("PRESENT_STD");
				studentDetailsMap.put("std", stdDB);
				divDB = resultSet.getString("PRESENT_DIV");
				studentDetailsMap.put("div", divDB);
				rollDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				studentDetailsMap.put("roll_no", rollDB);
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				studentDetailsMap.put("name", nameDB);
				rollDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				contact1DB = resultSet.getString("CONTACT_1") == null ? " " : (resultSet.getString("CONTACT_1").trim());
				studentDetailsMap.put("contact1", contact1DB);
				contact2DB = resultSet.getString("CONTACT_2") == null ? " " : (resultSet.getString("CONTACT_2").trim());
				studentDetailsMap.put("contact2", contact2DB);
				retStudentMap.put(grDB, studentDetailsMap);
				findFlag = true;
			}

			String grStatus = "";
			String phone = "";
			String sender = "";
			String status = "";
			String messageId = "";
			String message = "";
			String messageType = "";
			String grListProcessed = "";
			String smsDate = "";
			grListFromResult = grListFromResult.substring(1);

			String smsStatusQuery = "select * from " + sessionData.getDBName() + "." + "sms_data " + "where gr_no in ("
					+ grListFromResult.trim() + ") order by CREATED_DATE DESC";
			statement = connection.createStatement();
			resultSetSms = statement.executeQuery(smsStatusQuery);

			while (resultSetSms.next()) {
//				LinkedHashMap smsDetailsMap = new LinkedHashMap();
				grStatus = resultSetSms.getString("GR_NO");
				if (grListProcessed.contains(grStatus)) {
					continue;
				}
				grListProcessed = grListProcessed + "," + grStatus;
				phone = resultSetSms.getString("PHONE");
				((LinkedHashMap) retStudentMap.get(grStatus)).put("phone", phone);
				sender = resultSetSms.getString("SENDER");
				((LinkedHashMap) retStudentMap.get(grStatus)).put("sender", sender);
				status = resultSetSms.getString("STATUS");
				((LinkedHashMap) retStudentMap.get(grStatus)).put("status", status);
				messageId = resultSetSms.getString("MESSAGE_ID");
				((LinkedHashMap) retStudentMap.get(grStatus)).put("messageId", messageId);
				message = resultSetSms.getString("MESSAGE") == null ? "" : (resultSetSms.getString("MESSAGE").trim());
				((LinkedHashMap) retStudentMap.get(grStatus)).put("message", message);
				messageType = resultSetSms.getString("TYPE") == null ? "" : (resultSetSms.getString("TYPE").trim());
				((LinkedHashMap) retStudentMap.get(grStatus)).put("messageType", messageType);
				smsDate = resultSetSms.getString("SCHEDULED_DATE") == null ? ""
						: (resultSetSms.getString("SCHEDULED_DATE").trim());
				((LinkedHashMap) retStudentMap.get(grStatus)).put("smsDate", smsDate);
				if (!status.equalsIgnoreCase("DELIVERED") && !status.equalsIgnoreCase("DELIVRD")) {
					int daysLeft = 0;
					SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
					Date todayDate = formatter.parse(cm.getCurrentDateInHHmm().toString());
					Date expiryDate = formatter.parse(cm.dateFormatFromyyyymmddhhmmToddmmyyyyhhmm(smsDate));
					daysLeft = cm.daysBetween(expiryDate, todayDate);
					boolean checkStatus = cm.dateDifferenceInMinutes(todayDate, expiryDate);
					if (checkStatus && daysLeft <= daysCheckStatus) {
						status = cm.checkHSPDeliveryStatus(sessionData, status, messageId, phone, messageType,
								grStatus, section);
					} else if (!checkStatus) {
						status = "SUBMITTED";
					} else if (daysLeft > daysCheckStatus) {
						if (!status.contains("*"))
							status = status + " *";
						updateSmsDeliveryStatus(sessionData, grStatus, status, messageId, section, "");
					}
					if (status.contains("Exception")) {
						status = "Check Failed";
					}
					((LinkedHashMap) retStudentMap.get(grStatus)).put("status", status);
				}
			}

		} catch (Exception e) {
			logger.error("Exception= " + e);
		} finally {
			if (resultSetSms != null) {
				resultSetSms.close();
			}
		}
		return retStudentMap;
	}

	// /////////Find SmsReport data////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findSmsReport(SessionData sessionData, String gr,
			String std, String div, String last, String first, String middle, String academicYear, String section,
			String smsType, String grList, String fromDate, String toDate) throws Exception {
		logger.info("=========findSmsReport Query============");
		String grDB = "";
		String contact1DB = "";
		String contact2DB = "";
		String rollDB = "";
		String nameDB = "";
		String findQuery = "";
		String sender = "";
		String status = "";
		String messageId = "";
		String message = "";
		String messageType = "";
		String smsDate = "";
		boolean findFlag = false;
		ResultSet resultSetSms = null;
		String addToQuery = "";
		LinkedHashMap retStudentMap = new LinkedHashMap();
		LinkedHashMap smsStatusMap = new LinkedHashMap();
		String grListFromResult = "";
		int daysCheckStatus = Integer.parseInt(sessionData.getConfigMap().get("DAYS_STATUS_CHECK"));

		if (!academicYear.equalsIgnoreCase("")) {
			addToQuery = " AND SMS_DATA.ACADEMIC_YEAR = '" + academicYear + "' AND SMS_DATA.SECTION_NM='" + section
					+ "'";
		}
		if (!fromDate.equalsIgnoreCase("")) {
			addToQuery = addToQuery + " AND (CREATED_DATE BETWEEN '" + fromDate + " 00:00:00' AND '" + toDate
					+ " 23:59:59')";
		}

		logger.info("addToQuery == " + addToQuery);
		try {
			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "sms_data WHERE GR_NO='" + gr.trim()
						+ "' " + addToQuery + " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 1 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
						+ "sms_data WHERE UPPER (NAME) LIKE UPPER('%" + last.trim() + "%') OR "
						+ "UPPER (NAME) LIKE UPPER('%" + first.trim() + "%') OR UPPER(NAME) LIKE UPPER('%"
						+ middle.trim() + "%')" + "" + addToQuery + " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 2 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
						+ "sms_data WHERE UPPER(NAME) LIKE UPPER('%" + last.trim() + "%') OR "
						+ " UPPER(NAME) LIKE UPPER('%" + first.trim() + "%')" + addToQuery
						+ " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 3 : " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
						+ "sms_data WHERE UPPER(NAME) LIKE UPPER('%" + first.trim() + "%')" + addToQuery
						+ " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 4 : " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
						+ "sms_data WHERE UPPER (NAME) LIKE UPPER ('%" + last.trim() + "%')" + addToQuery
						+ " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 5 : " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
						+ "sms_data WHERE UPPER(NAME) LIKE UPPER('%" + middle.trim() + "%')" + addToQuery
						+ " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 6 : " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")
					&& !div.trim().equalsIgnoreCase("Select")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "sms_data WHERE "
						+ "sms_data.PRESENT_STD = '" + std.trim() + "' AND sms_data.PRESENT_DIV = '" + div.trim() + "'"
						+ addToQuery + " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 7 : " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "sms_data WHERE PRESENT_STD = '"
						+ std.trim() + "'" + addToQuery + " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 8 : " + findQuery);
			} else if (!academicYear.equalsIgnoreCase("")) {
				findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "sms_data WHERE ACADEMIC_YEAR = '"
						+ academicYear + "'" + " ORDER BY SCHEDULED_DATE DESC";
				logger.info("findLcQuery 9 : " + findQuery);
			}
//			findQuery = "select * from "+sessionData.getDBName()+"."+"sms_data";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			int i = 1;
			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetailsMap = new LinkedHashMap<String, String>();
				grDB = resultSet.getString("GR_NO") == null ? "1" : (resultSet.getString("GR_NO").trim());
				grListFromResult = grListFromResult + ",'" + grDB + "'";
				studentDetailsMap.put("gr_no", grDB);
				rollDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				studentDetailsMap.put("roll_no", rollDB);
				nameDB = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				if(rollDB.equalsIgnoreCase("") && !nameDB.contains("|")){
					nameDB = nameDB+"|"+nameDB;
				}
				studentDetailsMap.put("name", nameDB);
				rollDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				contact1DB = resultSet.getString("PHONE") == null ? " " : (resultSet.getString("PHONE").trim());
				studentDetailsMap.put("contact1", contact1DB);
				sender = resultSet.getString("SENDER") == null ? " " : (resultSet.getString("SENDER").trim());
				studentDetailsMap.put("sender", sender);
				status = resultSet.getString("STATUS") == null ? " " : (resultSet.getString("STATUS").trim());
				studentDetailsMap.put("status", status);
				messageId = resultSet.getString("MESSAGE_ID") == null ? " "
						: (resultSet.getString("MESSAGE_ID").trim());
				studentDetailsMap.put("messageId", messageId);
				message = resultSet.getString("MESSAGE") == null ? " " : (resultSet.getString("MESSAGE").trim());
				message = cm.revertCommaApostrophy(message);
				studentDetailsMap.put("message", message);
				messageType = resultSet.getString("TYPE") == null ? " " : (resultSet.getString("TYPE").trim());
				studentDetailsMap.put("messageType", messageType);
				smsDate = resultSet.getString("SCHEDULED_DATE") == null ? " "
						: (resultSet.getString("SCHEDULED_DATE").trim());
				studentDetailsMap.put("smsDate", smsDate);
//				contact2DB = resultSet.getString("CONTACT_2") == null ? ""	: (resultSet.getString("CONTACT_2").trim());
//				studentDetailsMap.put("contact2", contact2DB);
				if (!status.equalsIgnoreCase("Delivered") && !status.equalsIgnoreCase("DELIVRD")) {
					int daysLeft = 0;
					SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
					Date todayDate = formatter.parse(cm.getCurrentDateInHHmm().toString());
					Date expiryDate = formatter.parse(cm.dateFormatFromyyyymmddhhmmToddmmyyyyhhmm(smsDate));
					daysLeft = cm.daysBetween(expiryDate, todayDate);
					boolean checkStatus = cm.dateDifferenceInMinutes(todayDate, expiryDate);
					if (checkStatus && daysLeft <= daysCheckStatus) {
						status = cm.checkHSPDeliveryStatus(sessionData, status, messageId, contact1DB, messageType, "",
								section);
					} else if (!checkStatus) {
						status = "SUBMITTED";
					} else if (daysLeft > daysCheckStatus) {
						if (!status.contains("*"))
							status = status + " *";
						updateSmsDeliveryStatus(sessionData, gr, status, messageId, section, "");
					}
					/*
					 * int daysLeft = 0; SimpleDateFormat formatter = new
					 * SimpleDateFormat("dd/MM/yyyy HH:mm"); Date todayDate =
					 * formatter.parse(cm.getCurrentDateInHHmm().toString()); Date expiryDate =
					 * formatter.parse(cm.dateFormatFromyyyymmddhhmmToddmmyyyyhhmm(smsDate));
					 * daysLeft = cm.daysBetween(expiryDate, todayDate); if(daysLeft > 0 && daysLeft
					 * <= daysCheckStatus){ status = cm.checkHSPDeliveryStatus(sessionData, status,
					 * messageId, contact1DB, messageType, "", section); } else if(daysLeft < 0){
					 * status = "SUBMITTED"; } else{ if(!status.contains("*")) status = status +
					 * " *"; updateSmsDeliveryStatus(sessionData, gr, status, messageId, section,
					 * ""); }
					 */
//					status = cm.checkHSPDeliveryStatus(sessionData, status, messageId, contact1DB, messageType, "", section);
					studentDetailsMap.put("status", status);
				}
				retStudentMap.put(grDB + "_" + i, studentDetailsMap);
				findFlag = true;
				i++;
			}

			/*
			 * String grStatus = ""; String phone = ""; String sender = ""; String status =
			 * ""; String messageId = ""; String message = ""; String messageType = "";
			 * String grListProcessed = ""; String smsDate = ""; grListFromResult =
			 * grListFromResult.substring(1);
			 * 
			 * String smsStatusQuery =
			 * "select * from "+sessionData.getDBName()+"."+"sms_data where gr_no in (" +
			 * grListFromResult.trim() + ") order by CREATED_DATE DESC"; statement =
			 * connection.createStatement(); resultSetSms =
			 * statement.executeQuery(smsStatusQuery);
			 * 
			 * while (resultSetSms.next()) { // LinkedHashMap smsDetailsMap = new
			 * LinkedHashMap(); grStatus = resultSetSms.getString("GR_NO");
			 * if(grListProcessed.contains(grStatus)){ continue; } grListProcessed =
			 * grListProcessed + "," + grStatus; phone = resultSetSms.getString("PHONE");
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("phone",phone); sender =
			 * resultSetSms.getString("SENDER");
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("sender",sender); status =
			 * resultSetSms.getString("STATUS");
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("status",status); messageId
			 * = resultSetSms.getString("MESSAGE_ID");
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("messageId",messageId);
			 * message = resultSetSms.getString("MESSAGE") == null ? "":
			 * (resultSetSms.getString("MESSAGE").trim());
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("message",message);
			 * messageType = resultSetSms.getString("TYPE") == null ? "":
			 * (resultSetSms.getString("TYPE").trim());
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("messageType",messageType);
			 * smsDate = resultSetSms.getString("SCHEDULED_DATE") == null ? "":
			 * (resultSetSms.getString("SCHEDULED_DATE").trim());
			 * ((LinkedHashMap)retStudentMap.get(grStatus)).put("smsDate",smsDate); }
			 */

		} catch (Exception e) {
			cm.logException(e);
		} finally {
			if (resultSetSms != null) {
				resultSetSms.close();
			}
		}
		return retStudentMap;
	}

	// //////method to find LC data list////////////////////
	public List<String> findStudentLC(SessionData sessionData, List<String> passGrList, String section,
			String academic) throws Exception {

		logger.info("=========findStudentLC list Query============");
		String grDb = "";
		String feeFromHsGenReg = "";
		String admittedStdDb = "";
		String nameDb = "";
		String motherNameDb = "";
		String nationalityDb = "";
		String religionDb = "";
		String otherReligionDb = "";
		String castDb = "";
		String dobDb = "";
		String dobWordsDb = "";
		String lastSchoolDb = "";
		String dateAdmittedDb = "";
		String progressDb = "";
		String conductDb = "";
		String dateLeavingDb = "";
		String leavingStdDb = "";
		String reasonDb = "";
		String remarkDb = "";
		String originalLcDb = "";
		String duplicateLcDb = "";
		String triplicateLcDb = "";
		String originalLcDateDb = "";
		String duplicateLcDateDb = "";
		String triplicateLcDateDb = "";
		String lcIssueCountDb = "";
		String studying_sinceDb = "";
		String fee_statusDb = "";
		String findQuery = "";
		String formGrList = "";
		String currentStdDb = "";
		String birthPlaceDb = "";
		String suidDb = "";
		String subCasteDb = "";
		String talukaDb = "";
		String districtDb = "";
		String stateDb = "";
		String countryDb = "";
		String adhaarCardDb = "";
		String penDb = "";
		String mother_tongue = "";
		String medium = "";
		String admittedStdBranch = "";
//		String remark1Db = "";
		boolean findFlag = false;
		List<String> studentLCList = new ArrayList<String>();
		LinkedHashMap<String, String> grMap = new LinkedHashMap<String, String>();

		logger.info("passGrList.size() : " + passGrList.size());
		for (int i = 0; i < passGrList.size(); i++) {
			if (passGrList.size() - i == 1)
				formGrList = formGrList + "'" + passGrList.get(i) + "'";
			else
				formGrList = formGrList + "'" + passGrList.get(i) + "',";
		}
		logger.info("formGrList :: " + formGrList);
		try {

			if (!formGrList.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT HS_GENERAL_REGISTER.GR_NO, HS_GENERAL_REGISTER.PEN, HS_GENERAL_REGISTER.EXTRA_2,EXTRA_3, ORIGINAL_LC, HS_GENERAL_REGISTER.LAST_NAME, "
						+ "HS_GENERAL_REGISTER.FIRST_NAME, HS_GENERAL_REGISTER.FATHER_NAME, HS_GENERAL_REGISTER.MOTHER_NAME, NATIONALITY, RELIGION,SUB_RELIGION, CAST, "
						+ "DATE_FORMAT(DOB, '%d-%m-%Y') AS DOB, DOB_WORDS, LAST_SCHOOL, DATE_FORMAT(HS_GENERAL_REGISTER.DATE_ADMITTED, '%d-%m-%Y') AS DATE_ADMITTED, "
						+ "HS_GENERAL_REGISTER.PROGRESS, HS_GENERAL_REGISTER.CONDUCT, DATE_FORMAT(DATE_LEAVING, '%d-%m-%Y') AS DATE_LEAVING, LEAVING_STD, REASON, HS_GENERAL_REGISTER.REMARK_0, DUPLICATE_LC, "
						+ "TRIPLICATE_LC, BIRTH_PLACE, REMARK_1, DATE_FORMAT(ORIGINAL_LC_DATE, '%d-%m-%Y') AS ORIGINAL_LC_DATE, "
						+ "DATE_FORMAT(TRIPLICATE_LC_DATE, '%d-%m-%Y') AS TRIPLICATE_LC_DATE, DATE_FORMAT(DUPLICATE_LC_DATE, '%d-%m-%Y') AS DUPLICATE_LC_DATE, "
						+ "STUDYING_SINCE, HS_GENERAL_REGISTER.PRESENT_STD, LC_ISSUE_COUNT,ADMITTED_STD,ADMITTEDSTDBRANCH, "
						+ "CASE FEE_STATUS.ACADEMIC_YEAR WHEN '" + academic
						+ "' THEN FEE_STATUS.FEE_STATUS ELSE '-' END as 'FEE_STATUS',"
						+ "HS_GENERAL_REGISTER.SUID,HS_GENERAL_REGISTER.SUB_CASTE,HS_GENERAL_REGISTER.TALUKA,HS_GENERAL_REGISTER.DISTRICT,"
						+ "HS_GENERAL_REGISTER.STATE,HS_GENERAL_REGISTER.COUNTRY,HS_GENERAL_REGISTER.ADHAAR_CARD,HS_GENERAL_REGISTER.MOTHER_TONGUE "
						+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "."
						+ "FEE_STATUS ON FEE_STATUS.GR_NO=HS_GENERAL_REGISTER.GR_NO AND "
						+ "FEE_STATUS.ACADEMIC_YEAR=HS_GENERAL_REGISTER.ACADEMIC_YEAR AND FEE_STATUS.SECTION_NM=HS_GENERAL_REGISTER.SECTION_NM "
						+ "LEFT JOIN " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND "
						+ "CLASS_ALLOTMENT.ACADEMIC_YEAR=HS_GENERAL_REGISTER.ACADEMIC_YEAR AND CLASS_ALLOTMENT.SECTION_NM=HS_GENERAL_REGISTER.SECTION_NM "
						+ "WHERE HS_GENERAL_REGISTER.GR_NO IN (" + formGrList.trim()
						+ ") AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' ORDER BY CLASS_ALLOTMENT.ROLL_NO * 1";
			}
			logger.info(findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				grDb = resultSet.getString("GR_NO");
				grDb = cm.ifNullThenDash("" + grDb);
				if (grMap.get(grDb) != null && !grDb.equalsIgnoreCase("-")) {
					continue;
				}
				grMap.put(grDb, "");
				feeFromHsGenReg = resultSet.getString("EXTRA_2");
				feeFromHsGenReg = cm.ifNullThenDash(feeFromHsGenReg);
				medium = resultSet.getString("EXTRA_3");
				medium = cm.ifNullThenDash(medium);
				originalLcDb = resultSet.getString("ORIGINAL_LC");
				// originalLcDb = cm.ifNullThenDash(""+originalLcDb);
				nameDb = resultSet.getString("FIRST_NAME") + " " + resultSet.getString("FATHER_NAME") + " "
						+ resultSet.getString("LAST_NAME");
				motherNameDb = resultSet.getString("MOTHER_NAME");
				motherNameDb = cm.ifNullThenDash("" + motherNameDb);
				nationalityDb = resultSet.getString("NATIONALITY");
				nationalityDb = cm.ifNullThenDash("" + nationalityDb);
				religionDb = resultSet.getString("RELIGION");
				religionDb = cm.ifNullThenDash("" + religionDb);
				otherReligionDb = resultSet.getString("SUB_RELIGION");
				otherReligionDb = cm.ifNullThenDash("" + otherReligionDb);
				if ((otherReligionDb.equalsIgnoreCase("-") || otherReligionDb.equalsIgnoreCase(""))
						&& !religionDb.equalsIgnoreCase("OTHER")) {
					otherReligionDb = religionDb;
				}
				castDb = resultSet.getString("CAST");
				castDb = cm.ifNullThenDash("" + castDb);
				dobDb = resultSet.getString("DOB");
				dobDb = cm.ifNullThenDash("" + dobDb);
				dobWordsDb = resultSet.getString("DOB_WORDS");
				dobWordsDb = cm.ifNullThenDash("" + dobWordsDb);
				lastSchoolDb = resultSet.getString("LAST_SCHOOL") == null ? "#"
						: (resultSet.getString("LAST_SCHOOL").trim());
				if (lastSchoolDb.equalsIgnoreCase("")) {
					lastSchoolDb = "#";
				}
//				lastSchoolDb = cm.ifNullThenDash("" + lastSchoolDb);
				dateAdmittedDb = resultSet.getString("DATE_ADMITTED");
				dateAdmittedDb = cm.ifNullThenDash("" + dateAdmittedDb);
				progressDb = resultSet.getString("PROGRESS");
				progressDb = cm.ifNullThenDash("" + "" + progressDb);
				conductDb = resultSet.getString("CONDUCT");
				conductDb = cm.ifNullThenDash("" + conductDb);
				dateLeavingDb = resultSet.getString("DATE_LEAVING");
				dateLeavingDb = cm.ifNullThenDash("" + dateLeavingDb);
				leavingStdDb = resultSet.getString("LEAVING_STD");
				leavingStdDb = cm.ifNullThenDash("" + leavingStdDb);
				reasonDb = resultSet.getString("REASON");
				reasonDb = cm.ifNullThenDash("" + reasonDb);
				remarkDb = resultSet.getString("REMARK_0");
				remarkDb = cm.ifNullThenDash("" + remarkDb);
				duplicateLcDb = resultSet.getString("DUPLICATE_LC");
				// duplicateLcDb = cm.ifNullThenDash(""+duplicateLcDb);
				triplicateLcDb = resultSet.getString("TRIPLICATE_LC");
				// triplicateLcDb = cm.ifNullThenDash(""+triplicateLcDb);
				originalLcDateDb = resultSet.getString("ORIGINAL_LC_DATE");
				// originalLcDateDb = cm.ifNullThenDash(""+originalLcDateDb);
				duplicateLcDateDb = resultSet.getString("DUPLICATE_LC_DATE");
				// duplicateLcDateDb = cm.ifNullThenDash(""+duplicateLcDateDb);
				triplicateLcDateDb = resultSet.getString("TRIPLICATE_LC_DATE");
				// triplicateLcDateDb =
				// cm.ifNullThenDash(""+triplicateLcDateDb);
				lcIssueCountDb = resultSet.getString("LC_ISSUE_COUNT");
				// lcIssueCountDb = cm.ifNullThenBlank(lcIssueCountDb);
				studying_sinceDb = resultSet.getString("STUDYING_SINCE");
				studying_sinceDb = cm.ifNullThenDash("" + studying_sinceDb);
				admittedStdBranch = resultSet.getString("ADMITTEDSTDBRANCH");
				admittedStdBranch = cm.ifNullThenDash("" + admittedStdBranch);
				currentStdDb = resultSet.getString("PRESENT_STD");
				currentStdDb = cm.ifNullThenDash("" + currentStdDb);
				birthPlaceDb = resultSet.getString("BIRTH_PLACE") == null ? "#"
						: (resultSet.getString("BIRTH_PLACE").trim());
				if (birthPlaceDb.equalsIgnoreCase("")) {
					birthPlaceDb = "#";
				}
//				birthPlaceDb = cm.ifNullThenDash("" + birthPlaceDb);
//				remark1Db = resultSet.getString("REMARK_1");
//				remark1Db = cm.ifNullThenDash("" + remark1Db);
				fee_statusDb = resultSet.getString("FEE_STATUS");
				if (fee_statusDb.equalsIgnoreCase("PAID")) {
					fee_statusDb = "NO DUES";
				} else if (fee_statusDb.equalsIgnoreCase("UNPAID")) {
					fee_statusDb = "DUES PENDING";
				} else {
					fee_statusDb = feeFromHsGenReg;
				}
				admittedStdDb = resultSet.getString("ADMITTED_STD");
				admittedStdDb = cm.ifNullThenDash("" + admittedStdDb);
				suidDb = resultSet.getString("SUID");
				suidDb = cm.ifNullThenDash(suidDb);
				subCasteDb = resultSet.getString("SUB_CASTE");
				subCasteDb = cm.ifNullThenDash(subCasteDb);
				talukaDb = resultSet.getString("TALUKA");
				talukaDb = cm.ifNullThenDash(talukaDb);
				districtDb = resultSet.getString("DISTRICT");
				districtDb = cm.ifNullThenDash(districtDb);
				stateDb = resultSet.getString("STATE");
				stateDb = cm.ifNullThenDash(stateDb);
				countryDb = resultSet.getString("COUNTRY");
				countryDb = cm.ifNullThenDash(countryDb);
				adhaarCardDb = resultSet.getString("ADHAAR_CARD");
				adhaarCardDb = cm.ifNullThenDash(adhaarCardDb);
				mother_tongue = resultSet.getString("MOTHER_TONGUE");
				mother_tongue = cm.ifNullThenDash(mother_tongue);
				penDb = resultSet.getString("PEN");
				penDb = cm.ifNullThenDash(penDb);
				studentLCList.add(grDb + "|" + originalLcDb + "|" + nameDb + "|" + motherNameDb + "|" + nationalityDb
						+ "|" + otherReligionDb + "|" + castDb + "|" + dobDb + "|" + dobWordsDb + "|" + lastSchoolDb
						+ "|" + dateAdmittedDb + "|" + progressDb + "|" + conductDb + "|" + dateLeavingDb + "|"
						+ leavingStdDb + "|" + reasonDb + "|" + remarkDb + "|" + duplicateLcDb + "|" + originalLcDateDb
						+ "|" + duplicateLcDateDb + "|" + studying_sinceDb + "|" + currentStdDb + "|" + birthPlaceDb
						+ "|" + cm.FirstWordCap(fee_statusDb) + "|" + triplicateLcDb + "|" + triplicateLcDateDb + "|"
						+ lcIssueCountDb + "|" + admittedStdDb + "|" + suidDb + "|" + subCasteDb + "|" + talukaDb + "|"
						+ districtDb + "|" + stateDb + "|" + countryDb + "|" + adhaarCardDb + "|" + mother_tongue + "|"
						+ medium + "|" + admittedStdBranch + "|" + penDb);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentLCList;
	}

	public int getYearDataCount(SessionData sessionData, String table_name, String date_column) throws Exception {

		logger.info("======inside getYearDataCount======");
		int dataCountDb = 0;
		try {
			String query = "select count(*) DATA_COUNT  FROM " + sessionData.getDBName() + "." + "" + table_name + "  "
					+ "where SECTION_NM='" + sessionData.getSectionName() + "' AND DATE_FORMAT(" + date_column
					+ ",'YYYY') = DATE_FORMAT(SYSDATE(), 'YYYY')";
			logger.info(query);
			connectDatabase(sessionData);
			/*
			 * Class.forName(driver); try { connection = DriverManager.getConnection(url,
			 * user, pwd); } catch (Exception e) {
			 * logger.error("Database connectivity issue...");
			 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); }
			 */
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				dataCountDb = Integer.parseInt(resultSet.getString("DATA_COUNT"));
			}
			logger.info("dataCountDb=" + dataCountDb);
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return dataCountDb;
	}

	// /////////getPatternCount//////////////////////////////
	public int getPatternCount(SessionData sessionData, String table_name, String data_column, String patternStyle)
			throws Exception {

		logger.info("======inside getPatternCount======");
		int dataCountDb = 0;
		try {
			String query = "SELECT COUNT(*) DATA_COUNT  FROM " + sessionData.getDBName() + "." + "" + table_name
					+ " WHERE SECTION_NM='" + sessionData.getSectionName() + "' AND " + data_column + " LIKE ('%"
					+ patternStyle + "')";
			logger.info(query);
			connectDatabase(sessionData);
			/*
			 * Class.forName(driver); try { connection = DriverManager.getConnection(url,
			 * user, pwd); } catch (Exception e) {
			 * logger.error("Database connectivity issue...");
			 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); }
			 */
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				dataCountDb = Integer.parseInt(resultSet.getString("DATA_COUNT"));
			}
			logger.info("dataCountDb=" + dataCountDb);
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
			/*
			 * if (resultSet != null) { resultSet.close(); } if (connection != null) {
			 * connection.close(); }
			 */
		}
		return dataCountDb;
	}

	// /////////getNextCount//////////////////////////////
	public int getLastCount(SessionData sessionData, String table_name, String data_column) throws Exception {

		logger.info("======inside getNextCount======");
		int dataCountDb = 0;
		String dataDb = "";
		try {
			String query = "SELECT (" + data_column + ") AS DATA_COUNT FROM " + sessionData.getDBName() + "."
					+ table_name + " WHERE " + data_column + " IS NOT NULL AND SECTION_NM='"
					+ sessionData.getSectionName() + "' ORDER BY " + data_column + " DESC LIMIT 1";
			logger.info(query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				dataDb = resultSet.getString("DATA_COUNT");
				if (cm.validateNumber(dataDb)) {
					dataCountDb = Integer.parseInt(dataDb);
				}
			}
			logger.info("dataCountDb=" + dataCountDb);
		} catch (Exception e) {
			cm.logException(e);
			return 0;
		}
		return dataCountDb;
	}

	// /////////getLatestAcademicYear//////////////////////////////
	public String getLatestAcademicYear(SessionData sessionData, String gr_no) {

		logger.info("======inside getLatestAcademicYear======");
		String dataAcadDb = "";
		String presentDiv = "";
		try {
			String query = "SELECT DISTINCT ACADEMIC_YEAR AS ACAD_DATA, PRESENT_STD FROM " + sessionData.getDBName()
					+ "." + "CLASS_ALLOTMENT WHERE GR_NO='" + gr_no + "' ORDER BY ACADEMIC_YEAR DESC LIMIT 1";
			logger.info(query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				dataAcadDb = resultSet.getString("ACAD_DATA");
				presentDiv = resultSet.getString("PRESENT_STD");
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return dataAcadDb + "|" + presentDiv;
	}

	// /////////////updateLC on save////////////////////////////////////
	// public List<String> updateLC(List<String> updateLcList, String section)
	// throws Exception {
	public List<String> updateLC(SessionData sessionData, String conduct, String leavingDate, String issueDate,
			String reason, String remark, List<String> updateLcList, String section, String progress, String remark2,
			String academic, String lcType, String feeStatus, String retStd, String retDiv, String medium)
			throws Exception {

		logger.info("=======inside updateLC========");
		int lcCount = 0, dupLcCount = 0, tripLcCount = 0;
		List lcPdfList = new ArrayList();
		List passLcPdfList = new ArrayList();
		String updateLc = "";
		String retProgress = progress;
		boolean lc_count_db = Boolean.parseBoolean(sessionData.getConfigMap().get("LC_COUNT_DB"));
		TreeMap<String, String> progressMap = new TreeMap<String, String>();
		try {

			logger.info("updateLcList : " + updateLcList.size());
			if (!lc_count_db) {
				lcCount = getLastCount(sessionData, "HS_GENERAL_REGISTER", "ORIGINAL_LC");
				dupLcCount = getLastCount(sessionData, "HS_GENERAL_REGISTER", "DUPLICATE_LC");
				tripLcCount = getLastCount(sessionData, "HS_GENERAL_REGISTER", "TRIPLICATE_LC");
			}
//			else {
//				lcCount = updateCountData(sessionData, academic, sessionData.getSectionName(), "ORIGINAL_LC", "")-1;
//				dupLcCount = updateCountData(sessionData, academic, sessionData.getSectionName(), "DUPLICATE_LC", "")-1;
//				tripLcCount = updateCountData(sessionData, academic, sessionData.getSectionName(), "TRIPLICATE_LC", "")-1;
//			}
			progressMap = getProgressBasedOnResult(sessionData, retStd, retDiv, academic, updateLcList);
			logger.info("lcCount : " + lcCount + " --- dupLcCount : " + dupLcCount);

			lcPdfList = findStudentLC(sessionData, updateLcList, section, academic);
			logger.info("lcPdfList.size() :: " + lcPdfList.size());
			for (int i = 0; i < lcPdfList.size(); i++) {
				logger.info("========" + i + "===============");
				StringTokenizer st1 = new StringTokenizer(lcPdfList.get(i).toString(), "|");

				List<String> LCDetaillist = new ArrayList();
				while (st1.hasMoreTokens()) {
					LCDetaillist.add(st1.nextToken());
				}
				logger.info("==outside while=====");
				String grDb = LCDetaillist.get(0);
				String origLcDb = LCDetaillist.get(1);
				String nameDb = LCDetaillist.get(2);
				String motherNameDb = LCDetaillist.get(3);
				String nationalityDb = LCDetaillist.get(4);
				String religionDb = LCDetaillist.get(5);
				String castDb = LCDetaillist.get(6);
				String dobDb = LCDetaillist.get(7);
				String dobWordsDb = LCDetaillist.get(8);
				String lastSchoolDb = LCDetaillist.get(9);
				String dateAdmittedDb = LCDetaillist.get(10);
				String dateLeavingDb = LCDetaillist.get(13);
				String leavingStdDb = LCDetaillist.get(14);
				String duplicateLcDb = LCDetaillist.get(17);
				String originalLcDateDb = LCDetaillist.get(18);
				String duplicateLcDateDb = LCDetaillist.get(19);
				String studyingSinceDb = LCDetaillist.get(20);
				String currentStdDb = LCDetaillist.get(21);
				String birthPlaceDb = LCDetaillist.get(22);
				String feeStatusDb = LCDetaillist.get(23);
				if (feeStatus.equalsIgnoreCase("From Fee Status")) {
					feeStatus = feeStatusDb;
				}
				String triplicateLcDb = LCDetaillist.get(24);
				String triplicateLcDateDb = LCDetaillist.get(25);
				String lcIssueCount1Db = LCDetaillist.get(26);

				String progressDb = "";
				String conductDb = "";
				String reasonDb = "";
				String remarkDb = "";
				String remark1Db = "";
				String mediumDb = "";

				if (!conduct.equalsIgnoreCase("")) {
					progressDb = progress;
					conductDb = conduct;
					reasonDb = reason;
					remarkDb = remark;
					remark1Db = remark2;
					mediumDb = medium;
				} else {
					progressDb = LCDetaillist.get(11);
					conductDb = LCDetaillist.get(12);
					reasonDb = LCDetaillist.get(15);
					remarkDb = LCDetaillist.get(16);
					remark1Db = LCDetaillist.get(23);
					mediumDb = LCDetaillist.get(36);
				}

				/*
				 * if (origLcDb.equalsIgnoreCase("") || origLcDb.equalsIgnoreCase("NA") ||
				 * origLcDb.equalsIgnoreCase("null") || origLcDb == null) { lcCount = lcCount +
				 * 1; origLcDb = String.format("%03d", lcCount); } else if
				 * (duplicateLcDb.equalsIgnoreCase("") || duplicateLcDb.equalsIgnoreCase("NA")
				 * || duplicateLcDb.equalsIgnoreCase("null") || duplicateLcDb == null) {
				 * dupLcCount = dupLcCount + 1; duplicateLcDb = String.format("%03d",
				 * dupLcCount); } else if (triplicateLcDb.equalsIgnoreCase("") ||
				 * triplicateLcDb.equalsIgnoreCase("NA") ||
				 * triplicateLcDb.equalsIgnoreCase("null") || triplicateLcDb == null) {
				 * tripLcCount = tripLcCount + 1; triplicateLcDb = String.format("%03d",
				 * tripLcCount); }
				 */

				if (leavingStdDb.equalsIgnoreCase("") || leavingStdDb.equalsIgnoreCase("null")
						|| leavingStdDb == null) {
					String latestAcad = getLatestAcademicYear(sessionData, grDb);
					studyingSinceDb = latestAcad.substring(0, 4);
					leavingStdDb = latestAcad.substring(latestAcad.indexOf("|") + 1);
				}

				if (issueDate.contains("-")) {
					issueDate = cm.MM_ddlmmlyyyy(issueDate);
				}
				if (originalLcDateDb.contains("-")) {
					originalLcDateDb = cm.MM_ddlmmlyyyy(originalLcDateDb);
				}

				if (retProgress.equalsIgnoreCase("Based on Result")) {
					progress = progressMap.get(grDb);
				}
				if (lcType.equalsIgnoreCase("Update")) {
					updateLc = "UPDATE HS_GENERAL_REGISTER SET CONDUCT = '" + conduct.trim() + "'," + "PROGRESS = '"
							+ progress.trim() + "',REASON = '" + reason.trim() + "'," + "REMARK_0 = '" + remark.trim()
							+ "'," + "REMARK_1 = '" + remark2.trim() + "', MODIFIED_DATE = SYSDATE(), EXTRA_2 = '"
							+ feeStatus + "', EXTRA_3 = '" + medium + "'," + "MODIFIED_BY = '"
							+ sessionData.getUserName() + "',ORIGINAL_LC_DATE = STR_TO_DATE('" + issueDate.trim()
							+ "', '%d/%m/%Y') " + "" + "WHERE GR_NO='" + grDb.trim() + "' AND SECTION_NM='" + section
							+ "'";
				} else if (originalLcDateDb.equalsIgnoreCase("NA") || originalLcDateDb.equalsIgnoreCase("")
						|| originalLcDateDb.equalsIgnoreCase("null") || originalLcDateDb == null
						|| !conduct.equalsIgnoreCase("")) {
					if (lc_count_db) {
						lcCount = updateCountData(sessionData, academic, sessionData.getSectionName(), "ORIGINAL_LC",
								"") - 1;
					}
					lcCount = lcCount + 1;
					origLcDb = String.format("%03d", lcCount);

					updateLc = "UPDATE HS_GENERAL_REGISTER SET " + "ORIGINAL_LC = " + origLcDb.trim()
							+ ",ORIGINAL_LC_DATE = STR_TO_DATE('" + issueDate.trim() + "', '%d/%m/%Y')," + "CONDUCT = '"
							+ conduct.trim() + "'," + "PROGRESS = '" + progress.trim()
							+ "',DATE_LEAVING = STR_TO_DATE('" + leavingDate.trim() + "', '%d/%m/%Y'), "
							+ "STUDYING_SINCE = '" + studyingSinceDb.trim().toUpperCase() + "', REASON = '"
							+ reason.trim() + "'," + "REMARK_0 = '" + remark.trim() + "'," + "REMARK_1 = '"
							+ remark2.trim() + "', EXTRA_2 = '" + feeStatus + "', EXTRA_3 = '" + medium
							+ "', DUPLICATE_LC = null, " + "DUPLICATE_LC_DATE = null,LEAVING_STD = '"
							+ currentStdDb.trim().toUpperCase() + "',MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
							+ sessionData.getUserName() + "' " + "WHERE GR_NO='" + grDb.trim() + "' AND SECTION_NM='"
							+ section + "'";
				} else if (duplicateLcDb.equalsIgnoreCase("") || duplicateLcDb.equalsIgnoreCase("NA")
						|| duplicateLcDb.equalsIgnoreCase("null") || duplicateLcDb == null) {
					if (lc_count_db) {
						dupLcCount = updateCountData(sessionData, academic, sessionData.getSectionName(),
								"DUPLICATE_LC", "") - 1;
					}
					dupLcCount = dupLcCount + 1;
					duplicateLcDb = String.format("%03d", dupLcCount);

					updateLc = "UPDATE HS_GENERAL_REGISTER SET DUPLICATE_LC = " + duplicateLcDb + ", "
							+ "DUPLICATE_LC_DATE = STR_TO_DATE('" + issueDate.trim()
							+ "', '%d/%m/%Y'), MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + sessionData.getUserName()
							+ "' " + "WHERE GR_NO='" + grDb.trim() + "' AND SECTION_NM='" + section + "'";
				} else if (triplicateLcDb.equalsIgnoreCase("") || triplicateLcDb.equalsIgnoreCase("NA")
						|| triplicateLcDb.equalsIgnoreCase("null") || triplicateLcDb == null) {
					if (lc_count_db) {
						tripLcCount = updateCountData(sessionData, academic, sessionData.getSectionName(),
								"TRIPLICATE_LC", "") - 1;
					}
					tripLcCount = tripLcCount + 1;
					triplicateLcDb = String.format("%03d", tripLcCount);

					updateLc = "UPDATE HS_GENERAL_REGISTER SET TRIPLICATE_LC = " + triplicateLcDb + ", "
							+ "TRIPLICATE_LC_DATE = STR_TO_DATE('" + issueDate.trim()
							+ "', '%d/%m/%Y'), MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + sessionData.getUserName()
							+ "' " + "WHERE GR_NO='" + grDb.trim() + "' AND SECTION_NM='" + section + "'";
				}

				logger.info("updateLc query for " + grDb + " ===>" + updateLc);

				statement = connection.createStatement();
				int isUpdateSuccess = statement.executeUpdate(updateLc);
				passLcPdfList.add(grDb);
				logger.info(isUpdateSuccess + " LC for " + grDb + " updated successfully...");
			}
			logger.info("LC data updated successfully...");
		} catch (Exception e) {
			cm.logException(e);
		}
		return passLcPdfList;
	}

	public boolean deleteLC(SessionData sessionData, String grNo) throws Exception {
		try {

			String deleteLc = "UPDATE HS_GENERAL_REGISTER SET "
					+ "ORIGINAL_LC = null,ORIGINAL_LC_DATE =null,CONDUCT = '',DATE_LEAVING = null, "
					+ "STUDYING_SINCE = '',REASON = '',REMARK_0 ='',REMARK_1 ='',"
					+ "DUPLICATE_LC =null,DUPLICATE_LC_DATE =null,TRIPLICATE_LC =null,TRIPLICATE_LC_DATE =null,"
					+ "LEAVING_STD = '',EXTRA_2='',EXTRA_3='',MODIFIED_DATE = SYSDATE() " + "WHERE GR_NO='"
					+ grNo.trim() + "' and SECTION_NM='" + sessionData.getSectionName() + "'";

			statement = connection.createStatement();
			statement.executeUpdate(deleteLc);
			JOptionPane.showMessageDialog(null, "LC deleted successfully for Gr No. " + grNo);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////Find Class Allotment list////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findClassAllotList(SessionData sessionData, String gr,
			String std, String div, String last, String first, String middle, String academicYear, String rollFrom,
			String rollTo, String section, boolean isAttendance, String exam) throws Exception {

		logger.info("=========findClassAllotList Query============");
		String grDB = "";
		String genderDB = "";
		String nameDB = "";
		String findQuery = "";
		String rollNoDB = "";
		String presentDivDb = "";
		String presentStdDb = "";
		String previousDivDb = "";
		String remarkDivDb = "";
		String addYearToQuery = "";
		String addRollToQuery = "";
		String attendanceDB = "";
		String attendanceColumn = "";
		int present = 0;
		int total = 0;
		boolean findFlag = false;
		List studentList = new ArrayList();
		LinkedHashMap studentMap = new LinkedHashMap();
		LinkedHashMap<String, String> leftStudentMap = new LinkedHashMap<String, String>();

		
		logger.info("findClassAllotList entry method time :: "+cm.getCurrentTimeStamp());
		
		if (!academicYear.equalsIgnoreCase("") && !academicYear.equalsIgnoreCase("Year")) {
			addYearToQuery = " AND CLASS_ALLOTMENT.SECTION_NM='" + section + "' AND CLASS_ALLOTMENT.ACADEMIC_YEAR = '"
					+ academicYear + "'";
		}

		if (!rollFrom.equalsIgnoreCase("") && !rollTo.equalsIgnoreCase("")) {
			addRollToQuery = " AND CLASS_ALLOTMENT.ROLL_NO between " + rollFrom + " and " + rollTo + "";
		}

		try {
			connectDatabase(sessionData);

			/// remove insertattendanceCoulmn once added to all schools and updated create
			/// table query
			try {
				String insertAttendanceCoulmn = "ALTER TABLE "+sessionData.getDBName()+".HS_GENERAL_REGISTER ADD (ATT_SEM1  VARCHAR(10),"
						+ "ATT_SEM2  VARCHAR(10),ATT_FINAL  VARCHAR(10))";
				logger.info("insert Attendance Column query == " + insertAttendanceCoulmn);
				statement = connection.createStatement();
				statement.executeUpdate(insertAttendanceCoulmn);
			} catch (Exception e) {
				// logger.info("failed to create Attendance column in HS_GENERAL_REGISTER table
				// >>> "+e);
			}
			
			//get list of left students
			leftStudentMap = getLeftStudentMap(sessionData, "", "", "");

			if (exam.equalsIgnoreCase("Semester 1")) {
				exam = "SEM1";
				attendanceColumn = "ATT_SEM1 AS ATT_SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				exam = "SEM2";
				attendanceColumn = "ATT_SEM2 AS ATT_SEM2";
			} else if (exam.equalsIgnoreCase("Final")) {
				exam = "FINAL";
				attendanceColumn = "ATT_SEM1 AS ATT_SEM1,ATT_SEM2 AS ATT_SEM2";
			}
			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE GR_NO='" + gr.trim() + "' " + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 1 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER (CLASS_ALLOTMENT.LAST_NAME) LIKE UPPER('%" + last.trim()
						+ "%') AND " + "UPPER (CLASS_ALLOTMENT.FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND UPPER(CLASS_ALLOTMENT.FATHER_NAME) LIKE UPPER('%" + middle.trim() + "%')"
						+ " AND CLASS_ALLOTMENT.PRESENT_STD='" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV='"
						+ div.trim() + "'" + addYearToQuery + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 2 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER(CLASS_ALLOTMENT.LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ " UPPER(CLASS_ALLOTMENT.FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND CLASS_ALLOTMENT.PRESENT_STD='"
						+ std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 3 == " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER(CLASS_ALLOTMENT.FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND CLASS_ALLOTMENT.PRESENT_STD='" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV='"
						+ div.trim() + "'" + addYearToQuery + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 4 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER (CLASS_ALLOTMENT.LAST_NAME) LIKE UPPER ('%" + last.trim()
						+ "%') AND CLASS_ALLOTMENT.PRESENT_STD='" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV='"
						+ div.trim() + "'" + addYearToQuery + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 5 == " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE UPPER(CLASS_ALLOTMENT.FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%') AND CLASS_ALLOTMENT.PRESENT_STD='" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV='"
						+ div.trim() + "'" + addYearToQuery + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 6 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("") && !isAttendance) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER, UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME, UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0, "
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME, UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD , UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV, UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_STD = '" + std.trim()
						+ "' AND CLASS_ALLOTMENT.PRESENT_DIV = '" + div.trim() + "'" + addYearToQuery + addRollToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 7 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT HS_GENERAL_REGISTER.GENDER AS GENDER," + attendanceColumn
						+ ", UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, "
						+ "UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME,UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0,"
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME,"
						+ "UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV,UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV,UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_STD = '" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
						+ div.trim() + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0) " + addYearToQuery
						+ addRollToQuery + " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findClassAllotList 7 == " + findQuery);
			}

			logger.info("Time before executing findClassAllotList query :: "+cm.getCurrentTimeStamp());
			
			logger.info("findClassAllotList query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			
			logger.info("Time after executing findClassAllotList query :: "+cm.getCurrentTimeStamp());

			while (resultSet.next()) {
				LinkedHashMap studentDetailMap = new LinkedHashMap();
				grDB = resultSet.getString("GR_NO");
				if(leftStudentMap.get(grDB) != null) {
					continue;
				}
				studentDetailMap.put("gr", grDB);
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				if (genderDB.equalsIgnoreCase("")) {
					genderDB = " ";
				}
				studentDetailMap.put("gender", genderDB);
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				studentDetailMap.put("name", nameDB);
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				studentDetailMap.put("rollNo", rollNoDB);
				presentStdDb = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				if (presentStdDb.equalsIgnoreCase("")) {
					presentStdDb = " ";
				}
				studentDetailMap.put("presentStd", presentStdDb);
				presentDivDb = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());
				if (presentDivDb.equalsIgnoreCase("")) {
					presentDivDb = " ";
				}
				studentDetailMap.put("presentDiv", presentDivDb);
				studentDetailMap.put("newDiv", presentDivDb);
				previousDivDb = resultSet.getString("PREVIOUS_DIV") == null ? " "
						: (resultSet.getString("PREVIOUS_DIV").trim());
				if (previousDivDb.equalsIgnoreCase("")) {
					previousDivDb = " ";
				}
				studentDetailMap.put("previousDiv", previousDivDb);
				remarkDivDb = resultSet.getString("REMARK_0") == null ? " " : (resultSet.getString("REMARK_0").trim());
				if (remarkDivDb.equalsIgnoreCase("")) {
					remarkDivDb = " ";
				}
				studentDetailMap.put("remarkDiv", remarkDivDb);
				studentDetailMap.put("status", "EXISTING");
				if (!isAttendance) {
					studentList.add(nameDB + "|" + grDB + "||" + rollNoDB + "|||" + presentStdDb + "||||" + presentDivDb
							+ "|||||" + remarkDivDb + "||||||" + genderDB);
					studentMap.put(grDB, studentDetailMap);
				} else {
					if (exam.equalsIgnoreCase("SEM1")) {
						attendanceDB = resultSet.getString("ATT_SEM1") == null ? "0/0"
								: (resultSet.getString("ATT_SEM1").trim());
					} else if (exam.equalsIgnoreCase("SEM2")) {
						attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0"
								: (resultSet.getString("ATT_SEM2").trim());
					} else if (exam.equalsIgnoreCase("Final")) {
						attendanceDB = resultSet.getString("ATT_SEM1") == null ? "0/0"
								: (resultSet.getString("ATT_SEM1").trim());
						present = present + Integer.parseInt(attendanceDB.substring(0, attendanceDB.indexOf("/")));
						total = total + Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/") + 1));
						attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0"
								: (resultSet.getString("ATT_SEM2").trim());
						present = present + Integer.parseInt(attendanceDB.substring(0, attendanceDB.indexOf("/")));
						total = total + Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/") + 1));
						attendanceDB = present + "/" + total;
						present = 0;
						total = 0;
					}
					studentList.add(rollNoDB + "|" + grDB + "|" + nameDB + "|" + attendanceDB);
				}
				findFlag = true;
			}
			
			logger.info("Time after getting findClassAllotList data :: "+cm.getCurrentTimeStamp());
			
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
			/*
			 * if (resultSet != null) { resultSet.close(); } if (connection != null) {
			 * connection.close(); }
			 */
		}
		return studentMap;
	}

	public List<String> findClassAteendanceList(SessionData sessionData, String gr, String std, String div,
			String last, String first, String middle, String academicYear, String rollFrom, String rollTo,
			String section, boolean isAttendance, String exam) throws Exception {

		logger.info("=========findClassAteendanceList Query============");
		String grDB = "";
		String nameDB = "";
		String findQuery = "";
		String rollNoDB = "";
		String presentDivDb = "";
		String presentStdDb = "";
		String previousDivDb = "";
		String remarkDivDb = "";
		String addYearToQuery = "";
		String addRollToQuery = "";
		String attendanceDB = "";
		String attendanceColumn = "";
		int present = 0;
		int total = 0;
		boolean findFlag = false;
		List studentList = new ArrayList();

		if (!academicYear.equalsIgnoreCase("") && !academicYear.equalsIgnoreCase("Year")) {
			addYearToQuery = " AND CLASS_ALLOTMENT.SECTION_NM='" + section + "' AND CLASS_ALLOTMENT.ACADEMIC_YEAR = '"
					+ academicYear + "'";
		}
		logger.info("addYearToQuery == " + addYearToQuery);
		if (!rollFrom.equalsIgnoreCase("") && !rollTo.equalsIgnoreCase("")) {
			addRollToQuery = " AND CLASS_ALLOTMENT.ROLL_NO between " + rollFrom + " and " + rollTo + "";
		}
		logger.info("addRollToQuery == " + addRollToQuery);
		try {

			connectDatabase(sessionData);

			/// remove insertattendanceCoulmn once added to all schools and updated create
			/// table query
			try {
				String insertAttendanceCoulmn = "ALTER TABLE HS_GENERAL_REGISTER ADD (ATT_SEM1  VARCHAR(10),"
						+ "ATT_SEM2  VARCHAR(10),ATT_FINAL  VARCHAR(10))";
				logger.info("insert Attendance Column query == " + insertAttendanceCoulmn);
				statement = connection.createStatement();
				statement.executeUpdate(insertAttendanceCoulmn);
			} catch (Exception e) {
				// logger.info("failed to create Attendance column in HS_GENERAL_REGISTER table
				// >>> "+e);
			}

			if (exam.equalsIgnoreCase("Semester 1")) {
				exam = "SEM1";
				attendanceColumn = "ATT_SEM1 AS ATT_SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				exam = "SEM2";
				attendanceColumn = "ATT_SEM2 AS ATT_SEM2";
			} else if (exam.equalsIgnoreCase("Final")) {
				exam = "FINAL";
				attendanceColumn = "ATT_SEM1 AS ATT_SEM1,ATT_SEM2 AS ATT_SEM2";
			}
			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT WHERE "
						+ "GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE " + "ACADEMIC_YEAR='" + academicYear
						+ "' AND ORIGINAL_LC IS NOT NULL) AND GR_NO='" + gr.trim() + "' " + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 1 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE ACADEMIC_YEAR='" + academicYear
						+ "' AND ORIGINAL_LC IS NOT NULL) AND UPPER (LAST_NAME) LIKE UPPER('%" + last.trim()
						+ "%') AND " + "UPPER (FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND UPPER(FATHER_NAME) LIKE UPPER('%" + middle.trim() + "%')" + " AND PRESENT_STD='"
						+ std.trim() + "' AND PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 2 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE ACADEMIC_YEAR='" + academicYear
						+ "' AND ORIGINAL_LC IS NOT NULL) AND UPPER(LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ " UPPER(FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND PRESENT_STD='" + std.trim()
						+ "' AND PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 3 == " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE ACADEMIC_YEAR='" + academicYear
						+ "' AND ORIGINAL_LC IS NOT NULL) AND UPPER(FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND PRESENT_STD='" + std.trim() + "' AND PRESENT_DIV='" + div.trim() + "'"
						+ addYearToQuery + " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 4 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE ACADEMIC_YEAR='" + academicYear
						+ "' AND ORIGINAL_LC IS NOT NULL) AND UPPER (LAST_NAME) LIKE UPPER ('%" + last.trim()
						+ "%') AND PRESENT_STD='" + std.trim() + "' AND PRESENT_DIV='" + div.trim() + "'"
						+ addYearToQuery + " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 5 == " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE ACADEMIC_YEAR='" + academicYear
						+ "' AND ORIGINAL_LC IS NOT NULL) AND UPPER(FATHER_NAME) LIKE UPPER('%" + middle.trim()
						+ "%') AND PRESENT_STD='" + std.trim() + "' AND PRESENT_DIV='" + div.trim() + "'"
						+ addYearToQuery + " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 6 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("") && !isAttendance) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT WHERE "
						+ "GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "HS_GENERAL_REGISTER WHERE ACADEMIC_YEAR='" + academicYear + "' "
						+ "AND ORIGINAL_LC IS NOT NULL) AND  PRESENT_STD = '" + std.trim() + "' AND PRESENT_DIV = '"
						+ div.trim() + "'" + addYearToQuery + addRollToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 7 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO," + attendanceColumn
						+ ", UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, "
						+ "UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME,UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0,"
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME,"
						+ "UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV,UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV,UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND CLASS_ALLOTMENT.SECTION_NM=HS_GENERAL_REGISTER.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_STD = '" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
						+ div.trim() + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0) " + addYearToQuery
						+ addRollToQuery + " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 7 == " + findQuery);
			}

			logger.info("findClassAteendanceList query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO");
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				presentStdDb = resultSet.getString("PRESENT_STD") == null ? ""
						: (resultSet.getString("PRESENT_STD").trim());
				presentDivDb = resultSet.getString("PRESENT_DIV") == null ? ""
						: (resultSet.getString("PRESENT_DIV").trim());
				previousDivDb = resultSet.getString("PREVIOUS_DIV") == null ? ""
						: (resultSet.getString("PREVIOUS_DIV").trim());
				remarkDivDb = resultSet.getString("REMARK_0") == null ? "" : (resultSet.getString("REMARK_0").trim());

				if (!isAttendance) {
					studentList.add(nameDB + "|" + grDB + "||" + rollNoDB + "|||" + presentStdDb + "||||" + presentDivDb
							+ "|||||" + remarkDivDb);
				} else {
					if (exam.equalsIgnoreCase("SEM1")) {
						attendanceDB = resultSet.getString("ATT_SEM1") == null ? "0/0"
								: (resultSet.getString("ATT_SEM1").trim());
					} else if (exam.equalsIgnoreCase("SEM2")) {
						attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0"
								: (resultSet.getString("ATT_SEM2").trim());
					} else if (exam.equalsIgnoreCase("Final")) {
						attendanceDB = resultSet.getString("ATT_SEM1") == null ? "0/0"
								: (resultSet.getString("ATT_SEM1").trim());
						present = present + Integer.parseInt(attendanceDB.substring(0, attendanceDB.indexOf("/")));
						total = total + Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/") + 1));
						attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0"
								: (resultSet.getString("ATT_SEM2").trim());
						present = present + Integer.parseInt(attendanceDB.substring(0, attendanceDB.indexOf("/")));
						total = total + Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/") + 1));
						attendanceDB = present + "/" + total;
						present = 0;
						total = 0;
					}
					if (attendanceDB.equalsIgnoreCase("")) {
						attendanceDB = "0/0";
					}
					studentList.add(rollNoDB + "|" + grDB + "|" + nameDB + "|" + attendanceDB);
				}
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentList;
	}

	// /////////Find Promote Student list////////////////////////////////////////
	public LinkedHashMap<String, String> findPromoteStudentList(SessionData sessionData, String gr, String std,
			String div, String last, String first, String middle, String academicYear, String rollFrom, String rollTo,
			String section) throws Exception {

		logger.info("=========findPromoteStudentList Query============");
		String grDB = "";
		String nameDB = "";
		String findQuery = "";
		String rollNoDB = "";
		String presentDivDb = "";
		String presentStdDb = "";
		String previousDivDb = "";
		String remarkDivDb = "";
		String firstNameDb = "";
		String lastNameDb = "";
		String fatherNameDb = "";
		String addYearToQuery = "";
		String addRollToQuery = "";
		String promoteYear = "";
		String previousYear = "";
		int intPromoteStd = 0;
		String promoteStd = "";
		boolean findFlag = false;
//		List studentList = new ArrayList();
		LinkedHashMap<String, String> studentMap = new LinkedHashMap<String, String>();

		/*
		 * //to get current year Calendar calCurrent = Calendar.getInstance(); String
		 * currentYear = calCurrent.get(Calendar.YEAR)+"";
		 * 
		 * //to get previous year Calendar calPrevious = Calendar.getInstance();
		 * previousYear = (calPrevious.get(Calendar.YEAR)-1)+""; previousYear =
		 * previousYear.trim() +"-"+ currentYear.substring(2,4).trim();
		 * 
		 * promoteYear = currentYear.trim() + "-" +
		 * (Integer.parseInt(currentYear.substring(2,4).trim())+1);
		 */

		promoteYear = cm.getAcademicYear(sessionData,cm.getCurrentDate());

		String previousYearDate = "";
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.YEAR, -1);

		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		previousYearDate = sdf.format(cal.getTime());
		previousYear = cm.getAcademicYear(sessionData,previousYearDate);

		intPromoteStd = cm.RomanToInteger(std) + 1;
		promoteStd = cm.IntegerToRoman("a" + intPromoteStd);

		if (!academicYear.equalsIgnoreCase("") && !academicYear.equalsIgnoreCase("Year")) {
			addYearToQuery = " AND ACADEMIC_YEAR = '" + academicYear + "'";
		}
		logger.info("addYearToQuery == " + addYearToQuery);
		if (!rollFrom.equalsIgnoreCase("") && !rollTo.equalsIgnoreCase("")) {
			addRollToQuery = " AND ROLL_NO between " + rollFrom + " and " + rollTo + "";
		}
		logger.info("addRollToQuery == " + addRollToQuery);
		try {

			if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")) {
				/*
				 * findQuery = "SELECT * FROM "+sessionData.getDBName()+
				 * "."+"CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM "+sessionData.
				 * getDBName()+"."+"CLASS_ALLOTMENT " +
				 * "WHERE PRESENT_STD IN ('"+std+"','"+promoteStd+"') AND ACADEMIC_YEAR='"
				 * +promoteYear+"') AND " +
				 * "PRESENT_STD='"+std+"' AND PRESENT_DIV='"+div+"' AND ACADEMIC_YEAR='"
				 * +previousYear+"' ORDER BY GR_NO";
				 */

				findQuery = "SELECT CLASS_ALLOTMENT.GR_NO,CLASS_ALLOTMENT.FIRST_NAME,CLASS_ALLOTMENT.LAST_NAME,"
						+ "CLASS_ALLOTMENT.FATHER_NAME,CLASS_ALLOTMENT.ROLL_NO,CLASS_ALLOTMENT.PRESENT_STD,"
						+ "CLASS_ALLOTMENT.PRESENT_DIV,CLASS_ALLOTMENT.PREVIOUS_DIV,CLASS_ALLOTMENT.REMARK_0 " + "FROM "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT OUTER JOIN " + sessionData.getDBName()
						+ "." + "HS_GENERAL_REGISTER "
						+ "ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
						+ "WHERE (HS_GENERAL_REGISTER.ORIGINAL_LC IS NULL OR HS_GENERAL_REGISTER.ORIGINAL_LC = 0) AND "
						+ "CLASS_ALLOTMENT.GR_NO NOT IN (SELECT CLASS_ALLOTMENT.GR_NO FROM " + sessionData.getDBName()
						+ "." + "CLASS_ALLOTMENT WHERE " + "CLASS_ALLOTMENT.PRESENT_STD IN ('" + std + "','"
						+ promoteStd + "') AND CLASS_ALLOTMENT.ACADEMIC_YEAR='" + promoteYear
						+ "' AND CLASS_ALLOTMENT.SECTION_NM='" + section + "') AND " + "CLASS_ALLOTMENT.PRESENT_STD='"
						+ std + "' AND CLASS_ALLOTMENT.PRESENT_DIV='" + div + "' AND CLASS_ALLOTMENT.SECTION_NM='"
						+ section + "' AND " + "CLASS_ALLOTMENT.ACADEMIC_YEAR='" + previousYear
						+ "' ORDER BY ROLL_NO * 1 ASC";
				logger.info("findPromoteStudentList == " + findQuery);

				logger.info("findPromoteStudentList query == " + findQuery);
				connectDatabase(sessionData);
				/*
				 * Class.forName(driver); try { connection = DriverManager.getConnection(url,
				 * user, pwd); } catch (Exception e) {
				 * logger.error("Database connectivity issue...");
				 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); }
				 */
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findQuery);

				while (resultSet.next()) {
					grDB = resultSet.getString("GR_NO");
					firstNameDb = resultSet.getString("FIRST_NAME") == null ? " "
							: (resultSet.getString("FIRST_NAME").trim());
					lastNameDb = resultSet.getString("LAST_NAME") == null ? " "
							: (resultSet.getString("LAST_NAME").trim());
					fatherNameDb = resultSet.getString("FATHER_NAME") == null ? " "
							: (resultSet.getString("FATHER_NAME").trim());
					nameDB = lastNameDb.trim() + " " + firstNameDb.trim() + " " + fatherNameDb.trim();
					rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
					if (rollNoDB.equalsIgnoreCase("")) {
						rollNoDB = "1";
					}
					presentStdDb = resultSet.getString("PRESENT_STD") == null ? " "
							: (resultSet.getString("PRESENT_STD").trim());
					presentDivDb = resultSet.getString("PRESENT_DIV") == null ? " "
							: (resultSet.getString("PRESENT_DIV").trim());
					previousDivDb = resultSet.getString("PREVIOUS_DIV") == null ? " "
							: (resultSet.getString("PREVIOUS_DIV").trim());
					remarkDivDb = resultSet.getString("REMARK_0") == null ? " "
							: (resultSet.getString("REMARK_0").trim());

					if (lastNameDb.equalsIgnoreCase("")) {
						lastNameDb = " ";
					}
					if (firstNameDb.equalsIgnoreCase("")) {
						firstNameDb = " ";
					}
					if (fatherNameDb.equalsIgnoreCase("")) {
						fatherNameDb = " ";
					}

					studentMap.put(grDB, nameDB + "|" + grDB + "|" + rollNoDB + "|" + promoteStd + "|" + presentDivDb
							+ "|" + lastNameDb + "|" + firstNameDb + "|" + fatherNameDb);
					// studentList.add(nameDB + "|" + grDB + "|" + presentStdDb + "|" + presentDivDb
					// + "|" + lastNameDb + "|" + firstNameDb + "|" + fatherNameDb);
					// logger.info("grDB=" + grDB);
					// logger.info("nameDB=" + nameDB);
					findFlag = true;
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentMap;
	}

	// /////Promote Class Allotment///////////////////////////////////
	public boolean promoteClass(SessionData sessionData, LinkedHashMap<String, String> studentList, String section,
			String academic, String previousStd, String previousDiv) throws Exception {

		logger.info("=======inside promoteClass========");

		try {
			String modifiedBy = "";
			String promoteClass = "";
			String updateHSDiv = "";
			String updateOptionalDiv = "";
			String updateMarksDiv = "";

			Set set = studentList.entrySet();
			Iterator i = set.iterator();

			connectDatabase(sessionData);
//			connection.setAutoCommit(false);
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				String studentDetail = me.getValue().toString();
				int tokenSize = 0;
				int n = 0;
				StringTokenizer st = new StringTokenizer(studentDetail, "|");
				tokenSize = st.countTokens();
				String[] studentDetails = new String[tokenSize];
				while (st.hasMoreTokens()) {
					studentDetails[n] = st.nextToken();
					n++;
				}

				String name = studentDetails[0];
				final String grNo = studentDetails[1];
				String roll = studentDetails[2];
				String presentStd = studentDetails[3];
				String presentDiv = studentDetails[4];
				String lastName = studentDetails[5];
				String firstName = studentDetails[6];
				String fatherName = studentDetails[7];

				promoteClass = "INSERT INTO " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
						+ "(GR_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,ROLL_NO,"
						+ "PRESENT_STD,PRESENT_DIV,PREVIOUS_DIV,DATE_ADMITTED,ACADEMIC_YEAR,REMARK_0,"
						+ "CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES ('" + grNo.trim().toUpperCase() + "','"
						+ lastName.trim().toUpperCase() + "','" + firstName.trim().toUpperCase() + "'," + "'"
						+ fatherName.trim().toUpperCase() + "','" + roll + "'," + "'" + presentStd.trim().toUpperCase()
						+ "','" + presentDiv.trim().toUpperCase() + "',''," + "SYSDATE(),'" + academic.trim()
						+ "','NEW'," + "SYSDATE(),'" + sessionData.getUserName().trim().toUpperCase() + "','"
						+ section.trim().toUpperCase() + "')";

				logger.info("promoteClass===>" + promoteClass);
				statement = connection.createStatement();
				statement.executeUpdate(promoteClass);
				logger.info("Class data updated successfully...");

				updateHSDiv = "UPDATE HS_GENERAL_REGISTER SET ACADEMIC_YEAR = '" + academic.trim().toUpperCase()
						+ "', PRESENT_DIV = '" + presentDiv.trim().toUpperCase() + "',PRESENT_STD = '"
						+ presentStd.trim().toUpperCase() + "'," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
						+ sessionData.getUserName().trim().toUpperCase() + "' " + " WHERE GR_NO='" + grNo.trim()
						+ "' AND SECTION_NM='" + section + "'";
				logger.info("updateHRDiv query===>" + updateHSDiv);
				statement = connection.createStatement();
				statement.executeUpdate(updateHSDiv);
				logger.info("Present_Div updated successfully in HS_GENERAL_REGISTER..." + grNo.trim());

				updateOptionalDiv = "INSERT INTO OPTIONAL_ALLOTMENT " + "(GR_NO,PRESENT_STD,PRESENT_DIV,ACADEMIC_YEAR,"
						+ "CREATED_BY,SECTION_NM,ROLL_NO,CREATED_DATE) " + "VALUES ('" + grNo.trim().toUpperCase()
						+ "','" + presentStd.trim().toUpperCase() + "','" + presentDiv.trim().toUpperCase() + "','"
						+ academic.trim().toUpperCase() + "','" + sessionData.getUserName().trim().toUpperCase()
						+ "','" + section.trim().toUpperCase() + "','" + roll + "',SYSDATE())";

				logger.info("updateHRDiv query===>" + updateOptionalDiv);
				statement = connection.createStatement();
				statement.executeUpdate(updateOptionalDiv);
				logger.info("Present_Div updated successfully in OPTIONAL_ALLOTMENT..." + grNo.trim());

				updateMarksDiv = "INSERT INTO MARKS_ENTRY "
						+ "(GR_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,ACADEMIC_YEAR,"
						+ "CREATED_BY,SECTION_NM,ROLL_NO,CREATED_DATE,CHANGED) " + "VALUES ('"
						+ grNo.trim().toUpperCase() + "','" + lastName.trim().toUpperCase() + "','"
						+ firstName.trim().toUpperCase() + "'," + "'" + fatherName.trim().toUpperCase() + "','"
						+ presentStd.trim().toUpperCase() + "','" + presentDiv.trim().toUpperCase() + "','"
						+ academic.trim().toUpperCase() + "','" + sessionData.getUserName().trim().toUpperCase()
						+ "','" + section.trim().toUpperCase() + "','" + roll + "',SYSDATE(),1)";

				logger.info("updateHRDiv query===>" + updateMarksDiv);
				statement = connection.createStatement();
				statement.executeUpdate(updateMarksDiv);

				String updateStatementData = "UPDATE STATEMENT_DATA SET ACADEMIC_YEAR = '"
						+ academic.trim().toUpperCase() + "', " + "PREVIOUS_DIV = '" + previousDiv.trim().toUpperCase()
						+ "',PREVIOUS_STD = '" + previousStd.trim().toUpperCase() + "'," + "PRESENT_DIV = '"
						+ presentDiv.trim().toUpperCase() + "',PRESENT_STD = '" + presentStd.trim().toUpperCase() + "',"
						+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + sessionData.getUserName().trim().toUpperCase()
						+ "' " + " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "'";

				logger.info("updateStatementData query===>" + updateStatementData);
				statement = connection.createStatement();
				statement.executeUpdate(updateStatementData);

				logger.info("Present_Div updated successfully..." + grNo.trim());
			}

			return true;
		} catch (Exception e) {
			logger.error("error updateClass = " + e);
			return false;
		}
//		finally {
//			closeDatabase(sessionData);
//		}
	}

	// /////Update Class Allotment///////////////////////////////////
	public boolean updateClass(SessionData sessionData, LinkedHashMap studentMap, String section, String academic,
			String allomentType) throws Exception {

		logger.info("=======inside updateClass========");

		try {
			String modifiedBy = "";
			String updateClass = "";
			String updateHSDiv = "";
			String updateOptionalDiv = "";
			String updateMarksDiv = "";
			String grNo = "";
			String rollNo = "";
			String presentDiv = "";
			String previousDiv = "";
			String remark = "";
			String gender = "";

			connectDatabase(sessionData);
			List<List<String>> l = new ArrayList<List<String>>(studentMap.keySet());
			for (int i = 0; i < studentMap.size(); i++) {
				if (allomentType.equalsIgnoreCase("Manual Roll No.")) {
					rollNo = ((LinkedHashMap) studentMap.get(l.get(i))).get("rollNo").toString();
					grNo = ((LinkedHashMap) studentMap.get(l.get(i))).get("gr").toString();
					presentDiv = ((LinkedHashMap) studentMap.get(l.get(i))).get("newDiv").toString();
					remark = ((LinkedHashMap) studentMap.get(l.get(i))).get("status").toString();
					gender = ((LinkedHashMap) studentMap.get(l.get(i))).get("gender").toString();
				} else {
					rollNo = ((LinkedHashMap) studentMap.get(l.get(i))).get("rollNo").toString();
					grNo = ((LinkedHashMap) studentMap.get(l.get(i))).get("gr").toString();
					previousDiv = ((LinkedHashMap) studentMap.get(l.get(i))).get("presentDiv").toString();
					presentDiv = ((LinkedHashMap) studentMap.get(l.get(i))).get("newDiv").toString();
					remark = ((LinkedHashMap) studentMap.get(l.get(i))).get("status").toString();
					gender = ((LinkedHashMap) studentMap.get(l.get(i))).get("gender").toString();
				}

				if (previousDiv.equalsIgnoreCase("")) {
					updateClass = "UPDATE CLASS_ALLOTMENT SET " + "ROLL_NO = " + Integer.parseInt(rollNo) + ","
							+ "PRESENT_DIV = '" + presentDiv.trim().toUpperCase() + "',REMARK_0 = '"
							+ remark.trim().toUpperCase() + "'," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
							+ modifiedBy.trim().toUpperCase() + "' " + " WHERE GR_NO='" + grNo.trim()
							+ "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='" + academic + "'";
				} else {
					updateClass = "UPDATE CLASS_ALLOTMENT SET " + "ROLL_NO = " + Integer.parseInt(rollNo) + ","
							+ "PREVIOUS_DIV = '" + previousDiv.trim().toUpperCase() + "'," + "PRESENT_DIV = '"
							+ presentDiv.trim().toUpperCase() + "',REMARK_0 = '" + remark.trim().toUpperCase() + "',"
							+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
							+ sessionData.getUserName().trim().toUpperCase() + "' " + " WHERE GR_NO='" + grNo.trim()
							+ "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='" + academic + "'";
				}
				statement = connection.createStatement();
				statement.executeUpdate(updateClass);
				logger.info("Class data updated successfully...");

				updateHSDiv = "UPDATE HS_GENERAL_REGISTER SET " + "PRESENT_DIV = '" + presentDiv.trim().toUpperCase()
						+ "'," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + modifiedBy.trim().toUpperCase() + "' "
						+ " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='"
						+ academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateHSDiv);

				updateOptionalDiv = "UPDATE OPTIONAL_ALLOTMENT SET " + "PRESENT_DIV = '"
						+ presentDiv.trim().toUpperCase() + "', ROLL_NO = " + Integer.parseInt(rollNo) + ","
						+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + modifiedBy.trim().toUpperCase() + "' "
						+ " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='"
						+ academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateOptionalDiv);

				updateMarksDiv = "UPDATE MARKS_ENTRY SET DIV_1 = '" + presentDiv.trim().toUpperCase() + "', ROLL_NO = "
						+ Integer.parseInt(rollNo) + "," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
						+ modifiedBy.trim().toUpperCase() + "', CHANGED = 1 " + " WHERE GR_NO='" + grNo.trim()
						+ "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='" + academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateMarksDiv);

				updateMarksDiv = "UPDATE RESULT_DATA SET DIV_1 = '" + presentDiv.trim().toUpperCase() + "', ROLL_NO = "
						+ Integer.parseInt(rollNo) + "," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
						+ modifiedBy.trim().toUpperCase() + "' " + " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='"
						+ section + "' AND ACADEMIC_YEAR='" + academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateMarksDiv);

				updateMarksDiv = "UPDATE " + sessionData.getDBName() + ".FEE_STATUS SET DIV_1 = '"
						+ presentDiv.trim().toUpperCase() + "', ROLL_NO = " + Integer.parseInt(rollNo) + ","
						+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + modifiedBy.trim().toUpperCase() + "' "
						+ " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='"
						+ academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateMarksDiv);

				updateMarksDiv = "UPDATE " + sessionData.getDBName() + ".FEES_DATA_MANDATORY SET DIV_1 = '"
						+ presentDiv.trim().toUpperCase() + "', ROLL_NO = " + Integer.parseInt(rollNo) + ","
						+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + modifiedBy.trim().toUpperCase() + "' "
						+ " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='"
						+ academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateMarksDiv);

				if (previousDiv.equalsIgnoreCase("")) {
					updateClass = "UPDATE STATEMENT_DATA SET PRESENT_DIV = '" + presentDiv.trim().toUpperCase() + "',"
							+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + modifiedBy.trim().toUpperCase() + "' "
							+ " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='"
							+ academic + "'";
				} else {
					updateClass = "UPDATE STATEMENT_DATA SET PREVIOUS_DIV = '" + previousDiv.trim().toUpperCase() + "',"
							+ "PRESENT_DIV = '" + presentDiv.trim().toUpperCase() + "',"
							+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + modifiedBy.trim().toUpperCase() + "' "
							+ " WHERE GR_NO='" + grNo.trim() + "' AND SECTION_NM='" + section + "' AND ACADEMIC_YEAR='"
							+ academic + "'";
				}
				statement = connection.createStatement();
				statement.executeUpdate(updateClass);
				logger.info("Present_Div updated successfully in STATEMENT_DATA..." + grNo.trim());

			}

			return true;
		} catch (Exception e) {
			logger.error("error updateClass = " + e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	// /////////Find Statement list////////////////////////////////////////
	public List<String> findStatementList(SessionData sessionData, String gr, String std, String div, String last,
			String first, String middle, String academicYear, String section) throws Exception {

		logger.info("=========findStatementList Query============");
		String grDB = "";
		String nameDB = "";
		String lastDB = "";
		String firstDB = "";
		String fatherDB = "";
		String findQuery = "";
		String rollNoDB = "";
		String presentDivDb = "";
		String presentStdDb = "";
		String addYearToQuery = "";
		String addRollToQuery = "";
		String previous_year = (Integer.parseInt(academicYear.substring(0, 4)) - 1) + "-"
				+ (Integer.parseInt(academicYear.substring(5, 7)) - 1);
		boolean findFlag = false;
		List studentList = new ArrayList();

		/// remove insertSectionCoulmn once added to all schools and updated create
		/// table query
		try {
			String insertSectionCoulmn = "ALTER TABLE statement_data ADD (ROLL_NO  VARCHAR(10))";
			logger.info("insert Section Column query == " + insertSectionCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(insertSectionCoulmn);
		} catch (Exception e) {
			logger.info("failed to create ROLL_NO column in STATEMENT_DATA table >>> " + e);
		}

		if (!academicYear.equalsIgnoreCase("") && !academicYear.equalsIgnoreCase("Year")) {
			addYearToQuery = " AND STATEMENT_DATA.ACADEMIC_YEAR = '" + academicYear + "'";
		}
		logger.info("addYearToQuery == " + addYearToQuery);

		try {

			////////// get previous std & div///////////
			String grPre, stdPre, divPre, hmapPreviousValue = null;
			HashMap<String, String> hmapPrevious = new HashMap<String, String>();
			String previousYearQuery = "SELECT GR_NO,PRESENT_STD,PRESENT_DIV FROM " + sessionData.getDBName() + "."
					+ "CLASS_ALLOTMENT " + "WHERE ACADEMIC_YEAR='" + previous_year + "' AND SECTION_NM='" + section
					+ "'";
			logger.info("previousYearQuery == " + previousYearQuery);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(previousYearQuery);

			while (resultSet.next()) {
				grPre = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				stdPre = resultSet.getString("PRESENT_STD") == null ? " " : (resultSet.getString("PRESENT_STD").trim());
				divPre = resultSet.getString("PRESENT_DIV") == null ? " " : (resultSet.getString("PRESENT_DIV").trim());

				hmapPrevious.put(grPre, stdPre + "|" + divPre);
			}

			////////// get present std & div///////////
			String grPresent, stdPresent, divPresent, hmapPresentValue = null;
			HashMap<String, String> hmapPresent = new HashMap<String, String>();
			String presentYearQuery = "SELECT GR_NO,PRESENT_STD,PRESENT_DIV FROM " + sessionData.getDBName() + "."
					+ "CLASS_ALLOTMENT " + "WHERE ACADEMIC_YEAR='" + academicYear + "' AND SECTION_NM='" + section
					+ "'";
			logger.info("presentYearQuery == " + presentYearQuery);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(presentYearQuery);

			while (resultSet.next()) {
				grPresent = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				stdPresent = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				divPresent = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());

				hmapPresent.put(grPresent, stdPresent + "|" + divPresent);
			}
			//// insert new students into statement data
			String grPrevious = "";
			String previousStdNew = "";
			String previousDivNew = "";
			String presentStdNew = "";
			String presentDivNew = "";
			String rollNew = "";
			String newStudentInStatement = "SELECT ROLL_NO,GR_NO,PRESENT_STD,PRESENT_DIV FROM "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT " + "WHERE GR_NO NOT IN (SELECT GR_NO FROM "
					+ sessionData.getDBName() + "." + "STATEMENT_DATA " + "WHERE ACADEMIC_YEAR='" + academicYear
					+ "') AND ACADEMIC_YEAR='" + academicYear + "' AND SECTION_NM='" + section + "'";
			logger.info("newStudentInStatement == " + newStudentInStatement);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentInStatement);

			while (resultSet.next()) {
				grPrevious = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				rollNew = resultSet.getString("ROLL_NO") == null ? "0" : (resultSet.getString("ROLL_NO").trim());
				hmapPreviousValue = hmapPrevious.get(grPrevious);
				hmapPresentValue = hmapPresent.get(grPrevious);
				if (hmapPreviousValue != null) {
					previousStdNew = hmapPreviousValue.substring(0, hmapPreviousValue.indexOf("|"));
					previousDivNew = hmapPreviousValue.substring(hmapPreviousValue.lastIndexOf("|") + 1);
				}
				if (hmapPresent != null) {
					presentStdNew = hmapPresentValue.substring(0, hmapPresentValue.indexOf("|"));
					presentDivNew = hmapPresentValue.substring(hmapPresentValue.lastIndexOf("|") + 1);
				}

				String updateNewStudent = "INSERT INTO statement_data "
						+ "(ROLL_NO,GR_NO,PREVIOUS_STD,PREVIOUS_DIV,PRESENT_STD,PRESENT_DIV,"
						+ "ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES ('" + rollNew + "','"
						+ grPrevious + "','" + previousStdNew + "','" + previousDivNew + "','" + presentStdNew + "','"
						+ presentDivNew + "','" + academicYear + "',SYSDATE(),'" + sessionData.getUserName() + "','"
						+ section.trim().toUpperCase() + "')";

				logger.info("updateNewStudent query===>" + updateNewStudent);
				statement = connection.createStatement();
				statement.executeUpdate(updateNewStudent);
			}

			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE STATEMENT_DATA.GR_NO='"
						+ gr.trim() + "' AND STATEMENT_DATA.SECTION_NM='" + section
						+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0) " + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 1 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE UPPER (LAST_NAME) LIKE UPPER('%"
						+ last.trim() + "%') AND " + "UPPER (FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND UPPER(FATHER_NAME) LIKE UPPER('%" + middle.trim() + "%')"
						+ " AND STATEMENT_DATA.PRESENT_STD='" + std.trim() + "' AND STATEMENT_DATA.PRESENT_DIV='"
						+ div.trim() + "' AND STATEMENT_DATA.SECTION_NM='" + section
						+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)" + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 2 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE UPPER(LAST_NAME) LIKE UPPER('%"
						+ last.trim() + "%') AND " + " UPPER(FIRST_NAME) LIKE UPPER('%" + first.trim()
						+ "%') AND STATEMENT_DATA.PRESENT_STD='" + std.trim() + "' AND STATEMENT_DATA.PRESENT_DIV='"
						+ div.trim() + "' AND STATEMENT_DATA.SECTION_NM='" + section
						+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)" + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 3 == " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE UPPER(FIRST_NAME) LIKE UPPER('%"
						+ first.trim() + "%') AND STATEMENT_DATA.PRESENT_STD='" + std.trim()
						+ "' AND STATEMENT_DATA.PRESENT_DIV='" + div.trim() + "' AND STATEMENT_DATA.SECTION_NM='"
						+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)" + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 4 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE UPPER (LAST_NAME) LIKE UPPER ('%"
						+ last.trim() + "%') AND STATEMENT_DATA.PRESENT_STD='" + std.trim()
						+ "' AND STATEMENT_DATA.PRESENT_DIV='" + div.trim() + "' AND STATEMENT_DATA.SECTION_NM='"
						+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)" + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 5 == " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE UPPER(FATHER_NAME) LIKE UPPER('%"
						+ middle.trim() + "%') AND STATEMENT_DATA.PRESENT_STD='" + std.trim()
						+ "' AND STATEMENT_DATA.PRESENT_DIV='" + div.trim() + "' AND STATEMENT_DATA.SECTION_NM='"
						+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)" + addYearToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 6 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
						+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO, STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,"
						+ "PREVIOUS_DIV,STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV, DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
						+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,HS_GENERAL_REGISTER.SUID AS SUID "
						+ " FROM " + sessionData.getDBName() + "." + "STATEMENT_DATA LEFT JOIN "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
						+ "HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO "
						+ "AND HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM WHERE STATEMENT_DATA.PRESENT_STD = '"
						+ std.trim() + "' AND STATEMENT_DATA.PRESENT_DIV = '" + div.trim()
						+ "' AND STATEMENT_DATA.SECTION_NM='" + section
						+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)" + addYearToQuery + addRollToQuery
						+ " ORDER BY ROLL_NO * 1 ASC";
				logger.info("findStatementList 7 == " + findQuery);
			}

			logger.info("findStatementList query == " + findQuery);
			connectDatabase(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			String academic_year, failed_previous, previous_std, previous_div, freeship_date, tuition_fee, adm_fee,
					term_fee, annual_income, rural_urban, income_certificate, no_child, working_days, attended_days,
					suid = "";
			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				lastDB = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				firstDB = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME").trim());
				fatherDB = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				nameDB = lastDB + " " + firstDB + " " + fatherDB;
				academic_year = resultSet.getString("ACADEMIC_YEAR") == null ? " "
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				failed_previous = resultSet.getString("FAILED_PREVIOUS") == null ? " "
						: (resultSet.getString("FAILED_PREVIOUS").trim());
				failed_previous = cm.ifNullThenSpace(failed_previous);
				previous_std = resultSet.getString("PREVIOUS_STD") == null ? " "
						: (resultSet.getString("PREVIOUS_STD").trim());
				previous_std = cm.ifNullThenSpace(previous_std);
				previous_div = resultSet.getString("PREVIOUS_DIV") == null ? " "
						: (resultSet.getString("PREVIOUS_DIV").trim());
				previous_div = cm.ifNullThenSpace(previous_div);
				freeship_date = resultSet.getString("FREESHIP_DATE") == null ? " "
						: (resultSet.getString("FREESHIP_DATE").trim());
				freeship_date = cm.ifNullThenSpace(freeship_date);
				tuition_fee = resultSet.getString("TUITION_FEE") == null ? " "
						: (resultSet.getString("TUITION_FEE").trim());
				tuition_fee = cm.ifNullThenSpace(tuition_fee);
				adm_fee = resultSet.getString("ADM_FEE") == null ? " " : (resultSet.getString("ADM_FEE").trim());
				adm_fee = cm.ifNullThenSpace(adm_fee);
				term_fee = resultSet.getString("TERM_FEE") == null ? " " : (resultSet.getString("TERM_FEE").trim());
				term_fee = cm.ifNullThenSpace(term_fee);
				annual_income = resultSet.getString("ANNUAL_INCOME") == null ? " "
						: (resultSet.getString("ANNUAL_INCOME").trim());
				annual_income = cm.ifNullThenSpace(annual_income);
				rural_urban = resultSet.getString("RURAL_URBAN") == null ? " "
						: (resultSet.getString("RURAL_URBAN").trim());
				rural_urban = cm.ifNullThenSpace(rural_urban);
				income_certificate = resultSet.getString("INCOME_CERTIFICATE") == null ? " "
						: (resultSet.getString("INCOME_CERTIFICATE").trim());
				income_certificate = cm.ifNullThenSpace(income_certificate);
				no_child = resultSet.getString("NO_CHILD") == null ? " " : (resultSet.getString("NO_CHILD").trim());
				no_child = cm.ifNullThenSpace(no_child);
				working_days = resultSet.getString("WORKING_DAYS") == null ? " "
						: (resultSet.getString("WORKING_DAYS").trim());
				working_days = cm.ifNullThenSpace(working_days);
				attended_days = resultSet.getString("ATTENDED_DAYS") == null ? " "
						: (resultSet.getString("ATTENDED_DAYS").trim());
				attended_days = cm.ifNullThenSpace(attended_days);
				suid = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());
				suid = cm.ifNullThenSpace(suid);

				nameDB = nameDB.replace(" ", "*");
				if (!nameDB.trim().equalsIgnoreCase("") && !nameDB.trim().equalsIgnoreCase("**")) {
					studentList
							.add(nameDB + "|" + grDB + "|" + academic_year + "|" + failed_previous + "|" + previous_std
									+ "|" + previous_div + "|" + freeship_date + "|" + tuition_fee + "|" + adm_fee + "|"
									+ term_fee + "|" + annual_income + "|" + rural_urban + "|" + income_certificate
									+ "|" + no_child + "|" + working_days + "|" + attended_days + "|" + suid);
				}
				// logger.info("grDB=" + grDB);
				// logger.info("nameDB=" + nameDB);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentList;
	}

	public int getDistinctCount(SessionData sessionData, String table_name, String distinct_column, String std,
			String div, String academic) throws Exception {

		logger.info("======inside getYearDataCount==========");
		int distinctCountDb = 0;
		try {
			// String query =
			// "SELECT COUNT(DISTINCT "+distinct_column+") AS DISTINCT_COUNT
			// FROM "+sessionData.getDBName()+"."+""+table_name+" "
			// +
			// "WHERE PRESENT_STD = '"+std+"' AND PRESENT_DIV = '"+div+"' AND
			// (REMARK_0 IS NULL OR REMARK_0 = 'EXISTING') ORDER BY ROLL_NO";
			String query = "SELECT COUNT(DISTINCT " + distinct_column + ") AS DISTINCT_COUNT FROM "
					+ sessionData.getDBName() + "." + table_name + " " + "WHERE PRESENT_STD = '" + std
					+ "' AND PRESENT_DIV = '" + div + "' AND ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='"
					+ sessionData.getSectionName() + "' ORDER BY " + table_name + ".ROLL_NO * 1";
			logger.info(query);
			connectDatabase(sessionData);
			/*
			 * Class.forName(driver); try { connection = DriverManager.getConnection(url,
			 * user, pwd); } catch (Exception e) {
			 * logger.error("Database connectivity issue...");
			 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); }
			 */
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				distinctCountDb = Integer.parseInt(resultSet.getString("DISTINCT_COUNT"));
			}
			logger.info("distinctCountDb=" + distinctCountDb);
		} catch (Exception e) {
			cm.logException(e);
		}
//		finally {
//			closeDatabase(sessionData);
//		}
		return distinctCountDb;
	}

	// /////////Find Subject list////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findNewSubList(SessionData sessionData,
			String academicYear, String std, LinkedHashMap subjectMap) throws Exception {

		logger.info("=========findNewSubList Query============");
		String findQuery = "";
		String subDB = "";
		String stdDB = "";
		String subTitleDB = "";
		String optionDB = "";
		String gradeDB = "";
		boolean findFlag = false;
		String order_no = "";
		try {

			findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
					+ "SUBJECT WHERE SUBJECT_NAME NOT IN (SELECT SUBJECT_NAME " + "FROM " + sessionData.getDBName()
					+ "." + "SUBJECT_ALLOTMENT WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academicYear + "' "
					+ "AND (SECTION_NM='" + sessionData.getSectionName() + "')) " + "AND STD_1='" + std
					+ "' AND ACADEMIC_YEAR='" + academicYear + "' AND (SECTION_NM='" + sessionData.getSectionName()
					+ "' OR SECTION_NM IS NULL) " + "ORDER BY SUBJECT.ORDER_NO ASC";
			logger.info("findQuery 1 == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				LinkedHashMap subMaxMinMap = new LinkedHashMap();
				subDB = resultSet.getString("SUBJECT_NAME");
				stdDB = resultSet.getString("STD_1");
				subTitleDB = resultSet.getString("SUBJECT_TITLE");
				optionDB = resultSet.getString("OPTIONAL");
				gradeDB = resultSet.getString("MARKS_GRADE");
				order_no = resultSet.getString("ORDER_NO");

				subMaxMinMap.put("subject_name", subDB);
				subMaxMinMap.put("subject_status", "new");
				subMaxMinMap.put("subject_title", subTitleDB);
				subMaxMinMap.put("marks_grade", gradeDB);
				subMaxMinMap.put("optional", optionDB);
				subMaxMinMap.put("sem1_dobs", "0");
				subMaxMinMap.put("sem1_obt", "0");
				subMaxMinMap.put("sem1_oral", "0");
				subMaxMinMap.put("sem1_assign", "0");
				subMaxMinMap.put("sem1_write", "0");
				subMaxMinMap.put("sem1_pract", "0");
				subMaxMinMap.put("sem1_pres", "0");
				subMaxMinMap.put("sem1_mcap", "0");
				subMaxMinMap.put("sem1_activity", "0");
				subMaxMinMap.put("sem1_project", "0");
				subMaxMinMap.put("sem1_other", "0");
				subMaxMinMap.put("sem1_oral1", "0");
				subMaxMinMap.put("sem1_pract1", "0");
				subMaxMinMap.put("sem1_write1", "0");
				subMaxMinMap.put("sem2_dobs", "0");
				subMaxMinMap.put("sem2_obt", "0");
				subMaxMinMap.put("sem2_oral", "0");
				subMaxMinMap.put("sem2_assign", "0");
				subMaxMinMap.put("sem2_write", "0");
				subMaxMinMap.put("sem2_pract", "0");
				subMaxMinMap.put("sem2_pres", "0");
				subMaxMinMap.put("sem2_mcap", "0");
				subMaxMinMap.put("sem2_activity", "0");
				subMaxMinMap.put("sem2_project", "0");
				subMaxMinMap.put("sem2_other", "0");
				subMaxMinMap.put("sem2_oral1", "0");
				subMaxMinMap.put("sem2_pract1", "0");
				subMaxMinMap.put("sem2_write1", "0");

				subMaxMinMap.put("sem1_dobs_ct", "0");
				subMaxMinMap.put("sem1_obt_ct", "0");
				subMaxMinMap.put("sem1_oral_ct", "0");
				subMaxMinMap.put("sem1_assign_ct", "0");
				subMaxMinMap.put("sem1_write_ct", "0");
				subMaxMinMap.put("sem1_pract_ct", "0");
				subMaxMinMap.put("sem1_pres_ct", "0");
				subMaxMinMap.put("sem1_mcap_ct", "0");
				subMaxMinMap.put("sem1_activity_ct", "0");
				subMaxMinMap.put("sem1_project_ct", "0");
				subMaxMinMap.put("sem1_other_ct", "0");
				subMaxMinMap.put("sem1_oral1_ct", "0");
				subMaxMinMap.put("sem1_pract1_ct", "0");
				subMaxMinMap.put("sem1_write1_ct", "0");
				subMaxMinMap.put("sem2_dobs_ct", "0");
				subMaxMinMap.put("sem2_obt_ct", "0");
				subMaxMinMap.put("sem2_oral_ct", "0");
				subMaxMinMap.put("sem2_assign_ct", "0");
				subMaxMinMap.put("sem2_write_ct", "0");
				subMaxMinMap.put("sem2_pract_ct", "0");
				subMaxMinMap.put("sem2_pres_ct", "0");
				subMaxMinMap.put("sem2_mcap_ct", "0");
				subMaxMinMap.put("sem2_activity_ct", "0");
				subMaxMinMap.put("sem2_activity_ct", "0");
				subMaxMinMap.put("sem2_project_ct", "0");
				subMaxMinMap.put("sem2_other_ct", "0");
				subMaxMinMap.put("sem2_oral1_ct", "0");
				subMaxMinMap.put("sem2_pract1_ct", "0");
				subMaxMinMap.put("sem2_write1_ct", "0");

				subMaxMinMap.put("order_no", order_no);
				subjectMap.put(subDB, subMaxMinMap);
				findFlag = true;
			}
			logger.info("findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return subjectMap;
	}

	// /////////Find Subject order map////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findSubjectOrderMap(SessionData sessionData,
			String academicYear, String std) throws Exception {

		logger.info("=========findSubjectOrderMap Query============");
		String findQuery = "";
		String subDB = "";
		String stdDB = "";
		String subTitleDB = "";
		String optionDB = "";
		String gradeDB = "";
		boolean findFlag = false;
		String order_no = "";
		LinkedHashMap subjectOrderMap = new LinkedHashMap();
		try {

			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT WHERE STD_1='" + std + "' "
					+ "AND ACADEMIC_YEAR='" + academicYear + "' AND (SECTION_NM='" + sessionData.getSectionName()
					+ "' OR SECTION_NM IS NULL) " + "ORDER BY SUBJECT.ORDER_NO ASC";
			logger.info("findQuery 1 == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				subDB = resultSet.getString("SUBJECT_NAME");
				order_no = resultSet.getString("ORDER_NO");

				subjectOrderMap.put(subDB, order_no);
				findFlag = true;
			}
			logger.info("findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return subjectOrderMap;
	}

	// /////////Find Subject title list////////////////////////////////////////
	public List<String> findSubjectTitleList(SessionData sessionData, String std, String optional, String academicYear)
			throws Exception {

		logger.info("=========findSubjectTitleList Query============");
		String findQuery = "";
		String subTitleDB = "";
		boolean findFlag = false;
		List<String> subTitleList = new ArrayList<String>();

		try {
			if (std.equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT UPPER(SUBJECT_TITLE) AS SUBJECT_TITLE,ORDER_NO " + "FROM "
						+ sessionData.getDBName() + "." + "SUBJECT  WHERE ACADEMIC_YEAR='" + academicYear + "' AND "
						+ "SECTION_NM='" + sessionData.getSectionName() + "' ORDER BY ORDER_NO ASC";
			} else if (optional.equalsIgnoreCase("YES")) {
				findQuery = "SELECT DISTINCT UPPER(SUBJECT_TITLE) AS SUBJECT_TITLE,ORDER_NO " + "FROM "
						+ sessionData.getDBName() + "." + "SUBJECT WHERE STD_1 = '" + std
						+ "' AND OPTIONAL = 'YES' AND ACADEMIC_YEAR='" + academicYear + "' AND SECTION_NM='"
						+ sessionData.getSectionName() + "' " + "ORDER BY ORDER_NO ASC";
			} else if (optional.equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT UPPER(SUBJECT_TITLE) AS SUBJECT_TITLE,ORDER_NO " + "FROM "
						+ sessionData.getDBName() + "." + "SUBJECT WHERE STD_1 = '" + std + "' AND ACADEMIC_YEAR='"
						+ academicYear + "' AND SECTION_NM='" + sessionData.getSectionName()
						+ "' ORDER BY ORDER_NO  ASC";
			}

			if (academicYear.equalsIgnoreCase("") && optional.equalsIgnoreCase("")) {
				findQuery = findQuery.replace("AND ACADEMIC_YEAR='" + academicYear + "'", "");
			}

			logger.info("findSubTitleList query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			subTitleList.add("SELECT SUBJECT TITLE");
			subTitleList.add("CREATE NEW TITLE");

			while (resultSet.next()) {
				subTitleDB = resultSet.getString("SUBJECT_TITLE");
				if (!subTitleList.contains(subTitleDB)) {
					addRemarkColumn(sessionData, subTitleDB);
					subTitleList.add(subTitleDB);
					findFlag = true;
				}
			}
			logger.info("subTitleList size ::" + subTitleList.size());
			logger.info("findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return subTitleList;
	}

	// /////////Find group name list////////////////////////////////////////
	public TreeMap<String, String> fetchSubjectGroupList(SessionData sessionData, String std, String academicYear)
			throws Exception {

		logger.info("=========fetchSubjectGroupList Query============");
		String findQuery = "";
		String subNameDB = "";
		String groupNameDB = "";
		boolean findFlag = false;
		TreeMap tm = new TreeMap();

		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT WHERE STD_1 = '" + std + "' AND "
					+ "ACADEMIC_YEAR='" + academicYear + "' AND (SECTION_NM='" + sessionData.getSectionName() + "')";
			logger.info("fetchSubjectGroupList query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				subNameDB = resultSet.getString("SUBJECT_NAME") == null ? "NA"
						: (resultSet.getString("SUBJECT_NAME").trim());
				groupNameDB = resultSet.getString("GROUP_NAME") == null ? "NA"
						: (resultSet.getString("GROUP_NAME").trim());
				tm.put(subNameDB, groupNameDB);
				findFlag = true;
			}
			logger.info("fetchSubjectGroupList findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return tm;
	}

	// /////////Find Subject list////////////////////////////////////////
	public List<String> fetchSubjectList(SessionData sessionData, String std, String academicYear) throws Exception {

		logger.info("=========findSubjectList Query============");
		String findQuery = "";
		String subNameDB = "";
		String subTitleDB = "";
		String marksGradeDB = "";
		String optionalDB = "";
		String groupNameDB = "";
		boolean findFlag = false;
		List<String> subjectList = new ArrayList<String>();

		try {

			try {
				String modifyVarcharSizeColumn = "ALTER TABLE SUBJECT  MODIFY COLUMN SUBJECT_NAME VARCHAR(100), "
						+ "MODIFY COLUMN SUBJECT_TITLE VARCHAR(100)";
				logger.info("modify varchar size Column query == " + modifyVarcharSizeColumn);
				statement = connection.createStatement();
				statement.executeUpdate(modifyVarcharSizeColumn);
			} catch (Exception e) {
				logger.warn("failed to modify varchar size Column query in SUBJECT table >>> " + e);
			}

			try {
				String modifyVarcharSizeColumn = "ALTER TABLE SUBJECT_ALLOTMENT  MODIFY COLUMN SUBJECT_NAME VARCHAR(100), "
						+ "MODIFY COLUMN SUBJECT_TITLE VARCHAR(100)";
				logger.info("modify varchar size Column query == " + modifyVarcharSizeColumn);
				statement = connection.createStatement();
				statement.executeUpdate(modifyVarcharSizeColumn);
			} catch (Exception e) {
				logger.warn("failed to modify varchar size Column query in subject_allotment table >>> " + e);
			}

			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT WHERE STD_1 = '" + std + "' AND "
					+ "ACADEMIC_YEAR='" + academicYear + "' AND (SECTION_NM='" + sessionData.getSectionName() + "')";
			logger.info("findSubjectList query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				subNameDB = resultSet.getString("SUBJECT_NAME");
				subTitleDB = resultSet.getString("SUBJECT_TITLE");
				marksGradeDB = resultSet.getString("MARKS_GRADE");
				optionalDB = resultSet.getString("OPTIONAL");
				groupNameDB = resultSet.getString("GROUP_NAME");

				if (groupNameDB.equalsIgnoreCase("")) {
					groupNameDB = " ";
				}
				subjectList
						.add(subNameDB + "|" + subTitleDB + "|" + marksGradeDB + "|" + optionalDB + "|" + groupNameDB);
				findFlag = true;
			}
			logger.info("subTitleList size ::" + subjectList.size());
			logger.info("findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return subjectList;
	}

	// /////////Find Header////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> fetchHeaderMap(SessionData sessionData)
			throws Exception {

		String findQuery = "";
		String institute = "";
		String mainHead = "";
		String addHead = "";
		String shortName = "";
		boolean findFlag = false;
		LinkedHashMap<String, LinkedHashMap<String, String>> headerMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();

		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SCHOOL_HEAD";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> headerDetails = new LinkedHashMap<String, String>();
				institute = resultSet.getString("HEAD_1");
				headerDetails.put("institute", institute);
				mainHead = resultSet.getString("HEAD_2");
				headerDetails.put("mainHead", mainHead);
				addHead = resultSet.getString("HEAD_3");
				headerDetails.put("addHead", addHead);
				shortName = resultSet.getString("SHORT_NAME");
				headerDetails.put("shortName", shortName);
				headerMap.put(shortName, headerDetails);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return headerMap;
	}

	// /////////Find Header////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> fetchMultipleHeadMap(SessionData sessionData,
			String academic, String std, String feeHead) throws Exception {

		String findQuery = "", fees_name = "", sub_fees_name = "", amount = "", condition = "";
		boolean findFlag = false;
		LinkedHashMap<String, LinkedHashMap<String, String>> headerMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();

		try {
			logger.info("======fetchMultipleHeadMap=====");
			if (!feeHead.equalsIgnoreCase("")) {
				condition = " AND FEES_NAME='" + feeHead + "'";
			}
			if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
				condition = condition + " AND STD_1='" + std + "' ";
			}
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "MULTIPLE_HEAD WHERE ACADEMIC_YEAR='"
					+ academic + "' and " + "SECTION_NM='" + sessionData.getSectionName() + "'" + condition;
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> headerDetails = new LinkedHashMap<String, String>();
				fees_name = resultSet.getString("FEES_NAME");
				headerDetails.put("fees_name", fees_name);
				sub_fees_name = resultSet.getString("SUB_FEES_NAME");
				headerDetails.put("sub_fees_name", sub_fees_name);
				amount = resultSet.getString("AMOUNT");
				headerDetails.put("amount", amount);
				headerMap.put(sub_fees_name, headerDetails);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return headerMap;
	}

	// /////Add Subject///////////////////////////////////
	public boolean addSubject(String subjectName, String subTitle, String mark_grade, String optional,
			String academicYear, String std, SessionData sessionData, String groupName, boolean isUpdate,
			String section, String oldSubName, String oldSubTitle) throws Exception {

//		logger.info("=======inside updateSubject========");
		String createdBy = sessionData.getUserName();
		String insertSubject = "";
		String addUpdate = "added";
		boolean retFlag = false;
		boolean validateSubject = false;

		try {
//			logger.info("DB Connection created : "+connectDatabase(sessionData));
			if (subjectName.trim().contains(" ")) {
				subjectName = subjectName.trim().replace(" ", "_");
			} else if (subjectName.trim().contains("-")) {
				subjectName = subjectName.trim().replace("-", "_");
			}

			/// remove insertSectionCoulmn once added to all schools and updated create
			/// table query
			try {
				String insertSectionCoulmn = "ALTER TABLE SUBJECT ADD (SECTION_NM  VARCHAR(10),"
						+ "MODIFIED_DATE  DATETIME ON UPDATE CURRENT_TIMESTAMP, MODIFIED_BY  VARCHAR(200))";
				statement = connection.createStatement();
				statement.executeUpdate(insertSectionCoulmn);
			} catch (Exception e) {
				logger.info("failed to create SECTION_NM column in subject table >>> " + e);
			}

			try {
				String insertSectionCoulmn = "ALTER TABLE SUBJECT_ALLOTMENT ADD (SECTION_NM  VARCHAR(10))";
				statement = connection.createStatement();
				statement.executeUpdate(insertSectionCoulmn);
			} catch (Exception e) {
				logger.info("failed to create SECTION_NM column in SUBJECT_ALLOTMENT table >> " + e);
			}

			try {
				String alterTableEngine = "ALTER TABLE `MARKS_ENTRY` ENGINE = MYISAM";
				statement = connection.createStatement();
				statement.executeUpdate(alterTableEngine);
			} catch (Exception e) {
				logger.info("failed to create SECTION_NM column in SUBJECT_ALLOTMENT table >> " + e);
			}

			try {
				String insertSectionCoulmn = "ALTER TABLE SUBJECT_ALLOTMENT ADD (SEM1_DOBS_CT  TEXT,SEM1_OBT_CT  TEXT,SEM1_ORAL_CT  TEXT,"
						+ "SEM1_ASSIGN_CT  TEXT,SEM1_WRITE_CT  TEXT,SEM1_PRACT_CT  TEXT,SEM2_DOBS_CT  TEXT,"
						+ "SEM2_OBT_CT  TEXT,SEM2_ORAL_CT  TEXT,SEM2_ASSIGN_CT  TEXT,"
						+ "SEM2_WRITE_CT  TEXT,SEM2_PRACT_CT  TEXT)";
				logger.info("insert Section Column query == " + insertSectionCoulmn);
				statement = connection.createStatement();
				statement.executeUpdate(insertSectionCoulmn);
			} catch (Exception e) {
				logger.info("failed to create convert to columns in SUBJECT_ALLOTMENT table >> " + e);
			}

			try {
				String insertSectionCoulmn = "ALTER TABLE SUBJECT_ALLOTMENT ADD (SEM1_PRES_CT  TEXT,"
						+ "SEM1_MCAP_CT  TEXT,SEM1_ACTIVITY_CT  TEXT,"
						+ "SEM1_PROJECT_CT  TEXT,SEM1_OTHER_CT  TEXT,SEM1_ORAL1_CT  TEXT,"
						+ "SEM1_PRACT1_CT  TEXT,SEM1_WRITE1_CT  TEXT,"
						+ "SEM2_PRES_CT  TEXT,SEM2_MCAP_CT  TEXT," + "SEM2_ACTIVITY_CT  TEXT,"
						+ "SEM2_PROJECT_CT  TEXT,SEM2_OTHER_CT  TEXT,SEM2_ORAL1_CT  TEXT,"
						+ "SEM2_PRACT1_CT  TEXT,SEM2_WRITE1_CT  TEXT)";
				logger.info("insert Section Column query == " + insertSectionCoulmn);
				statement = connection.createStatement();
				statement.executeUpdate(insertSectionCoulmn);
			} catch (Exception e) {
				logger.info("failed to create convert to columns in SUBJECT_ALLOTMENT table >> " + e);
			}

			try {
				String insertSectionCoulmn = "ALTER TABLE SUBJECT_ALLOTMENT ADD (SEM1_PRES  TEXT,"
						+ "SEM1_MCAP  TEXT,SEM1_ACTIVITY  TEXT,"
						+ "SEM1_PROJECT  TEXT,SEM1_OTHER  TEXT,SEM1_ORAL1  TEXT,"
						+ "SEM1_PRACT1  TEXT,SEM1_WRITE1  TEXT,"
						+ "SEM2_PRES  TEXT,SEM2_MCAP  TEXT," + "SEM2_ACTIVITY  TEXT,"
						+ "SEM2_PROJECT  TEXT,SEM2_OTHER  TEXT,SEM2_ORAL1  TEXT,"
						+ "SEM2_PRACT1  TEXT,SEM2_WRITE1  TEXT)";
				logger.info("insert Section Column query == " + insertSectionCoulmn);
				statement = connection.createStatement();
				statement.executeUpdate(insertSectionCoulmn);
			} catch (Exception e) {
				logger.info("failed to create convert to columns in SUBJECT_ALLOTMENT table >> " + e);
			}

			try {
				String insertSectionCoulmn = "ALTER TABLE SUBJECT_ALLOTMENT ADD (SEM1_LISTEN  TEXT,SEM1_LISTEN_CT  TEXT,SEM2_LISTEN  TEXT,SEM2_LISTEN_CT  TEXT,"
						+ "SEM1_SPEAK  TEXT,SEM1_SPEAK_CT  TEXT,SEM2_SPEAK  TEXT,SEM2_SPEAK_CT  TEXT,"
						+ "SEM1_ASSIGN1  TEXT,SEM1_ASSIGN1_CT  TEXT,SEM2_ASSIGN1  TEXT,SEM2_ASSIGN1_CT  TEXT,"
						+ "SEM1_INTOT  TEXT,SEM1_INTOT_CT  TEXT,SEM2_INTOT  TEXT,SEM2_INTOT_CT  TEXT)";
				logger.info("insert Section Column query == " + insertSectionCoulmn);
				statement = connection.createStatement();
				statement.executeUpdate(insertSectionCoulmn);
			} catch (Exception e) {
				logger.info("failed to create convert to columns in SUBJECT_ALLOTMENT table >> " + e);
			}

			try {
				/// insert subject column
				insertColumn(sessionData, "", subjectName.trim().toUpperCase(), subTitle.trim().toUpperCase());
			} catch (Exception e) {
				logger.info("inserting columns to marks entry & result data table failed >> " + e);
			}
			// ////////////////////////////////////////////////
			if (!isUpdate) {
				String findSubQuery = "SELECT DISTINCT SUBJECT_NAME " + "FROM " + sessionData.getDBName() + "."
						+ "SUBJECT WHERE SUBJECT_NAME='" + subjectName.toUpperCase() + "' AND STD_1='" + std
						+ "' AND ACADEMIC_YEAR='" + academicYear + "' " + "AND (SECTION_NM='" + section
						+ "' OR SECTION_NM IS NULL)";

				logger.info("findSubQuery before dbConn == " + findSubQuery);
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findSubQuery);
				String subNameDB = "";
				while (resultSet.next()) {
					subNameDB = resultSet.getString("SUBJECT_NAME");
					validateSubject = true;
				}

				logger.info("validateSubject=" + validateSubject);
			}

			logger.info("before insert");
			if (!validateSubject) {
				if (isUpdate) {
					addUpdate = "updated";
					insertSubject = "Update SUBJECT set " + "SUBJECT_NAME='" + subjectName.trim().toUpperCase() + "',"
							+ "SUBJECT_TITLE='" + subTitle.trim().toUpperCase() + "'," + "MARKS_GRADE='"
							+ mark_grade.trim().toUpperCase() + "'," + "OPTIONAL='" + optional.trim().toUpperCase()
							+ "'," + "GROUP_NAME='" + groupName.trim().toUpperCase() + "',SECTION_NM='" + section + "',"
							+ "MODIFIED_BY='" + createdBy.trim().toUpperCase() + "',"
							+ "MODIFIED_DATE=SYSDATE() where (SECTION_NM='" + section + "' OR SECTION_NM IS NULL) "
							+ "AND SUBJECT_NAME='" + oldSubName + "' " + "AND ACADEMIC_YEAR='" + academicYear
							+ "' AND STD_1='" + std + "'";

					logger.info("insertSubject query===>" + insertSubject);
					statement = connection.createStatement();
					statement.executeUpdate(insertSubject);
					logger.info("Subject " + subjectName.trim().toUpperCase() + " " + addUpdate + " successfully...");

					insertSubject = "Update SUBJECT_ALLOTMENT set " + "SUBJECT_NAME='"
							+ subjectName.trim().toUpperCase() + "'," + "SUBJECT_TITLE='"
							+ subTitle.trim().toUpperCase() + "'," + "MARKS_GRADE='" + mark_grade.trim().toUpperCase()
							+ "'," + "OPTIONAL='" + optional.trim().toUpperCase() + "',SECTION_NM='" + section + "',"
							+ "MODIFIED_BY='" + createdBy.trim().toUpperCase() + "',"
							+ "MODIFIED_DATE=SYSDATE() where (SECTION_NM='" + section + "' OR SECTION_NM IS NULL) "
							+ "AND SUBJECT_NAME='" + oldSubName + "' " + "AND ACADEMIC_YEAR='" + academicYear
							+ "' AND STD_1='" + std + "'";

					logger.info("insertSubject query===>" + insertSubject);
					statement = connection.createStatement();
					statement.executeUpdate(insertSubject);
					logger.info("Subject " + subjectName.trim().toUpperCase() + " " + addUpdate + " successfully...");

					insertSubject = "Update MARKS_ENTRY set " + "" + oldSubName + "_FDOB=''," + oldSubName + "_FOBT='',"
							+ oldSubName + "_FORA=''," + oldSubName + "_FASS=''," + oldSubName + "_FWRI=''," + ""
							+ oldSubName + "_FPRA=''," + oldSubName + "_FPRE=''," + oldSubName + "_FMCA='',"
							+ oldSubName + "_FACT=''," + oldSubName + "_FTOT=''," + oldSubName + "_FSEM='',"
							+ oldSubName + "_SDOB=''," + oldSubName + "_SOBT=''," + "" + oldSubName + "_SORA='',"
							+ oldSubName + "_SASS=''," + oldSubName + "_SWRI=''," + oldSubName + "_SPRA='',"
							+ oldSubName + "_SPRE=''," + oldSubName + "_SMCA=''," + oldSubName + "_SACT='',"
							+ oldSubName + "_STOT=''," + "" + oldSubName + "_SSEM='',CHANGED = 1," + "MODIFIED_BY='"
							+ createdBy.trim().toUpperCase() + "'," + "MODIFIED_DATE=SYSDATE() where (SECTION_NM='"
							+ section + "' OR SECTION_NM IS NULL) " + "AND ACADEMIC_YEAR='" + academicYear
							+ "' AND STD_1='" + std + "'";

					logger.info("insertSubject query===>" + insertSubject);
					statement = connection.createStatement();
					statement.executeUpdate(insertSubject);
					logger.info("Subject " + subjectName.trim().toUpperCase() + " " + addUpdate + " successfully...");
				} else {
					insertSubject = "INSERT INTO SUBJECT "
							+ "(ACADEMIC_YEAR,STD_1,SUBJECT_NAME,SUBJECT_TITLE,MARKS_GRADE,"
							+ "OPTIONAL,GROUP_NAME,CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES ('"
							+ academicYear.trim().toUpperCase() + "','" + std.trim().toUpperCase() + "','"
							+ subjectName.trim().toUpperCase() + "'," + "'" + subTitle.trim().toUpperCase() + "','"
							+ mark_grade.trim().toUpperCase() + "'," + "'" + optional.trim().toUpperCase() + "','"
							+ groupName.trim().toUpperCase() + "'," + "SYSDATE(),'" + createdBy.trim().toUpperCase()
							+ "','" + section + "')";

					logger.info("insertSubject query===>" + insertSubject);
					statement = connection.createStatement();
					statement.executeUpdate(insertSubject);
					logger.info("Subject " + subjectName.trim().toUpperCase() + " " + addUpdate + " successfully...");

					insertSubject = "INSERT INTO SUBJECT_ALLOTMENT "
							+ "(ACADEMIC_YEAR,STD_1,SUBJECT_NAME,SUBJECT_TITLE,MARKS_GRADE,"
							+ "OPTIONAL,CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES ('"
							+ academicYear.trim().toUpperCase() + "','" + std.trim().toUpperCase() + "','"
							+ subjectName.trim().toUpperCase() + "'," + "'" + subTitle.trim().toUpperCase() + "','"
							+ mark_grade.trim().toUpperCase() + "','" + optional.trim().toUpperCase() + "',"
							+ "SYSDATE(),'" + createdBy.trim().toUpperCase() + "','" + section + "')";

					logger.info("insertSubject query===>" + insertSubject);
					statement = connection.createStatement();
					statement.executeUpdate(insertSubject);
					logger.info("Subject " + subjectName.trim().toUpperCase() + " " + addUpdate + " successfully...");
				}

				JOptionPane.showMessageDialog(null,
						"Subject " + subjectName.trim().toUpperCase() + " " + addUpdate + " successfully");
				retFlag = true;
			} else {
				retFlag = false;
				JOptionPane.showMessageDialog(null, "Subject " + subjectName + " already exist for STD " + std);
			}
			return retFlag;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} /*
			 * finally { closeDatabase(sessionData); }
			 */
	}

	// /////////delete subject////////////////////////////
	public boolean deleteSubject(SessionData sessionData, String section, String subject_name, String subject_title,
			String academic_year, String std) throws Exception {

		logger.info("========deleteSubject==========");
		boolean deleteFlag = false;
		String deleteSubject = "";
		int udpdateCount = 0;
		try {
			logger.info("DB Connection created : " + connectDatabase(sessionData));
			deleteSubject = "DELETE FROM " + sessionData.getDBName() + "." + "SUBJECT WHERE " + "(SECTION_NM='"
					+ section + "') AND SUBJECT_NAME='" + subject_name + "' " + "AND ACADEMIC_YEAR='" + academic_year
					+ "' AND STD_1='" + std + "'";
			logger.info("deleteSubject query===>" + deleteSubject);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(deleteSubject);

			deleteSubject = "DELETE FROM " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT WHERE "
					+ "(SECTION_NM='" + section + "') AND SUBJECT_NAME='" + subject_name + "' " + "AND ACADEMIC_YEAR='"
					+ academic_year + "' AND STD_1='" + std + "'";
			logger.info("deleteSubject query===>" + deleteSubject);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(deleteSubject);

			String insertSubject = "Update MARKS_ENTRY set " + "" + subject_name + "_FDOB=''," + subject_name
					+ "_FOBT=''," + subject_name + "_FORA=''," + subject_name + "_FASS=''," + subject_name + "_FWRI='',"
					+ "" + subject_name + "_FPRA=''," + subject_name + "_FPRE=''," + subject_name + "_FMCA='',"
					+ subject_name + "_FACT=''," + subject_name + "_FTOT=''," + subject_name + "_FSEM='',"
					+ subject_name + "_SDOB=''," + subject_name + "_SOBT=''," + "" + subject_name + "_SORA='',"
					+ subject_name + "_SASS=''," + subject_name + "_SWRI=''," + subject_name + "_SPRA='',"
					+ subject_name + "_SPRE=''," + subject_name + "_SMCA=''," + subject_name + "_SACT='',"
					+ subject_name + "_STOT=''," + "" + subject_name + "_SSEM='',CHANGED = 1," + "MODIFIED_BY='"
					+ sessionData.getUserName().trim().toUpperCase() + "',"
					+ "MODIFIED_DATE=SYSDATE() where (SECTION_NM='" + section + "' OR SECTION_NM IS NULL) "
					+ "AND ACADEMIC_YEAR='" + academic_year + "' AND STD_1='" + std + "'";

			logger.info("insertSubject query===>" + insertSubject);
			statement = connection.createStatement();
			statement.executeUpdate(insertSubject);

			if (udpdateCount > 0) {
				deleteFlag = true;
				logger.info(udpdateCount + " subject " + subject_name + " deleted successfully by user "
						+ sessionData.getUserName() + ".");
				JOptionPane.showMessageDialog(null,
						"Subject " + subject_name + " deleted successfully for std " + std + ".");
			}
			return deleteFlag;
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return deleteFlag;
	}

	// /////////Find Column ////////////////////////////////////////
	public boolean findColumn(SessionData sessionData, String table_name, String column_name) throws Exception {

		logger.info("=========findColumn Query============");
		String findQuery = "";
		String coulmnDb = "";
		// boolean findFlag = false;
		boolean retFlag = false;

		try {
			findQuery = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS " + "WHERE TABLE_SCHEMA='"
					+ sessionData.getDBName() + "' AND TABLE_NAME = '" + table_name.toUpperCase() + "' "
					+ "AND COLUMN_NAME = '" + column_name.toUpperCase() + "'";
			logger.info("find Column query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				coulmnDb = resultSet.getString("COLUMN_NAME");
				logger.info("coulmnDb found : " + coulmnDb);
				retFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			if (resultSet != null) {
				resultSet.close();
			}
		}
		return retFlag;
	}

	// /////////Find insert column////////////////////////////////////////
	public boolean insertColumn(SessionData sessionData, String table_name, String column_name, String subject_title)
			throws Exception {

		logger.info("=========insertColumn Query============");
		String insertQuery = "";
		String coulmnDb = "";
		boolean retFlag = false;

		try {
			try {
				insertQuery = "ALTER TABLE " + sessionData.getDBName() + "." + "MARKS_ENTRY ADD ("
						+ column_name.toUpperCase() + "_FDOB  TEXT," + column_name.toUpperCase()
						+ "_FOBT  TEXT," + column_name.toUpperCase() + "_FORA  TEXT,"
						+ column_name.toUpperCase() + "_FASS  TEXT," + column_name.toUpperCase()
						+ "_FWRI  TEXT," + column_name.toUpperCase() + "_FPRA  TEXT,"
						+ column_name.toUpperCase() + "_FPRE  TEXT," + column_name.toUpperCase()
						+ "_FMCA  TEXT," + column_name.toUpperCase() + "_FACT  TEXT,"
						+ column_name.toUpperCase() + "_FPRO  TEXT," + column_name.toUpperCase()
						+ "_FOTH  TEXT," + column_name.toUpperCase() + "_FORA1  TEXT,"
						+ column_name.toUpperCase() + "_FPRA1  TEXT," + column_name.toUpperCase()
						+ "_FWRI1  TEXT," + column_name.toUpperCase() + "_FLIS  TEXT,"
						+ column_name.toUpperCase() + "_FSPE  TEXT," + column_name.toUpperCase()
						+ "_FASS1  TEXT," + column_name.toUpperCase() + "_FITOT  TEXT,"
						+ column_name.toUpperCase() + "_FTOT  TEXT," + column_name.toUpperCase()
						+ "_FSEM  TEXT," + column_name.toUpperCase() + "_SDOB  TEXT,"
						+ column_name.toUpperCase() + "_SOBT  TEXT," + column_name.toUpperCase()
						+ "_SORA  TEXT," + column_name.toUpperCase() + "_SASS  TEXT,"
						+ column_name.toUpperCase() + "_SWRI  TEXT," + column_name.toUpperCase()
						+ "_SPRA  TEXT," + column_name.toUpperCase() + "_SPRE  TEXT,"
						+ column_name.toUpperCase() + "_SMCA  TEXT," + column_name.toUpperCase()
						+ "_SACT  TEXT," + column_name.toUpperCase() + "_SPRO  TEXT,"
						+ column_name.toUpperCase() + "_SOTH  TEXT," + column_name.toUpperCase()
						+ "_SORA1  TEXT," + column_name.toUpperCase() + "_SPRA1  TEXT,"
						+ column_name.toUpperCase() + "_SWRI1  TEXT," + column_name.toUpperCase()
						+ "_SLIS  TEXT," + column_name.toUpperCase() + "_SSPE  TEXT,"
						+ column_name.toUpperCase() + "_SASS1  TEXT," + column_name.toUpperCase()
						+ "_SITOT  TEXT," + column_name.toUpperCase() + "_STOT  TEXT,"
						+ column_name.toUpperCase() + "_SSEM  TEXT)";
//				logger.info("insert MARKS_ENTRY Column query == " + insertQuery);
				statement.executeUpdate(insertQuery);
			} catch (Exception e) {
				logger.info("failed to create column name for subect " + column_name + " in MARKS_ENTRY >>> " + e);
			}

			try {
				insertQuery = "ALTER TABLE " + sessionData.getDBName() + "." + "MARKS_ENTRY ADD ("
						+ column_name.toUpperCase() + "_FLIS  TEXT," + column_name.toUpperCase()
						+ "_FSPE  TEXT," + column_name.toUpperCase() + "_FASS1  TEXT,"
						+ column_name.toUpperCase() + "_FITOT  TEXT," + column_name.toUpperCase()
						+ "_SLIS  TEXT," + column_name.toUpperCase() + "_SSPE  TEXT,"
						+ column_name.toUpperCase() + "_SASS1  TEXT," + column_name.toUpperCase()
						+ "_SITOT  TEXT)";
//				logger.info("insert MARKS_ENTRY Column query == " + insertQuery);
				statement.executeUpdate(insertQuery);
			} catch (Exception e) {
				logger.info("failed to create column name for subect " + column_name + " in MARKS_ENTRY >>> " + e);
			}

			try {
				insertQuery = "ALTER TABLE " + sessionData.getDBName() + "." + "MARKS_ENTRY ADD ("
						+ column_name.toUpperCase() + "_FITOT  TEXT," + column_name.toUpperCase()
						+ "_SITOT  TEXT)";
//				logger.info("insert MARKS_ENTRY Column query == " + insertQuery);
				statement.executeUpdate(insertQuery);
			} catch (Exception e) {
			}

			try {
				if (subject_title.trim().contains(" ")) {
					subject_title = subject_title.trim().replace(" ", "_");
				}
				boolean findColumn = findColumn(sessionData, "RESULT_DATA", subject_title + "_TOTAL");

				if (!findColumn) {
					insertQuery = "ALTER TABLE RESULT_DATA ADD (" + subject_title.toUpperCase() + "_SEM1  TEXT,"
							+ subject_title.toUpperCase() + "_SEM2  TEXT," + subject_title.toUpperCase()
							+ "_FINAL  TEXT)";
//					logger.info("insert RESULT_DATA Column query == " + insertQuery);
					statement.executeUpdate(insertQuery);
				}
			} catch (Exception e1) {
				logger.warn(
						"failed to create column name for subect title " + subject_title + " in RESULT_DATA >>> " + e1);
			}
			retFlag = true;
		} catch (Exception e) {
			cm.logException(e);
		}
		return retFlag;
	}

	// /////////////updateMarksEntryToReset///////////////////////////////
	public boolean updateMarksEntryToReset(List<String> updateMarksEntryList, String academic, String std)
			throws Exception {

		logger.info("=======inside updateMarksEntryToReset========");
		try {

			List<Object> distinctMarksEntryList = updateMarksEntryList.stream().distinct().collect(Collectors.toList());
			int count = distinctMarksEntryList.size();
			if (count > 0) {
				String updateQuery = "UPDATE MARKS_ENTRY SET ";

				for (int i = 0; i < count; i++) {
					updateQuery = updateQuery + distinctMarksEntryList.get(i).toString() + "='0',";
				}
				updateQuery = updateQuery.substring(0, updateQuery.length() - 1);
				updateQuery = updateQuery + " WHERE ACADEMIC_YEAR='" + academic + "' and STD_1='" + std + "'";
//					logger.info("updateQuery ===>" + updateQuery);
				statement = connection.createStatement();
				statement.executeUpdate(updateQuery);
			}
			return true;

		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////////updateSubMaxMin///////////////////////////////
	public boolean updateSubMaxMin(SessionData sessionData, LinkedHashMap subMaxMinMap, String academic, String std,
			String semester) throws Exception {

		logger.info("=======inside updateSubMaxMin========");
		try {

			Set set1 = subMaxMinMap.entrySet();
			Iterator m = set1.iterator();

			while (m.hasNext()) {
				Map.Entry me = (Map.Entry) m.next();
				LinkedHashMap subjectMaxMap = new LinkedHashMap();
				subjectMaxMap = (LinkedHashMap) me.getValue();

				String updateSubMaxMin = "";
				String subject = subjectMaxMap.get("subject_name").toString();
				String subject_status = subjectMaxMap.get("subject_status").toString();
				String subTitle = subjectMaxMap.get("subject_title") == null ? ""
						: subjectMaxMap.get("subject_title").toString();
				String marks_grade = subjectMaxMap.get("marks_grade") == null ? ""
						: subjectMaxMap.get("marks_grade").toString();
				String optional = subjectMaxMap.get("optional") == null ? "" : subjectMaxMap.get("optional").toString();
				String orderNo = subjectMaxMap.get("order_no") == null ? "" : subjectMaxMap.get("order_no").toString();

				String sem1Dobs = subjectMaxMap.get("sem1_dobs") == null ? "0"
						: (subjectMaxMap.get("sem1_dobs").toString());
				String sem1Obt = subjectMaxMap.get("sem1_obt") == null ? "0"
						: (subjectMaxMap.get("sem1_obt").toString());
				String sem1Oral = subjectMaxMap.get("sem1_oral") == null ? "0"
						: (subjectMaxMap.get("sem1_oral").toString());
				String sem1Assign = subjectMaxMap.get("sem1_assign") == null ? "0"
						: (subjectMaxMap.get("sem1_assign").toString());
				String sem1Write = subjectMaxMap.get("sem1_write") == null ? "0"
						: (subjectMaxMap.get("sem1_write").toString());
				String sem1Pract = subjectMaxMap.get("sem1_pract") == null ? "0"
						: (subjectMaxMap.get("sem1_pract").toString());
				String sem1Act = subjectMaxMap.get("sem1_act") == null ? "0"
						: (subjectMaxMap.get("sem1_act").toString());
				String sem1Pres = subjectMaxMap.get("sem1_pres") == null ? "0"
						: (subjectMaxMap.get("sem1_pres").toString());
				String sem1Mcap = subjectMaxMap.get("sem1_mcap") == null ? "0"
						: (subjectMaxMap.get("sem1_mcap").toString());
				String sem1Project = subjectMaxMap.get("sem1_project") == null ? "0"
						: (subjectMaxMap.get("sem1_project").toString());
				String sem1Other = subjectMaxMap.get("sem1_other") == null ? "0"
						: (subjectMaxMap.get("sem1_other").toString());
				String sem1Oral1 = subjectMaxMap.get("sem1_oral1") == null ? "0"
						: (subjectMaxMap.get("sem1_oral1").toString());
				String sem1Pract1 = subjectMaxMap.get("sem1_pract1") == null ? "0"
						: (subjectMaxMap.get("sem1_pract1").toString());
				String sem1Write1 = subjectMaxMap.get("sem1_write1") == null ? "0"
						: (subjectMaxMap.get("sem1_write1").toString());
				String sem1Listen = subjectMaxMap.get("sem1_listen") == null ? "0"
						: (subjectMaxMap.get("sem1_listen").toString());
				String sem1Speak = subjectMaxMap.get("sem1_speak") == null ? "0"
						: (subjectMaxMap.get("sem1_speak").toString());
				String sem1Assign1 = subjectMaxMap.get("sem1_assign1") == null ? "0"
						: (subjectMaxMap.get("sem1_assign1").toString());
				String sem1InTot = subjectMaxMap.get("sem1_intot") == null ? "0"
						: (subjectMaxMap.get("sem1_intot").toString());

				String sem2Dobs = subjectMaxMap.get("sem2_dobs") == null ? "0"
						: (subjectMaxMap.get("sem2_dobs").toString());
				String sem2Obt = subjectMaxMap.get("sem2_obt") == null ? "0"
						: (subjectMaxMap.get("sem2_obt").toString());
				String sem2Oral = subjectMaxMap.get("sem2_oral") == null ? "0"
						: (subjectMaxMap.get("sem2_oral").toString());
				String sem2Assign = subjectMaxMap.get("sem2_assign") == null ? "0"
						: (subjectMaxMap.get("sem2_assign").toString());
				String sem2Write = subjectMaxMap.get("sem2_write") == null ? "0"
						: (subjectMaxMap.get("sem2_write").toString());
				String sem2Pract = subjectMaxMap.get("sem2_pract") == null ? "0"
						: (subjectMaxMap.get("sem2_pract").toString());
				String sem2Act = subjectMaxMap.get("sem2_act") == null ? "0"
						: (subjectMaxMap.get("sem2_act").toString());
				String sem2Pres = subjectMaxMap.get("sem2_pres") == null ? "0"
						: (subjectMaxMap.get("sem2_pres").toString());
				String sem2Mcap = subjectMaxMap.get("sem2_mcap") == null ? "0"
						: (subjectMaxMap.get("sem2_mcap").toString());
				String sem2Project = subjectMaxMap.get("sem2_project") == null ? "0"
						: (subjectMaxMap.get("sem2_project").toString());
				String sem2Other = subjectMaxMap.get("sem2_other") == null ? "0"
						: (subjectMaxMap.get("sem2_other").toString());
				String sem2Oral1 = subjectMaxMap.get("sem2_oral1") == null ? "0"
						: (subjectMaxMap.get("sem2_oral1").toString());
				String sem2Pract1 = subjectMaxMap.get("sem2_pract1") == null ? "0"
						: (subjectMaxMap.get("sem2_pract1").toString());
				String sem2Write1 = subjectMaxMap.get("sem2_write1") == null ? "0"
						: (subjectMaxMap.get("sem2_write1").toString());
				String sem2Listen = subjectMaxMap.get("sem2_listen") == null ? "0"
						: (subjectMaxMap.get("sem2_listen").toString());
				String sem2Speak = subjectMaxMap.get("sem2_speak") == null ? "0"
						: (subjectMaxMap.get("sem2_speak").toString());
				String sem2InTot = subjectMaxMap.get("sem2_intot") == null ? "0"
						: (subjectMaxMap.get("sem2_intot").toString());

				String sem1DobsCt = subjectMaxMap.get("sem1_dobs_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_dobs_ct").toString());
				String sem1ObtCt = subjectMaxMap.get("sem1_obt_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_obt_ct").toString());
				String sem1OralCt = subjectMaxMap.get("sem1_oral_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_oral_ct").toString());
				String sem1AssignCt = subjectMaxMap.get("sem1_assign_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_assign_ct").toString());
				String sem1WriteCt = subjectMaxMap.get("sem1_write_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_write_ct").toString());
				String sem1PractCt = subjectMaxMap.get("sem1_pract_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_pract_ct").toString());
				String sem1ActCt = subjectMaxMap.get("sem1_act_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_act_ct").toString());
				String sem1PresCt = subjectMaxMap.get("sem1_pres_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_pres_ct").toString());
				String sem1McapCt = subjectMaxMap.get("sem1_mcap_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_mcap_ct").toString());
				String sem1ProjectCt = subjectMaxMap.get("sem1_project_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_project_ct").toString());
				String sem1OtherCt = subjectMaxMap.get("sem1_other_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_other_ct").toString());
				String sem1Oral1Ct = subjectMaxMap.get("sem1_oral1_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_oral1_ct").toString());
				String sem1Pract1Ct = subjectMaxMap.get("sem1_pract1_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_pract1_ct").toString());
				String sem1Write1Ct = subjectMaxMap.get("sem1_write1_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_write1_ct").toString());
				String sem1ListenCt = subjectMaxMap.get("sem1_listen_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_listen_ct").toString());
				String sem1SpeakCt = subjectMaxMap.get("sem1_speak_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_speak_ct").toString());
				String sem1InTotCt = subjectMaxMap.get("sem1_intot_ct") == null ? "0"
						: (subjectMaxMap.get("sem1_intot_ct").toString());

				String sem2DobsCt = subjectMaxMap.get("sem2_dobs_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_dobs_ct").toString());
				String sem2ObtCt = subjectMaxMap.get("sem2_obt_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_obt_ct").toString());
				String sem2OralCt = subjectMaxMap.get("sem2_oral_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_oral_ct").toString());
				String sem2AssignCt = subjectMaxMap.get("sem2_assign_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_assign_ct").toString());
				String sem2WriteCt = subjectMaxMap.get("sem2_write_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_write_ct").toString());
				String sem2PractCt = subjectMaxMap.get("sem2_pract_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_pract_ct").toString());
				String sem2ActCt = subjectMaxMap.get("sem2_act_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_act_ct").toString());
				String sem2PresCt = subjectMaxMap.get("sem2_pres_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_pres_ct").toString());
				String sem2McapCt = subjectMaxMap.get("sem2_mcap_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_mcap_ct").toString());
				String sem2ProjectCt = subjectMaxMap.get("sem2_project_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_project_ct").toString());
				String sem2OtherCt = subjectMaxMap.get("sem2_other_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_other_ct").toString());
				String sem2Oral1Ct = subjectMaxMap.get("sem2_oral1_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_oral1_ct").toString());
				String sem2Pract1Ct = subjectMaxMap.get("sem2_pract1_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_pract1_ct").toString());
				String sem2Write1Ct = subjectMaxMap.get("sem2_write1_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_write1_ct").toString());
				String sem2ListenCt = subjectMaxMap.get("sem2_listen_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_listen_ct").toString());
				String sem2SpeakCt = subjectMaxMap.get("sem2_speak_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_speak_ct").toString());
				String sem2InTotCt = subjectMaxMap.get("sem2_intot_ct") == null ? "0"
						: (subjectMaxMap.get("sem2_intot_ct").toString());

				if (sem1Obt.equalsIgnoreCase("NA") || sem1Obt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_obt") == null) {
					sem1Obt = "0";
				}
				if (sem1Oral.equalsIgnoreCase("NA") || sem1Oral.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_oral") == null) {
					sem1Oral = "0";
				}
				if (sem1Assign.equalsIgnoreCase("NA") || sem1Assign.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_assign") == null) {
					sem1Assign = "0";
				}
				if (sem1Write.equalsIgnoreCase("NA") || sem1Write.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_write") == null) {
					sem1Write = "0";
				}
				if (sem1Pract.equalsIgnoreCase("NA") || sem1Pract.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_pract") == null) {
					sem1Pract = "0";
				}
				if (sem1Pres.equalsIgnoreCase("NA") || sem1Pres.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_pres") == null) {
					sem1Pres = "0";
				}
				if (sem1Mcap.equalsIgnoreCase("NA") || sem1Mcap.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_mcap") == null) {
					sem1Mcap = "0";
				}
				if (sem1Project.equalsIgnoreCase("NA") || sem1Project.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_project") == null) {
					sem1Project = "0";
				}
				if (sem1Other.equalsIgnoreCase("NA") || sem1Other.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_other") == null) {
					sem1Other = "0";
				}
				if (sem1Oral1.equalsIgnoreCase("NA") || sem1Oral1.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_oral1") == null) {
					sem1Oral1 = "0";
				}
				if (sem1Write1.equalsIgnoreCase("NA") || sem1Write1.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_write1") == null) {
					sem1Write1 = "0";
				}
				if (sem1Pract1.equalsIgnoreCase("NA") || sem1Pract1.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_pract1") == null) {
					sem1Pract1 = "0";
				}
				if (sem1Listen.equalsIgnoreCase("NA") || sem1Listen.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_listen") == null) {
					sem1Listen = "0";
				}
				if (sem1Speak.equalsIgnoreCase("NA") || sem1Speak.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_speak") == null) {
					sem1Speak = "0";
				}
				if (sem1InTot.equalsIgnoreCase("NA") || sem1InTot.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_intot") == null) {
					sem1InTot = "0";
				}

				if (sem2Pres.equalsIgnoreCase("NA") || sem2Pres.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_pres") == null) {
					sem2Pres = "0";
				}
				if (sem2Mcap.equalsIgnoreCase("NA") || sem2Mcap.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_mcap") == null) {
					sem2Mcap = "0";
				}
				if (sem2Obt.equalsIgnoreCase("NA") || sem2Obt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_obt") == null) {
					sem2Obt = "0";
				}
				if (sem2Oral.equalsIgnoreCase("NA") || sem2Oral.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_oral") == null) {
					sem2Oral = "0";
				}
				if (sem2Assign.equalsIgnoreCase("NA") || sem2Assign.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_assign") == null) {
					sem2Assign = "0";
				}
				if (sem2Write.equalsIgnoreCase("NA") || sem2Write.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_write") == null) {
					sem2Write = "0";
				}
				if (sem2Pract.equalsIgnoreCase("NA") || sem2Pract.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_pract") == null) {
					sem2Pract = "0";
				}
				if (sem1Dobs.equalsIgnoreCase("NA") || sem1Dobs.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_dobs") == null) {
					sem1Dobs = "0";
				}
				if (sem2Dobs.equalsIgnoreCase("NA") || sem2Dobs.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_dobs") == null) {
					sem2Dobs = "0";
				}
				if (sem2Project.equalsIgnoreCase("NA") || sem2Project.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_project") == null) {
					sem2Project = "0";
				}
				if (sem2Other.equalsIgnoreCase("NA") || sem2Other.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_other") == null) {
					sem2Other = "0";
				}
				if (sem2Oral1.equalsIgnoreCase("NA") || sem2Oral1.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_oral1") == null) {
					sem2Oral1 = "0";
				}
				if (sem2Write1.equalsIgnoreCase("NA") || sem2Write1.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_write1") == null) {
					sem2Write1 = "0";
				}
				if (sem2Pract1.equalsIgnoreCase("NA") || sem2Pract1.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_pract1") == null) {
					sem2Pract1 = "0";
				}
				if (sem2Listen.equalsIgnoreCase("NA") || sem2Listen.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_listen") == null) {
					sem2Listen = "0";
				}
				if (sem2Speak.equalsIgnoreCase("NA") || sem2Speak.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_speak") == null) {
					sem2Speak = "0";
				}
				if (sem2InTot.equalsIgnoreCase("NA") || sem2InTot.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_intot") == null) {
					sem2InTot = "0";
				}
				////////////////////////////
				if (sem1ObtCt.equalsIgnoreCase("NA") || sem1ObtCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_obt_ct") == null) {
					sem1ObtCt = "0";
				}
				if (sem1OralCt.equalsIgnoreCase("NA") || sem1OralCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_oral_ct") == null) {
					sem1OralCt = "0";
				}
				if (sem1AssignCt.equalsIgnoreCase("NA") || sem1AssignCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_assign_ct") == null) {
					sem1AssignCt = "0";
				}
				if (sem1WriteCt.equalsIgnoreCase("NA") || sem1WriteCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_write_ct") == null) {
					sem1WriteCt = "0";
				}
				if (sem1PractCt.equalsIgnoreCase("NA") || sem1PractCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_pract_ct") == null) {
					sem1PractCt = "0";
				}
				if (sem1PresCt.equalsIgnoreCase("NA") || sem1PresCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_pres_ct") == null) {
					sem1PresCt = "0";
				}
				if (sem1McapCt.equalsIgnoreCase("NA") || sem1McapCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_mcap_ct") == null) {
					sem1McapCt = "0";
				}
				if (sem1ProjectCt.equalsIgnoreCase("NA") || sem1ProjectCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_project_ct") == null) {
					sem1ProjectCt = "0";
				}
				if (sem1OtherCt.equalsIgnoreCase("NA") || sem1OtherCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_other_ct") == null) {
					sem1OtherCt = "0";
				}
				if (sem1Oral1Ct.equalsIgnoreCase("NA") || sem1Oral1Ct.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_oral1_ct") == null) {
					sem1Oral1Ct = "0";
				}
				if (sem1Write1Ct.equalsIgnoreCase("NA") || sem1Write1Ct.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_write1_ct") == null) {
					sem1Write1Ct = "0";
				}
				if (sem1Pract1Ct.equalsIgnoreCase("NA") || sem1Pract1Ct.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_pract1_ct") == null) {
					sem1Pract1Ct = "0";
				}
				if (sem1ListenCt.equalsIgnoreCase("NA") || sem1ListenCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_listen_ct") == null) {
					sem1ListenCt = "0";
				}
				if (sem1SpeakCt.equalsIgnoreCase("NA") || sem1SpeakCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_speak_ct") == null) {
					sem1SpeakCt = "0";
				}
				if (sem1InTotCt.equalsIgnoreCase("NA") || sem1InTotCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_intot_ct") == null) {
					sem1InTotCt = "0";
				}

				if (sem2PresCt.equalsIgnoreCase("NA") || sem2PresCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_pres_ct") == null) {
					sem2PresCt = "0";
				}
				if (sem2McapCt.equalsIgnoreCase("NA") || sem2McapCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_mcap_ct") == null) {
					sem2McapCt = "0";
				}
				if (sem2ObtCt.equalsIgnoreCase("NA") || sem2ObtCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_obt_ct") == null) {
					sem2ObtCt = "0";
				}
				if (sem2OralCt.equalsIgnoreCase("NA") || sem2OralCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_oral_ct") == null) {
					sem2OralCt = "0";
				}
				if (sem2AssignCt.equalsIgnoreCase("NA") || sem2AssignCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_assign_ct") == null) {
					sem2AssignCt = "0";
				}
				if (sem2WriteCt.equalsIgnoreCase("NA") || sem2WriteCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_write_ct") == null) {
					sem2WriteCt = "0";
				}
				if (sem2PractCt.equalsIgnoreCase("NA") || sem2PractCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_pract_ct") == null) {
					sem2PractCt = "0";
				}
				if (sem1DobsCt.equalsIgnoreCase("NA") || sem1DobsCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem1_dobs_ct") == null) {
					sem1DobsCt = "0";
				}
				if (sem2DobsCt.equalsIgnoreCase("NA") || sem2DobsCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_dobs_ct") == null) {
					sem2DobsCt = "0";
				}
				if (sem2ProjectCt.equalsIgnoreCase("NA") || sem2ProjectCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_project_ct") == null) {
					sem2ProjectCt = "0";
				}
				if (sem2OtherCt.equalsIgnoreCase("NA") || sem2OtherCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_other_ct") == null) {
					sem2OtherCt = "0";
				}
				if (sem2Oral1Ct.equalsIgnoreCase("NA") || sem2Oral1Ct.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_oral1_ct") == null) {
					sem2Oral1Ct = "0";
				}
				if (sem2Write1Ct.equalsIgnoreCase("NA") || sem2Write1Ct.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_write1_ct") == null) {
					sem2Write1Ct = "0";
				}
				if (sem2Pract1Ct.equalsIgnoreCase("NA") || sem2Pract1Ct.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_pract1_ct") == null) {
					sem2Pract1Ct = "0";
				}
				if (sem2ListenCt.equalsIgnoreCase("NA") || sem2ListenCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_listen_ct") == null) {
					sem2ListenCt = "0";
				}
				if (sem2SpeakCt.equalsIgnoreCase("NA") || sem2SpeakCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_speak_ct") == null) {
					sem2SpeakCt = "0";
				}
				if (sem2InTotCt.equalsIgnoreCase("NA") || sem2InTotCt.equalsIgnoreCase("")
						|| ((LinkedHashMap<?, ?>) subMaxMinMap.get(subject)).get("sem2_intot_ct") == null) {
					sem2InTotCt = "0";
				}

				if (subject_status.equalsIgnoreCase("new")) {
					updateSubMaxMin = "INSERT INTO SUBJECT_ALLOTMENT "
							+ "(ACADEMIC_YEAR,STD_1,SUBJECT_NAME,SUBJECT_TITLE,MARKS_GRADE,"
							+ "OPTIONAL,SEM1_OBT,SEM1_ORAL,SEM1_ASSIGN,SEM1_WRITE,SEM1_PRACT,SEM1_ACTIVITY,SEM2_OBT,SEM2_ORAL,SEM2_ASSIGN,SEM2_WRITE,SEM2_PRACT,SEM2_ACTIVITY,"
							+ "ORDER_NO,CREATED_DATE,CREATED_BY,SEM1_DOBS,SEM2_DOBS,SEM1_PRES,SEM1_MCAP,SEM1_PROJECT,SEM1_OTHER,SEM1_ORAL1,SEM1_PRACT1,SEM1_WRITE1,"
							+ "SEM2_PRES,SEM2_MCAP,SEM2_PROJECT,SEM2_OTHER,SEM2_ORAL1,SEM2_PRACT1,SEM2_WRITE1,SECTION_NM,"
							+ "SEM1_OBT_CT,SEM1_ORAL_CT,SEM1_ASSIGN_CT,SEM1_WRITE_CT,SEM1_PRACT_CT,SEM1_ACTIVITY_CT,"
							+ "SEM1_PROJECT_CT,SEM1_OTHER_CT,SEM1_ORAL1_CT,SEM1_PRACT1_CT,SEM1_WRITE1_CT,SEM2_OBT_CT,SEM2_ORAL_CT,SEM2_ASSIGN_CT,"
							+ "SEM2_WRITE_CT,SEM2_PRACT_CT,SEM2_ACTIVITY_CT,SEM2_PROJECT_CT,SEM2_OTHER_CT,SEM2_ORAL1_CT,SEM2_PRACT1_CT,SEM2_WRITE1_CT,"
							+ "SEM1_DOBS_CT,SEM2_DOBS_CT,SEM1_PRES_CT,SEM1_MCAP_CT,SEM2_PRES_CT,SEM2_MCAP_CT,SEM1_LISTEN,SEM1_SPEAK,SEM1_INTOT,SEM2_LISTEN,SEM2_SPEAK,SEM2_INTOT,"
							+ "SEM1_LISTEN_CT,SEM1_SPEAK_CT,SEM1_INTOT_CT,SEM2_LISTEN_CT,SEM2_SPEAK_CT,SEM2_INTOT_CT) "
							+ "VALUES ('" + academic.trim().toUpperCase() + "','" + std.trim().toUpperCase() + "','"
							+ subject.trim().toUpperCase() + "'," + "'" + subTitle.trim().toUpperCase() + "','"
							+ marks_grade.trim().toUpperCase() + "','" + optional.trim().toUpperCase() + "'," + "'"
							+ sem1Obt.trim().toUpperCase() + "','" + sem1Oral.trim().toUpperCase() + "'," + "'"
							+ sem1Assign.trim().toUpperCase() + "','" + sem1Write.trim().toUpperCase() + "','"
							+ sem1Pract.trim().toUpperCase() + "'," + "'" + sem1Act.trim().toUpperCase() + "'," + "'"
							+ sem2Obt.trim().toUpperCase() + "','" + sem2Oral.trim().toUpperCase() + "','"
							+ sem2Assign.trim().toUpperCase() + "'," + "'" + sem2Write.trim().toUpperCase() + "','"
							+ sem2Pract.trim().toUpperCase() + "'," + "'" + sem2Act.trim().toUpperCase() + "',"
							+ orderNo + "," + "SYSDATE(),'" + sessionData.getUserName() + "','"
							+ sem1Dobs.trim().toUpperCase() + "','" + sem2Dobs.trim().toUpperCase() + "','"
							+ sem1Pres.trim().toUpperCase() + "','" + sem1Mcap.trim().toUpperCase() + "','"
							+ sem1Project.trim().toUpperCase() + "','" + sem1Other.trim().toUpperCase() + "','"
							+ sem1Oral1.trim().toUpperCase() + "','" + sem1Pract1.trim().toUpperCase() + "','"
							+ sem1Write1.trim().toUpperCase() + "','" + sem2Pres.trim().toUpperCase() + "','"
							+ sem2Mcap.trim().toUpperCase() + "','" + sem2Project.trim().toUpperCase() + "','"
							+ sem2Other.trim().toUpperCase() + "','" + sem2Oral1.trim().toUpperCase() + "','"
							+ sem2Pract1.trim().toUpperCase() + "','" + sem2Write1.trim().toUpperCase() + "','"
							+ sessionData.getSectionName() + "'," + "'" + sem1ObtCt.trim().toUpperCase() + "','"
							+ sem1OralCt.trim().toUpperCase() + "'," + "'" + sem1AssignCt.trim().toUpperCase() + "','"
							+ sem1WriteCt.trim().toUpperCase() + "','" + sem1PractCt.trim().toUpperCase() + "'," + "'"
							+ sem1ActCt.trim().toUpperCase() + "','" + sem1ProjectCt.trim().toUpperCase() + "','"
							+ sem1OtherCt.trim().toUpperCase() + "','" + sem1Oral1Ct.trim().toUpperCase() + "','"
							+ sem1Pract1Ct.trim().toUpperCase() + "','" + sem1Write1Ct.trim().toUpperCase() + "','"
							+ sem2ObtCt.trim().toUpperCase() + "','" + sem2OralCt.trim().toUpperCase() + "','"
							+ sem2AssignCt.trim().toUpperCase() + "'," + "'" + sem2ProjectCt.trim().toUpperCase()
							+ "','" + sem2OtherCt.trim().toUpperCase() + "','" + sem2Oral1Ct.trim().toUpperCase()
							+ "','" + sem2Pract1Ct.trim().toUpperCase() + "','" + sem2Write1Ct.trim().toUpperCase()
							+ "','" + sem2WriteCt.trim().toUpperCase() + "','" + sem2PractCt.trim().toUpperCase() + "',"
							+ "'" + sem2ActCt.trim().toUpperCase() + "','" + sem1DobsCt.trim().toUpperCase() + "','"
							+ sem2DobsCt.trim().toUpperCase() + "','" + sem1PresCt.trim().toUpperCase() + "','"
							+ sem1McapCt.trim().toUpperCase() + "','" + sem2PresCt.trim().toUpperCase() + "','"
							+ sem2McapCt.trim().toUpperCase() + "','" + sem1Listen.trim().toUpperCase() + "','"
							+ sem1Speak.trim().toUpperCase() + "','" + sem1InTot.trim().toUpperCase() + "','"
							+ sem1ListenCt.trim().toUpperCase() + "','" + sem1SpeakCt.trim().toUpperCase() + "','"
							+ sem1InTotCt.trim().toUpperCase() + "','" + sem2Listen.trim().toUpperCase() + "','"
							+ sem2Speak.trim().toUpperCase() + "','" + sem2InTot.trim().toUpperCase() + "','"
							+ sem2ListenCt.trim().toUpperCase() + "','" + sem2SpeakCt.trim().toUpperCase() + "','"
							+ sem2InTotCt.trim().toUpperCase() + "')";
				} else {
					String sem1 = "SEM1_OBT = '" + sem1Obt.trim().toUpperCase() + "',SEM1_ORAL = '"
							+ sem1Oral.trim().toUpperCase() + "'," + "SEM1_ASSIGN = '" + sem1Assign.trim().toUpperCase()
							+ "',SEM1_WRITE = '" + sem1Write.trim().toUpperCase() + "'," + "SEM1_PRACT = '"
							+ sem1Pract.trim().toUpperCase() + "'," + "SEM1_ACTIVITY = '" + sem1Act.trim().toUpperCase()
							+ "'," + "SEM1_DOBS = '" + sem1Dobs.trim().toUpperCase() + "',SEM1_OBT_CT = '"
							+ sem1ObtCt.trim().toUpperCase() + "'," + "SEM1_ORAL_CT = '"
							+ sem1OralCt.trim().toUpperCase() + "'," + "SEM1_ASSIGN_CT = '"
							+ sem1AssignCt.trim().toUpperCase() + "'," + "SEM1_WRITE_CT = '"
							+ sem1WriteCt.trim().toUpperCase() + "'," + "SEM1_PRACT_CT = '"
							+ sem1PractCt.trim().toUpperCase() + "'," + "SEM1_ACTIVITY_CT = '"
							+ sem1ActCt.trim().toUpperCase() + "'," + "SEM1_DOBS_CT = '"
							+ sem1DobsCt.trim().toUpperCase() + "'," + "SEM1_PRES = '" + sem1Pres.trim().toUpperCase()
							+ "', " + "SEM1_MCAP = '" + sem1Mcap.trim().toUpperCase() + "'," + "SEM1_PRES_CT = '"
							+ sem1PresCt.trim().toUpperCase() + "', " + "SEM1_MCAP_CT = '"
							+ sem1McapCt.trim().toUpperCase() + "'," + "SEM1_PROJECT = '"
							+ sem1Project.trim().toUpperCase() + "', " + "SEM1_OTHER = '"
							+ sem1Other.trim().toUpperCase() + "', " + "SEM1_ORAL1 = '" + sem1Oral1.trim().toUpperCase()
							+ "', " + "SEM1_PRACT1 = '" + sem1Pract1.trim().toUpperCase() + "', " + "SEM1_WRITE1 = '"
							+ sem1Write1.trim().toUpperCase() + "', " + "SEM1_PROJECT_CT = '"
							+ sem1ProjectCt.trim().toUpperCase() + "', " + "SEM1_OTHER_CT = '"
							+ sem1OtherCt.trim().toUpperCase() + "', " + "SEM1_ORAL1_CT = '"
							+ sem1Oral1Ct.trim().toUpperCase() + "', " + "SEM1_PRACT1_CT = '"
							+ sem1Pract1Ct.trim().toUpperCase() + "', " + "SEM1_WRITE1_CT = '"
							+ sem1Write1Ct.trim().toUpperCase() + "', " + "SEM1_LISTEN = '"
							+ sem1Listen.trim().toUpperCase() + "', " + "SEM1_SPEAK = '"
							+ sem1Speak.trim().toUpperCase() + "', " + "SEM1_INTOT = '" + sem1InTot.trim().toUpperCase()
							+ "', " + "SEM1_LISTEN_CT = '" + sem1ListenCt.trim().toUpperCase() + "', "
							+ "SEM1_SPEAK_CT = '" + sem1SpeakCt.trim().toUpperCase() + "', " + "SEM1_INTOT_CT = '"
							+ sem1InTotCt.trim().toUpperCase() + "'";

					String sem2 = "SEM2_OBT = '" + sem2Obt.trim().toUpperCase() + "'," + "SEM2_ORAL = '"
							+ sem2Oral.trim().toUpperCase() + "',SEM2_ASSIGN = '" + sem2Assign.trim().toUpperCase()
							+ "', " + "SEM2_WRITE = '" + sem2Write.trim().toUpperCase() + "',SEM2_PRACT = '"
							+ sem2Pract.trim().toUpperCase() + "'," + "SEM2_ACTIVITY = '" + sem2Act.trim().toUpperCase()
							+ "', SEM2_DOBS = '" + sem2Dobs.trim().toUpperCase() + "',SEM2_OBT_CT = '"
							+ sem2ObtCt.trim().toUpperCase() + "'," + "SEM2_ORAL_CT = '"
							+ sem2OralCt.trim().toUpperCase() + "',SEM2_ASSIGN_CT = '"
							+ sem2AssignCt.trim().toUpperCase() + "', " + "SEM2_WRITE_CT = '"
							+ sem2WriteCt.trim().toUpperCase() + "',SEM2_PRACT_CT = '"
							+ sem2PractCt.trim().toUpperCase() + "'," + "SEM2_ACTIVITY_CT = '"
							+ sem2ActCt.trim().toUpperCase() + "', SEM2_DOBS_CT = '" + sem2DobsCt.trim().toUpperCase()
							+ "'," + "SEM2_PRES = '" + sem2Pres.trim().toUpperCase() + "', " + "SEM2_MCAP = '"
							+ sem2Mcap.trim().toUpperCase() + "', " + "SEM2_PRES_CT = '"
							+ sem2PresCt.trim().toUpperCase() + "', " + "SEM2_MCAP_CT = '"
							+ sem2McapCt.trim().toUpperCase() + "', " + "SEM2_PROJECT = '"
							+ sem2Project.trim().toUpperCase() + "', " + "SEM2_OTHER = '"
							+ sem2Other.trim().toUpperCase() + "', " + "SEM2_ORAL1 = '" + sem2Oral1.trim().toUpperCase()
							+ "', " + "SEM2_PRACT1 = '" + sem2Pract1.trim().toUpperCase() + "', " + "SEM2_WRITE1 = '"
							+ sem2Write1.trim().toUpperCase() + "', " + "SEM2_PROJECT_CT = '"
							+ sem2ProjectCt.trim().toUpperCase() + "', " + "SEM2_OTHER_CT = '"
							+ sem2OtherCt.trim().toUpperCase() + "', " + "SEM2_ORAL1_CT = '"
							+ sem2Oral1Ct.trim().toUpperCase() + "', " + "SEM2_PRACT1_CT = '"
							+ sem2Pract1Ct.trim().toUpperCase() + "', " + "SEM2_WRITE1_CT = '"
							+ sem2Write1Ct.trim().toUpperCase() + "'," + "SEM2_LISTEN = '"
							+ sem2Listen.trim().toUpperCase() + "', " + "SEM2_SPEAK = '"
							+ sem2Speak.trim().toUpperCase() + "', " + "SEM2_INTOT = '" + sem2InTot.trim().toUpperCase()
							+ "', " + "SEM2_LISTEN_CT = '" + sem2ListenCt.trim().toUpperCase() + "', "
							+ "SEM2_SPEAK_CT = '" + sem2SpeakCt.trim().toUpperCase() + "', " + "SEM2_INTOT_CT = '"
							+ sem2InTotCt.trim().toUpperCase() + "'";

					String setQuery = sem1 + "," + sem2;
					if (semester.equalsIgnoreCase("Semester 1")) {
						setQuery = sem1;
					} else if (semester.equalsIgnoreCase("Semester 2")) {
						setQuery = sem2;
					}
					updateSubMaxMin = "UPDATE SUBJECT_ALLOTMENT SET " + setQuery + " WHERE ACADEMIC_YEAR='"
							+ academic.trim() + "' AND STD_1='" + std + "' AND SUBJECT_NAME='" + subject + "' AND "
							+ "(SECTION_NM='" + sessionData.getSectionName() + "' OR SECTION_NM IS NULL)";
				}
//				logger.info("updateSubMaxMin query===>" + updateSubMaxMin);
				statement = connection.createStatement();
				statement.executeUpdate(updateSubMaxMin);
			}
			logger.info("updateSubMaxMin data updated successfully...");
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////Find Subject list////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findSubMaxMinList(SessionData sessionData,
			String academicYear, String std) throws Exception {

		logger.info("=========findSubMaxMinList Query============");
		String findQuery = "";
		String sub = "";
		String subTitle = "";
		String marks_Grade = "";
		String optional = "";
		String sem1Dobs = "";
		String sem1Obt = "";
		String sem1Oral = "";
		String sem1Assign = "";
		String sem1Write = "";
		String sem1Pract = "";
		String sem1Activity = "";
		String sem1Pres = "";
		String sem1Mcap = "";
		String sem1Project = "";
		String sem1Other = "";
		String sem1Oral1 = "";
		String sem1Pract1 = "";
		String sem1Write1 = "";
		String sem2Project = "";
		String sem2Other = "";
		String sem2Oral1 = "";
		String sem2Pract1 = "";
		String sem2Write1 = "";
		String sem2Pres = "";
		String sem2Mcap = "";
		String sem2Dobs = "";
		String sem2Obt = "";
		String sem2Oral = "";
		String sem2Assign = "";
		String sem2Write = "";
		String sem2Pract = "";
		String sem2Activity = "";
		String sem1DobsCt = "";
		String sem1ObtCt = "";
		String sem1OralCt = "";
		String sem1AssignCt = "";
		String sem1WriteCt = "";
		String sem1PractCt = "";
		String sem1ActivityCt = "";
		String sem1PresCt = "";
		String sem1McapCt = "";
		String sem1ProjectCt = "";
		String sem1OtherCt = "";
		String sem1Oral1Ct = "";
		String sem1Pract1Ct = "";
		String sem1Write1Ct = "";
		String sem2ProjectCt = "";
		String sem2OtherCt = "";
		String sem2Oral1Ct = "";
		String sem2Pract1Ct = "";
		String sem2Write1Ct = "";
		String sem2PresCt = "";
		String sem2McapCt = "";
		String sem2DobsCt = "";
		String sem2ObtCt = "";
		String sem2OralCt = "";
		String sem2AssignCt = "";
		String sem2WriteCt = "";
		String sem2PractCt = "";
		String sem2ActivityCt = "";
		String sem1Speak = "";
		String sem1SpeakCt = "";
		String sem1Listen = "";
		String sem1Assign1 = "";
		String sem1ListenCt = "";
		String sem1Assign1Ct = "";
		String sem1InTot = "";
		String sem1InTotCt = "";
		String sem2Speak = "";
		String sem2SpeakCt = "";
		String sem2Listen = "";
		String sem2ListenCt = "";
		String sem2Assign1 = "";
		String sem2Assign1Ct = "";
		String sem2InTot = "";
		String sem2InTotCt = "";

		String orderNo = "";
		boolean findFlag = false;
		List subMaxMinList = new ArrayList();
		LinkedHashMap subjectMap = new LinkedHashMap();

		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT LEFT JOIN "
					+ sessionData.getDBName() + "." + "SUBJECT "
					+ "ON SUBJECT_ALLOTMENT.ACADEMIC_YEAR=SUBJECT.ACADEMIC_YEAR AND SUBJECT_ALLOTMENT.STD_1=SUBJECT.STD_1 "
					+ "AND SUBJECT_ALLOTMENT.SUBJECT_NAME=SUBJECT.SUBJECT_NAME AND SUBJECT_ALLOTMENT.SECTION_NM=SUBJECT.SECTION_NM"
					+ " WHERE SUBJECT.ACADEMIC_YEAR='" + academicYear + "' " + "AND SUBJECT.STD_1='" + std
					+ "' AND (SUBJECT.SECTION_NM='" + sessionData.getSectionName() + "') "
					+ "ORDER BY SUBJECT.ORDER_NO ASC";
//			logger.info("findSubMaxMinList query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				LinkedHashMap subMaxMinMap = new LinkedHashMap();
				sub = resultSet.getString("SUBJECT_NAME") == null ? "0" : (resultSet.getString("SUBJECT_NAME").trim());
				subMaxMinMap.put("subject_name", sub);
				subMaxMinMap.put("subject_status", "old");
				subTitle = resultSet.getString("SUBJECT_TITLE") == null ? "0"
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subMaxMinMap.put("subject_title", subTitle);
				marks_Grade = resultSet.getString("MARKS_GRADE") == null ? "0"
						: (resultSet.getString("MARKS_GRADE").trim());
				subMaxMinMap.put("marks_grade", marks_Grade);
				optional = resultSet.getString("OPTIONAL") == null ? "0" : (resultSet.getString("OPTIONAL").trim());
				subMaxMinMap.put("optional", optional);
				sem1Dobs = resultSet.getString("SEM1_DOBS") == null ? "0" : (resultSet.getString("SEM1_DOBS").trim());
				subMaxMinMap.put("sem1_dobs", sem1Dobs);
				sem1Obt = resultSet.getString("SEM1_OBT") == null ? "0" : (resultSet.getString("SEM1_OBT").trim());
				subMaxMinMap.put("sem1_obt", sem1Obt);
				sem1Oral = resultSet.getString("SEM1_ORAL") == null ? "0" : (resultSet.getString("SEM1_ORAL").trim());
				subMaxMinMap.put("sem1_oral", sem1Oral);
				sem1Assign = resultSet.getString("SEM1_ASSIGN") == null ? "0"
						: (resultSet.getString("SEM1_ASSIGN").trim());
				subMaxMinMap.put("sem1_assign", sem1Assign);
				sem1Write = resultSet.getString("SEM1_WRITE") == null ? "0"
						: (resultSet.getString("SEM1_WRITE").trim());
				subMaxMinMap.put("sem1_write", sem1Write);
				sem1Pract = resultSet.getString("SEM1_PRACT") == null ? "0"
						: (resultSet.getString("SEM1_PRACT").trim());
				subMaxMinMap.put("sem1_pract", sem1Pract);
				sem1Activity = resultSet.getString("SEM1_ACTIVITY") == null ? "0"
						: (resultSet.getString("SEM1_ACTIVITY").trim());
				subMaxMinMap.put("sem1_act", sem1Activity);
				sem1Pres = resultSet.getString("SEM1_PRES") == null ? "0" : (resultSet.getString("SEM1_PRES").trim());
				subMaxMinMap.put("sem1_pres", sem1Pres);
				sem1Mcap = resultSet.getString("SEM1_MCAP") == null ? "0" : (resultSet.getString("SEM1_MCAP").trim());
				subMaxMinMap.put("sem1_mcap", sem1Mcap);
				sem1Project = resultSet.getString("SEM1_PROJECT") == null ? "0"
						: (resultSet.getString("SEM1_PROJECT").trim());
				subMaxMinMap.put("sem1_project", sem1Project);
				sem1Other = resultSet.getString("SEM1_OTHER") == null ? "0"
						: (resultSet.getString("SEM1_OTHER").trim());
				subMaxMinMap.put("sem1_other", sem1Other);
				sem1Oral1 = resultSet.getString("SEM1_ORAL1") == null ? "0"
						: (resultSet.getString("SEM1_ORAL1").trim());
				subMaxMinMap.put("sem1_oral1", sem1Oral1);
				sem1Pract1 = resultSet.getString("SEM1_PRACT1") == null ? "0"
						: (resultSet.getString("SEM1_PRACT1").trim());
				subMaxMinMap.put("sem1_pract1", sem1Pract1);
				sem1Write1 = resultSet.getString("SEM1_WRITE1") == null ? "0"
						: (resultSet.getString("SEM1_WRITE1").trim());
				subMaxMinMap.put("sem1_write1", sem1Write1);
				sem1Speak = resultSet.getString("SEM1_SPEAK") == null ? "0"
						: (resultSet.getString("SEM1_SPEAK").trim());
				subMaxMinMap.put("sem1_speak", sem1Speak);
				sem1Listen = resultSet.getString("SEM1_LISTEN") == null ? "0"
						: (resultSet.getString("SEM1_LISTEN").trim());
				subMaxMinMap.put("sem1_listen", sem1Listen);
				sem1Assign1 = resultSet.getString("SEM1_ASSIGN1") == null ? "0"
						: (resultSet.getString("SEM1_ASSIGN1").trim());
				subMaxMinMap.put("sem1_assign1", sem1Assign1);
				sem1InTot = resultSet.getString("SEM1_INTOT") == null ? "0"
						: (resultSet.getString("SEM1_INTOT").trim());
				subMaxMinMap.put("sem1_intot", sem1InTot);

				sem2Pres = resultSet.getString("SEM2_PRES") == null ? "0" : (resultSet.getString("SEM2_PRES").trim());
				subMaxMinMap.put("sem2_pres", sem2Pres);
				sem2Mcap = resultSet.getString("SEM2_MCAP") == null ? "0" : (resultSet.getString("SEM2_MCAP").trim());
				subMaxMinMap.put("sem2_mcap", sem2Mcap);
				sem2Dobs = resultSet.getString("SEM2_DOBS") == null ? "0" : (resultSet.getString("SEM2_DOBS").trim());
				subMaxMinMap.put("sem2_dobs", sem2Dobs);
				sem2Obt = resultSet.getString("SEM2_OBT") == null ? "0" : (resultSet.getString("SEM2_OBT").trim());
				subMaxMinMap.put("sem2_obt", sem2Obt);
				sem2Oral = resultSet.getString("SEM2_ORAL") == null ? "0" : (resultSet.getString("SEM2_ORAL").trim());
				subMaxMinMap.put("sem2_oral", sem2Oral);
				sem2Assign = resultSet.getString("SEM2_ASSIGN") == null ? "0"
						: (resultSet.getString("SEM2_ASSIGN").trim());
				subMaxMinMap.put("sem2_assign", sem2Assign);
				sem2Write = resultSet.getString("SEM2_WRITE") == null ? "0"
						: (resultSet.getString("SEM2_WRITE").trim());
				subMaxMinMap.put("sem2_write", sem2Write);
				sem2Pract = resultSet.getString("SEM2_PRACT") == null ? "0"
						: (resultSet.getString("SEM2_PRACT").trim());
				subMaxMinMap.put("sem2_pract", sem2Pract);
				sem2Activity = resultSet.getString("SEM2_ACTIVITY") == null ? "0"
						: (resultSet.getString("SEM2_ACTIVITY").trim());
				subMaxMinMap.put("sem2_act", sem2Activity);
				sem2Project = resultSet.getString("SEM2_PROJECT") == null ? "0"
						: (resultSet.getString("SEM2_PROJECT").trim());
				subMaxMinMap.put("sem2_project", sem2Project);
				sem2Other = resultSet.getString("SEM2_OTHER") == null ? "0"
						: (resultSet.getString("SEM2_OTHER").trim());
				subMaxMinMap.put("sem2_other", sem2Other);
				sem2Oral1 = resultSet.getString("SEM2_ORAL1") == null ? "0"
						: (resultSet.getString("SEM2_ORAL1").trim());
				subMaxMinMap.put("sem2_oral1", sem2Oral1);
				sem2Pract1 = resultSet.getString("SEM2_PRACT1") == null ? "0"
						: (resultSet.getString("SEM2_PRACT1").trim());
				subMaxMinMap.put("sem2_pract1", sem2Pract1);
				sem2Write1 = resultSet.getString("SEM2_WRITE1") == null ? "0"
						: (resultSet.getString("SEM2_WRITE1").trim());
				subMaxMinMap.put("sem2_write1", sem2Write1);
				sem2Speak = resultSet.getString("SEM2_SPEAK") == null ? "0"
						: (resultSet.getString("SEM2_SPEAK").trim());
				subMaxMinMap.put("sem2_speak", sem2Speak);
				sem2Listen = resultSet.getString("SEM2_LISTEN") == null ? "0"
						: (resultSet.getString("SEM2_LISTEN").trim());
				subMaxMinMap.put("sem2_listen", sem2Listen);
				sem2Assign1 = resultSet.getString("SEM2_ASSIGN1") == null ? "0"
						: (resultSet.getString("SEM2_ASSIGN1").trim());
				subMaxMinMap.put("sem2_assign1", sem2Assign1);
				sem2InTot = resultSet.getString("SEM2_INTOT") == null ? "0"
						: (resultSet.getString("SEM2_INTOT").trim());
				subMaxMinMap.put("sem2_intot", sem2InTot);

				sem1DobsCt = resultSet.getString("SEM1_DOBS_CT") == null ? "0"
						: (resultSet.getString("SEM1_DOBS_CT").trim());
				subMaxMinMap.put("sem1_dobs_ct", sem1DobsCt);
				sem1ObtCt = resultSet.getString("SEM1_OBT_CT") == null ? "0"
						: (resultSet.getString("SEM1_OBT_CT").trim());
				subMaxMinMap.put("sem1_obt_ct", sem1ObtCt);
				sem1OralCt = resultSet.getString("SEM1_ORAL_CT") == null ? "0"
						: (resultSet.getString("SEM1_ORAL_CT").trim());
				subMaxMinMap.put("sem1_oral_ct", sem1OralCt);
				sem1AssignCt = resultSet.getString("SEM1_ASSIGN_CT") == null ? "0"
						: (resultSet.getString("SEM1_ASSIGN_CT").trim());
				subMaxMinMap.put("sem1_assign_ct", sem1AssignCt);
				sem1WriteCt = resultSet.getString("SEM1_WRITE_CT") == null ? "0"
						: (resultSet.getString("SEM1_WRITE_CT").trim());
				subMaxMinMap.put("sem1_write_ct", sem1WriteCt);
				sem1PractCt = resultSet.getString("SEM1_PRACT_CT") == null ? "0"
						: (resultSet.getString("SEM1_PRACT_CT").trim());
				subMaxMinMap.put("sem1_pract_ct", sem1PractCt);
				sem1ActivityCt = resultSet.getString("SEM1_ACTIVITY_CT") == null ? "0"
						: (resultSet.getString("SEM1_ACTIVITY_CT").trim());
				subMaxMinMap.put("sem1_act_ct", sem1ActivityCt);
				sem1PresCt = resultSet.getString("SEM1_PRES_CT") == null ? "0"
						: (resultSet.getString("SEM1_PRES_CT").trim());
				subMaxMinMap.put("sem1_pres_ct", sem1PresCt);
				sem1McapCt = resultSet.getString("SEM1_MCAP_CT") == null ? "0"
						: (resultSet.getString("SEM1_MCAP_CT").trim());
				subMaxMinMap.put("sem1_mcap_ct", sem1McapCt);
				sem1ProjectCt = resultSet.getString("SEM1_PROJECT_CT") == null ? "0"
						: (resultSet.getString("SEM1_PROJECT_CT").trim());
				subMaxMinMap.put("sem1_project_ct", sem1ProjectCt);
				sem1OtherCt = resultSet.getString("SEM1_OTHER_CT") == null ? "0"
						: (resultSet.getString("SEM1_OTHER_CT").trim());
				subMaxMinMap.put("sem1_other_ct", sem1OtherCt);
				sem1Oral1Ct = resultSet.getString("SEM1_ORAL1_CT") == null ? "0"
						: (resultSet.getString("SEM1_ORAL1_CT").trim());
				subMaxMinMap.put("sem1_oral1_ct", sem1Oral1Ct);
				sem1Pract1Ct = resultSet.getString("SEM1_PRACT1_CT") == null ? "0"
						: (resultSet.getString("SEM1_PRACT1_CT").trim());
				subMaxMinMap.put("sem1_pract1_ct", sem1Pract1Ct);
				sem1Write1Ct = resultSet.getString("SEM1_WRITE1_CT") == null ? "0"
						: (resultSet.getString("SEM1_WRITE1_CT").trim());
				subMaxMinMap.put("sem1_write1_ct", sem1Write1Ct);
				sem1SpeakCt = resultSet.getString("SEM1_SPEAK_CT") == null ? "0"
						: (resultSet.getString("SEM1_SPEAK_CT").trim());
				subMaxMinMap.put("sem1_speak_ct", sem1SpeakCt);
				sem1ListenCt = resultSet.getString("SEM1_LISTEN_CT") == null ? "0"
						: (resultSet.getString("SEM1_LISTEN_CT").trim());
				subMaxMinMap.put("sem1_listen_ct", sem1ListenCt);
				sem1Assign1Ct = resultSet.getString("SEM1_ASSIGN1_CT") == null ? "0"
						: (resultSet.getString("SEM1_ASSIGN1_CT").trim());
				subMaxMinMap.put("sem1_assign1_ct", sem1Assign1Ct);
				sem1InTotCt = resultSet.getString("SEM1_INTOT_CT") == null ? "0"
						: (resultSet.getString("SEM1_INTOT_CT").trim());
				subMaxMinMap.put("sem1_intot_ct", sem1InTotCt);

				sem2ProjectCt = resultSet.getString("SEM2_PROJECT_CT") == null ? "0"
						: (resultSet.getString("SEM2_PROJECT_CT").trim());
				subMaxMinMap.put("sem2_project_ct", sem2ProjectCt);
				sem2OtherCt = resultSet.getString("SEM2_OTHER_CT") == null ? "0"
						: (resultSet.getString("SEM2_OTHER_CT").trim());
				subMaxMinMap.put("sem2_other_ct", sem2OtherCt);
				sem2Oral1Ct = resultSet.getString("SEM2_ORAL1_CT") == null ? "0"
						: (resultSet.getString("SEM2_ORAL1_CT").trim());
				subMaxMinMap.put("sem2_oral1_ct", sem2Oral1Ct);
				sem2Pract1Ct = resultSet.getString("SEM2_PRACT1_CT") == null ? "0"
						: (resultSet.getString("SEM2_PRACT1_CT").trim());
				subMaxMinMap.put("sem2_pract1_ct", sem2Pract1Ct);
				sem2Write1Ct = resultSet.getString("SEM2_WRITE1_CT") == null ? "0"
						: (resultSet.getString("SEM2_WRITE1_CT").trim());
				subMaxMinMap.put("sem2_write1_ct", sem2Write1Ct);
				sem2PresCt = resultSet.getString("SEM2_PRES_CT") == null ? "0"
						: (resultSet.getString("SEM2_PRES_CT").trim());
				subMaxMinMap.put("sem2_pres_ct", sem2PresCt);
				sem2McapCt = resultSet.getString("SEM2_MCAP_CT") == null ? "0"
						: (resultSet.getString("SEM2_MCAP_CT").trim());
				subMaxMinMap.put("sem2_mcap_ct", sem2McapCt);
				sem2DobsCt = resultSet.getString("SEM2_DOBS_CT") == null ? "0"
						: (resultSet.getString("SEM2_DOBS_CT").trim());
				subMaxMinMap.put("sem2_dobs_ct", sem2DobsCt);
				sem2ObtCt = resultSet.getString("SEM2_OBT_CT") == null ? "0"
						: (resultSet.getString("SEM2_OBT_CT").trim());
				subMaxMinMap.put("sem2_obt_ct", sem2ObtCt);
				sem2OralCt = resultSet.getString("SEM2_ORAL_CT") == null ? "0"
						: (resultSet.getString("SEM2_ORAL_CT").trim());
				subMaxMinMap.put("sem2_oral_ct", sem2OralCt);
				sem2AssignCt = resultSet.getString("SEM2_ASSIGN_CT") == null ? "0"
						: (resultSet.getString("SEM2_ASSIGN_CT").trim());
				subMaxMinMap.put("sem2_assign_ct", sem2AssignCt);
				sem2WriteCt = resultSet.getString("SEM2_WRITE_CT") == null ? "0"
						: (resultSet.getString("SEM2_WRITE_CT").trim());
				subMaxMinMap.put("sem2_write_ct", sem2WriteCt);
				sem2PractCt = resultSet.getString("SEM2_PRACT_CT") == null ? "0"
						: (resultSet.getString("SEM2_PRACT_CT").trim());
				subMaxMinMap.put("sem2_pract_ct", sem2PractCt);
				sem2ActivityCt = resultSet.getString("SEM2_ACTIVITY_CT") == null ? "0"
						: (resultSet.getString("SEM2_ACTIVITY_CT").trim());
				subMaxMinMap.put("sem2_act_ct", sem2ActivityCt);
				sem2SpeakCt = resultSet.getString("SEM2_SPEAK_CT") == null ? "0"
						: (resultSet.getString("SEM2_SPEAK_CT").trim());
				subMaxMinMap.put("sem2_speak_ct", sem2SpeakCt);
				sem2ListenCt = resultSet.getString("SEM2_LISTEN_CT") == null ? "0"
						: (resultSet.getString("SEM2_LISTEN_CT").trim());
				subMaxMinMap.put("sem2_listen_ct", sem2ListenCt);
				sem2Assign1Ct = resultSet.getString("SEM2_ASSIGN1_CT") == null ? "0"
						: (resultSet.getString("SEM2_ASSIGN1_CT").trim());
				subMaxMinMap.put("sem2_assign1_ct", sem2Assign1Ct);
				sem2InTotCt = resultSet.getString("SEM2_INTOT_CT") == null ? "0"
						: (resultSet.getString("SEM2_INTOT_CT").trim());
				subMaxMinMap.put("sem2_intot_ct", sem2InTotCt);

				orderNo = resultSet.getString("ORDER_NO") == null ? "0" : (resultSet.getString("ORDER_NO").trim());
				subMaxMinMap.put("order_no", orderNo);
				subjectMap.put(sub, subMaxMinMap);

				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return subjectMap;
	}

	// /////////Find Subject list alloting
	// subject////////////////////////////////////////
	public List<String> findSubListClassAllot(SessionData sessionData, String academicYear, String std)
			throws Exception {

		logger.info("=========findSubListClassAllot Query============");
		String findQuery = "";
		String subDB = "";
		String stdDB = "";
		String subTitleDB = "";
		String optionDB = "";
		String gradeDB = "";
		boolean findFlag = false;
		List subList = new ArrayList();

		try {
			findQuery = "SELECT SUBJECT_NAME FROM " + sessionData.getDBName() + "." + "SUJECT_ALLOTMENT WHERE STD='"
					+ std + "' AND ACADEMIC_YEAR='" + academicYear + "'";
//			logger.info("findSubListClassAllot == " + findQuery);

			connectDatabase(sessionData);
			/*
			 * Class.forName(driver); try { connection = DriverManager.getConnection(url,
			 * user, pwd); } catch (Exception e) {
			 * logger.error("Database connectivity issue...");
			 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); }
			 */
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				subDB = resultSet.getString("SUBJECT_NAME");
				subList.add(subDB);
				findFlag = true;
			}
			logger.info("findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
			/*
			 * if (resultSet != null) { resultSet.close(); } if (connection != null) {
			 * connection.close(); }
			 */
		}
		return subList;
	}

	/////////// Find StudentSubjectAllot
	/////////// list////////////////////////////////////////
	public List<String> findStudentSubjectAllot(SessionData sessionData, String academicYear, String std, String div,
			String selTitle, String selAll) throws Exception {

		logger.info("=========findStudentSubjectAllot Query============");
//		logger.info("selAll == " + selAll);
		selTitle = selTitle.replace(" ", "_");
//		logger.info("selTitle == " + selTitle);
		String grDB = "";
		String nameDB = "";
		String findQuery = "";
		String rollNoDB = "";
		String grClassAllot = "";
		String rollClassAllot = "";
		String suidClassAllot = "";
		String optAlloted = "Select";
		String presentStdDb = "";
		String optionalSubjDb = "";
		String insertOptionalAllot = "";
		boolean findFlag = false;
		List studentList = new ArrayList();
		List subTitleList = new ArrayList();

		try {
			connectDatabase(sessionData);

			// insert new students in optional_allotment
			String newStudentsQuery = "select * from class_allotment WHERE class_allotment.PRESENT_STD = '" + std
					+ "' AND " + "class_allotment.PRESENT_DIV='" + div + "' AND class_allotment.ACADEMIC_YEAR = '"
					+ academicYear + "' AND " + "class_allotment.SECTION_NM='" + sessionData.getSectionName()
					+ "' AND "
					+ "GR_NO NOT IN (select GR_NO from OPTIONAL_ALLOTMENT WHERE OPTIONAL_ALLOTMENT.PRESENT_STD = '"
					+ std + "' AND " + "OPTIONAL_ALLOTMENT.PRESENT_DIV='" + div
					+ "' AND OPTIONAL_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear + "' AND "
					+ "OPTIONAL_ALLOTMENT.SECTION_NM='" + sessionData.getSectionName() + "')";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentsQuery);

			while (resultSet.next()) {
				grClassAllot = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				rollClassAllot = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				suidClassAllot = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());

				insertOptionalAllot = "INSERT INTO OPTIONAL_ALLOTMENT "
						+ "(GR_NO,PRESENT_STD,PRESENT_DIV,ACADEMIC_YEAR,"
						+ "CREATED_BY,SECTION_NM,ROLL_NO,CREATED_DATE,SUID) " + "VALUES ('"
						+ grClassAllot.trim().toUpperCase() + "','" + std.trim().toUpperCase() + "','"
						+ div.trim().toUpperCase() + "','" + academicYear.trim().toUpperCase() + "','"
						+ sessionData.getUserName().trim().toUpperCase() + "','" + sessionData.getSectionName() + "',"
						+ "" + rollClassAllot + ",SYSDATE(),'" + suidClassAllot + "')";

//				logger.info("insertOptionalAllot===>" + insertOptionalAllot);
				statement = connection.createStatement();
				statement.executeUpdate(insertOptionalAllot);
			}
			//
			List subjectList = new ArrayList();
			subjectList = findSubjectAndTitle(sessionData, std, selTitle, "YES", academicYear);
			String[] optionalSubjDbList;
			String optionalSubjectStr = "";

			String[] subjectArray = new String[subjectList.size()];
			subjectArray = (String[]) subjectList.toArray(subjectArray);
//			logger.info("subjectArray === " + subjectArray.length);

			findQuery = "SELECT DISTINCT OPTIONAL_ALLOTMENT.GR_NO,OPTIONAL_ALLOTMENT.*,HS_GENERAL_REGISTER.FIRST_NAME,HS_GENERAL_REGISTER.LAST_NAME,HS_GENERAL_REGISTER.FATHER_NAME "
					+ "FROM " + sessionData.getDBName() + "." + "OPTIONAL_ALLOTMENT LEFT OUTER JOIN "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
					+ "OPTIONAL_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM = OPTIONAL_ALLOTMENT.SECTION_NM "
					+ "WHERE OPTIONAL_ALLOTMENT.PRESENT_STD = '" + std.trim() + "' AND OPTIONAL_ALLOTMENT.PRESENT_DIV='"
					+ div.trim() + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0) "
					+ "AND OPTIONAL_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear.trim() + "' "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM='" + sessionData.getSectionName()
					+ "' ORDER BY CONVERT(OPTIONAL_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
//			logger.info("findStudentSubjectAllot == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO");
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				optionalSubjDb = resultSet.getString("OPTIONAL_SUBJECT") == null ? ""
						: (resultSet.getString("OPTIONAL_SUBJECT").trim());

				if (!optionalSubjDb.equalsIgnoreCase("") && optionalSubjDb.substring(0, 1).equalsIgnoreCase("|")) {
					optionalSubjDb = optionalSubjDb.substring(1);
				}
				if (selAll.equalsIgnoreCase("YES") || selAll.equalsIgnoreCase("NO")) {
					optAlloted = selAll;
				} else {
					optionalSubjectStr = optionalSubjDb.replace("|", ",");
					optionalSubjDbList = optionalSubjectStr.split(",");
					for (int i = 0; i < optionalSubjDbList.length; i++) {
						if (optionalSubjDbList[i].equalsIgnoreCase(selTitle + "_YES")) {
							optAlloted = "YES";
							break;
						} else if (optionalSubjDbList[i].equalsIgnoreCase(selTitle + "_NO")) {
							optAlloted = "NO";
							break;
						} else if (optionalSubjDbList[i].equalsIgnoreCase("")) {
							optAlloted = "Select";
							break;
						}
					}
				}

				studentList.add(nameDB + "|" + grDB + "||" + rollNoDB + "|||" + optAlloted + "||||" + optionalSubjDb);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentList;
	}

	/////////// Find getStudentOptSubAllot////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getStudentOptSubAllot(SessionData sessionData,
			String academicYear, String std, String div, boolean isLeftStudentNeeded) throws Exception {

		logger.info("=========getStudentOptSubAllot Query============");
		String grDB = "", nameDB = "", rollNoDB = "", optionalSubjDb = "", addCondition = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> studentOptSubAllot = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		try {

			if (!isLeftStudentNeeded) {
				addCondition = "AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0)";
			}
			String findQuery = "SELECT DISTINCT OPTIONAL_ALLOTMENT.GR_NO,OPTIONAL_ALLOTMENT.*,HS_GENERAL_REGISTER.FIRST_NAME,HS_GENERAL_REGISTER.LAST_NAME,HS_GENERAL_REGISTER.FATHER_NAME "
					+ "FROM " + sessionData.getDBName() + "." + "OPTIONAL_ALLOTMENT LEFT OUTER JOIN "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER ON "
					+ "OPTIONAL_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM = OPTIONAL_ALLOTMENT.SECTION_NM "
					+ "WHERE OPTIONAL_ALLOTMENT.PRESENT_STD = '" + std.trim() + "' AND OPTIONAL_ALLOTMENT.PRESENT_DIV='"
					+ div.trim() + "' " + addCondition + " AND OPTIONAL_ALLOTMENT.ACADEMIC_YEAR = '"
					+ academicYear.trim() + "' " + "AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ sessionData.getSectionName() + "' ORDER BY CONVERT(OPTIONAL_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
//			logger.info("getStudentOptSubAllot == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> individualOptSubAllot = new LinkedHashMap<String, String>();
				grDB = resultSet.getString("GR_NO");
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				optionalSubjDb = resultSet.getString("OPTIONAL_SUBJECT") == null ? ""
						: (resultSet.getString("OPTIONAL_SUBJECT").trim());

				individualOptSubAllot.put("grNo", grDB);
				individualOptSubAllot.put("name", nameDB);
				individualOptSubAllot.put("rollNo", rollNoDB);
				individualOptSubAllot.put("optionalSubject", optionalSubjDb);
				studentOptSubAllot.put(grDB, individualOptSubAllot);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentOptSubAllot;
	}

	// /////////////updateStudentSubAllot///////////////////////////////
	public boolean updateStudentSubAllot(SessionData sessionData, List<String> studentList, String academic,
			String std, String div, String updateAllSubTitle, String section, String selTitle) throws Exception {

		logger.info("=======inside updateStudentSubAllot========");
		try {
			boolean allotCompulsorySubFlag = false;
//			logger.info("academic == " + academic);
//			logger.info("std == " + std);
//			logger.info("div == " + div);
//			logger.info("updateAllSubTitle == " + updateAllSubTitle);
			selTitle = selTitle.replace(" ", "_");
//			logger.info("selTitle == " + selTitle);
			String optional = "";
			connectDatabase(sessionData);

			String[] studentArray = new String[studentList.size()];
			studentArray = (String[]) studentList.toArray(studentArray);
//			logger.info("studentArray === " + studentArray.length);

			for (int k = 0; k < studentArray.length; k++) {
				String updateSubStudAllot = "";
//				logger.info("subject detail before update == " + studentArray[k].toString());
				String studentName = studentArray[k].substring(0, studentArray[k].indexOf("|"));
				String grNo = studentArray[k].substring(studentArray[k].indexOf("|") + 1,
						studentArray[k].indexOf("||"));
				String rollNo = studentArray[k].substring(studentArray[k].indexOf("||") + 2,
						studentArray[k].indexOf("|||"));
//				String subTitle = subTitle = studentArray[k].substring(studentArray[k].lastIndexOf("|||") + 3);
				String subTitle = studentArray[k].substring(studentArray[k].indexOf("|||") + 3,
						studentArray[k].indexOf("||||"));
				String optSubjects = studentArray[k].substring(studentArray[k].lastIndexOf("||||") + 4);
				optSubjects = "|" + optSubjects + "|";
				updateSubStudAllot = "UPDATE OPTIONAL_ALLOTMENT SET ";

				if (subTitle.equalsIgnoreCase("YES")) {
					optional = selTitle + "_YES";
					optSubjects = optSubjects.replace("|" + selTitle + "_NO|", "|");
					optSubjects = optSubjects.replace("|" + selTitle + "_YES|", "|");

					optSubjects = optSubjects + "|" + optional;
					optSubjects = optSubjects.replace("||", "|");
					updateSubStudAllot = updateSubStudAllot + "OPTIONAL_SUBJECT = '" + optSubjects + "'";
				} else if (subTitle.equalsIgnoreCase("NO")) {
					optional = selTitle + "_NO";
					optSubjects = optSubjects.replace("|" + selTitle + "_YES|", "|");
					optSubjects = optSubjects.replace("|" + selTitle + "_NO|", "|");

					optSubjects = optSubjects + "|" + optional;
					optSubjects = optSubjects.replace("||", "|");
					updateSubStudAllot = updateSubStudAllot + "OPTIONAL_SUBJECT = '" + optSubjects + "'";
				}

				updateSubStudAllot = updateSubStudAllot + " WHERE ACADEMIC_YEAR='" + academic.trim()
						+ "' AND PRESENT_STD='" + std + "' AND GR_NO='" + grNo + "' AND SECTION_NM='" + section + "'";

//				logger.info("updateSubStudAllot query===>" + updateSubStudAllot);
				statement = connection.createStatement();
				statement.executeUpdate(updateSubStudAllot);
			}
			logger.info("StudentSubAllot data updated successfully...");
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	// /////////////updateStudentSubAllot///////////////////////////////
	public boolean allotCompulsorySub(SessionData sessionData, String academic, String std, String div, String section,
			String selTitle) throws Exception {

		logger.info("=======inside updateStudentSubAllot========");
		try {
//			logger.info("academic == " + academic);
//			logger.info("std == " + std);
//			logger.info("div == " + div);
			String optional = "";
			String compulsoryQuery = "";

			List subjectList = new ArrayList();
			subjectList = findSubjectAndTitle(sessionData, std, selTitle, "NO", academic);

			String[] subjectArray = new String[subjectList.size()];
			subjectArray = (String[]) subjectList.toArray(subjectArray);
//			logger.info("subjectArray === " + subjectArray.length);

			compulsoryQuery = "UPDATE CLASS_ALLOTMENT SET ";
			for (int j = 0; j < subjectArray.length; j++) {
//				logger.info("subjectArray == " + subjectArray[j].toString());
				String sub = subjectArray[j];

				if (j == subjectArray.length - 1) {
					compulsoryQuery = compulsoryQuery + "" + sub + " = 'YES'";
				} else {
					compulsoryQuery = compulsoryQuery + "" + sub + " = 'YES',";
				}
			}

			compulsoryQuery = compulsoryQuery + " WHERE ACADEMIC_YEAR='" + academic.trim() + "' AND PRESENT_STD='" + std
					+ "' AND SECTION_NM='" + section + "'";

//			logger.info("compulsoryQuery query===>" + compulsoryQuery);
			statement = connection.createStatement();
			int retcompulsoryQuery = statement.executeUpdate(compulsoryQuery);

			if (retcompulsoryQuery > 0) {
				logger.info("Compulsory Subject data updated successfully for " + retcompulsoryQuery + " rows");
				JOptionPane.showMessageDialog(null,
						"Compulsory Subject data updated successfully for " + std + " std.");
			} else {
				logger.info("Compulsory Subject data not updated successfully..." + retcompulsoryQuery);
				JOptionPane.showMessageDialog(null,
						"Compulsory Subject data not updated successfully..." + std + " std.");
			}
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////Find Subject List for class allotment
	// ////////////////////////////////////////
	public List<String> findSubjectAndTitle(SessionData sessionData, String std, String selTitle, String optional,
			String academicYear) throws Exception {

		logger.info("=========findSubjectAndTitle Query============");
		String findQuery = "";
		String subject = "";
		String subjectTitle = "";
		List subjectList = new ArrayList();
		boolean retFlag = false;

		try {
			if (optional.equalsIgnoreCase("YES")) {
				findQuery = "select SUBJECT_NAME FROM " + sessionData.getDBName() + "."
						+ "subject where SUBJECT_TITLE='" + selTitle + "' AND STD_1='" + std
						+ "' AND OPTIONAL='YES' AND ACADEMIC_YEAR='" + academicYear + "' AND (SECTION_NM='"
						+ sessionData.getSectionName() + "')";
			} else {
				findQuery = "select SUBJECT_NAME FROM " + sessionData.getDBName() + "." + "subject where STD_1='" + std
						+ "' AND OPTIONAL='NO' AND ACADEMIC_YEAR='" + academicYear + "' " + "AND (SECTION_NM='"
						+ sessionData.getSectionName() + "')";
			}
//			logger.info("findSubjectAndTitle query == " + findQuery);

			// Class.forName(driver);
			// connection = DriverManager.getConnection(url, user, pwd);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				subject = resultSet.getString("SUBJECT_NAME");
				subjectList.add(subject);
				retFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			if (resultSet != null) {
				resultSet.close();
			}
			// if(connection != null){
			// connection.close();
			// }
		}
		return subjectList;
	}

	// /////////Find Subject List ////////////////////////////////////////
	public List<String> findSubjectList(SessionData sessionData, String std, String academicYear) throws Exception {

		logger.info("=========findSubjectList Query============");
		String findQuery = "";
		String subject = "";
		String subjectTitle = "";
		String optional = "";
		List subjectList = new ArrayList();
		boolean retFlag = false;

		try {
			findQuery = "SELECT DISTINCT SUBJECT_NAME FROM " + sessionData.getDBName() + "."
					+ "SUBJECT WHERE STD_1 = '" + std + "' " + "AND ACADEMIC_YEAR='" + academicYear
					+ "' AND (SECTION_NM='" + sessionData.getSectionName() + "')";
//			logger.info("findSubjectList query == " + findQuery);

			connectDatabase(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				subject = resultSet.getString("SUBJECT_NAME");
				subjectList.add(subject);
				retFlag = true;
			}
//			logger.info("subjectList size : " + subjectList.size());
		} catch (Exception e) {
			cm.logException(e);
		}
		return subjectList;
	}

	public String newStudentsInMarksEntry(SessionData sessionData, String academic, String std, String div,
			String section) {
		// /////////insert new student into
		// marks_entry//////////////////////////////////////////
		String academicDB = "";
		String grNoDB = "";
		String rollNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "";
		String fatherNameDB = "";
		String stdDB = "", grStr = "";
		String divDB = "";
		String response = "";
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		try {

			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);

			String findNewStudentQuery = "SELECT GR_NO FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE "
					+ "ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='" + section + "' AND STD_1='" + std
					+ "' AND DIV_1='" + div + "'";
//			logger.info("fetch new student list query == " + findNewStudentQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findNewStudentQuery);

			while (resultSet.next()) {
				grNoDB = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				grStr = grStr + ",'" + grNoDB + "'";
			}
			if (grStr.length() > 1) {
				grStr = grStr.substring(1);
			} else {
				grStr = "''";
			}

			findNewStudentQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT WHERE "
					+ "GR_NO NOT IN (" + grStr + ") AND " + "ACADEMIC_YEAR='" + academic + "' AND PRESENT_STD='" + std
					+ "' AND PRESENT_DIV='" + div + "' AND " + "SECTION_NM='" + section + "'";
//			logger.info("fetch new student list query == " + findNewStudentQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findNewStudentQuery);

			while (resultSet.next()) {
				String insertNewStud = "";
				academicDB = resultSet.getString("ACADEMIC_YEAR") == null ? ""
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				grNoDB = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				if (studentLCMap.containsKey(grNoDB)) {
					continue;
				}
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "" : (resultSet.getString("ROLL_NO").trim());
				lastNameDB = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				firstNameDB = resultSet.getString("FIRST_NAME") == null ? ""
						: (resultSet.getString("FIRST_NAME").trim());
				fatherNameDB = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				stdDB = resultSet.getString("PRESENT_STD") == null ? "" : (resultSet.getString("PRESENT_STD").trim());
				divDB = resultSet.getString("PRESENT_DIV") == null ? "" : (resultSet.getString("PRESENT_DIV").trim());

				insertNewStud = "INSERT INTO MARKS_ENTRY (ACADEMIC_YEAR,GR_NO,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,CREATED_DATE,CREATED_BY,SECTION_NM) "
						+ "VALUES('" + academicDB + "','" + grNoDB + "','" + rollNoDB + "','" + lastNameDB + "','"
						+ firstNameDB + "','" + fatherNameDB + "','" + stdDB + "','" + divDB + "',SYSDATE(),'','"
						+ section + "')";

//				logger.info("insertNewStud query===>" + insertNewStud); 
				statement = connection.createStatement();
				statement.executeUpdate(insertNewStud);
			}
			response = "success";
			logger.info("insertNewStud data updated successfully...");
		} catch (Exception e) {
			response = "error";
			cm.logException(e);
			return response;
		}
		return response;
	}

	// /////////Find MARKS_ENTRY DATA List//////////////////////////////////////////
	public List<String> findMarksEntryList(SessionData sessionData, String academic, String std, String div,
			String exam, String subject, String type, String section, String last, String first, String father)
			throws Exception {

		logger.info("=========findMarksEntryList Query============");
		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String findSubjectQuery = "";
		String subjectTitle = "";
		String subjectName = "";
		String optional = "";
		String academicDB = "", lcDate = "";
		String rollNoDB = "";
		String grNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "";
		String fatherNameDB = "";
		String stdDB = "";
		String divDB = "";
		String subjectDB = "";
		TreeMap fetchSubjectList = new TreeMap();
		TreeMap fetchSubjectTitleList = new TreeMap();
		List fetchNewStudList = new ArrayList();
		List fetchMarksList = new ArrayList();
		String subjectColumn = "";
		boolean retFlag = false;
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		LinkedHashMap<String, String> dataMap = new LinkedHashMap<String, String>();

		try {
			if (exam.equalsIgnoreCase("Semester 1")) {
				subjectColumn = "F";
			} else {
				subjectColumn = "S";
			}

			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);

			subjectColumn = subject.toUpperCase() + "_" + subjectColumn + type.substring(0, 3);
			if (type.contains("1")) {
				subjectColumn = subjectColumn + "1";
			}
			////////// to fetch subject list/////////////////////////////////////
			if (!subject.equalsIgnoreCase("") && !subject.equalsIgnoreCase("SELECT")
					&& !subject.equalsIgnoreCase("ALL")) {

			}
			findSubjectQuery = "SELECT SUBJECT_TITLE,SUBJECT_NAME,OPTIONAL FROM " + sessionData.getDBName() + "."
					+ "SUBJECT WHERE STD_1='" + std + "' " + "AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='"
					+ sessionData.getSectionName() + "')";
//			logger.info("fetch subject list query == " + findSubjectQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findSubjectQuery);

			while (resultSet.next()) {
				subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? ""
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subjectTitle = subjectTitle.replace(" ", "_");
				subjectName = resultSet.getString("SUBJECT_NAME") == null ? ""
						: (resultSet.getString("SUBJECT_NAME").trim());
				optional = resultSet.getString("OPTIONAL") == null ? "" : (resultSet.getString("OPTIONAL").trim());
				fetchSubjectList.put(subjectName, optional);
				fetchSubjectTitleList.put(subjectName, subjectTitle);
			}
//			logger.info("fetchSubjectList size : " + fetchSubjectList.size());

			// ////////to fetch student list/////////////////////////////////////
			if (!exam.equalsIgnoreCase("Final")) {
				String isOptional = fetchSubjectList.get(subject.toUpperCase()).toString();
				String subTitle = fetchSubjectTitleList.get(subject.toUpperCase()).toString();
				if (isOptional.equalsIgnoreCase("YES")) {
					findQuery = "SELECT ACADEMIC_YEAR,GR_NO,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,"
							+ subjectColumn + " FROM " + sessionData.getDBName() + "."
							+ "MARKS_ENTRY WHERE GR_NO IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
							+ "OPTIONAL_ALLOTMENT  WHERE OPTIONAL_SUBJECT LIKE '%" + subTitle
							+ "_YES%' and optional_allotment.ACADEMIC_YEAR='" + academic + "' and present_std='" + std
							+ "' and " + "optional_allotment.SECTION_NM='" + section + "') " + "AND ACADEMIC_YEAR='"
							+ academic + "' AND STD_1='" + std + "' AND DIV_1='" + div + "' AND SECTION_NM='" + section
							+ "' " + "ORDER BY CONVERT(MARKS_ENTRY.ROLL_NO, DECIMAL) ASC";
//					logger.info("fetch student list query for optional subject == " + findQuery);
				} else {
					findQuery = "SELECT ACADEMIC_YEAR,GR_NO,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,"
							+ subjectColumn + " FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE "
							+ "ACADEMIC_YEAR='" + academic + "' AND STD_1='" + std + "' AND DIV_1='" + div
							+ "' AND SECTION_NM='" + section + "' "
							+ "ORDER BY CONVERT(MARKS_ENTRY.ROLL_NO, DECIMAL) ASC";
//					logger.info("fetch student list query for mandatory subject == " + findQuery);
				}
			} else {
				findQuery = "SELECT MARKS_ENTRY.ACADEMIC_YEAR,MARKS_ENTRY.GR_NO,MARKS_ENTRY.ROLL_NO,MARKS_ENTRY.LAST_NAME,MARKS_ENTRY.FIRST_NAME,"
						+ "MARKS_ENTRY.FATHER_NAME,MARKS_ENTRY.STD_1,MARKS_ENTRY.DIV_1,result_data.FINAL_PERCENT "
						+ "FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY LEFT JOIN " + sessionData.getDBName()
						+ "." + "RESULT_DATA "
						+ "ON MARKS_ENTRY.GR_NO=result_data.GR_NO AND MARKS_ENTRY.SECTION_NM=result_data.SECTION_NM "
						+ "AND MARKS_ENTRY.ACADEMIC_YEAR=result_data.ACADEMIC_YEAR "
						+ "WHERE MARKS_ENTRY.ACADEMIC_YEAR='" + academic + "' AND MARKS_ENTRY.STD_1='" + std + "' AND "
						+ "MARKS_ENTRY.DIV_1='" + div + "' AND MARKS_ENTRY.SECTION_NM='" + section
						+ "' ORDER BY CONVERT(MARKS_ENTRY.ROLL_NO, DECIMAL) ASC";
//				logger.info("fetch student list query for mandatory subject == " + findQuery);
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				academicDB = resultSet.getString("ACADEMIC_YEAR") == null ? ""
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				grNoDB = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				lastNameDB = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				firstNameDB = resultSet.getString("FIRST_NAME") == null ? ""
						: (resultSet.getString("FIRST_NAME").trim());
				fatherNameDB = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				stdDB = resultSet.getString("STD_1") == null ? "" : (resultSet.getString("STD_1").trim());
				divDB = resultSet.getString("DIV_1") == null ? "" : (resultSet.getString("DIV_1").trim());
				lcDate = studentLCMap.get(grNoDB);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicDB) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicDB),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicDB)) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicDB)) {
					continue;
				}

				if (!exam.equalsIgnoreCase("Final")) {
					subjectDB = resultSet.getString(subjectColumn.trim()) == null ? "0"
							: (resultSet.getString(subjectColumn).trim());
				} else {
					subjectDB = resultSet.getString("FINAL_PERCENT") == null ? "0"
							: (resultSet.getString("FINAL_PERCENT").trim());
				}
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				if (dataMap.get(grNoDB) == null) {
					fetchMarksList.add(grNoDB + "|" + rollNoDB + "||" + lastNameDB + " " + firstNameDB + " "
							+ fatherNameDB + "|||" + subjectDB);
				}
				dataMap.put(grNoDB, grNoDB);
				retFlag = true;
			}
			// /////////end of fetch student list from marks
			// entry/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			cm.logException(e);
		}
		return fetchMarksList;
	}

	// /////////Marks Entry template file////////////////////////////////////////
	public List<String> findMarksEntryTemplate(SessionData sessionData, String academic, String std, String div,
			String exam, String subject, String type, String section, String last, String first, String father)
			throws Exception {

		logger.info("=========findMarksEntryTemplate Query============");
		resultSet = connection.getMetaData().getCatalogs();
		ResultSet resultSetColumn = connection.getMetaData().getCatalogs();
		String databaseName = sessionData.getDBName();
		String dateToday = cm.getCurrentDate().toLowerCase();
		List tableColumnList = new ArrayList();
		List emptyList = new ArrayList();

		String subType = "";
		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String findSubjectQuery = "";
		String subjectTitle = "";
		String subjectName = "";
		String optional = "";
		String academicDB = "";
		String grNoDB = "";
		String rollNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "";
		String fatherNameDB = "";
		String stdDB = "";
		String divDB = "";
		String subjectDB = "";
		String queryCondition = "";
		LinkedHashMap fetchSubjectList = new LinkedHashMap();
		LinkedHashMap fetchSubjectTitleList = new LinkedHashMap();
		LinkedHashMap subjectMaxMarksMap = new LinkedHashMap();
		List fetchNewStudList = new ArrayList();
		List fetchMarksList = new ArrayList();
		String subjectColumn = "";
		boolean retFlag = false;
		String examInitial = "";
		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "sem1";
		} else if (exam.equalsIgnoreCase("Semester 2")) {
			examInitial = "sem2";
		}

		subjectColumn = subject.toUpperCase() + "_" + subjectColumn + type.substring(0, 3);
		////////// to fetch subject list/////////////////////////////////////
		if (!subject.equalsIgnoreCase("") && !subject.equalsIgnoreCase("SELECT") && !subject.equalsIgnoreCase("ALL")) {
			queryCondition = " AND SUBJECT_NAME='" + subject + "' ORDER BY ORDER_NO ASC";
		}
		findSubjectQuery = "SELECT SUBJECT_TITLE,SUBJECT_NAME,OPTIONAL FROM " + sessionData.getDBName() + "."
				+ "SUBJECT WHERE STD_1='" + std + "' " + "AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='"
				+ sessionData.getSectionName() + "')" + queryCondition;
//		logger.info("fetch subject list query == " + findSubjectQuery);

		statement = connection.createStatement();
		resultSet = statement.executeQuery(findSubjectQuery);

		while (resultSet.next()) {
			subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? ""
					: (resultSet.getString("SUBJECT_TITLE").trim());
			subjectTitle = subjectTitle.replace(" ", "_");
			subjectName = resultSet.getString("SUBJECT_NAME") == null ? ""
					: (resultSet.getString("SUBJECT_NAME").trim());
			optional = resultSet.getString("OPTIONAL") == null ? "" : (resultSet.getString("OPTIONAL").trim());
			fetchSubjectList.put(subjectName, optional);
			fetchSubjectTitleList.put(subjectName, subjectTitle);
		}
//		logger.info("fetchSubjectList size : " + fetchSubjectList.size());

		subjectMaxMarksMap.putAll(findSubMaxMinList(sessionData, academic, std));

		if (last.equalsIgnoreCase("") && first.equalsIgnoreCase("") && father.equalsIgnoreCase("")) {
			findMarksQuery = "SELECT '" + exam
					+ "' AS 'EXAM', ACADEMIC_YEAR,GR_NO,ROLL_NO,concat(MARKS_ENTRY.LAST_NAME,' ',MARKS_ENTRY.FIRST_NAME,' ',MARKS_ENTRY.FATHER_NAME) AS NAME,STD_1,DIV_1 "
					+ "FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE ACADEMIC_YEAR='" + academic
					+ "' AND STD_1='" + std + "' AND DIV_1='" + div + "' AND SECTION_NM='"
					+ sessionData.getSectionName() + "' ORDER BY CONVERT(MARKS_ENTRY.ROLL_NO, DECIMAL) ASC";
		} else {
			findMarksQuery = "SELECT '" + exam
					+ "' AS 'EXAM', ACADEMIC_YEAR,GR_NO,ROLL_NO,concat(MARKS_ENTRY.LAST_NAME,' ',MARKS_ENTRY.FIRST_NAME,' ',MARKS_ENTRY.FATHER_NAME) AS NAME,STD_1,DIV_1 "
					+ "FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE ACADEMIC_YEAR='" + academic
					+ "' AND STD_1='" + std + "' AND DIV_1='" + div + "' AND SECTION_NM='"
					+ sessionData.getSectionName() + "' " + "AND (LAST_NAME='" + last + "' OR FIRST_NAME='" + first
					+ "' OR FATHER_NAME='" + father + "')";
		}
//		logger.info("findMarksQuery query == " + findMarksQuery);

		try {
			if (fetchSubjectList.size() > 0) {
				String columnName = "EXAM|ACADEMIC_YEAR|GR_NO|ROLL_NO|NAME|STD|DIV";
				String maxMarks = " | | | |Maximum Marks| | ";
				if (type.equalsIgnoreCase("Remark")) {
					maxMarks = " | | | |Remarks| | ";
				}
				Set set = fetchSubjectList.entrySet();
				Iterator i = set.iterator();
				while (i.hasNext()) {
					Map.Entry me = (Map.Entry) i.next();
					LinkedHashMap individualMaxMarksMap = new LinkedHashMap();
					individualMaxMarksMap = (LinkedHashMap) subjectMaxMarksMap.get(me.getKey());

					if (!type.equalsIgnoreCase("") && !type.equalsIgnoreCase("All")) {
						columnName = columnName + "|" + me.getKey() + "_" + type;

						subType = type;
						if (type.equalsIgnoreCase("FUT") || type.equalsIgnoreCase("SUT")
								|| type.equalsIgnoreCase("TEST")) {
							subType = "obt";
						} else if (type.contains("SUM_")) {
							subType = type.substring(type.indexOf("_") + 1) + "1";
						}

						if (type.equalsIgnoreCase("Remark")) {
							maxMarks = maxMarks + "| ";
						} else {
							maxMarks = maxMarks + "|"
									+ individualMaxMarksMap.get(examInitial + "_" + subType.toLowerCase());
						}
					} else if (!std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI")
							&& !std.equalsIgnoreCase("XII")) {
						columnName = columnName + "|" + me.getKey() + "_DOBS" + "|" + me.getKey() + "_ORAL" + "|"
								+ me.getKey() + "_PRACT" + "|" + me.getKey() + "_ACT" + "|" + me.getKey() + "_PROJECT"
								+ "|" + me.getKey() + "_TEST" + "|" + me.getKey() + "_ASSIGN" + "|" + me.getKey()
								+ "_OTHER" + "|" + me.getKey() + "_SUM_ORAL" + "|" + me.getKey() + "_SUM_PRACT" + "|"
								+ me.getKey() + "_SUM_WRITE";

						if (type.equalsIgnoreCase("Remark")) {
							maxMarks = " | | | |Remarks| | | | | | | | | | | | | ";
						} else {
							maxMarks = maxMarks + "|" + individualMaxMarksMap.get(examInitial + "_dobs") + "|"
									+ individualMaxMarksMap.get(examInitial + "_oral") + "|"
									+ individualMaxMarksMap.get(examInitial + "_pract") + "|"
									+ individualMaxMarksMap.get(examInitial + "_act") + "|"
									+ individualMaxMarksMap.get(examInitial + "_project") + "|"
									+ individualMaxMarksMap.get(examInitial + "_obt") + "|"
									+ individualMaxMarksMap.get(examInitial + "_assign") + "|"
									+ individualMaxMarksMap.get(examInitial + "_other") + "|"
									+ individualMaxMarksMap.get(examInitial + "_oral1") + "|"
									+ individualMaxMarksMap.get(examInitial + "_pract1") + "|"
									+ individualMaxMarksMap.get(examInitial + "_write1");
						}
					} else if (std.equalsIgnoreCase("IX") || std.equalsIgnoreCase("X")) {
						if (exam.equalsIgnoreCase("Semester 1")) {
							columnName = columnName + "|" + me.getKey() + "_FUT" + "|" + me.getKey() + "_PRES" + "|"
									+ me.getKey() + "_MCAP" + "|" + me.getKey() + "_WRITE" + "|" + me.getKey()
									+ "_PRACT" + "|" + me.getKey() + "_ACT";

							if (type.equalsIgnoreCase("Remark")) {
								maxMarks = " | | | |Remarks| | | | | | | | ";
							} else {
								maxMarks = maxMarks + "|" + individualMaxMarksMap.get(examInitial + "_obt") + "|"
										+ individualMaxMarksMap.get(examInitial + "_pres") + "|"
										+ individualMaxMarksMap.get(examInitial + "_mcap") + "|"
										+ individualMaxMarksMap.get(examInitial + "_write") + "|"
										+ individualMaxMarksMap.get(examInitial + "_pract") + "|"
										+ individualMaxMarksMap.get(examInitial + "_act");
							}
						} else if (exam.equalsIgnoreCase("Semester 2")) {
							columnName = columnName + "|" + me.getKey() + "_SUT" + "|" + me.getKey() + "_PRES" + "|"
									+ me.getKey() + "_MCAP" + "|" + me.getKey() + "_WRITE" + "|" + me.getKey()
									+ "_PRACT" + "|" + me.getKey() + "_ACT";

							if (type.equalsIgnoreCase("Remark")) {
								maxMarks = " | | | |Remarks| | | | | | | | ";
							} else {
								maxMarks = maxMarks + "|" + individualMaxMarksMap.get(examInitial + "_obt") + "|"
										+ individualMaxMarksMap.get(examInitial + "_pres") + "|"
										+ individualMaxMarksMap.get(examInitial + "_mcap") + "|"
										+ individualMaxMarksMap.get(examInitial + "_write") + "|"
										+ individualMaxMarksMap.get(examInitial + "_pract") + "|"
										+ individualMaxMarksMap.get(examInitial + "_act");
							}
						}
					} else if (exam.equalsIgnoreCase("Semester 1")) {
						columnName = columnName + "|" + me.getKey() + "_FUT" + "|" + me.getKey() + "_ORAL" + "|"
								+ me.getKey() + "_ASSIGN" + "|" + me.getKey() + "_WRITE" + "|" + me.getKey() + "_PRACT";

						if (type.equalsIgnoreCase("Remark")) {
							maxMarks = " | | | |Remarks| | | | | | | ";
						} else {
							maxMarks = maxMarks + "|" + individualMaxMarksMap.get(examInitial + "_obt") + "|"
									+ individualMaxMarksMap.get(examInitial + "_oral") + "|"
									+ individualMaxMarksMap.get(examInitial + "_assign") + "|"
									+ individualMaxMarksMap.get(examInitial + "_write") + "|"
									+ individualMaxMarksMap.get(examInitial + "_pract");
						}
					} else if (exam.equalsIgnoreCase("Semester 2")) {
						columnName = columnName + "|" + me.getKey() + "_SUT" + "|" + me.getKey() + "_ORAL" + "|"
								+ me.getKey() + "_ASSIGN" + "|" + me.getKey() + "_WRITE" + "|" + me.getKey() + "_PRACT";

						if (type.equalsIgnoreCase("Remark")) {
							maxMarks = " | | | |Remarks| | | | | | | ";
						} else {
							maxMarks = maxMarks + "|" + individualMaxMarksMap.get(examInitial + "_obt") + "|"
									+ individualMaxMarksMap.get(examInitial + "_oral") + "|"
									+ individualMaxMarksMap.get(examInitial + "_assign") + "|"
									+ individualMaxMarksMap.get(examInitial + "_write") + "|"
									+ individualMaxMarksMap.get(examInitial + "_pract");
						}
					}
				}

				TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
				studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);
				MarksEntryTemplateExcel marksEntryTemplateExcel = new MarksEntryTemplateExcel();
				marksEntryTemplateExcel.MarksEntryTemplateMethod(sessionData, "TEMPLATE", "marks_entry",
						findMarksQuery, emptyList, false,
						"Subject_" + subject + "_Type_" + type + "_MARKS ENTRY TEMPLATE on " + dateToday, columnName,
						maxMarks, exam, std, div, studentLCMap);
			} else {
				cm.showMessageDialog("No subjects found to download template.");
			}
		} catch (Exception e) {
			logger.error("Exception BackupTables =" + e);
		} finally {
			resultSet.close();
			resultSetColumn.close();
			System.gc();
		}
		return tableColumnList;
	}

	public String getTopData(SessionData sessionData, String columnName, String tableName, String section)
			throws Exception {

		String retValue = "";
		String getTopDataquery = "";
		boolean retflag = false;
		try {
			getTopDataquery = "SELECT " + columnName + " FROM " + sessionData.getDBName() + "." + "(SELECT * FROM "
					+ sessionData.getDBName() + "." + tableName + " WHERE SECTION_NM='" + section
					+ "' ORDER BY CONVERT(" + tableName + "." + columnName + " DESC) LIMIT 1";
//			logger.info("getTopDataquery::" + getTopDataquery);

			connectDatabase(sessionData);
			/*
			 * Class.forName(driver); try { connection = DriverManager.getConnection(url,
			 * user, pwd); } catch (Exception e) {
			 * logger.error("Database connectivity issue...");
			 * JOptionPane.showMessageDialog(null, "Database connectivity issue..."); }
			 */
			statement = connection.createStatement();
			resultSet = statement.executeQuery(getTopDataquery);

			while (resultSet.next()) {
				retValue = resultSet.getString(columnName.toUpperCase());
				retflag = true;
			}
			if (retflag == false) {
				retValue = "0";
			}
//			logger.info("retValue=" + retValue);
			return retValue;
		} catch (Exception e) {
			cm.logException(e);
			return retValue;
		} finally {
			closeDatabase(sessionData);
			/*
			 * if (resultSet != null) { resultSet.close(); } if (connection != null) {
			 * connection.close(); }
			 */
		}
	}

	// /////////////updateSubMarks///////////////////////////////
	public boolean updateSubMarks(SessionData sessionData, List<String> subMarksList, String academic, String std,
			String div, String subject, String subExamType, String examType, String lvType, String maxSubMarks,
			String actualLvType) throws Exception {

		logger.info("=======inside updateSubMarks========");
		String subjectTitle = "";
		String subjectName = "";
		String optionalStaus = "";
		String subjectInQuery = "";
		String sub1 = subject + "_" + examType + "DOB";
		String sub2 = subject + "_" + examType + "OBT";
		String sub3 = subject + "_" + examType + "ORA";
		String sub4 = subject + "_" + examType + "ASS";
		String sub5 = subject + "_" + examType + "WRI";
		String sub6 = subject + "_" + examType + "PRA";
		String sub7 = subject + "_" + examType + "PRE";
		String sub8 = subject + "_" + examType + "MCA";
		String sub9 = subject + "_" + examType + "ACT";
		String sub10 = subject + "_" + examType + "PRO";
		String sub11 = subject + "_" + examType + "OTH";
		String sub12 = subject + "_" + examType + "ORA1";
		String sub13 = subject + "_" + examType + "PRA1";
		String sub14 = subject + "_" + examType + "WRI1";
		String sub15 = subject + "_" + examType + "REM";
		String sub16 = subject + "_" + examType + "LIS";
		String sub17 = subject + "_" + examType + "SPE";
		String sub18 = subject + "_" + examType + "ASS1";
		String sub19 = subject + "_" + examType + "ITOT";

		String sub1Db, sub2Db, sub3Db, sub4Db, sub5Db, sub6Db, sub7Db, sub8Db, sub9Db, sub10Db, sub11Db, sub12Db,
				sub13Db, sub14Db, sub15Db, sub16Db, sub17Db, sub18Db, sub19Db = "";
		String gr_no = "";
		TreeMap studentMap = new TreeMap();
		TreeMap subjectGroupList = new TreeMap();
		String studentListQuery = "";
		String subjectTotalName = subject + "_" + examType + "TOT";
		String subjectSem = "";
		double convertMarksTo = 0.0;
		double convertRatio = 1.0;
		double totalAfterConversion = 0.0;
		LinkedHashMap subjectConvertMap = new LinkedHashMap();
		String remarkList = "";
		boolean isValid = false;
		String[] remList;

		subjectConvertMap.putAll(findSubMaxMinList(sessionData, academic, std));
		subjectGroupList = fetchSubjectGroupList(sessionData, std, academic);

		if (examType.equalsIgnoreCase("F")) {
			subjectSem = "SEM1";
		} else if (examType.equalsIgnoreCase("S")) {
			subjectSem = "SEM2";
		}

		try {

			//////// get subject list//////////////////////
			String subListQuery = "SELECT SUBJECT_TITLE,SUBJECT_NAME,OPTIONAL FROM " + sessionData.getDBName() + "."
					+ "SUBJECT WHERE STD_1='" + std + "' AND SUBJECT_NAME='" + subject + "' AND ACADEMIC_YEAR='"
					+ academic + "' AND (SECTION_NM='" + sessionData.getSectionName() + "')";
//			logger.info("find subListQuery == " + subListQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(subListQuery);

			while (resultSet.next()) {
				subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? ""
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subjectName = resultSet.getString("SUBJECT_NAME") == null ? ""
						: (resultSet.getString("SUBJECT_NAME").trim());
				optionalStaus = resultSet.getString("OPTIONAL") == null ? "" : (resultSet.getString("OPTIONAL").trim());
			}
			/////// get subject list ends//////////////////////
			///////// get a list of student with option status/////////////////////////
			subjectInQuery = sub1 + "," + sub2 + "," + sub3 + "," + sub4 + "," + sub5 + "," + sub6 + "," + sub7 + ","
					+ sub8 + "," + sub9 + "," + sub10 + "," + sub11 + "," + sub12 + "," + sub13 + "," + sub14 + ","
					+ sub16 + "," + sub17 + "," + sub18 + "," + sub19;
			if (optionalStaus.equalsIgnoreCase("NO")) {
				studentListQuery = "SELECT ACADEMIC_YEAR,GR_NO,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,"
						+ subjectInQuery + " " + "FROM " + sessionData.getDBName() + "."
						+ "MARKS_ENTRY WHERE ACADEMIC_YEAR='" + academic + "' AND STD_1='" + std + "' AND DIV_1='" + div
						+ "'  AND (SECTION_NM='" + sessionData.getSectionName()
						+ "') ORDER BY CONVERT(MARKS_ENTRY.ROLL_NO, DECIMAL) ASC";
			} else {
				studentListQuery = "SELECT ACADEMIC_YEAR,GR_NO,ROLL_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,STD_1,DIV_1,"
						+ subjectInQuery + " " + "FROM " + sessionData.getDBName() + "."
						+ "MARKS_ENTRY WHERE GR_NO IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "OPTIONAL_ALLOTMENT  WHERE " + "OPTIONAL_SUBJECT LIKE '%" + subjectTitle.toUpperCase()
						+ "_YES%') AND ACADEMIC_YEAR='" + academic + "' AND STD_1='" + std + "' AND DIV_1='" + div
						+ "' AND (SECTION_NM='" + sessionData.getSectionName() + "') "
						+ "ORDER BY CONVERT(MARKS_ENTRY.ROLL_NO, DECIMAL) ASC";
			}

//			logger.info("find studentListQuery == " + studentListQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(studentListQuery);

			while (resultSet.next()) {
				gr_no = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());

				sub1Db = resultSet.getString(subject + "_" + examType + "DOB") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "DOB").trim());
				sub2Db = resultSet.getString(subject + "_" + examType + "OBT") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "OBT").trim());
				sub3Db = resultSet.getString(subject + "_" + examType + "ORA") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "ORA").trim());
				sub4Db = resultSet.getString(subject + "_" + examType + "ASS") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "ASS").trim());
				sub5Db = resultSet.getString(subject + "_" + examType + "WRI") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "WRI").trim());
				sub6Db = resultSet.getString(subject + "_" + examType + "PRA") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "PRA").trim());
				sub7Db = resultSet.getString(subject + "_" + examType + "PRE") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "PRE").trim());
				sub8Db = resultSet.getString(subject + "_" + examType + "MCA") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "MCA").trim());
				sub9Db = resultSet.getString(subject + "_" + examType + "ACT") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "ACT").trim());
				sub10Db = resultSet.getString(subject + "_" + examType + "PRO") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "PRO").trim());
				sub11Db = resultSet.getString(subject + "_" + examType + "OTH") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "OTH").trim());
				sub12Db = resultSet.getString(subject + "_" + examType + "ORA1") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "ORA1").trim());
				sub13Db = resultSet.getString(subject + "_" + examType + "PRA1") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "PRA1").trim());
				sub14Db = resultSet.getString(subject + "_" + examType + "WRI1") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "WRI1").trim());
				sub16Db = resultSet.getString(subject + "_" + examType + "LIS") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "LIS").trim());
				sub17Db = resultSet.getString(subject + "_" + examType + "SPE") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "SPE").trim());
				sub18Db = resultSet.getString(subject + "_" + examType + "ASS1") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "ASS1").trim());
				sub19Db = resultSet.getString(subject + "_" + examType + "ITOT") == null ? ""
						: (resultSet.getString(subject + "_" + examType + "ITOT").trim());

				if (sub1Db.equalsIgnoreCase("") || sub1Db == null)
					sub1Db = "0";
				if (sub2Db.equalsIgnoreCase("") || sub2Db == null)
					sub2Db = "0";
				if (sub3Db.equalsIgnoreCase("") || sub3Db == null)
					sub3Db = "0";
				if (sub4Db.equalsIgnoreCase("") || sub4Db == null)
					sub4Db = "0";
				if (sub5Db.equalsIgnoreCase("") || sub5Db == null)
					sub5Db = "0";
				if (sub6Db.equalsIgnoreCase("") || sub6Db == null)
					sub6Db = "0";
				if (sub7Db.equalsIgnoreCase("") || sub7Db == null)
					sub7Db = "0";
				if (sub8Db.equalsIgnoreCase("") || sub8Db == null)
					sub8Db = "0";
				if (sub9Db.equalsIgnoreCase("") || sub9Db == null)
					sub9Db = "0";
				if (sub10Db.equalsIgnoreCase("") || sub10Db == null)
					sub10Db = "0";
				if (sub11Db.equalsIgnoreCase("") || sub11Db == null)
					sub11Db = "0";
				if (sub12Db.equalsIgnoreCase("") || sub12Db == null)
					sub12Db = "0";
				if (sub13Db.equalsIgnoreCase("") || sub13Db == null)
					sub13Db = "0";
				if (sub14Db.equalsIgnoreCase("") || sub14Db == null)
					sub14Db = "0";
				if (sub16Db.equalsIgnoreCase("") || sub16Db == null)
					sub16Db = "0";
				if (sub17Db.equalsIgnoreCase("") || sub17Db == null)
					sub17Db = "0";
				if (sub18Db.equalsIgnoreCase("") || sub18Db == null)
					sub18Db = "0";
				if (sub19Db.equalsIgnoreCase("") || sub19Db == null)
					sub19Db = "0";

				studentMap.put(gr_no,
						sub1Db + "|" + sub2Db + "||" + sub3Db + "|||" + sub4Db + "||||" + sub5Db + "|||||" + sub6Db
								+ "||||||" + sub7Db + "|||||||" + sub8Db + "||||||||" + sub9Db + "|||||||||" + sub10Db
								+ "||||||||||" + sub11Db + "|||||||||||" + sub12Db + "||||||||||||" + sub13Db
								+ "|||||||||||||" + sub14Db + "||||||||||||||" + sub16Db + "|||||||||||||||" + sub17Db
								+ "||||||||||||||||" + sub18Db + "|||||||||||||||||" + sub19Db);
			}
			///////// get a list of student with option status
			///////// ends/////////////////////////

			TreeMap maxMarksforSubject = new TreeMap();
			maxMarksforSubject = getMaxMarksForSubject(sessionData, subjectName, std, academic, subjectSem);

			String[] marksArray = new String[subMarksList.size()];
			marksArray = subMarksList.toArray(marksArray);
//			logger.info("marksArray === " + marksArray.length);

			for (int k = 0; k < marksArray.length; k++) {
				String updateSubMarks = "";
//				logger.info("subject marks detail before update== " + marksArray[k].toString());
				String grNo = marksArray[k].substring(0, marksArray[k].indexOf("|"));
				String subMarks = marksArray[k].substring(marksArray[k].lastIndexOf("|||") + 3);
				if (studentMap.get(grNo) != null && !lvType.equalsIgnoreCase("REM")) {
					String dob, obt, ora, ass, wri, pra, pre, act, pro, oth, ora1, pra1, wri1, lis, spe, ass1, itot,
							mca = "";
					String marksData = studentMap.get(grNo).toString();

					dob = marksData.substring(0, marksData.indexOf("|"));
					obt = marksData.substring(marksData.indexOf("|") + 1, marksData.indexOf("||"));
					ora = marksData.substring(marksData.indexOf("||") + 2, marksData.indexOf("|||"));
					ass = marksData.substring(marksData.indexOf("|||") + 3, marksData.indexOf("||||"));
					wri = marksData.substring(marksData.indexOf("||||") + 4, marksData.indexOf("|||||"));
					pra = marksData.substring(marksData.indexOf("|||||") + 5, marksData.indexOf("||||||"));
					pre = marksData.substring(marksData.indexOf("||||||") + 6, marksData.indexOf("|||||||"));
					mca = marksData.substring(marksData.indexOf("|||||||") + 7, marksData.indexOf("||||||||"));
					act = marksData.substring(marksData.indexOf("||||||||") + 8, marksData.indexOf("|||||||||"));
					pro = marksData.substring(marksData.indexOf("|||||||||") + 9, marksData.indexOf("||||||||||"));
					oth = marksData.substring(marksData.indexOf("||||||||||") + 10, marksData.indexOf("|||||||||||"));
					ora1 = marksData.substring(marksData.indexOf("|||||||||||") + 11,
							marksData.indexOf("||||||||||||"));
					pra1 = marksData.substring(marksData.indexOf("||||||||||||") + 12,
							marksData.indexOf("|||||||||||||"));
					wri1 = marksData.substring(marksData.indexOf("|||||||||||||") + 13,
							marksData.indexOf("||||||||||||||"));
					lis = marksData.substring(marksData.indexOf("||||||||||||||") + 14,
							marksData.indexOf("|||||||||||||||"));
					spe = marksData.substring(marksData.indexOf("|||||||||||||||") + 15,
							marksData.indexOf("||||||||||||||||"));
					ass1 = marksData.substring(marksData.indexOf("||||||||||||||||") + 16,
							marksData.indexOf("|||||||||||||||||"));
					itot = marksData.substring(marksData.lastIndexOf("|||||||||||||||||") + 17);

					if (lvType.equalsIgnoreCase("DOB")) {
						dob = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("OBT")) {
						obt = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("ORA")) {
						ora = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("ASS")) {
						ass = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("WRI")) {
						wri = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("PRA")) {
						pra = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("PRE")) {
						pre = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("MCA")) {
						mca = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("ACT")) {
						act = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("PRO")) {
						pro = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("OTH")) {
						oth = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("ORA1")) {
						ora1 = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("PRA1")) {
						pra1 = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("WRI1")) {
						wri1 = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("LIS")) {
						lis = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("SPE")) {
						spe = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("ASS1")) {
						ass1 = subMarks.trim();
					} else if (lvType.equalsIgnoreCase("ITOT")) {
						itot = subMarks.trim();
					}

					double subMarksTotal = 0.0;
					String reasonForAbsence = "";
					String subjectMarksToUpdate = "";
					double absentForMarks = 0.0;

					////////// neeed to implement logic for MG & AB
					//// add conversion logic for absent for marks here
					if (cm.validateNumber(dob)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, dob, subject,
								maxMarksforSubject.get("DOBS").toString(), "DOBS", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("DOBS").toString(), subject,
								maxMarksforSubject.get("DOBS").toString(), "DOBS", subjectConvertMap, subjectSem);
					} else if (!dob.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + dob;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("DOBS").toString(), subject,
								maxMarksforSubject.get("DOBS").toString(), "DOBS", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (dob.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}
					if (cm.validateNumber(obt)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, obt, subject,
								maxMarksforSubject.get("OBT").toString(), "OBT", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion
								+ cm.convertMarks(std, maxMarksforSubject.get("OBT").toString(), subject,
										maxMarksforSubject.get("OBT").toString(), "OBT", subjectConvertMap, subjectSem);
					} else if (!obt.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + obt;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("OBT").toString(), subject,
								maxMarksforSubject.get("OBT").toString(), "OBT", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (obt.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}
					if (cm.validateNumber(ora)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, ora, subject,
								maxMarksforSubject.get("ORAL").toString(), "ORAL", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("ORAL").toString(), subject,
								maxMarksforSubject.get("ORAL").toString(), "ORAL", subjectConvertMap, subjectSem);
					} else if (!ora.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + ora;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("ORAL").toString(), subject,
								maxMarksforSubject.get("ORAL").toString(), "ORAL", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (ora.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}
					if (cm.validateNumber(ass)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, ass, subject,
								maxMarksforSubject.get("ASSIGN").toString(), "ASSIGN", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("ASSIGN").toString(), subject,
								maxMarksforSubject.get("ASSIGN").toString(), "ASSIGN", subjectConvertMap, subjectSem);
					} else if (!ass.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + ass;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("ASSIGN").toString(), subject,
								maxMarksforSubject.get("ASSIGN").toString(), "ASSIGN", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (ass.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}
					if (cm.validateNumber(wri)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, wri, subject,
								maxMarksforSubject.get("WRITE").toString(), "WRITE", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("WRITE").toString(), subject,
								maxMarksforSubject.get("WRITE").toString(), "WRITE", subjectConvertMap, subjectSem);
					} else if (!wri.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + wri;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("WRITE").toString(), subject,
								maxMarksforSubject.get("WRITE").toString(), "WRITE", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (wri.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}
					if (cm.validateNumber(pra)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, pra, subject,
								maxMarksforSubject.get("PRACT").toString(), "PRACT", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("PRACT").toString(), subject,
								maxMarksforSubject.get("PRACT").toString(), "PRACT", subjectConvertMap, subjectSem);
					} else if (!pra.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + pra;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("PRACT").toString(), subject,
								maxMarksforSubject.get("PRACT").toString(), "PRACT", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (pra.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(pre)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, pre, subject,
								maxMarksforSubject.get("PRES").toString(), "PRES", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("PRES").toString(), subject,
								maxMarksforSubject.get("PRES").toString(), "PRES", subjectConvertMap, subjectSem);
					} else if (!pre.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + pre;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("PRES").toString(), subject,
								maxMarksforSubject.get("PRES").toString(), "PRES", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (pre.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(mca)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, mca, subject,
								maxMarksforSubject.get("MCAP").toString(), "MCAP", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("MCAP").toString(), subject,
								maxMarksforSubject.get("MCAP").toString(), "MCAP", subjectConvertMap, subjectSem);
					} else if (!mca.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + mca;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("MCAP").toString(), subject,
								maxMarksforSubject.get("MCAP").toString(), "MCAP", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (mca.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(act)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, act, subject,
								maxMarksforSubject.get("ACTIVITY").toString(), "ACT", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("ACTIVITY").toString(), subject,
								maxMarksforSubject.get("ACTIVITY").toString(), "ACT", subjectConvertMap, subjectSem);
					} else if (!act.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + act;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("ACTIVITY").toString(),
								subject, maxMarksforSubject.get("ACTIVITY").toString(), "ACT", subjectConvertMap,
								subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (act.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(pro)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, pro, subject,
								maxMarksforSubject.get("PROJECT").toString(), "PROJECT", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("PROJECT").toString(), subject,
								maxMarksforSubject.get("PROJECT").toString(), "PROJECT", subjectConvertMap, subjectSem);
					} else if (!pro.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + pro;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("PROJECT").toString(),
								subject, maxMarksforSubject.get("PROJECT").toString(), "PROJECT", subjectConvertMap,
								subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (pro.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(oth)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, oth, subject,
								maxMarksforSubject.get("OTHER").toString(), "OTHER", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("OTHER").toString(), subject,
								maxMarksforSubject.get("OTHER").toString(), "OTHER", subjectConvertMap, subjectSem);
					} else if (!oth.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + oth;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("OTHER").toString(), subject,
								maxMarksforSubject.get("OTHER").toString(), "OTHER", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (oth.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(ora1)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, ora1, subject,
								maxMarksforSubject.get("ORAL1").toString(), "ORAL1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("ORAL1").toString(), subject,
								maxMarksforSubject.get("ORAL1").toString(), "ORAL1", subjectConvertMap, subjectSem);
					} else if (!ora1.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + ora1;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("ORAL1").toString(), subject,
								maxMarksforSubject.get("ORAL1").toString(), "ORAL1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (ora1.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(pra1)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, pra1, subject,
								maxMarksforSubject.get("PRACT1").toString(), "PRACT1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("PRACT1").toString(), subject,
								maxMarksforSubject.get("PRACT1").toString(), "PRACT1", subjectConvertMap, subjectSem);
					} else if (!pra1.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + pra1;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("PRACT1").toString(), subject,
								maxMarksforSubject.get("PRACT1").toString(), "PRACT1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (pra1.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(wri1)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, wri1, subject,
								maxMarksforSubject.get("WRITE1").toString(), "WRITE1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("WRITE1").toString(), subject,
								maxMarksforSubject.get("WRITE1").toString(), "WRITE1", subjectConvertMap, subjectSem);
					} else if (!wri1.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + wri1;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("WRITE1").toString(), subject,
								maxMarksforSubject.get("WRITE1").toString(), "WRITE1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (wri1.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(lis)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, lis, subject,
								maxMarksforSubject.get("LISTEN").toString(), "LISTEN", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("LISTEN").toString(), subject,
								maxMarksforSubject.get("LISTEN").toString(), "LISTEN", subjectConvertMap, subjectSem);
					} else if (!lis.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + lis;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("LISTEN").toString(), subject,
								maxMarksforSubject.get("LISTEN").toString(), "LISTEN", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (lis.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(spe)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, spe, subject,
								maxMarksforSubject.get("SPEAK").toString(), "SPEAK", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("SPEAK").toString(), subject,
								maxMarksforSubject.get("SPEAK").toString(), "SPEAK", subjectConvertMap, subjectSem);
					} else if (!spe.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + spe;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("SPEAK").toString(), subject,
								maxMarksforSubject.get("SPEAK").toString(), "SPEAK", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (spe.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (cm.validateNumber(ass1)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, ass1, subject,
								maxMarksforSubject.get("ASSIGN1").toString(), "ASSIGN1", subjectConvertMap, subjectSem);
						totalAfterConversion = totalAfterConversion + cm.convertMarks(std,
								maxMarksforSubject.get("ASSIGN1").toString(), subject,
								maxMarksforSubject.get("ASSIGN1").toString(), "ASSIGN1", subjectConvertMap, subjectSem);
					} else if (!ass1.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + ass1;
						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("ASSIGN1").toString(),
								subject, maxMarksforSubject.get("ASSIGN1").toString(), "ASSIGN1", subjectConvertMap,
								subjectSem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (ass1.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

//					if (cm.validateNumber(itot)){
//						subMarksTotal = subMarksTotal + cm.convertMarks(std, itot, subject, maxMarksforSubject.get("INTOT").toString(), "INTOT", subjectConvertMap, subjectSem);
//						totalAfterConversion = totalAfterConversion + cm.convertMarks(std, maxMarksforSubject.get("INTOT").toString(), subject, maxMarksforSubject.get("INTOT").toString(), "INTOT", subjectConvertMap, subjectSem);
//					} else if(!itot.equalsIgnoreCase("")){
//						reasonForAbsence = reasonForAbsence +","+ itot;
//						double maxConverted = cm.convertMarks(std, maxMarksforSubject.get("INTOT").toString(), subject, maxMarksforSubject.get("INTOT").toString(), "INTOT", subjectConvertMap, subjectSem);
//						totalAfterConversion = totalAfterConversion + maxConverted;
//						
//						if(itot.equalsIgnoreCase("MG")){
//							absentForMarks = absentForMarks +  maxConverted;
//						}
//					}

					String subMarksTotalStr = Math.round(subMarksTotal) + "";
					String totalAfterConversionStr = Math.round(totalAfterConversion) + "";
					if (reasonForAbsence.contains("MG")) {
						subjectMarksToUpdate = subMarksTotalStr + "+MG+" + absentForMarks + "+T"
								+ totalAfterConversionStr;
					} else if (reasonForAbsence.contains("AB")) {
						subjectMarksToUpdate = subMarksTotalStr + "+AB+" + absentForMarks + "+T"
								+ totalAfterConversionStr;
					} else if (reasonForAbsence.contains("RTE")) {
						subjectMarksToUpdate = subMarksTotalStr + "+RTE+" + absentForMarks + "+T"
								+ totalAfterConversionStr;
					} else {
						subjectMarksToUpdate = subMarksTotalStr + "+T" + totalAfterConversionStr;
					}

					updateSubMarks = "UPDATE MARKS_ENTRY SET " + sub1 + " = '" + dob + "'," + sub2 + " = '" + obt + "',"
							+ sub3 + " = '" + ora + "'," + sub4 + " = '" + ass + "'," + sub5 + " = '" + wri + "',"
							+ sub6 + " = '" + pra + "'," + sub7 + " = '" + pre + "'," + sub8 + " = '" + mca + "',"
							+ sub9 + " = '" + act + "'," + sub10 + " = '" + pro + "'," + sub11 + " = '" + oth + "',"
							+ sub12 + " = '" + ora1 + "'," + sub13 + " = '" + pra1 + "'," + sub14 + " = '" + wri1 + "',"
							+ sub16 + " = '" + lis + "'," + sub17 + " = '" + spe + "'," + sub18 + " = '" + ass1 + "',"
							+ sub19 + " = '" + itot + "'," + subjectTotalName + " = '" + subjectMarksToUpdate
							+ "', CHANGED = 1 " + "WHERE ACADEMIC_YEAR='" + academic.trim() + "' AND GR_NO='" + grNo
							+ "'" + " AND STD_1='" + std + "' AND DIV_1='" + div + "' AND (SECTION_NM='"
							+ sessionData.getSectionName() + "')";

					statement = connection.createStatement();
					statement.executeUpdate(updateSubMarks);
					totalAfterConversion = 0;
					isValid = true;

				} else if (studentMap.get(grNo) != null) {
					remarkList = sessionData.getConfigMap().get("REMARK_LIST_" + std + "_" + subject);
					isValid = false;
					if (remarkList == null) {
						remarkList = "";
					}
					remList = remarkList.split(",");
					for (int i = 0; i < remList.length; i++) {
						if (remList[i].equalsIgnoreCase(subMarks.trim()) || subMarks.equalsIgnoreCase("-")
								|| subMarks.trim().equalsIgnoreCase("")) {
							isValid = true;
							break;
						}
					}

					if (isValid) {
						updateSubMarks = "UPDATE MARKS_ENTRY SET " + sub15 + " = '" + subMarks.trim() + "' "
								+ "WHERE ACADEMIC_YEAR='" + academic.trim() + "' AND GR_NO='" + grNo + "'"
								+ " AND STD_1='" + std + "' AND DIV_1='" + div + "' AND (SECTION_NM='"
								+ sessionData.getSectionName() + "')";

						statement = connection.createStatement();
						statement.executeUpdate(updateSubMarks);
						totalAfterConversion = 0;

					}
				}
				if (!isValid && studentMap.get(grNo) != null) {
					JOptionPane.showMessageDialog(null,
							"Uploading Rejected for GR No. " + grNo + " as remark is " + subMarks + ". \n "
									+ "Please enter remarks from below list for subject " + subject + " \n "
									+ remarkList);
					return false;
				}
			}
			logger.info("subject marks data updated successfully..");
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////////updateSubMarksFromMap///////////////////////////////
	public boolean updateSubMarksFromMap(SessionData sessionData, LinkedHashMap<String, String> grMarksDataMap,
			String academic, String std, String div, LinkedHashMap<String, LinkedHashMap<String, String>> maxSubMarks,
			String semester, LinkedHashMap<String, LinkedHashMap<String, String>> studentOptSubAllotMap)
			throws Exception {
		logger.info("========updateSubMarksFromMap=============");

		String allExamType = "DOB,OBT,ORA,ASS,WRI,PRA,PRE,MCA,ACT,PRO,OTH,ORA1,PRA1,WRI1";
		double subMarksTotal = 0.0;
		String reasonForAbsence = "", examTypeFromList = "", semInital = "", sem = "", typeObtainedMarks = "",
				subTypeMaxMarks = "";
		String subjectMarksToUpdate = "", subjectFromMaxMap = "", subjectTitleFromMaxMap = "", examTypeFromMap = "",
				columnName = "", columnNameTot = "";
		double absentForMarks = 0.0;
		LinkedHashMap examTypeMap = new LinkedHashMap<>();
		LinkedHashMap marksWhenMap = new LinkedHashMap<>();
		LinkedHashMap totalWhenMap = new LinkedHashMap<>();

		double convertMarksTo = 0.0;
		double convertRatio = 1.0;
		double totalAfterConversion = 0.0;

		try {
			if (cm.is9thEvaluation(std, academic)) {
				allExamType = "DOB,OBT,ORA,ASS,WRI,PRA,PRE,MCA,ACT,PRO,OTH,ORA1,PRA1,WRI1,LIS,SPE,ASS1";
			}

			examTypeMap = cm.getExamTypeMapping();

			if (semester.equalsIgnoreCase("Semester 1")) {
				semInital = "F";
				sem = "sem1";
			} else if (semester.equalsIgnoreCase("Semester 2")) {
				semInital = "S";
				sem = "sem2";
			}

			String grNo = grMarksDataMap.get("grNo");
			String optionalSubject = studentOptSubAllotMap.get(grNo).get("optionalSubject");

			Set set = maxSubMarks.entrySet();
			Iterator imaxSubMarks = set.iterator();
			while (imaxSubMarks.hasNext()) {
				LinkedHashMap subjectMaxMarksMap = new LinkedHashMap();
				LinkedHashMap subjectTypeMaxMarksMap = new LinkedHashMap();
				boolean skipFlag = false;
				Map.Entry me = (Map.Entry) imaxSubMarks.next();
				subjectFromMaxMap = me.getKey().toString();
				subjectMaxMarksMap.put(subjectFromMaxMap, (LinkedHashMap) me.getValue());
				subjectTypeMaxMarksMap = (LinkedHashMap) me.getValue();
				subjectTitleFromMaxMap = (String) subjectTypeMaxMarksMap.get("subject_title");

				// check if student selected optional subject
				String[] optionList = optionalSubject.split("\\|");
				for (int k = 0; k < optionList.length; k++) {
					if (optionList[k].equalsIgnoreCase(subjectTitleFromMaxMap + "_NO")) {
						skipFlag = true;
					}
				}
				if (skipFlag) {
					continue;
				}
				//// add conversion logic for absent for marks here

				String[] examTypeList = allExamType.split(Pattern.quote(","));
				for (int l = 0; l < examTypeList.length; l++) {
					examTypeFromList = examTypeList[l];
					examTypeFromMap = examTypeMap.get(examTypeFromList).toString();
					subTypeMaxMarks = (String) subjectTypeMaxMarksMap.get(sem + "_" + examTypeFromMap);
					columnName = subjectFromMaxMap + "_" + semInital + examTypeFromList;
					columnNameTot = subjectFromMaxMap + "_" + semInital + "TOT";
					typeObtainedMarks = grMarksDataMap.get(columnName);

					if (cm.validateNumber(typeObtainedMarks)) {
						subMarksTotal = subMarksTotal + cm.convertMarks(std, typeObtainedMarks, subjectFromMaxMap,
								subTypeMaxMarks, examTypeFromMap.toUpperCase(), subjectMaxMarksMap, sem);
						totalAfterConversion = totalAfterConversion
								+ cm.convertMarks(std, subTypeMaxMarks, subjectFromMaxMap, subTypeMaxMarks,
										examTypeFromMap.toUpperCase(), subjectMaxMarksMap, sem);
					} else if (typeObtainedMarks != null && !typeObtainedMarks.equalsIgnoreCase("")) {
						reasonForAbsence = reasonForAbsence + "," + typeObtainedMarks;
						double maxConverted = cm.convertMarks(std, subTypeMaxMarks, subjectFromMaxMap, subTypeMaxMarks,
								examTypeFromMap.toUpperCase(), subjectMaxMarksMap, sem);
						totalAfterConversion = totalAfterConversion + maxConverted;

						if (typeObtainedMarks.equalsIgnoreCase("MG")) {
							absentForMarks = absentForMarks + maxConverted;
						}
					}

					if (marksWhenMap.get(columnName) != null) {
						marksWhenMap.put(columnName, marksWhenMap.get(columnName) + " WHEN (GR_NO='" + grNo
								+ "') THEN '" + typeObtainedMarks + "'");
					} else {
						marksWhenMap.put(columnName, " WHEN (GR_NO='" + grNo + "') THEN '" + typeObtainedMarks + "'");
					}
				}

				String subMarksTotalStr = Math.round(subMarksTotal) + "";
				String totalAfterConversionStr = Math.round(totalAfterConversion) + "";
				if (reasonForAbsence.contains("MG")) {
					subjectMarksToUpdate = subMarksTotalStr + "+MG+" + absentForMarks + "+T" + totalAfterConversionStr;
				} else if (reasonForAbsence.contains("AB")) {
					subjectMarksToUpdate = subMarksTotalStr + "+AB+" + absentForMarks + "+T" + totalAfterConversionStr;
				} else {
					subjectMarksToUpdate = subMarksTotalStr + "+T" + totalAfterConversionStr;
				}

				if (totalWhenMap.get(columnNameTot) != null) {
					totalWhenMap.put(columnNameTot, totalWhenMap.get(columnNameTot) + " WHEN (GR_NO='" + grNo
							+ "') THEN '" + subjectMarksToUpdate + "'");
				} else {
					totalWhenMap.put(columnNameTot, " WHEN (GR_NO='" + grNo + "') THEN '" + subjectMarksToUpdate + "'");
				}

				totalAfterConversion = 0;
				subMarksTotal = 0;
				reasonForAbsence = "";
				absentForMarks = 0;
			}

			String updateSubMarksQuery = "";

			Set setMarksWhenMap = marksWhenMap.entrySet();
			Iterator imarksWhenMap = setMarksWhenMap.iterator();
			while (imarksWhenMap.hasNext()) {
				Map.Entry me = (Map.Entry) imarksWhenMap.next();
				updateSubMarksQuery = updateSubMarksQuery + " " + me.getKey().toString() + " = CASE " + me.getValue();
				updateSubMarksQuery = updateSubMarksQuery + " ELSE " + me.getKey() + " END,";
			}

			Set setTotalWhenMap = totalWhenMap.entrySet();
			Iterator itotalWhenMap = setTotalWhenMap.iterator();
			while (itotalWhenMap.hasNext()) {
				Map.Entry me = (Map.Entry) itotalWhenMap.next();
				updateSubMarksQuery = updateSubMarksQuery + " " + me.getKey().toString() + " = CASE " + me.getValue();
				updateSubMarksQuery = updateSubMarksQuery + " ELSE " + me.getKey() + " END,";
			}

			updateSubMarksQuery = updateSubMarksQuery.substring(0, updateSubMarksQuery.length() - 1);
			updateSubMarksQuery = "UPDATE " + sessionData.getDBName() + ".marks_entry SET " + updateSubMarksQuery
					+ " WHERE GR_NO IN('" + grNo + "') AND STD_1 ='" + std + "' AND DIV_1 = '" + div
					+ "' AND ACADEMIC_YEAR = '" + academic + "' AND SECTION_NM='" + sessionData.getSectionName() + "'";

//			logger.info("updateSubMarksQuery query =>" + updateSubMarksQuery);
			statement = connection.createStatement();
			statement.executeUpdate(updateSubMarksQuery);

			cm.showMessageDialog("Marks updated successfully for Gr No. " + grNo);
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
		return true;
	}

	///// getMaxMarksForSubject/////////////
	public TreeMap<String, String> getMaxMarksForSubject(SessionData sessionData, String subjectName, String std,
			String academic, String semester) throws Exception {

		TreeMap tm = new TreeMap();
		String query = "";
		String dob, obt, ora, ass, wri, pra, pre, mca, act, pro, oth, ora1, pra1, wri1, lis, spe, ass1, itot = "";

		try {
			query = "SELECT * FROM " + sessionData.getDBName() + "." + "subject_allotment where SUBJECT_NAME = '"
					+ subjectName + "' " + "AND STD_1 = '" + std + "' AND ACADEMIC_YEAR = '" + academic + "' AND "
					+ "(SECTION_NM='" + sessionData.getSectionName() + "')";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				dob = resultSet.getString(semester + "_DOBS") == null ? "0"
						: (resultSet.getString(semester + "_DOBS").trim());
				obt = resultSet.getString(semester + "_OBT") == null ? "0"
						: (resultSet.getString(semester + "_OBT").trim());
				ora = resultSet.getString(semester + "_ORAL") == null ? "0"
						: (resultSet.getString(semester + "_ORAL").trim());
				ass = resultSet.getString(semester + "_ASSIGN") == null ? "0"
						: (resultSet.getString(semester + "_ASSIGN").trim());
				wri = resultSet.getString(semester + "_WRITE") == null ? "0"
						: (resultSet.getString(semester + "_WRITE").trim());
				pra = resultSet.getString(semester + "_PRACT") == null ? "0"
						: (resultSet.getString(semester + "_PRACT").trim());
				pre = resultSet.getString(semester + "_PRES") == null ? "0"
						: (resultSet.getString(semester + "_PRES").trim());
				mca = resultSet.getString(semester + "_MCAP") == null ? "0"
						: (resultSet.getString(semester + "_MCAP").trim());
				act = resultSet.getString(semester + "_ACTIVITY") == null ? "0"
						: (resultSet.getString(semester + "_ACTIVITY").trim());
				pro = resultSet.getString(semester + "_PROJECT") == null ? "0"
						: (resultSet.getString(semester + "_PROJECT").trim());
				oth = resultSet.getString(semester + "_OTHER") == null ? "0"
						: (resultSet.getString(semester + "_OTHER").trim());
				ora1 = resultSet.getString(semester + "_ORAL1") == null ? "0"
						: (resultSet.getString(semester + "_ORAL1").trim());
				pra1 = resultSet.getString(semester + "_PRACT1") == null ? "0"
						: (resultSet.getString(semester + "_PRACT1").trim());
				wri1 = resultSet.getString(semester + "_WRITE1") == null ? "0"
						: (resultSet.getString(semester + "_WRITE1").trim());
				lis = resultSet.getString(semester + "_LISTEN") == null ? "0"
						: (resultSet.getString(semester + "_LISTEN").trim());
				spe = resultSet.getString(semester + "_SPEAK") == null ? "0"
						: (resultSet.getString(semester + "_SPEAK").trim());
				ass1 = resultSet.getString(semester + "_ASSIGN1") == null ? "0"
						: (resultSet.getString(semester + "_ASSIGN1").trim());
				itot = resultSet.getString(semester + "_INTOT") == null ? "0"
						: (resultSet.getString(semester + "_INTOT").trim());

				tm.put("DOBS", dob);
				tm.put("OBT", obt);
				tm.put("ORAL", ora);
				tm.put("ASSIGN", ass);
				tm.put("WRITE", wri);
				tm.put("PRACT", pra);
				tm.put("PRES", pre);
				tm.put("MCAP", mca);
				tm.put("ACTIVITY", act);
				tm.put("PROJECT", pro);
				tm.put("OTHER", oth);
				tm.put("ORAL1", ora1);
				tm.put("PRACT1", pra1);
				tm.put("WRITE1", wri1);
				tm.put("LISTEN", lis);
				tm.put("SPEAK", spe);
				tm.put("ASSIGN1", ass1);
				tm.put("INTOT", itot);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return tm;
	}

	///// getMaxMarksForAllSubjects/////////////
	public Map<String, String> getMaxMarksForAllSubjects(SessionData sessionData, String std, String academic,
			String semester, boolean marks_flag_std) throws Exception {

		String subjectTitle = "";
		String maxMarks = "";
		Map<String, String> maxMarksMapOrder = new LinkedHashMap<String, String>();
		boolean result_final_sem2_std_flag = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_FINAL_SEM2_"+std.replaceAll(" ", "_")));
		int stdInt = cm.RomanToInteger(std);
		try {
			///// get subject title max marks///////////////
			String maxMarksQuery = "";
			int initialYearFromAcademic = Integer.parseInt(academic.substring(0, academic.indexOf("-")));
			if (semester.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
			}
			if (semester.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
			}
			if (semester.equalsIgnoreCase("Final")) {
				semester = "FINAL";
			}
			if (initialYearFromAcademic < 2017) {// To get results before 2017 on previous logic
				if (!semester.equalsIgnoreCase("FINAL")) {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,SUM(IF(" + semester + "_DOBS>0, " + semester + "_DOBS, 0)) + "
							+ "SUM(IF(" + semester + "_OBT>0, " + semester + "_OBT, 0)) + SUM(IF(" + semester
							+ "_ORAL>0, " + semester + "_ORAL, 0)) + " + "SUM(IF(" + semester + "_ASSIGN>0, " + semester
							+ "_ASSIGN, 0)) + SUM(IF(" + semester + "_WRITE>0, " + semester + "_WRITE, 0)) + "
							+ "SUM(IF(" + semester + "_PRACT>0, " + semester + "_PRACT, 0)) AS MAX_MARKS " + "FROM "
							+ sessionData.getDBName() + "." + "subject_allotment WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				} else if (semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("IX")
						|| std.equalsIgnoreCase("X") || std.equalsIgnoreCase("XI") || std.equalsIgnoreCase("XII")
						|| std.equalsIgnoreCase("JR KG") || std.equalsIgnoreCase("SR KG"))) {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,"
							+ "SUM(IF(SEM1_DOBS_CT>0, SEM1_DOBS_CT, IF(SEM1_DOBS>0, SEM1_DOBS, 0))) + "
							+ "SUM(IF(SEM1_OBT_CT>0, SEM1_OBT_CT, IF(SEM1_OBT>0, SEM1_OBT, 0))) + "
							+ "SUM(IF(SEM1_ORAL_CT>0, SEM1_ORAL_CT, IF(SEM1_ORAL>0, SEM1_ORAL, 0))) + "
							+ "SUM(IF(SEM1_ASSIGN_CT>0, SEM1_ASSIGN_CT, IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0))) + "
							+ "SUM(IF(SEM1_WRITE_CT>0, SEM1_WRITE_CT, IF(SEM1_WRITE>0, SEM1_WRITE, 0))) + "
							+ "SUM(IF(SEM1_PRACT_CT>0, SEM1_PRACT_CT, IF(SEM1_PRACT>0, SEM1_PRACT, 0))) + "
							+ "SUM(IF(SEM2_DOBS_CT>0, SEM2_DOBS_CT, IF(SEM2_DOBS>0, SEM2_DOBS, 0))) + "
							+ "SUM(IF(SEM2_OBT_CT>0, SEM2_OBT_CT, IF(SEM2_OBT>0, SEM2_OBT, 0))) + "
							+ "SUM(IF(SEM2_ORAL_CT>0, SEM2_ORAL_CT, IF(SEM2_ORAL>0, SEM2_ORAL, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN_CT>0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0))) + "
							+ "SUM(IF(SEM2_WRITE_CT>0, SEM2_WRITE_CT, IF(SEM2_WRITE>0, SEM2_WRITE, 0))) + "
							+ "SUM(IF(SEM2_PRACT_CT>0, SEM2_PRACT_CT, IF(SEM2_PRACT>0, SEM2_PRACT, 0))) AS MAX_MARKS "
							+ "FROM " + sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				} else {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,SUM(IF(SEM1_DOBS>0, SEM1_DOBS, 0)) + SUM(IF(SEM1_OBT>0, SEM1_OBT, 0)) + "
							+ "SUM(IF(SEM1_ORAL>0, SEM1_ORAL, 0)) + SUM(IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0)) + SUM(IF(SEM1_WRITE>0, SEM1_WRITE, 0)) + "
							+ "SUM(IF(SEM1_PRACT>0, SEM1_PRACT, 0)) + SUM(IF(SEM2_DOBS>0, SEM2_DOBS, 0)) + SUM(IF(SEM2_OBT>0, SEM2_OBT, 0)) + "
							+ "SUM(IF(SEM2_ORAL>0, SEM2_ORAL, 0)) + SUM(IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0)) + SUM(IF(SEM2_WRITE>0, SEM2_WRITE, 0)) + "
							+ "SUM(IF(SEM2_PRACT>0, SEM2_PRACT, 0)) AS MAX_MARKS FROM " + sessionData.getDBName() + "."
							+ "subject_allotment " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic
							+ "' AND " + "(SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				}
			} else {// To get results after 2017 on new logic
//				if (!semester.equalsIgnoreCase("FINAL") && stdInt > 0 && stdInt < 9) {
				if (!semester.equalsIgnoreCase("FINAL") && !marks_flag_std) {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,SUM(IF(" + semester + "_DOBS>0, " + semester + "_DOBS, 0)) + "
							+ "SUM(IF(" + semester + "_OBT>0, " + semester + "_OBT, 0)) + SUM(IF(" + semester
							+ "_ORAL>0, " + semester + "_ORAL, 0)) + " + "SUM(IF(" + semester + "_ASSIGN>0, " + semester
							+ "_ASSIGN, 0)) + SUM(IF(" + semester + "_WRITE>0, " + semester + "_WRITE, 0)) + "
							+ "SUM(IF(" + semester + "_PRACT>0, " + semester + "_PRACT, 0)) + SUM(IF(" + semester
							+ "_PRES>0, " + semester + "_PRES, 0)) + " + "SUM(IF(" + semester + "_MCAP>0, " + semester
							+ "_MCAP, 0)) + SUM(IF(" + semester + "_ACTIVITY>0, " + semester + "_ACTIVITY, 0)) + "
							+ "SUM(IF(" + semester + "_PROJECT>0, " + semester + "_PROJECT, 0)) + SUM(IF(" + semester
							+ "_OTHER>0, " + semester + "_OTHER, 0)) + " + "SUM(IF(" + semester + "_ORAL1>0, "
							+ semester + "_ORAL1, 0)) + SUM(IF(" + semester + "_PRACT1>0, " + semester
							+ "_PRACT1, 0)) + " + "SUM(IF(" + semester + "_WRITE1>0, " + semester
							+ "_WRITE1, 0)) + SUM(IF(" + semester + "SPEAK>0, " + semester + "SPEAK, 0)) + " + "SUM(IF("
							+ semester + "LISTEN>0, " + semester + "LISTEN, 0)) + SUM(IF(" + semester + "ASSIGN1>0, "
							+ semester + "ASSIGN1, 0)) AS MAX_MARKS " + "FROM " + sessionData.getDBName() + "."
							+ "subject_allotment WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic
							+ "' AND (SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				} 
//				else if (!semester.equalsIgnoreCase("FINAL") && (stdInt <= 0 || stdInt >= 9)) {
				else if (!semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE," + "SUM(IF(" + semester + "_DOBS_CT>=0, " + semester
							+ "_DOBS_CT, IF(" + semester + "_DOBS>0, " + semester + "_DOBS, 0))) + " + "SUM(IF("
							+ semester + "_OBT_CT>=0, " + semester + "_OBT_CT, IF(" + semester + "_OBT>0, " + semester
							+ "_OBT, 0))) + " + "SUM(IF(" + semester + "_ORAL_CT>=0, " + semester + "_ORAL_CT, IF("
							+ semester + "_ORAL>0, " + semester + "_ORAL, 0))) + " + "SUM(IF(" + semester
							+ "_ASSIGN_CT>=0, " + semester + "_ASSIGN_CT, IF(" + semester + "_ASSIGN>0, " + semester
							+ "_ASSIGN, 0))) + " + "SUM(IF(" + semester + "_WRITE_CT>=0, " + semester + "_WRITE_CT, IF("
							+ semester + "_WRITE>0, " + semester + "_WRITE, 0))) + " + "SUM(IF(" + semester
							+ "_PRACT_CT>=0, " + semester + "_PRACT_CT, IF(" + semester + "_PRACT>0, " + semester
							+ "_PRACT, 0))) + " + "SUM(IF(" + semester + "_PRES_CT>=0, " + semester + "_PRES_CT, IF("
							+ semester + "_PRES>0, " + semester + "_PRES, 0))) + " + "SUM(IF(" + semester
							+ "_MCAP_CT>=0, " + semester + "_MCAP_CT, IF(" + semester + "_MCAP>0, " + semester
							+ "_MCAP, 0))) + " + "SUM(IF(" + semester + "_ACTIVITY_CT>=0, " + semester
							+ "_ACTIVITY_CT, IF(" + semester + "_ACTIVITY>0, " + semester + "_ACTIVITY, 0))) + "
							+ "SUM(IF(" + semester + "_PROJECT_CT>=0, " + semester + "_PROJECT_CT, IF(" + semester
							+ "_PROJECT>0, " + semester + "_PROJECT, 0))) + " + "SUM(IF(" + semester + "_OTHER_CT>=0, "
							+ semester + "_OTHER_CT, IF(" + semester + "_OTHER>0, " + semester + "_OTHER, 0))) + "
							+ "SUM(IF(" + semester + "_ORAL1_CT>=0, " + semester + "_ORAL1_CT, IF(" + semester
							+ "_ORAL1>0, " + semester + "_ORAL1, 0))) + " + "SUM(IF(" + semester + "_PRACT1_CT>=0, "
							+ semester + "_PRACT1_CT, IF(" + semester + "_PRACT1>0, " + semester + "_PRACT1, 0))) + "
							+ "SUM(IF(" + semester + "_WRITE1_CT>=0, " + semester + "_WRITE1_CT, IF(" + semester
							+ "_WRITE1>0, " + semester + "_WRITE1, 0))) + " + "SUM(IF(" + semester + "_SPEAK_CT>=0, "
							+ semester + "_SPEAK_CT, IF(" + semester + "_SPEAK>0, " + semester + "_SPEAK, 0))) + "
							+ "SUM(IF(" + semester + "_LISTEN_CT>=0, " + semester + "_LISTEN_CT, IF(" + semester
							+ "_LISTEN>0, " + semester + "_LISTEN, 0))) + " + "SUM(IF(" + semester + "_ASSIGN1_CT>=0, "
							+ semester + "_ASSIGN_CT, IF(" + semester + "_ASSIGN1>0, " + semester
							+ "_ASSIGN1, 0))) AS MAX_MARKS " + "FROM " + sessionData.getDBName() + "."
							+ "subject_allotment " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic
							+ "' AND " + "(SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				} 
				else if (semester.equalsIgnoreCase("FINAL") && marks_flag_std && result_final_sem2_std_flag) {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,"
							+ "SUM(IF(SEM2_DOBS_CT>=0, SEM2_DOBS_CT, IF(SEM2_DOBS>0, SEM2_DOBS, 0))) + "
							+ "SUM(IF(SEM2_OBT_CT>=0, SEM2_OBT_CT, IF(SEM2_OBT>0, SEM2_OBT, 0))) + "
							+ "SUM(IF(SEM2_ORAL_CT>=0, SEM2_ORAL_CT, IF(SEM2_ORAL>0, SEM2_ORAL, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN_CT>=0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0))) + "
							+ "SUM(IF(SEM2_WRITE_CT>=0, SEM2_WRITE_CT, IF(SEM2_WRITE>0, SEM2_WRITE, 0))) + "
							+ "SUM(IF(SEM2_PRACT_CT>=0, SEM2_PRACT_CT, IF(SEM2_PRACT>0, SEM2_PRACT, 0)))  + "
							+ "SUM(IF(SEM2_PRES_CT>=0, SEM2_PRES_CT, IF(SEM2_PRES>0, SEM2_PRES, 0))) + "
							+ "SUM(IF(SEM2_MCAP_CT>=0, SEM2_MCAP_CT, IF(SEM2_MCAP>0, SEM2_MCAP, 0))) + "
							+ "SUM(IF(SEM2_ACTIVITY_CT>=0, SEM2_ACTIVITY_CT, IF(SEM2_ACTIVITY>0, SEM2_ACTIVITY, 0))) + "
							+ "SUM(IF(SEM2_PROJECT_CT>=0, SEM2_PROJECT_CT, IF(SEM2_PROJECT>0, SEM2_PROJECT, 0))) + "
							+ "SUM(IF(SEM2_OTHER_CT>=0, SEM2_OTHER_CT, IF(SEM2_OTHER>0, SEM2_OTHER, 0))) + "
							+ "SUM(IF(SEM2_ORAL1_CT>=0, SEM2_ORAL1_CT, IF(SEM2_ORAL1>0, SEM2_ORAL1, 0))) + "
							+ "SUM(IF(SEM2_PRACT1_CT>=0, SEM2_PRACT1_CT, IF(SEM2_PRACT1>0, SEM2_PRACT1, 0))) + "
							+ "SUM(IF(SEM2_WRITE1_CT>=0, SEM2_WRITE1_CT, IF(SEM2_WRITE1>0, SEM2_WRITE1, 0))) + "
							+ "SUM(IF(SEM2_SPEAK_CT>=0, SEM2_SPEAK_CT, IF(SEM2_SPEAK>0, SEM2_SPEAK, 0))) + "
							+ "SUM(IF(SEM2_LISTEN_CT>=0, SEM2_LISTEN_CT, IF(SEM2_LISTEN>0, SEM2_LISTEN, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN1_CT>=0, SEM2_ASSIGN1_CT, IF(SEM2_ASSIGN1>0, SEM2_ASSIGN1, 0))) AS MAX_MARKS "
							+ "FROM " + sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				}
//				else if (semester.equalsIgnoreCase("FINAL") && (stdInt <= 0 || stdInt >= 9)) {
				else if (semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,"
							+ "SUM(IF(SEM1_DOBS_CT>=0, SEM1_DOBS_CT, IF(SEM1_DOBS>0, SEM1_DOBS, 0))) + "
							+ "SUM(IF(SEM1_OBT_CT>=0, SEM1_OBT_CT, IF(SEM1_OBT>0, SEM1_OBT, 0))) + "
							+ "SUM(IF(SEM1_ORAL_CT>=0, SEM1_ORAL_CT, IF(SEM1_ORAL>0, SEM1_ORAL, 0))) + "
							+ "SUM(IF(SEM1_ASSIGN_CT>=0, SEM1_ASSIGN_CT, IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0))) + "
							+ "SUM(IF(SEM1_WRITE_CT>=0, SEM1_WRITE_CT, IF(SEM1_WRITE>0, SEM1_WRITE, 0))) + "
							+ "SUM(IF(SEM1_PRACT_CT>=0, SEM1_PRACT_CT, IF(SEM1_PRACT>0, SEM1_PRACT, 0))) + "
							+ "SUM(IF(SEM1_PRES_CT>=0, SEM1_PRES_CT, IF(SEM1_PRES>0, SEM1_PRES, 0))) + "
							+ "SUM(IF(SEM1_MCAP_CT>=0, SEM1_MCAP_CT, IF(SEM1_MCAP>0, SEM1_MCAP, 0))) + "
							+ "SUM(IF(SEM1_ACTIVITY_CT>=0, SEM1_ACTIVITY_CT, IF(SEM1_ACTIVITY>0, SEM1_ACTIVITY, 0))) + "
							+ "SUM(IF(SEM1_PROJECT_CT>=0, SEM1_PROJECT_CT, IF(SEM1_PROJECT>0, SEM1_PROJECT, 0))) + "
							+ "SUM(IF(SEM1_OTHER_CT>=0, SEM1_OTHER_CT, IF(SEM1_OTHER>0, SEM1_OTHER, 0))) + "
							+ "SUM(IF(SEM1_ORAL1_CT>=0, SEM1_ORAL1_CT, IF(SEM1_ORAL1>0, SEM1_ORAL1, 0))) + "
							+ "SUM(IF(SEM1_PRACT1_CT>=0, SEM1_PRACT1_CT, IF(SEM1_PRACT1>0, SEM1_PRACT1, 0))) + "
							+ "SUM(IF(SEM1_WRITE1_CT>=0, SEM1_WRITE1_CT, IF(SEM1_WRITE1>0, SEM1_WRITE1, 0))) + "
							+ "SUM(IF(SEM1_SPEAK_CT>=0, SEM1_SPEAK_CT, IF(SEM1_SPEAK>0, SEM1_SPEAK, 0))) + "
							+ "SUM(IF(SEM1_LISTEN_CT>=0, SEM1_LISTEN_CT, IF(SEM1_LISTEN>0, SEM1_LISTEN, 0))) + "
							+ "SUM(IF(SEM1_ASSIGN1_CT>=0, SEM1_ASSIGN1_CT, IF(SEM1_ASSIGN1>0, SEM1_ASSIGN1, 0))) + "
							+ "SUM(IF(SEM2_DOBS_CT>=0, SEM2_DOBS_CT, IF(SEM2_DOBS>0, SEM2_DOBS, 0))) + "
							+ "SUM(IF(SEM2_OBT_CT>=0, SEM2_OBT_CT, IF(SEM2_OBT>0, SEM2_OBT, 0))) + "
							+ "SUM(IF(SEM2_ORAL_CT>=0, SEM2_ORAL_CT, IF(SEM2_ORAL>0, SEM2_ORAL, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN_CT>=0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0))) + "
							+ "SUM(IF(SEM2_WRITE_CT>=0, SEM2_WRITE_CT, IF(SEM2_WRITE>0, SEM2_WRITE, 0))) + "
							+ "SUM(IF(SEM2_PRACT_CT>=0, SEM2_PRACT_CT, IF(SEM2_PRACT>0, SEM2_PRACT, 0)))  + "
							+ "SUM(IF(SEM2_PRES_CT>=0, SEM2_PRES_CT, IF(SEM2_PRES>0, SEM2_PRES, 0))) + "
							+ "SUM(IF(SEM2_MCAP_CT>=0, SEM2_MCAP_CT, IF(SEM2_MCAP>0, SEM2_MCAP, 0))) + "
							+ "SUM(IF(SEM2_ACTIVITY_CT>=0, SEM2_ACTIVITY_CT, IF(SEM2_ACTIVITY>0, SEM2_ACTIVITY, 0))) + "
							+ "SUM(IF(SEM2_PROJECT_CT>=0, SEM2_PROJECT_CT, IF(SEM2_PROJECT>0, SEM2_PROJECT, 0))) + "
							+ "SUM(IF(SEM2_OTHER_CT>=0, SEM2_OTHER_CT, IF(SEM2_OTHER>0, SEM2_OTHER, 0))) + "
							+ "SUM(IF(SEM2_ORAL1_CT>=0, SEM2_ORAL1_CT, IF(SEM2_ORAL1>0, SEM2_ORAL1, 0))) + "
							+ "SUM(IF(SEM2_PRACT1_CT>=0, SEM2_PRACT1_CT, IF(SEM2_PRACT1>0, SEM2_PRACT1, 0))) + "
							+ "SUM(IF(SEM2_WRITE1_CT>=0, SEM2_WRITE1_CT, IF(SEM2_WRITE1>0, SEM2_WRITE1, 0))) + "
							+ "SUM(IF(SEM2_SPEAK_CT>=0, SEM2_SPEAK_CT, IF(SEM2_SPEAK>0, SEM2_SPEAK, 0))) + "
							+ "SUM(IF(SEM2_LISTEN_CT>=0, SEM2_LISTEN_CT, IF(SEM2_LISTEN>0, SEM2_LISTEN, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN1_CT>=0, SEM2_ASSIGN1_CT, IF(SEM2_ASSIGN1>0, SEM2_ASSIGN1, 0))) AS MAX_MARKS "
							+ "FROM " + sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				} 
				else {
					maxMarksQuery = "SELECT ORDER_NO,SUBJECT_TITLE,SUM(IF(SEM1_DOBS>0, SEM1_DOBS, 0)) + SUM(IF(SEM1_OBT>0, SEM1_OBT, 0)) + "
							+ "SUM(IF(SEM1_ORAL>0, SEM1_ORAL, 0)) + SUM(IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0)) + SUM(IF(SEM1_WRITE>0, SEM1_WRITE, 0)) + "
							+ "SUM(IF(SEM1_PRACT>0, SEM1_PRACT, 0)) + SUM(IF(SEM1_PRES>0, SEM1_PRES, 0)) + SUM(IF(SEM1_MCAP>0, SEM1_MCAP, 0)) + "
							+ "SUM(IF(SEM1_ACTIVITY>0, SEM1_ACTIVITY, 0)) + SUM(IF(SEM1_PROJECT>0, SEM1_PROJECT, 0)) + SUM(IF(SEM1_OTHER>0, SEM1_OTHER, 0)) + "
							+ "SUM(IF(SEM1_ORAL1>0, SEM1_ORAL1, 0)) + SUM(IF(SEM1_PRACT1>0, SEM1_PRACT1, 0)) + SUM(IF(SEM1_WRITE1>0, SEM1_WRITE1, 0)) + "
							+ "SUM(IF(SEM1_SPEAK>0, SEM1_SPEAK, 0)) + SUM(IF(SEM1_LISTEN>0, SEM1_LISTEN, 0)) + SUM(IF(SEM1_ASSIGN1>0, SEM1_ASSIGN1, 0)) + "
							+ "SUM(IF(SEM2_DOBS>0, SEM2_DOBS, 0)) + SUM(IF(SEM2_OBT>0, SEM2_OBT, 0)) + "
							+ "SUM(IF(SEM2_ORAL>0, SEM2_ORAL, 0)) + SUM(IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0)) + SUM(IF(SEM2_WRITE>0, SEM2_WRITE, 0)) + "
							+ "SUM(IF(SEM2_PRACT>0, SEM2_PRACT, 0)) + SUM(IF(SEM2_PRES>0, SEM2_PRES, 0)) + SUM(IF(SEM2_MCAP>0, SEM2_MCAP, 0)) + "
							+ "SUM(IF(SEM2_ACTIVITY>0, SEM2_ACTIVITY, 0)) + SUM(IF(SEM2_PROJECT>0, SEM2_PROJECT, 0)) + SUM(IF(SEM2_OTHER>0, SEM2_OTHER, 0)) + "
							+ "SUM(IF(SEM2_SPEAK>0, SEM2_SPEAK, 0)) + SUM(IF(SEM2_LISTEN>0, SEM2_LISTEN, 0)) + SUM(IF(SEM2_ASSIGN1>0, SEM2_ASSIGN1, 0)) + "
							+ "SUM(IF(SEM2_ORAL1>0, SEM2_ORAL1, 0)) + SUM(IF(SEM2_PRACT1>0, SEM2_PRACT1, 0)) + SUM(IF(SEM2_WRITE1>0, SEM2_WRITE1, 0)) AS MAX_MARKS FROM "
							+ sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  ORDER_NO,SUBJECT_TITLE ORDER BY ORDER_NO ASC";
				}
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(maxMarksQuery);

			while (resultSet.next()) {
				subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subjectTitle = subjectTitle.replace(" ", "_");
				maxMarks = resultSet.getString("MAX_MARKS") == null ? " " : (resultSet.getString("MAX_MARKS").trim());
				if (semester.equalsIgnoreCase("FINAL")) {
					double marksDivisor = cm.getConvertMarksForDivisor(Double.parseDouble(maxMarks), 0, false);
					maxMarks = (int) (Integer.parseInt(maxMarks) / (Integer.parseInt(maxMarks) / marksDivisor)) + "";
					
					if(maxMarksMapOrder.get(subjectTitle) != null) {
						maxMarks = (Integer.parseInt(maxMarks) + Integer.parseInt(maxMarksMapOrder.get(subjectTitle))) + "";
					}
				}
				maxMarksMapOrder.put(subjectTitle, maxMarks);
			}
		} catch (Exception e) {
			logger.error("Exception==>" + e);
		}
		return maxMarksMapOrder;
	}

	///// getMaxMarksReportForAllSubjects/////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getMaxMarksReportForAllSubjects(
			SessionData sessionData, String std, String academic, String semester) throws Exception {

		String maxMarksQuery = "";
		String subjectTitle = "", gradeMarks = "";
		String maxMarks = "";
		String sem1Marks = "";
		String sem2Marks = "";
		int semCount = 0;
		LinkedHashMap<String, LinkedHashMap<String, String>> maxMarksMapOrder = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		int stdInt = cm.RomanToInteger(std);
		try {
			///// get subject title max marks///////////////
			int initialYearFromAcademic = Integer.parseInt(academic.substring(0, academic.indexOf("-")));
			if (semester.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
			}
			if (semester.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
			}
			if (semester.equalsIgnoreCase("Final")) {
				semester = "final";
			}
			if (initialYearFromAcademic < 2017) {// To get results before 2017 on previous logic
				if (!semester.equalsIgnoreCase("FINAL")) {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO,SUM(IF(" + semester + "_DOBS>0, " + semester + "_DOBS, 0)) + "
							+ "SUM(IF(" + semester + "_OBT>0, " + semester + "_OBT, 0)) + SUM(IF(" + semester
							+ "_ORAL>0, " + semester + "_ORAL, 0)) + " + "SUM(IF(" + semester + "_ASSIGN>0, " + semester
							+ "_ASSIGN, 0)) + SUM(IF(" + semester + "_WRITE>0, " + semester + "_WRITE, 0)) + "
							+ "SUM(IF(" + semester + "_PRACT>0, " + semester + "_PRACT, 0)) AS " + semester + "_MARKS "
							+ "FROM " + sessionData.getDBName() + "." + "subject_allotment WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				} else if (semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("IX")
						|| std.equalsIgnoreCase("X") || std.equalsIgnoreCase("XI") || std.equalsIgnoreCase("XII"))) {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO,"
							+ "SUM(IF(SEM1_DOBS_CT>0, SEM1_DOBS_CT, IF(SEM1_DOBS>0, SEM1_DOBS, 0))) + "
							+ "SUM(IF(SEM1_OBT_CT>0, SEM1_OBT_CT, IF(SEM1_OBT>0, SEM1_OBT, 0))) + "
							+ "SUM(IF(SEM1_ORAL_CT>0, SEM1_ORAL_CT, IF(SEM1_ORAL>0, SEM1_ORAL, 0))) + "
							+ "SUM(IF(SEM1_ASSIGN_CT>0, SEM1_ASSIGN_CT, IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0))) + "
							+ "SUM(IF(SEM1_WRITE_CT>0, SEM1_WRITE_CT, IF(SEM1_WRITE>0, SEM1_WRITE, 0))) + "
							+ "SUM(IF(SEM1_PRACT_CT>0, SEM1_PRACT_CT, IF(SEM1_PRACT>0, SEM1_PRACT, 0))) AS SEM1_MARKS "
							+ "SUM(IF(SEM2_DOBS_CT>0, SEM2_DOBS_CT, IF(SEM2_DOBS>0, SEM2_DOBS, 0))) + "
							+ "SUM(IF(SEM2_OBT_CT>0, SEM2_OBT_CT, IF(SEM2_OBT>0, SEM2_OBT, 0))) + "
							+ "SUM(IF(SEM2_ORAL_CT>0, SEM2_ORAL_CT, IF(SEM2_ORAL>0, SEM2_ORAL, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN_CT>0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0))) + "
							+ "SUM(IF(SEM2_WRITE_CT>0, SEM2_WRITE_CT, IF(SEM2_WRITE>0, SEM2_WRITE, 0))) + "
							+ "SUM(IF(SEM2_PRACT_CT>0, SEM2_PRACT_CT, IF(SEM2_PRACT>0, SEM2_PRACT, 0))) AS SEM2_MARKS "
							+ "FROM " + sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				} else {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO,SUM(IF(SEM1_DOBS>0, SEM1_DOBS, 0)) + SUM(IF(SEM1_OBT>0, SEM1_OBT, 0)) + "
							+ "SUM(IF(SEM1_ORAL>0, SEM1_ORAL, 0)) + SUM(IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0)) + SUM(IF(SEM1_WRITE>0, SEM1_WRITE, 0)) + "
							+ "SUM(IF(SEM1_PRACT>0, SEM1_PRACT, 0)) AS SEM1_MARKS, "
							+ "SUM(IF(SEM2_DOBS>0, SEM2_DOBS, 0)) + SUM(IF(SEM2_OBT>0, SEM2_OBT, 0)) + "
							+ "SUM(IF(SEM2_ORAL>0, SEM2_ORAL, 0)) + SUM(IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0)) + SUM(IF(SEM2_WRITE>0, SEM2_WRITE, 0)) + "
							+ "SUM(IF(SEM2_PRACT>0, SEM2_PRACT, 0)) AS SEM2_MARKS FROM " + sessionData.getDBName()
							+ "." + "subject_allotment " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic
							+ "' AND " + "(SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				}
			} else {// To get results after 2017 on new logic
				if (!semester.equalsIgnoreCase("FINAL") && stdInt < 9) {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO,SUM(IF(" + semester + "_DOBS>0, " + semester + "_DOBS, 0)) + "
							+ "SUM(IF(" + semester + "_OBT>0, " + semester + "_OBT, 0)) + SUM(IF(" + semester
							+ "_ORAL>0, " + semester + "_ORAL, 0)) + " + "SUM(IF(" + semester + "_ASSIGN>0, " + semester
							+ "_ASSIGN, 0)) + SUM(IF(" + semester + "_WRITE>0, " + semester + "_WRITE, 0)) + "
							+ "SUM(IF(" + semester + "_PRACT>0, " + semester + "_PRACT, 0)) + SUM(IF(" + semester
							+ "_PRES>0, " + semester + "_PRES, 0)) + " + "SUM(IF(" + semester + "_MCAP>0, " + semester
							+ "_MCAP, 0)) + SUM(IF(" + semester + "_ACTIVITY>0, " + semester + "_ACTIVITY, 0)) + "
							+ "SUM(IF(" + semester + "_PROJECT>0, " + semester + "_PROJECT, 0)) + SUM(IF(" + semester
							+ "_OTHER>0, " + semester + "_OTHER, 0)) + " + "SUM(IF(" + semester + "_ORAL1>0, "
							+ semester + "_ORAL1, 0)) + SUM(IF(" + semester + "_PRACT1>0, " + semester
							+ "_PRACT1, 0)) + " + "SUM(IF(" + semester + "_WRITE1>0, " + semester
							+ "_WRITE1, 0)) + SUM(IF(" + semester + "_SPEAK>0, " + semester + "_SPEAK, 0)) + "
							+ "SUM(IF(" + semester + "_LISTEN>0, " + semester + "_LISTEN, 0)) + SUM(IF(" + semester
							+ "_ASSIGN1>0, " + semester + "_ASSIGN1, 0)) AS " + semester + "_MARKS " + "FROM "
							+ sessionData.getDBName() + "." + "subject_allotment WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				} else if (!semester.equalsIgnoreCase("FINAL") && stdInt >= 9) {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO," + "SUM(IF(" + semester + "_DOBS_CT>=0, " + semester
							+ "_DOBS_CT, IF(" + semester + "_DOBS>0, " + semester + "_DOBS, 0))) + " + "SUM(IF("
							+ semester + "_OBT_CT>=0, " + semester + "_OBT_CT, IF(" + semester + "_OBT>0, " + semester
							+ "_OBT, 0))) + " + "SUM(IF(" + semester + "_ORAL_CT>=0, " + semester + "_ORAL_CT, IF("
							+ semester + "_ORAL>0, " + semester + "_ORAL, 0))) + " + "SUM(IF(" + semester
							+ "_ASSIGN_CT>=0, " + semester + "_ASSIGN_CT, IF(" + semester + "_ASSIGN>0, " + semester
							+ "_ASSIGN, 0))) + " + "SUM(IF(" + semester + "_WRITE_CT>=0, " + semester + "_WRITE_CT, IF("
							+ semester + "_WRITE>0, " + semester + "_WRITE, 0))) + " + "SUM(IF(" + semester
							+ "_PRACT_CT>=0, " + semester + "_PRACT_CT, IF(" + semester + "_PRACT>0, " + semester
							+ "_PRACT, 0))) + " + "SUM(IF(" + semester + "_PRES_CT>=0, " + semester + "_PRES_CT, IF("
							+ semester + "_PRES>0, " + semester + "_PRES, 0))) + " + "SUM(IF(" + semester
							+ "_MCAP_CT>=0, " + semester + "_MCAP_CT, IF(" + semester + "_MCAP>0, " + semester
							+ "_MCAP, 0))) + " + "SUM(IF(" + semester + "_ACTIVITY_CT>=0, " + semester
							+ "_ACTIVITY_CT, IF(" + semester + "_ACTIVITY>0, " + semester + "_ACTIVITY, 0))) + "
							+ "SUM(IF(" + semester + "_PROJECT_CT>=0, " + semester + "_PROJECT_CT, IF(" + semester
							+ "_PROJECT>0, " + semester + "_PROJECT, 0))) + " + "SUM(IF(" + semester + "_OTHER_CT>=0, "
							+ semester + "_OTHER_CT, IF(" + semester + "_OTHER>0, " + semester + "_OTHER, 0))) + "
							+ "SUM(IF(" + semester + "_ORAL1_CT>=0, " + semester + "_ORAL1_CT, IF(" + semester
							+ "_ORAL1>0, " + semester + "_ORAL1, 0))) + " + "SUM(IF(" + semester + "_PRACT1_CT>=0, "
							+ semester + "_PRACT1_CT, IF(" + semester + "_PRACT1>0, " + semester + "_PRACT1, 0))) + "
							+ "SUM(IF(" + semester + "_WRITE1_CT>=0, " + semester + "_WRITE1_CT, IF(" + semester
							+ "_WRITE1>0, " + semester + "_WRITE1, 0))) + " + "SUM(IF(" + semester + "_SPEAK_CT>=0, "
							+ semester + "_SPEAK_CT, IF(" + semester + "_SPEAK>0, " + semester + "_SPEAK, 0))) + "
							+ "SUM(IF(" + semester + "_LISTEN_CT>=0, " + semester + "_LISTEN_CT, IF(" + semester
							+ "_LISTEN>0, " + semester + "_LISTEN, 0))) + " + "SUM(IF(" + semester + "_ASSIGN1_CT>=0, "
							+ semester + "_ASSIGN1_CT, IF(" + semester + "_ASSIGN1>0, " + semester
							+ "_ASSIGN1, 0))) AS " + semester + "_MARKS " + "FROM " + sessionData.getDBName() + "."
							+ "subject_allotment " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic
							+ "' AND " + "(SECTION_NM='" + sessionData.getSectionName()
							+ "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				} else if (semester.equalsIgnoreCase("FINAL") && stdInt >= 9) {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO,"
							+ "SUM(IF(SEM1_DOBS_CT>=0, SEM1_DOBS_CT, IF(SEM1_DOBS>0, SEM1_DOBS, 0))) + "
							+ "SUM(IF(SEM1_OBT_CT>=0, SEM1_OBT_CT, IF(SEM1_OBT>0, SEM1_OBT, 0))) + "
							+ "SUM(IF(SEM1_ORAL_CT>=0, SEM1_ORAL_CT, IF(SEM1_ORAL>0, SEM1_ORAL, 0))) + "
							+ "SUM(IF(SEM1_ASSIGN_CT>=0, SEM1_ASSIGN_CT, IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0))) + "
							+ "SUM(IF(SEM1_WRITE_CT>=0, SEM1_WRITE_CT, IF(SEM1_WRITE>0, SEM1_WRITE, 0))) + "
							+ "SUM(IF(SEM1_PRACT_CT>=0, SEM1_PRACT_CT, IF(SEM1_PRACT>0, SEM1_PRACT, 0))) + "
							+ "SUM(IF(SEM1_PRES_CT>=0, SEM1_PRES_CT, IF(SEM1_PRES>0, SEM1_PRES, 0))) + "
							+ "SUM(IF(SEM1_MCAP_CT>=0, SEM1_MCAP_CT, IF(SEM1_MCAP>0, SEM1_MCAP, 0))) + "
							+ "SUM(IF(SEM1_ACTIVITY_CT>=0, SEM1_ACTIVITY_CT, IF(SEM1_ACTIVITY>0, SEM1_ACTIVITY, 0))) + "
							+ "SUM(IF(SEM1_PROJECT_CT>=0, SEM1_PROJECT_CT, IF(SEM1_PROJECT>0, SEM1_PROJECT, 0))) + "
							+ "SUM(IF(SEM1_OTHER_CT>=0, SEM1_OTHER_CT, IF(SEM1_OTHER>0, SEM1_OTHER, 0))) + "
							+ "SUM(IF(SEM1_ORAL1_CT>=0, SEM1_ORAL1_CT, IF(SEM1_ORAL1>0, SEM1_ORAL1, 0))) + "
							+ "SUM(IF(SEM1_PRACT1_CT>=0, SEM1_PRACT1_CT, IF(SEM1_PRACT1>0, SEM1_PRACT1, 0))) + "
							+ "SUM(IF(SEM1_SPEAK_CT>=0, SEM1_SPEAK_CT, IF(SEM1_SPEAK>0, SEM1_SPEAK, 0))) + "
							+ "SUM(IF(SEM1_LISTEN_CT>=0, SEM1_LISTEN_CT, IF(SEM1_LISTEN>0, SEM1_LISTEN, 0))) + "
							+ "SUM(IF(SEM1_ASSIGN1_CT>=0, SEM1_ASSIGN1_CT, IF(SEM1_ASSIGN1>0, SEM1_ASSIGN1, 0))) + "
							+ "SUM(IF(SEM1_WRITE1_CT>=0, SEM1_WRITE1_CT, IF(SEM1_WRITE1>0, SEM1_WRITE1, 0))) AS SEM1_MARKS, "
							+ "SUM(IF(SEM2_DOBS_CT>=0, SEM2_DOBS_CT, IF(SEM2_DOBS>0, SEM2_DOBS, 0))) + "
							+ "SUM(IF(SEM2_OBT_CT>=0, SEM2_OBT_CT, IF(SEM2_OBT>0, SEM2_OBT, 0))) + "
							+ "SUM(IF(SEM2_ORAL_CT>=0, SEM2_ORAL_CT, IF(SEM2_ORAL>0, SEM2_ORAL, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN_CT>=0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0))) + "
							+ "SUM(IF(SEM2_WRITE_CT>=0, SEM2_WRITE_CT, IF(SEM2_WRITE>0, SEM2_WRITE, 0))) + "
							+ "SUM(IF(SEM2_PRACT_CT>=0, SEM2_PRACT_CT, IF(SEM2_PRACT>0, SEM2_PRACT, 0)))  + "
							+ "SUM(IF(SEM2_PRES_CT>=0, SEM2_PRES_CT, IF(SEM2_PRES>0, SEM2_PRES, 0))) + "
							+ "SUM(IF(SEM2_MCAP_CT>=0, SEM2_MCAP_CT, IF(SEM2_MCAP>0, SEM2_MCAP, 0))) + "
							+ "SUM(IF(SEM2_ACTIVITY_CT>=0, SEM2_ACTIVITY_CT, IF(SEM2_ACTIVITY>0, SEM2_ACTIVITY, 0))) + "
							+ "SUM(IF(SEM2_PROJECT_CT>=0, SEM2_PROJECT_CT, IF(SEM2_PROJECT>0, SEM2_PROJECT, 0))) + "
							+ "SUM(IF(SEM2_OTHER_CT>=0, SEM2_OTHER_CT, IF(SEM2_OTHER>0, SEM2_OTHER, 0))) + "
							+ "SUM(IF(SEM2_ORAL1_CT>=0, SEM2_ORAL1_CT, IF(SEM2_ORAL1>0, SEM2_ORAL1, 0))) + "
							+ "SUM(IF(SEM2_PRACT1_CT>=0, SEM2_PRACT1_CT, IF(SEM2_PRACT1>0, SEM2_PRACT1, 0))) + "
							+ "SUM(IF(SEM2_SPEAK_CT>=0, SEM2_SPEAK_CT, IF(SEM2_SPEAK>0, SEM2_SPEAK, 0))) + "
							+ "SUM(IF(SEM2_LISTEN_CT>=0, SEM2_LISTEN_CT, IF(SEM2_LISTEN>0, SEM2_LISTEN, 0))) + "
							+ "SUM(IF(SEM2_ASSIGN1_CT>=0, SEM2_ASSIGN1_CT, IF(SEM2_ASSIGN1>0, SEM2_ASSIGN1, 0))) + "
							+ "SUM(IF(SEM2_WRITE1_CT>=0, SEM2_WRITE1_CT, IF(SEM2_WRITE1>0, SEM2_WRITE1, 0))) AS SEM2_MARKS "
							+ "FROM " + sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				} else {
					maxMarksQuery = "SELECT SUBJECT_TITLE,MARKS_GRADE,ORDER_NO,SUM(IF(SEM1_DOBS>0, SEM1_DOBS, 0)) + SUM(IF(SEM1_OBT>0, SEM1_OBT, 0)) + "
							+ "SUM(IF(SEM1_ORAL>0, SEM1_ORAL, 0)) + SUM(IF(SEM1_ASSIGN>0, SEM1_ASSIGN, 0)) + SUM(IF(SEM1_WRITE>0, SEM1_WRITE, 0)) + "
							+ "SUM(IF(SEM1_PRACT>0, SEM1_PRACT, 0)) + SUM(IF(SEM1_PRES>0, SEM1_PRES, 0)) + SUM(IF(SEM1_MCAP>0, SEM1_MCAP, 0)) + "
							+ "SUM(IF(SEM1_ACTIVITY>0, SEM1_ACTIVITY, 0)) + SUM(IF(SEM1_PROJECT>0, SEM1_PROJECT, 0)) + SUM(IF(SEM1_OTHER>0, SEM1_OTHER, 0)) + "
							+ "SUM(IF(SEM1_ORAL1>0, SEM1_ORAL1, 0)) + SUM(IF(SEM1_PRACT1>0, SEM1_PRACT1, 0)) + SUM(IF(SEM1_WRITE1>0, SEM1_WRITE1, 0)) + "
							+ "SUM(IF(SEM1_SPEAK>0, SEM1_SPEAK, 0)) + SUM(IF(SEM1_LISTEN>0, SEM1_LISTEN, 0)) + SUM(IF(SEM1_ASSIGN1>0, SEM1_ASSIGN1, 0)) AS SEM1_MARKS, "
							+ "SUM(IF(SEM2_DOBS>0, SEM2_DOBS, 0)) + SUM(IF(SEM2_OBT>0, SEM2_OBT, 0)) + "
							+ "SUM(IF(SEM2_ORAL>0, SEM2_ORAL, 0)) + SUM(IF(SEM2_ASSIGN>0, SEM2_ASSIGN, 0)) + SUM(IF(SEM2_WRITE>0, SEM2_WRITE, 0)) + "
							+ "SUM(IF(SEM2_PRACT>0, SEM2_PRACT, 0)) + SUM(IF(SEM2_PRES>0, SEM2_PRES, 0)) + SUM(IF(SEM2_MCAP>0, SEM2_MCAP, 0)) + "
							+ "SUM(IF(SEM2_ACTIVITY>0, SEM2_ACTIVITY, 0)) + SUM(IF(SEM2_PROJECT>0, SEM2_PROJECT, 0)) + SUM(IF(SEM2_OTHER>0, SEM2_OTHER, 0)) + "
							+ "SUM(IF(SEM2_ORAL1>0, SEM2_ORAL1, 0)) + SUM(IF(SEM2_PRACT1>0, SEM2_PRACT1, 0)) + SUM(IF(SEM2_WRITE1>0, SEM2_WRITE1, 0)) + "
							+ "SUM(IF(SEM2_SPEAK>0, SEM2_SPEAK, 0)) + SUM(IF(SEM2_LISTEN>0, SEM2_LISTEN, 0)) + SUM(IF(SEM2_ASSIGN1>0, SEM2_ASSIGN1, 0)) AS SEM2_MARKS FROM "
							+ sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
							+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
							+ sessionData.getSectionName() + "') GROUP BY  SUBJECT_TITLE,MARKS_GRADE,ORDER_NO ORDER BY ORDER_NO ASC";
				}
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(maxMarksQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> maxMarksMap = new LinkedHashMap<String, String>();
				subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				gradeMarks = resultSet.getString("MARKS_GRADE") == null ? " " : (resultSet.getString("MARKS_GRADE").trim());
				if (!semester.equalsIgnoreCase("FINAL")) {
					maxMarks = resultSet.getString(semester + "_MARKS") == null ? "0"
							: (resultSet.getString(semester + "_MARKS").trim());
				} else {
					sem1Marks = resultSet.getString("SEM1_MARKS") == null ? "0"
							: (resultSet.getString("SEM1_MARKS").trim());
					sem2Marks = resultSet.getString("SEM2_MARKS") == null ? "0"
							: (resultSet.getString("SEM2_MARKS").trim());

					if (Integer.parseInt(sem1Marks) > 0) {
						semCount = 1;
					}
					if (Integer.parseInt(sem2Marks) > 0) {
						semCount = semCount + 1;
					}
					maxMarks = (Integer.parseInt(sem1Marks) + Integer.parseInt(sem2Marks)) + "";
				}

				if (semester.equalsIgnoreCase("FINAL")) {
					double marksDivisor = cm.getConvertMarksForDivisor(Double.parseDouble(maxMarks), semCount, true);
					maxMarks = (int) (Integer.parseInt(maxMarks) / (Integer.parseInt(maxMarks) / marksDivisor)) + "";
				}
				maxMarksMap.put(semester + "_" + subjectTitle.replace(" ", "_") + "_total", maxMarks);
				maxMarksMap.put("grade_marks", gradeMarks);
				maxMarksMapOrder.put(subjectTitle.replace(" ", "_"), maxMarksMap);
				semCount = 0;
			}
		} catch (Exception e) {
			logger.error("Exception==>" + e);
		}
		return maxMarksMapOrder;
	}

	///// getGradeMarksForAllSubjects/////////////
	public Map<String, String> getGradeMarksForAllSubjects(SessionData sessionData, String std, String academic,
			String semester) throws Exception {

		String subjectTitle = "";
		String gradeMarks = "";
		Map<String, String> gradeMarksMapOrder = new LinkedHashMap<String, String>();

		try {
			///// get subject title grade & marks///////////////
			String maxMarksQuery = "";

			if (semester.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
			}
			if (semester.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
			}
			if (semester.equalsIgnoreCase("Final")) {
				semester = "FINAL";
			}

			String subListQuery = "SELECT SUBJECT_TITLE,SUBJECT_NAME,OPTIONAL,MARKS_GRADE,GROUP_NAME FROM "
					+ sessionData.getDBName() + "." + "SUBJECT " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='"
					+ academic + "' AND (SECTION_NM='" + sessionData.getSectionName() + "') "
					+ "ORDER BY ORDER_NO ASC";
//			logger.info("find subListQuery == " + subListQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(subListQuery);

			while (resultSet.next()) {
				subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				gradeMarks = resultSet.getString("MARKS_GRADE") == null ? " "
						: (resultSet.getString("MARKS_GRADE").trim());
				gradeMarksMapOrder.put(subjectTitle.replace(" ", "_"), gradeMarks);
			}
		} catch (Exception e) {
			logger.error("Exception==>" + e);
		}
		return gradeMarksMapOrder;
	}

	// /////////findClassData List ////////////////////////////////////////
	public List<String> findClassData(SessionData sessionData, LinkedHashMap studentMap, String std, String div,
			String academic) throws Exception {

		logger.info("=========findClassData Query============");
		// String findQuery = "";
		String gender = "";
		String dob = "";
		String subjectTitle = "";
		String optional = "";
		List retClassList = new ArrayList();
		boolean retFlag = false;

		try {
			connectDatabase(sessionData);

			List<List<String>> l = new ArrayList<List<String>>(studentMap.keySet());

			for (int i = 0; i < studentMap.size(); i++) {
				String name = ((LinkedHashMap) studentMap.get(l.get(i))).get("name").toString();
				String gr = ((LinkedHashMap) studentMap.get(l.get(i))).get("gr").toString();
				String rollNo = ((LinkedHashMap) studentMap.get(l.get(i))).get("rollNo").toString();
				String presentStd = ((LinkedHashMap) studentMap.get(l.get(i))).get("presentStd").toString();
				String presentDiv = ((LinkedHashMap) studentMap.get(l.get(i))).get("presentDiv").toString();

				String findQuery = "SELECT GENDER,DATE_FORMAT(DOB,'%d-%m-%Y') AS DOB FROM " + sessionData.getDBName()
						+ "." + "HS_GENERAL_REGISTER WHERE GR_NO = '" + gr + "' AND SECTION_NM='"
						+ sessionData.getSectionName() + "' AND ACADEMIC_YEAR='" + academic + "'";
				// logger.info("find genderDOB query == "+findQuery);

				statement = connection.createStatement();
				resultSet = statement.executeQuery(findQuery);

				while (resultSet.next()) {
					gender = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
					gender = cm.ifNullThenDash(gender);
					dob = resultSet.getString("DOB") == null ? " " : (resultSet.getString("DOB").trim());
					dob = cm.ifNullThenDash(dob);
					retClassList.add(name + "|" + gr + "||" + rollNo + "|||" + gender + "||||" + dob);
					retFlag = true;
				}
			}
//			logger.info("retClassList size : " + retClassList.size());
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
			/*
			 * if (resultSet != null) { resultSet.close(); } if (connection != null) {
			 * connection.close(); }
			 */
		}
		return retClassList;
	}

	// /////////insertFormData////////////////////////////
	public boolean insertFormData(String userName, String formName, String role, String section) throws Exception {

		logger.info("========insertFormData==========");
		boolean insertFlag = false;
		String insertFormData = "";
		int udpdateCount = 0;
		try {
			insertFormData = "INSERT INTO FORM_DATA " + "(USER_NAME,FORM_NAME,USER_ROLE,SECTION_NM,CREATED_DATE) "
					+ "VALUES ('" + userName.trim().toUpperCase() + "','" + formName.trim().toUpperCase() + "'," + "'"
					+ role.trim().toUpperCase() + "','" + section.trim().toUpperCase() + "',SYSDATE())";

			logger.info("insertFormData query===>" + insertFormData);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(insertFormData);
			if (udpdateCount > 0) {
				insertFlag = true;
				logger.info(udpdateCount + " data for formName " + formName + " inserted successfully.");
			}
		} catch (Exception e) {
			logger.error("deleteFormData Exception=" + e);
		}
		return insertFlag;
	}

	// /////////checkFormData////////////////////////////
	public String checkFormData(SessionData sessionData, String userName, String formName, String role, String section)
			throws Exception {

		logger.info("========checkFormData==========");
		boolean checkFlag = false;
		String checkFormData = "";
		String userDB = "";
		String formDB = "";
		String roleDB = "";
		try {
			checkFormData = "SELECT USER_NAME,FORM_NAME,USER_ROLE FROM " + sessionData.getDBName() + "."
					+ "FORM_DATA WHERE FORM_NAME='" + formName.toUpperCase().trim() + "' " + "AND SECTION_NM='"
					+ section.toUpperCase().trim() + "'";

			logger.info("checkFormData query===>" + checkFormData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(checkFormData);

			while (resultSet.next()) {
				userDB = resultSet.getString("USER_NAME") == null ? "" : (resultSet.getString("USER_NAME").trim());
				formDB = resultSet.getString("FORM_NAME") == null ? "" : (resultSet.getString("FORM_NAME").trim());
				roleDB = resultSet.getString("USER_ROLE") == null ? "" : (resultSet.getString("USER_ROLE").trim());
				// logger.info("gender == "+gender);
				// logger.info("dob == "+dob);
				// retClassList.add(name+"|"+gr+"||"+rollNo+"|||"+gender+"||||"+dob);
				checkFlag = true;
			}
			logger.info("user" + userDB + " is already accessing the form " + formName);

		} catch (Exception e) {
			logger.error("checkFormData Exception=" + e);
		} finally {
			return userDB;
		}
	}

	// /////////deleteFormData////////////////////////////
	public boolean deleteFormData(SessionData sessionData, String userName, String formName, String role,
			String section) throws Exception {

		logger.info("========deleteFormData==========");
		boolean deleteFlag = false;
		String deleteFormData = "";
		int udpdateCount = 0;
		String queryCondition = "";
		try {
			if (section.equalsIgnoreCase("")) {
				deleteFormData = "DELETE FROM " + sessionData.getDBName() + "." + "FORM_DATA WHERE FORM_NAME='"
						+ formName.toUpperCase().trim() + "' " + "AND USER_NAME = '" + userName.trim().toUpperCase()
						+ "'";
			} else {
				deleteFormData = "DELETE FROM " + sessionData.getDBName() + "." + "FORM_DATA WHERE FORM_NAME='"
						+ formName.toUpperCase().trim() + "' " + "AND SECTION_NM='" + section.toUpperCase().trim()
						+ "'  AND USER_NAME = '" + userName.trim().toUpperCase() + "'";
			}

			/*
			 * statement = connection.createStatement();
			 * statement.executeUpdate(deleteFormData);
			 */

			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(deleteFormData);
			if (udpdateCount > 0) {
				deleteFlag = true;
				logger.info(udpdateCount + " data for formName " + formName + " deleted successfully.");
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			return deleteFlag;
		}
	}
	
	
	// /////////insertExcelData////////////////////////////
	public boolean insertExcelData(SessionData sessionData) throws Exception {

		logger.info("========insertExcelData==========");
		try {
			String query = "INSERT into "+sessionData.getDBName()+".EXCEL_DATA (GROUP_TITLE,CATEGORY_TYPE,FIELDS) VALUES ('FEES','QUARTERLY','CLASS|Total Strength|Free*3|Payable*3|Dues*3|Q1*3|Q2*3|Q3*3|Q4*3|Total*3|Paid Strength|Q1*3|Q2*3|Q3*3|Q4*3|Paid Fees|Q1*3|Q2*3|Q3*3|Q4*3|Concession*3')";
			statement = connection.createStatement();
			statement.executeUpdate(query);
			
			query = "INSERT into "+sessionData.getDBName()+".EXCEL_DATA (GROUP_TITLE,CATEGORY_TYPE,FIELDS) VALUES ('FEES','COLLECTION','STD*8|FEES*8')";
			statement = connection.createStatement();
			statement.executeUpdate(query);
			return true;
			
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////findCategoryWise////////////////////////////////////////
	public List<String> findCategoryWise(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========findCategoryWise Query============");
		String findQuery = "";
		String catTypeDB = "";
		String maleDB = "";
		String femaleDB = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		List catDataList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (secName.contains("Section")) {
			secName = secName.substring(0, secName.indexOf("Section"));
		}
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}
		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT IFNULL(HS_GENERAL_REGISTER.CATEGORY,'GRAND TOTAL')  AS  CATEGORY, "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.GENDER = 'MALE' THEN "
					+ "HS_GENERAL_REGISTER.CATEGORY ELSE NULL END) AS BOYS,  "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.GENDER = 'FEMALE' THEN "
					+ "HS_GENERAL_REGISTER.CATEGORY ELSE NULL END) AS GIRLS, COUNT(*) AS TOTAL  " + "FROM "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN " + sessionData.getDBName() + "."
					+ "CLASS_ALLOTMENT ON "
					+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM  "
					+ queryCondition + " GROUP BY HS_GENERAL_REGISTER.CATEGORY  WITH  ROLLUP";

			logger.info("findCategoryWise query : " + findQuery);

			statement = connection.createStatement();

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				/// update excel_data field column
				String excel_datFieldUpdate = "update excel_data set fields='CATEGORY*5|BOYS*3|GIRLS*3|TOTAL*3' where group_title='strength' and CATEGORY_TYPE='category_wise'";
				statement.executeUpdate(excel_datFieldUpdate);

				ce.generateExcel(sessionData, "STRENGTH", "CATEGORY_WISE", findQuery, catDataList, false,
						secName + " CATEGORY_WISE  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

			resultSet = statement.executeQuery(findQuery);

			catDataList.add("CATEGORY|BOYS||GIRLS|||TOTAL");

			while (resultSet.next()) {
				catTypeDB = resultSet.getString("CATEGORY") == null ? "NO CATEGORY"
						: (resultSet.getString("CATEGORY").trim());
				maleDB = resultSet.getString("BOYS") == null ? " " : (resultSet.getString("BOYS").trim());
				femaleDB = resultSet.getString("GIRLS") == null ? " " : (resultSet.getString("GIRLS").trim());
				totalDB = resultSet.getString("TOTAL") == null ? " " : (resultSet.getString("TOTAL").trim());

				if (catTypeDB.equalsIgnoreCase("")) {
					catTypeDB = "NO CATEGORY";
				}
				catDataList.add(catTypeDB + "|" + maleDB + "||" + femaleDB + "|||" + totalDB);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return catDataList;
	}

	// /////////findAgeWise////////////////////////////////////////
	public TreeMap<String, String> findAgeWise(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========findAgeWise Query============");
		String findQuery = "";
		String presentStdDB = "";
		String genderDB = "";
		String sex = "";
		String ageDB = "";
		String ageSorted = "";
		String stdList = "";
		String countDB = "";
		int stdTotal = 0;
		String queryCondition = "";
		boolean findFlag = false;
		List ageDataList = new ArrayList();
		TreeMap ageStrengthMap = new TreeMap();
		TreeMap<Integer, String> stdMap = new TreeMap();
		TreeMap<Integer, String> ageMap = new TreeMap();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (secName.contains("Section")) {
			secName = secName.substring(0, secName.indexOf("Section"));
		}
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "select CLASS_ALLOTMENT.PRESENT_STD, GENDER,TIMESTAMPDIFF(YEAR,DOB,CURDATE()) AS AGE,count(*) AS COUNT "
					+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
					+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
					+ queryCondition
					+ " group by CLASS_ALLOTMENT.PRESENT_STD,AGE, GENDER order by AGE,CLASS_ALLOTMENT.PRESENT_STD";

			logger.info("findCategoryWise query :: " + findQuery);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "STRENGTH", "AGE_WISE", findQuery, ageDataList, false,
						secName + " AGE_WISE   STD:" + std + "   DIV:" + div, 1);
				return null;
			}

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				presentStdDB = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				ageDB = resultSet.getString("AGE") == null ? "0" : (resultSet.getString("AGE").trim());
				countDB = resultSet.getString("COUNT") == null ? " " : (resultSet.getString("COUNT").trim());

//				ageDataList.add(catTypeDB + "|" + maleDB + "||" + femaleDB + "|||" + totalDB);
				if (!ageDB.equalsIgnoreCase(" ") && !ageDB.equalsIgnoreCase("") && ageDB != null) {
					ageStrengthMap.put(ageDB + "|" + presentStdDB + "|" + genderDB, countDB);
					if (ageStrengthMap.get("1000|" + presentStdDB + "|" + genderDB) != null) {
						stdTotal = Integer
								.parseInt(ageStrengthMap.get("1000|" + presentStdDB + "|" + genderDB).toString())
								+ Integer.parseInt(countDB);
					} else {
						stdTotal = Integer.parseInt(countDB);
					}
					ageStrengthMap.put("1000|" + presentStdDB + "|" + genderDB, stdTotal + "");
					if (genderDB.equalsIgnoreCase("MALE")) {
						sex = "Boys";
					} else {
						sex = "Girls";
					}
					ageStrengthMap.put("Class|" + presentStdDB + "|MALE", presentStdDB);
					ageStrengthMap.put("Age|" + presentStdDB + "|MALE", "Boys");
					ageStrengthMap.put("Class|" + presentStdDB + "|FEMALE", presentStdDB);
					ageStrengthMap.put("Age|" + presentStdDB + "|FEMALE", "Girls");
				}
				stdMap.put(cm.RomanToInteger(presentStdDB), presentStdDB + "|");
				ageMap.put(Integer.parseInt(ageDB), "");
				findFlag = true;
			}
			ageMap.put(1000, "");

			Set set = ageMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				if (ageSorted.equalsIgnoreCase("")) {
					ageSorted = me.getKey().toString();
				} else {
					ageSorted = ageSorted + "|" + me.getKey().toString();
				}
			}

			Set setStd = stdMap.entrySet();
			Iterator j = setStd.iterator();
			while (j.hasNext()) {
				Map.Entry meStd = (Map.Entry) j.next();
				stdList = stdList + meStd.getValue().toString();
			}

			ageStrengthMap.put("stdList", stdList);
			ageStrengthMap.put("ageSorted", ageSorted);
		} catch (Exception e) {
			cm.logException(e);
		}
		return ageStrengthMap;
	}

	// /////////CategoryWise Print List////////////////////////////////////////
	public List<String> categoryPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========categoryPrintList Query============");
		String findQuery = "";
		String catTypeDB = "";
		String genderDB = "";
		int srNo = 0;
		String grNo = "";
		String rollNo = "";
		String presentStd = "";
		String presentDiv = "";
		String name = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		List catDataList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND CLASS_ALLOTMENT.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.PRESENT_STD,HS_GENERAL_REGISTER.PRESENT_DIV,HS_GENERAL_REGISTER.GR_NO, concat(HS_GENERAL_REGISTER.LAST_NAME,' ',HS_GENERAL_REGISTER.FIRST_NAME,' ',HS_GENERAL_REGISTER.FATHER_NAME) AS NAME, "
					+ "HS_GENERAL_REGISTER.CATEGORY,HS_GENERAL_REGISTER.GENDER FROM " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER LEFT JOIN " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
					+ "ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
					+ queryCondition + " ORDER BY ROLL_NO * 1 ";

			logger.info("findCategoryWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			catDataList.add("Roll No|GR No.|NAME|CATEGORY|GENDER|STD-DIV");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				catTypeDB = resultSet.getString("CATEGORY") == null ? " " : (resultSet.getString("CATEGORY").trim());
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				presentStd = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());
				if (catTypeDB.equalsIgnoreCase("")) {
					catTypeDB = " ";
				}
				if (genderDB.equalsIgnoreCase("")) {
					genderDB = " ";
				}
				srNo++;

				catDataList.add(rollNo + "|" + grNo + "|" + name + "|" + catTypeDB + "|" + genderDB + "|" + presentStd
						+ "-" + presentDiv);
				findFlag = true;
			}
			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "PRINTLIST", "CATEGORY_WISE", findQuery, catDataList, true,
						secName + " CATEGORY_WISE  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return catDataList;
	}

	// /////////scholarshipPrintList Print
	// List////////////////////////////////////////
	public List<String> scholarshipPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========scholarshipPrintList Query============");
		String findQuery = "", resultQuery = "";
		String catTypeDB = "";
		String genderDB = "";
		int stdInt = 0;
		int count = 0;
		String grNo = "";
		String rollNo = "";
		String presentStd = "", adhaar_card = "", bank = "", bank_branch = "", bank_account = "", bank_ifsc;
		String presentDiv = "", passFail = "", percentage = "";
		String name = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		Map<Integer, Integer> stdCount = new TreeMap<Integer, Integer>();
		Map<Integer, String> savitri_sc = new TreeMap<Integer, String>();
		Map<Integer, String> savitri_vjnt_sbc = new TreeMap<Integer, String>();
		Map<Integer, String> merit_sc = new TreeMap<Integer, String>();
		Map<Integer, String> merit_vjnt_sbc = new TreeMap<Integer, String>();
		Map<Integer, String> exam_fee = new TreeMap<Integer, String>();
		Map<Integer, String> uncleanprofes = new TreeMap<Integer, String>();
		Map<Integer, String> prematric = new TreeMap<Integer, String>();

		LinkedHashMap<String, Map<Integer, String>> scholarshipMap = new LinkedHashMap<String, Map<Integer, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> resultMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();

		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String schoolName = sessionData.getConfigMap().get("BONAFIDE_HEADER_SCHOOL");

		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND CLASS_ALLOTMENT.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			resultQuery = "SELECT GR_NO,FINAL_PERCENT,FINAL_RESULT FROM RESULT_DATA WHERE "
					+ "RESULT_DATA.ACADEMIC_YEAR = '" + cm.getPreviousYear(sessionData,academicYear)
					+ "' AND RESULT_DATA.SECTION_NM='" + section + "' ORDER BY FINAL_PERCENT DESC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(resultQuery);
			while (resultSet.next()) {
				LinkedHashMap<String, String> resultMapTemp = new LinkedHashMap<String, String>();
				resultMapTemp.put("final_percent", resultSet.getString("FINAL_PERCENT") == null ? " "
						: (resultSet.getString("FINAL_PERCENT").trim()));
				resultMapTemp.put("final_result", resultSet.getString("FINAL_RESULT") == null ? " "
						: (resultSet.getString("FINAL_RESULT").trim()));
				resultMap.put(resultSet.getString("GR_NO"), resultMapTemp);
			}

			findQuery = "SELECT ROLL_NO,"
					+ "HS_GENERAL_REGISTER.PRESENT_STD,HS_GENERAL_REGISTER.PRESENT_DIV,HS_GENERAL_REGISTER.GR_NO, "
					+ "concat(HS_GENERAL_REGISTER.LAST_NAME,' ',HS_GENERAL_REGISTER.FIRST_NAME,' ',HS_GENERAL_REGISTER.FATHER_NAME) AS NAME, "
					+ "HS_GENERAL_REGISTER.CATEGORY,HS_GENERAL_REGISTER.GENDER,ADHAAR_CARD,BANK,BANK_BRANCH,BANK_ACCOUNT,BANK_IFSC "
					+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER " + "LEFT JOIN "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
					+ "ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
					+ queryCondition + " ORDER BY CATEGORY,ROLL_NO * 1 ";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			if (!print.equalsIgnoreCase("")) {
				savitri_sc.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				savitri_sc.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				savitri_sc.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				savitri_sc.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				savitri_sc.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

				savitri_vjnt_sbc.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				savitri_vjnt_sbc.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				savitri_vjnt_sbc.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				savitri_vjnt_sbc.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				savitri_vjnt_sbc.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

				merit_sc.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				merit_sc.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				merit_sc.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				merit_sc.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				merit_sc.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

				merit_vjnt_sbc.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				merit_vjnt_sbc.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				merit_vjnt_sbc.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				merit_vjnt_sbc.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				merit_vjnt_sbc.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

				exam_fee.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				exam_fee.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				exam_fee.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				exam_fee.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				exam_fee.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

				uncleanprofes.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				uncleanprofes.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				uncleanprofes.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				uncleanprofes.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				uncleanprofes.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

				prematric.put(1, "SCHOOL NAME : " + schoolName + "| | | | | | | | | | | | | ");
				prematric.put(2, "UDISE  NO. OF THE SCHOOL | | | | | | | | | | | | | ");
				prematric.put(3, "HEAD MASTER NAME | | | | | | | | | | | | | ");
				prematric.put(4, "MOBILE NO. | | | | | | | | | | | | | ");
				prematric.put(5,
						"SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

			}
//			savitri_sc.add("SR NO.|GR No.|STUDENT NAME|CATEGORY (CASTE)|CLASS|PASS/FAIL|PERCENTAGE|ATTENDANCE|AADHAR NO.|BANK NAME|BRANCH|IFSC CODE|A/C NO|AMOUNT");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				catTypeDB = resultSet.getString("CATEGORY") == null ? " " : (resultSet.getString("CATEGORY").trim());
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				presentStd = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());
				adhaar_card = resultSet.getString("ADHAAR_CARD") == null ? " "
						: (resultSet.getString("ADHAAR_CARD").trim());
				bank = resultSet.getString("BANK") == null ? " " : (resultSet.getString("BANK").trim());
				bank_branch = resultSet.getString("BANK_BRANCH") == null ? " "
						: (resultSet.getString("BANK_BRANCH").trim());
				bank_account = resultSet.getString("BANK_ACCOUNT") == null ? " "
						: (resultSet.getString("BANK_ACCOUNT").trim());
				bank_ifsc = resultSet.getString("BANK_IFSC") == null ? " " : (resultSet.getString("BANK_IFSC").trim());
				if (catTypeDB.equalsIgnoreCase("")) {
					catTypeDB = " ";
				}
				if (genderDB.equalsIgnoreCase("")) {
					genderDB = " ";
				}

				if (resultMap.get(grNo) != null) {
					passFail = resultMap.get(grNo).get("final_result");
					percentage = resultMap.get(grNo).get("final_percent");
				} else {
					passFail = " ";
					percentage = " ";
				}

				stdInt = Integer.parseInt(cm.RomanToInteger(presentStd) + "" + cm.AlphabetToInteger(presentDiv));
//				sortedStdMap.put(stdInt, savitri_sc_count + "|" + grNo + "|" + name + "|" + catTypeDB + "|" + presentStd+ "-" + presentDiv 
//							+ "| | | |"+ adhaar_card +"|" + bank +"|" + bank_branch +"|" + bank_ifsc +"|" + bank_account + "| | ");

				if (stdCount.get(stdInt) == null) {
					stdCount.put(stdInt, stdInt * 1000);
				} else {
					stdCount.put(stdInt, stdCount.get(stdInt) + 1);
				}

				if (catTypeDB.equalsIgnoreCase("SC") && genderDB.equalsIgnoreCase("FEMALE")) {
					count++;
					savitri_sc.put(stdCount.get(stdInt),
							count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv
									+ " |" + passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |"
									+ bank_branch + " |" + bank_ifsc + " |" + bank_account + " | ");
				}
				if ((catTypeDB.startsWith("NT ") || catTypeDB.equalsIgnoreCase("VJNT")
						|| catTypeDB.equalsIgnoreCase("SBC")) && genderDB.equalsIgnoreCase("FEMALE")) {
					count++;
					savitri_vjnt_sbc.put(stdCount.get(stdInt),
							count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv
									+ " |" + passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |"
									+ bank_branch + " |" + bank_ifsc + " |" + bank_account + " | ");
				}
				if (catTypeDB.equalsIgnoreCase("SC")) {
					count++;
					merit_sc.put(stdCount.get(stdInt),
							count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv
									+ " |" + passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |"
									+ bank_branch + " |" + bank_ifsc + " |" + bank_account + " | ");
				}
				if ((catTypeDB.startsWith("NT ") || catTypeDB.equalsIgnoreCase("VJNT")
						|| catTypeDB.equalsIgnoreCase("SBC"))) {
					count++;
					merit_vjnt_sbc.put(stdCount.get(stdInt),
							count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv
									+ " |" + passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |"
									+ bank_branch + " |" + bank_ifsc + " |" + bank_account + " | ");
				}

				if (catTypeDB.equalsIgnoreCase("SC") && presentStd.equalsIgnoreCase("X")) {
					count++;
					exam_fee.put(stdCount.get(stdInt),
							count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv
									+ " |" + passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |"
									+ bank_branch + " |" + bank_ifsc + " |" + bank_account + " | ");
				}

				uncleanprofes.put(stdCount.get(stdInt),
						count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv + " |"
								+ passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |" + bank_branch
								+ " |" + bank_ifsc + " |" + bank_account + " | ");

				if (catTypeDB.equalsIgnoreCase("SC")
						&& (presentStd.equalsIgnoreCase("IX") || presentStd.equalsIgnoreCase("X"))) {
					count++;
					prematric.put(stdCount.get(stdInt),
							count + "|" + grNo + "|" + name + "|" + catTypeDB + " |" + presentStd + "-" + presentDiv
									+ " |" + passFail + "|" + percentage + "| |" + adhaar_card + " |" + bank + " |"
									+ bank_branch + " |" + bank_ifsc + " |" + bank_account + " | ");
				}

				findFlag = true;
			}
			scholarshipMap.put("SAVITRI_SC", savitri_sc);
			scholarshipMap.put("SAVITRI_VJNT_SBC", savitri_vjnt_sbc);
			scholarshipMap.put("MERIT_SC", merit_sc);
			scholarshipMap.put("MERIT_VJNT_SBC", merit_vjnt_sbc);
			scholarshipMap.put("EXAM_FEE", exam_fee);
			scholarshipMap.put("UNCLEANPROFES", uncleanprofes);
			scholarshipMap.put("PREMATRIC", prematric);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ceScholar.generateExcel(sessionData, "PRINTLIST", "SCHOLARSHIP", findQuery, scholarshipMap, true,
						"SAVITRIBAI PHULE SCHOLARSHIP FOR GIRLS YEAR " + academicYear + "  STD:" + std + "  DIV:" + div,
						1, academicYear);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return null;
	}

	// /////////Leaving Certificate Print
	// List////////////////////////////////////////
	public List<String> lcPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		String findQuery = "";
		String date_leaving = "";
		String date_leaving_o = "";
		String original_lc = "";
		String duplicate_date = "";
		String duplicate_date_d = "";
		String duplicate_lc = "";
		String triplicate_date = "";
		String triplicate_date_t = "";
		String triplicate_lc = "";
		String presentStd = "";
		String presentDiv = "";
		int srNo = 0;
		String grNo = "";
		String rollNo = "";
		String name = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		List catDataList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String startDate = sessionData.getConfigMap().get("ACADEMIC_YEAR_START_" + sessionData.getDBName());
		startDate = academicYear.substring(0, 4) + "-" + startDate;// yyyy-mm-dd
		String endDate = sessionData.getConfigMap().get("ACADEMIC_YEAR_END_" + sessionData.getDBName());
		endDate = academicYear.substring(0, 2) + academicYear.substring(academicYear.length() - 2) + "-" + endDate;// yyyy-mm-dd
		if (!tillDate.equalsIgnoreCase("")) {
			endDate = tillDate.replace("/", "-");
		}
		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '"
					+ div + "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' AND ((DATE_LEAVING >= '" + startDate
					+ "' and  DATE_LEAVING <= '" + endDate + "') OR " + "(DUPLICATE_LC_DATE  >= '" + startDate
					+ "' and  DUPLICATE_LC_DATE  >= '" + endDate + "') OR " + "(TRIPLICATE_LC_DATE  >= '" + startDate
					+ "' and  TRIPLICATE_LC_DATE <= '" + endDate + "'))";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND ((DATE_LEAVING >= '" + startDate + "' and  DATE_LEAVING <= '" + endDate
					+ "') OR " + "(DUPLICATE_LC_DATE  >= '" + startDate + "' and  DUPLICATE_LC_DATE  >= '" + endDate
					+ "') OR " + "(TRIPLICATE_LC_DATE  >= '" + startDate + "' and  TRIPLICATE_LC_DATE <= '" + endDate
					+ "'))";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  HS_GENERAL_REGISTER.SECTION_NM='" + section + "' AND ((DATE_LEAVING >= '"
					+ startDate + "' and  DATE_LEAVING <= '" + endDate + "') OR " + "(DUPLICATE_LC_DATE  >= '"
					+ startDate + "' and  DUPLICATE_LC_DATE  >= '" + endDate + "') OR " + "(TRIPLICATE_LC_DATE  >= '"
					+ startDate + "' and  TRIPLICATE_LC_DATE <= '" + endDate + "'))";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND CLASS_ALLOTMENT.SECTION_NM='"
					+ section + "' AND " + "((DATE_LEAVING >= '" + startDate + "' and  DATE_LEAVING <= '" + endDate
					+ "') OR " + "(DUPLICATE_LC_DATE  >= '" + startDate + "' and  DUPLICATE_LC_DATE  >= '" + endDate
					+ "') OR " + "(TRIPLICATE_LC_DATE  >= '" + startDate + "' and  TRIPLICATE_LC_DATE <= '" + endDate
					+ "'))";
		}

		try {
			findQuery = "SELECT DATE_FORMAT(DATE_LEAVING,'%d/%m/%Y') AS DATE_LEAVING,DATE_FORMAT(DUPLICATE_LC_DATE,'%d/%m/%Y') AS DUPLICATE_LC_DATE,"
					+ "DATE_FORMAT(TRIPLICATE_LC_DATE,'%d/%m/%Y') AS TRIPLICATE_LC_DATE,"
					+ "DATE(DATE_LEAVING) AS DATE_LEAVING_O,DATE(DUPLICATE_LC_DATE) AS DUPLICATE_LC_DATE_D,"
					+ "DATE(TRIPLICATE_LC_DATE) AS TRIPLICATE_LC_DATE_T,ORIGINAL_LC,DUPLICATE_LC,TRIPLICATE_LC,ROLL_NO,"
					+ "HS_GENERAL_REGISTER.GR_NO,HS_GENERAL_REGISTER.PRESENT_STD,HS_GENERAL_REGISTER.PRESENT_DIV, "
					+ "concat(HS_GENERAL_REGISTER.LAST_NAME,' ',HS_GENERAL_REGISTER.FIRST_NAME,' ',HS_GENERAL_REGISTER.FATHER_NAME) AS NAME, "
					+ "HS_GENERAL_REGISTER.CATEGORY,HS_GENERAL_REGISTER.GENDER FROM " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER " + "LEFT JOIN " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
					+ "ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
					+ "AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR " + queryCondition
					+ " ORDER BY DATE_LEAVING_O,DUPLICATE_LC_DATE_D,TRIPLICATE_LC_DATE_T,ORIGINAL_LC,ROLL_NO ASC ";

			logger.info("findCategoryWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			catDataList.add("Roll No|GR No.|NAME*10|LC No.*5|Date of Leaving|Std-Div");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				date_leaving = resultSet.getString("DATE_LEAVING") == null ? " "
						: (resultSet.getString("DATE_LEAVING").trim());
				date_leaving_o = resultSet.getString("DATE_LEAVING_O") == null ? " "
						: (resultSet.getString("DATE_LEAVING_O").trim());
				original_lc = resultSet.getString("ORIGINAL_LC") == null ? " "
						: (resultSet.getString("ORIGINAL_LC").trim());
				original_lc = original_lc + "/" + cm.getAcademicYear(sessionData,date_leaving);
				if (date_leaving.equalsIgnoreCase("")) {
					date_leaving = " ";
				}
				if (original_lc.equalsIgnoreCase("")) {
					original_lc = " ";
				}
				presentStd = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());

				date_leaving_o = cm.dateFormatFromyyyymmddToddmmyyyy(date_leaving_o);
				catDataList.add(rollNo + "|" + grNo + "|" + name + "|" + original_lc + " (Original)|" + date_leaving_o
						+ "|" + presentStd + "-" + presentDiv);

				duplicate_date = resultSet.getString("DUPLICATE_LC_DATE") == null ? " "
						: (resultSet.getString("DUPLICATE_LC_DATE").trim());
				duplicate_date_d = resultSet.getString("DUPLICATE_LC_DATE_D") == null ? " "
						: (resultSet.getString("DUPLICATE_LC_DATE_D").trim());
				duplicate_lc = resultSet.getString("DUPLICATE_LC") == null ? " "
						: (resultSet.getString("DUPLICATE_LC").trim());
				if (!duplicate_date.equalsIgnoreCase(" ") && !duplicate_date.equalsIgnoreCase("")
						&& !duplicate_date.equalsIgnoreCase("null")) {
					duplicate_lc = duplicate_lc + "/" + cm.getAcademicYear(sessionData,duplicate_date);
					duplicate_date_d = cm.dateFormatFromyyyymmddToddmmyyyy(duplicate_date_d);
					catDataList.add(rollNo + "|" + grNo + "|" + name + "|" + duplicate_lc + " (Duplicate)|"
							+ duplicate_date + "|" + presentStd + "-" + presentDiv);
				}

				triplicate_date = resultSet.getString("TRIPLICATE_LC_DATE") == null ? " "
						: (resultSet.getString("TRIPLICATE_LC_DATE").trim());
				triplicate_date_t = resultSet.getString("TRIPLICATE_LC_DATE_T") == null ? " "
						: (resultSet.getString("TRIPLICATE_LC_DATE_T").trim());
				triplicate_lc = resultSet.getString("TRIPLICATE_LC") == null ? " "
						: (resultSet.getString("TRIPLICATE_LC").trim());
				if (!triplicate_date.equalsIgnoreCase(" ") && !triplicate_date.equalsIgnoreCase("")
						&& !triplicate_date.equalsIgnoreCase("null")) {
					triplicate_lc = triplicate_lc + "/" + cm.getAcademicYear(sessionData,triplicate_date);
					triplicate_date_t = cm.dateFormatFromyyyymmddToddmmyyyy(triplicate_date_t);
					catDataList.add(rollNo + "|" + grNo + "|" + name + "|" + triplicate_lc + " (Triplicate)|"
							+ triplicate_date + "|" + presentStd + "-" + presentDiv);
				}

				srNo++;
				findFlag = true;
			}

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "PRINTLIST", "LEAVING CERTIFICATE", findQuery, catDataList, true,
						secName + " LEAVING CERTIFICATE  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return catDataList;
	}

	// /////////findReligionWise////////////////////////////////////////
	public List<String> findReligionWise(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========findReligionWise Query============");
		String findQuery = "";
		String catTypeDB = "";
		String maleDB = "";
		String femaleDB = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		List catDataList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (secName.contains("Section")) {
			secName = secName.substring(0, secName.indexOf("Section"));
		}
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT IFNULL(HS_GENERAL_REGISTER.RELIGION,'GRAND TOTAL')  AS  RELIGION, "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.GENDER = 'MALE' THEN "
					+ "HS_GENERAL_REGISTER.RELIGION ELSE NULL END) AS BOYS,  "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.GENDER = 'FEMALE' THEN "
					+ "HS_GENERAL_REGISTER.RELIGION ELSE NULL END) AS GIRLS, COUNT(*) AS TOTAL  " + "FROM "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER  " + "LEFT  JOIN "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT  ON  "
					+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM " + queryCondition
					+ " GROUP BY HS_GENERAL_REGISTER.RELIGION  WITH  ROLLUP";

			logger.info("findReligionWise query :: " + findQuery);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "STRENGTH", "RELIGION_WISE", findQuery, catDataList, false,
						secName + " RELIGION_WISE  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			catDataList.add("RELIGION|BOYS||GIRLS|||TOTAL");

			while (resultSet.next()) {
				catTypeDB = resultSet.getString("RELIGION") == null ? "NO RELIGION"
						: (resultSet.getString("RELIGION").trim());
				maleDB = resultSet.getString("BOYS") == null ? " " : (resultSet.getString("BOYS").trim());
				femaleDB = resultSet.getString("GIRLS") == null ? " " : (resultSet.getString("GIRLS").trim());
				totalDB = resultSet.getString("TOTAL") == null ? " " : (resultSet.getString("TOTAL").trim());

				if (catTypeDB.equalsIgnoreCase("")) {
					catTypeDB = "NO RELIGION";
				}
				catDataList.add(catTypeDB + "|" + maleDB + "||" + femaleDB + "|||" + totalDB);
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return catDataList;
	}

	// /////////Religion Print List////////////////////////////////////////
	public List<String> religionPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========religionPrintList Query============");
		String findQuery = "";
		String religionTypeDB = "";
		String genderDB = "";
		String presentStd = "";
		String presentDiv = "";
		int srNo = 0;
		String grNo = "";
		String rollNo = "";
		String name = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		List religionDataList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT ROLL_NO,HS_GENERAL_REGISTER.PRESENT_STD,HS_GENERAL_REGISTER.PRESENT_DIV,HS_GENERAL_REGISTER.GR_NO,concat(HS_GENERAL_REGISTER.LAST_NAME,' ',HS_GENERAL_REGISTER.FIRST_NAME,' ',HS_GENERAL_REGISTER.FATHER_NAME) AS NAME, "
					+ "HS_GENERAL_REGISTER.RELIGION,HS_GENERAL_REGISTER.GENDER FROM " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER LEFT JOIN " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT "
					+ "ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
					+ queryCondition + " ORDER BY ROLL_NO * 1 ";

			logger.info("findReligionWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			religionDataList.add("Roll No|GR No.|NAME|RELIGION|GENDER|STD-DIV");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				religionTypeDB = resultSet.getString("RELIGION") == null ? " "
						: (resultSet.getString("RELIGION").trim());
				genderDB = resultSet.getString("GENDER") == null ? " " : (resultSet.getString("GENDER").trim());
				presentStd = resultSet.getString("PRESENT_STD") == null ? " "
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? " "
						: (resultSet.getString("PRESENT_DIV").trim());

				if (religionTypeDB.equalsIgnoreCase("")) {
					religionTypeDB = " ";
				}
				if (genderDB.equalsIgnoreCase("")) {
					genderDB = " ";
				}
				srNo++;

				religionDataList.add(rollNo + "|" + grNo + "|" + name + "|" + religionTypeDB + "|" + genderDB + "|"
						+ presentStd + "-" + presentDiv);
				findFlag = true;
			}

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "PRINTLIST", "RELIGION_WISE", findQuery, religionDataList, true,
						secName + " RELIGION_WISE  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return religionDataList;
	}

	// /////////findGeneralWise////////////////////////////////////////
	public List<String> findGeneralWise(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========findGeneralWise Query============");
		String findQuery = "";
		String stdDb = "", stdForStrength= "";
		String divDb = "";
		String maleDB = "";
		String femaleDB = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		List catDataList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (secName.contains("Section")) {
			secName = secName.substring(0, secName.indexOf("Section"));
		}
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}
		TreeMap<Integer, String> sortRoman = new TreeMap();

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} /*
			 * else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			 * queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear +
			 * "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "'"; }
			 */

		try {
			findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD  AS  PRESENT_STD, CLASS_ALLOTMENT.PRESENT_DIV  AS  PRESENT_DIV, "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.GENDER = 'MALE' THEN "
					+ "CLASS_ALLOTMENT.PRESENT_STD ELSE NULL END) AS BOYS,  "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.GENDER = 'FEMALE' THEN "
					+ "CLASS_ALLOTMENT.PRESENT_STD ELSE NULL END) AS GIRLS, COUNT(*) AS TOTAL  " + "FROM "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER  " + "LEFT  JOIN "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT  ON  "
					+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM " + queryCondition
					+ " GROUP BY CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV  WITH  ROLLUP";

			logger.info("findGeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			catDataList.add("CLASS|BOYS||GIRLS|||TOTAL");

			String stdDivInInt = "";
			int i = 0;
			int rowcount = 0;
			int grandTotal = 0;
			int maleTotal = 0;
			int femaleTotal = 0;
			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}

			while (resultSet.next()) {
				stdDb = resultSet.getString("PRESENT_STD") == null ? " " : (resultSet.getString("PRESENT_STD").trim());
				stdForStrength = stdDb;
				if(stdForStrength.equalsIgnoreCase("JR KG")) {
					stdForStrength = "LOWER_KG";
				}
				else if(stdForStrength.equalsIgnoreCase("SR KG")) {
					stdForStrength = "UPPER_KG";
				}
				divDb = resultSet.getString("PRESENT_DIV") == null ? " " : (resultSet.getString("PRESENT_DIV").trim());
				maleDB = resultSet.getString("BOYS") == null ? " " : (resultSet.getString("BOYS").trim());
				femaleDB = resultSet.getString("GIRLS") == null ? " " : (resultSet.getString("GIRLS").trim());
				totalDB = resultSet.getString("TOTAL") == null ? " " : (resultSet.getString("TOTAL").trim());

//				stdDivInInt = cm.RomanToInteger(stdDb) +""+ cm.AlphabetToInteger(divDb);
				if (i == (rowcount - 2)) {
					grandTotal = grandTotal + Integer.parseInt(totalDB);
					maleTotal = maleTotal + Integer.parseInt(maleDB);
					femaleTotal = femaleTotal + Integer.parseInt(femaleDB);
//					catDataList.add(stdDb + " Total |" + maleDB + "|" + femaleDB + "|" + totalDB);
					stdDivInInt = cm.RomanToInteger(stdForStrength) + "" + cm.AlphabetToInteger("Total");
					int stdDivIntValue = Integer.parseInt(stdDivInInt);
					if(stdDivIntValue < 0) {
						stdDivIntValue = stdDivIntValue * (-1);
					}
					sortRoman.put(stdDivIntValue,
							stdDb + " Total |" + maleDB + "|" + femaleDB + "|" + totalDB);
//					catDataList.add("Grand Total |" + maleTotal + "|" + femaleTotal + "|" + grandTotal);
//					stdDivInInt = cm.RomanToInteger(stdDb) +""+ cm.AlphabetToInteger("Grand_Total");
					stdDivInInt = cm.RomanToInteger(stdDb) + "" + cm.AlphabetToInteger("Grand_Total");
					stdDivIntValue = Integer.parseInt(stdDivInInt);
					if(stdDivIntValue < 0) {
						stdDivIntValue = stdDivIntValue * (-1);
					}
					sortRoman.put(stdDivIntValue,
							"Grand Total |" + maleTotal + "|" + femaleTotal + "|" + grandTotal);
				} else if (i < (rowcount - 2)) {
					if (divDb.trim().equalsIgnoreCase("")) {
						divDb = "Total";
						grandTotal = grandTotal + Integer.parseInt(totalDB);
						maleTotal = maleTotal + Integer.parseInt(maleDB);
						femaleTotal = femaleTotal + Integer.parseInt(femaleDB);
					}
					stdDivInInt = cm.RomanToInteger(stdForStrength) + "" + cm.AlphabetToInteger(divDb);
					int stdDivIntValue = Integer.parseInt(stdDivInInt);
					if(stdDivIntValue < 0) {
						stdDivIntValue = stdDivIntValue * (-1);
					}
					sortRoman.put(stdDivIntValue,
							stdDb + " " + divDb + "|" + maleDB + "|" + femaleDB + "|" + totalDB);
//					catDataList.add(stdDb +" "+ divDb + "|" + maleDB + "|" + femaleDB + "|" + totalDB);
				}
				findFlag = true;
				i++;
			}
			Set set = sortRoman.entrySet();
			// Get an iterator
			Iterator j = set.iterator();
			// Display elements
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				catDataList.add(me.getValue());
			}

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "STRENGTH", "GENERAL", "", catDataList, false,
						secName + " GENERAL  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return catDataList;
	}
	
	/////////// General Print List////////////////////////////////////////
	public List<String> generalPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========generalPrintList Query============");
		String findQuery = "";
		String generalTypeDB = "";
		int srNo = 0;
		String name = "";
		String firstName = "";
		String lastName = "";
		String fatherName = "";
		String mother_name = "";
		String contact1 = "";
		String contact2 = "";
		String mother_tongue = "";
		String rollNo = "";
		String cast = "";
		String birthPlace = "";
		String dobWords = "";
		String lastSchoolAttended = "";
		String dateOfAdmission = "";
		String adhaarCard = "";
		String grNo = "";
		String dob = "";
		String gender = "";
		String category = "";
		String presentStd = "";
		String presentDiv = "";
		String religion = "";
		String taluka = "";
		String district = "";
		String state = "";
		String country = "";
		String studentId = "";
		String queryCondition = "";
		String residential_address = "", permanent_address = "", paying_free = "";
		boolean findFlag = false;
		List generalDataList = new ArrayList();
		List generalDataExcelList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND CLASS_ALLOTMENT.SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT RELIGION,TALUKA,DISTRICT,STATE,COUNTRY,HS_GENERAL_REGISTER.SUID,CLASS_ALLOTMENT.ROLL_NO,CONTACT_1,CONTACT_2,"
					+ "HS_GENERAL_REGISTER.MOTHER_NAME,HS_GENERAL_REGISTER.MOTHER_TONGUE,HS_GENERAL_REGISTER.GR_NO,HS_GENERAL_REGISTER.CAST,"
					+ "HS_GENERAL_REGISTER.BIRTH_PLACE,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,HS_GENERAL_REGISTER.CATEGORY,"
					+ "HS_GENERAL_REGISTER.DOB_WORDS,HS_GENERAL_REGISTER.LAST_SCHOOL,DATE_FORMAT(HS_GENERAL_REGISTER.DATE_ADMITTED,'%d/%m/%Y') AS DATE_ADMITTED,"
					+ "HS_GENERAL_REGISTER.ADHAAR_CARD,HS_GENERAL_REGISTER.LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME,"
					+ "HS_GENERAL_REGISTER.FATHER_NAME,RESIDENTIAL_ADDRESS,PERMANENT_ADDRESS,"
					+ "HS_GENERAL_REGISTER.GENDER,DATE_FORMAT(HS_GENERAL_REGISTER.DOB,'%d/%m/%Y') AS DOB,HS_GENERAL_REGISTER.PAYING_FREE "
					+ "FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN " + sessionData.getDBName()
					+ "." + "HS_GENERAL_REGISTER ON " + "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM " + queryCondition
					+ " ORDER BY CLASS_ALLOTMENT.ROLL_NO * 1 ";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			generalDataList.add("Roll No.|GR No.|Name|Gender|Birth Date");
			generalDataExcelList.add(
					"Roll No.|GR No.|Last Name|First Name|Father Name|Mother Name|Mother Tongue|Gender|Birth Date|Birth Place|DOB in WORDS|"
							+ "CONTACT 1|CONTACT 2|Cast|Category|Last School|Date Admitted|Adhaar Card|Present Std|Present Div|Permanent Address|Residential Address|"
							+ "Religion|Taluka|District|State|Country|Student ID|PAYING_FREE");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				firstName = resultSet.getString("FIRST_NAME") == null ? "-"
						: (resultSet.getString("FIRST_NAME").trim());
				lastName = resultSet.getString("LAST_NAME") == null ? "-" : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? "-"
						: (resultSet.getString("FATHER_NAME").trim());
				name = lastName + " " + firstName + " " + fatherName;
				mother_name = resultSet.getString("MOTHER_NAME") == null ? "-"
						: (resultSet.getString("MOTHER_NAME").trim());
				mother_tongue = resultSet.getString("MOTHER_TONGUE") == null ? "-"
						: (resultSet.getString("MOTHER_TONGUE").trim());
				gender = resultSet.getString("GENDER") == null ? "-" : (resultSet.getString("GENDER").trim());
				dob = resultSet.getString("DOB") == null ? "-" : (resultSet.getString("DOB").trim());
				contact1 = resultSet.getString("CONTACT_1") == null ? "-" : (resultSet.getString("CONTACT_1").trim());
				contact2 = resultSet.getString("CONTACT_2") == null ? "-" : (resultSet.getString("CONTACT_2").trim());
				cast = resultSet.getString("CAST") == null ? "-" : (resultSet.getString("CAST").trim());
				category = resultSet.getString("CATEGORY") == null ? "-" : (resultSet.getString("CATEGORY").trim());
				presentStd = resultSet.getString("PRESENT_STD") == null ? "-"
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? "-"
						: (resultSet.getString("PRESENT_DIV").trim());
				birthPlace = resultSet.getString("BIRTH_PLACE") == null ? "#"
						: (resultSet.getString("BIRTH_PLACE").trim());
				if (birthPlace.equalsIgnoreCase("")) {
					birthPlace = "#";
				}
				birthPlace = cm.revertCommaApostrophy(birthPlace);
				dobWords = resultSet.getString("DOB_WORDS") == null ? "-" : (resultSet.getString("DOB_WORDS").trim());
				lastSchoolAttended = resultSet.getString("LAST_SCHOOL") == null ? "#"
						: (resultSet.getString("LAST_SCHOOL").trim());
				if (lastSchoolAttended.equalsIgnoreCase("")) {
					lastSchoolAttended = "#";
				}
				lastSchoolAttended = cm.revertCommaApostrophy(lastSchoolAttended);
				dateOfAdmission = resultSet.getString("DATE_ADMITTED") == null ? "-"
						: (resultSet.getString("DATE_ADMITTED").trim());
				adhaarCard = resultSet.getString("ADHAAR_CARD") == null ? "-"
						: (resultSet.getString("ADHAAR_CARD").trim());
				residential_address = resultSet.getString("RESIDENTIAL_ADDRESS") == null ? ""
						: (resultSet.getString("RESIDENTIAL_ADDRESS").trim());
				residential_address = cm.revertCommaApostrophy(residential_address);
				permanent_address = resultSet.getString("PERMANENT_ADDRESS") == null ? ""
						: (resultSet.getString("PERMANENT_ADDRESS").trim());
				permanent_address = cm.revertCommaApostrophy(permanent_address);
				religion = resultSet.getString("RELIGION") == null ? "-" : (resultSet.getString("RELIGION").trim());
				taluka = resultSet.getString("TALUKA") == null ? "-" : (resultSet.getString("TALUKA").trim());
				district = resultSet.getString("DISTRICT") == null ? "-" : (resultSet.getString("DISTRICT").trim());
				state = resultSet.getString("STATE") == null ? "-" : (resultSet.getString("STATE").trim());
				country = resultSet.getString("COUNTRY") == null ? "-" : (resultSet.getString("COUNTRY").trim());
				studentId = resultSet.getString("SUID") == null ? "-" : (resultSet.getString("SUID").trim());
				paying_free = resultSet.getString("PAYING_FREE") == null ? "-"
						: (resultSet.getString("PAYING_FREE").trim());

				if (religion.equalsIgnoreCase(""))
					religion = "-";
				if (taluka.equalsIgnoreCase(""))
					taluka = "-";
				if (district.equalsIgnoreCase(""))
					district = "-";
				if (state.equalsIgnoreCase(""))
					state = "-";
				if (country.equalsIgnoreCase(""))
					country = "-";
				if (studentId.equalsIgnoreCase(""))
					studentId = "-";
				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNo.equalsIgnoreCase(""))
					grNo = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";
				if (lastName.equalsIgnoreCase(""))
					lastName = "-";
				if (firstName.equalsIgnoreCase(""))
					firstName = "-";
				if (fatherName.equalsIgnoreCase(""))
					fatherName = "-";
				if (mother_name.equalsIgnoreCase(""))
					mother_name = "-";
				if (mother_tongue.equalsIgnoreCase(""))
					mother_tongue = "-";
				if (gender.equalsIgnoreCase(""))
					gender = "-";
				if (dob.equalsIgnoreCase(""))
					dob = "-";
				if (contact1.equalsIgnoreCase(""))
					contact1 = "-";
				if (contact2.equalsIgnoreCase(""))
					contact2 = "-";
				if (cast.equalsIgnoreCase(""))
					cast = "-";
				if (birthPlace.equalsIgnoreCase(""))
					birthPlace = "-";
				if (dobWords.equalsIgnoreCase(""))
					dobWords = "-";
				if (lastSchoolAttended.equalsIgnoreCase(""))
					lastSchoolAttended = "-";
				if (dateOfAdmission.equalsIgnoreCase(""))
					dateOfAdmission = "-";
				if (adhaarCard.equalsIgnoreCase(""))
					adhaarCard = "-";
				if (category.equalsIgnoreCase(""))
					category = "-";
				if (presentStd.equalsIgnoreCase(""))
					presentStd = "-";
				if (presentDiv.equalsIgnoreCase(""))
					presentDiv = "-";
				if (residential_address.equalsIgnoreCase(""))
					residential_address = "-";
				if (permanent_address.equalsIgnoreCase(""))
					permanent_address = "-";
				if (paying_free.equalsIgnoreCase(""))
					paying_free = "-";

				generalDataList.add(rollNo + "|" + grNo + "|" + name + "|" + gender + "|" + dob);
				generalDataExcelList.add(rollNo + "|" + grNo + "|" + lastName + "|" + firstName + "|" + fatherName + "|"
						+ mother_name + "|" + mother_tongue + "|" + gender + "|" + dob + "|" + birthPlace + "|"
						+ dobWords + "|" + contact1 + "|" + contact2 + "|" + cast + "|" + category + "|"
						+ lastSchoolAttended + "|" + dateOfAdmission + "|" + adhaarCard + "|" + presentStd + "|"
						+ presentDiv + "|" + permanent_address + "|" + residential_address + "|" + religion + "|"
						+ taluka + "|" + district + "|" + state + "|" + country + "|" + studentId + "|" + paying_free);
				findFlag = true;
			}

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "PRINTLIST", "GENERAL", findQuery, generalDataExcelList, true,
						secName + " GENERAL  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return generalDataList;
	}

	// /////////AB Form Print List////////////////////////////////////////
	public List<String> abFormPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String gender, String formType, String tillDate,
			String studentType) throws Exception {

		logger.info("=========abFormPrintList Query============");
		String findQuery = "";
		String generalTypeDB = "";
		String place_of_pupil = sessionData.getConfigMap().get("PLACE_OF_PUPIL");
		String conduct = sessionData.getConfigMap().get("CONDUCT_OF_PUPIL");
		String progress = sessionData.getConfigMap().get("PROGRESS_OF_PUPIL");
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String addToQuery = "", addToStudentTypeQuery = "";
		if (secName.contains("Section")) {
			secName = secName.substring(0, secName.indexOf("Section"));
		}
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING <= '" + tillDate + "'";
		}
		String app_header_0 = sessionData.getConfigMap().get("APP_HEADER_0_" + sessionData.getAppType());
		String app_header = sessionData.getConfigMap().get("APP_HEADER_" + sessionData.getAppType());
		int srNo = 0;
		String name = "";
		String last_name = "";
		String first_name = "";
		String father_name = "";
		String gr_no = "";
		String academic_year = "";
		String failed_previous = "";
		String previous_std = "";
		String previous_div = "";
		String present_std = "";
		String present_div = "";
		String freeship_date = "";
		String tuition_fee = "";
		String adm_fee = "";
		String term_fee = "";
		int totalFee = 0;
		String annual_income = "";
		String rural_urban = "";
		String income_certificate = "";
		String no_child = "";
		String working_days = "";
		String attended_days = "";
		String suid = "";
		String cast = "";
		String date_admitted = "";
		String birthPlace = "";
		String dobWords = "";
		String lastSchoolAttended = "";
		String dateOfAdmission = "";
		String adhaarCard = "";
		String grNo = "";
		String dob = "";
		String category = "";
		String genderClass = "";
		String presentStd = "";
		String presentDiv = "";
		String queryCondition = "";
		String yearStart = academicYear.substring(0, 4);
		String yearEnd = "" + (Integer.parseInt(yearStart) + 1);
		boolean findFlag = false;
		List generalDataList = new ArrayList();
		List generalDataExcelList = new ArrayList();
		String divHead = "";
		String stdHead = "";
		String stdDivInteger = "";
		TreeMap<String, String> sortStd = new TreeMap();
		LinkedHashMap<String, String> grMap = new LinkedHashMap<String, String>();

		String acadStart = yearStart + "-" + sessionData.getConfigMap().get("ACADEMIC_YEAR_START_" + sessionData.getDBName());
		if (studentType.equalsIgnoreCase("New")) {
			addToStudentTypeQuery = "AND HS_GENERAL_REGISTER.DATE_ADMITTED >= '" + acadStart + "'";
		} else if (studentType.equalsIgnoreCase("Old")) {
			addToStudentTypeQuery = "AND HS_GENERAL_REGISTER.DATE_ADMITTED < '" + acadStart + "'";
		}

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (gender.equalsIgnoreCase("BOYS")) {
			gender = "MALE";
			genderClass = "BOYS";
		} else if (gender.equalsIgnoreCase("GIRLS")) {
			gender = "FEMALE";
			genderClass = "GIRLS";
		}
		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  STATEMENT_DATA.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  STATEMENT_DATA.PRESENT_STD = '" + std + "' AND  STATEMENT_DATA.PRESENT_DIV = '" + div
					+ "' AND STATEMENT_DATA.SECTION_NM='" + section + "' AND HS_GENERAL_REGISTER.GENDER='" + gender
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  STATEMENT_DATA.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  STATEMENT_DATA.PRESENT_STD = '" + std + "' AND STATEMENT_DATA.SECTION_NM='" + section
					+ "' " + " AND HS_GENERAL_REGISTER.GENDER='" + gender
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  STATEMENT_DATA.ACADEMIC_YEAR = '" + academicYear + "' "
					+ "AND STATEMENT_DATA.SECTION_NM='" + section + "' AND HS_GENERAL_REGISTER.GENDER='" + gender
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  STATEMENT_DATA.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  STATEMENT_DATA.PRESENT_DIV = '" + div + "' AND STATEMENT_DATA.SECTION_NM='" + section
					+ "' " + "AND HS_GENERAL_REGISTER.GENDER='" + gender
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT HS_GENERAL_REGISTER.GR_NO, HS_GENERAL_REGISTER.LAST_NAME AS LAST_NAME,HS_GENERAL_REGISTER.FIRST_NAME AS FIRST_NAME,"
					+ "HS_GENERAL_REGISTER.FATHER_NAME AS FATHER_NAME, HS_GENERAL_REGISTER.GR_NO AS GR_NO,"
					+ "STATEMENT_DATA.ACADEMIC_YEAR AS ACADEMIC_YEAR, FAILED_PREVIOUS, PREVIOUS_STD,PREVIOUS_DIV,"
					+ "STATEMENT_DATA.PRESENT_STD AS PRESENT_STD,STATEMENT_DATA.PRESENT_DIV AS PRESENT_DIV,"
					+ "DATE_FORMAT(FREESHIP_DATE,'%d/%m/%Y') AS FREESHIP_DATE, TUITION_FEE,ADM_FEE,TERM_FEE,"
					+ "ANNUAL_INCOME,RURAL_URBAN,INCOME_CERTIFICATE, NO_CHILD , WORKING_DAYS, ATTENDED_DAYS,"
					+ "HS_GENERAL_REGISTER.SUID AS SUID,HS_GENERAL_REGISTER.CAST AS CAST,"
					+ "DATE_FORMAT(DATE_ADMITTED,'%d/%m/%Y') AS DATE_ADMITTED  " + "FROM " + sessionData.getDBName()
					+ ".STATEMENT_DATA LEFT JOIN " + "" + sessionData.getDBName()
					+ ".HS_GENERAL_REGISTER ON HS_GENERAL_REGISTER.GR_NO=STATEMENT_DATA.GR_NO AND "
					+ "HS_GENERAL_REGISTER.SECTION_NM=STATEMENT_DATA.SECTION_NM " + queryCondition
					+ addToStudentTypeQuery + " ORDER BY GR_NO ASC";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			divHead = div;
			stdHead = std;
			if (div.equalsIgnoreCase("") || div.equalsIgnoreCase("-")) {
				divHead = "All";
			}
			if (std.equalsIgnoreCase("") || std.equalsIgnoreCase("-")) {
				stdHead = "All";
			}

			if (formType.equalsIgnoreCase("Statement A")) {
				generalDataExcelList.add(secName + "  " + formType + "  STD:" + stdHead + "  DIV:" + divHead + " "
						+ academicYear + "  SECONDARY  (" + genderClass + ")| " + "| | | | | | | | | | | | | | | | ");
				generalDataExcelList.add(
						"Statement for the use of the Heads of Education institution to be sent alongwith the applications| "
								+ "| | | | | | | | | | | | | | | | ");
				generalDataExcelList
						.add("Sr No.|Gr No.|Name in full                                   (In block capitals)*6|"
								+ "Place where the pupil and his parents are residing*2|"
								+ "Whether student has failed in previous year*2|Class in which studying in previous year*2|"
								+ "Class which promoted this year*2|Date of Admission*2|Date of application for freeship*2|"
								+ "Fee liable to be charged from a pupil per month*2|"
								+ "Total annual income of parents & Guardian from all sources*2|"
								+ "Whether the student is from rural or urban area*2|"
								+ "If from urban area has he produced income certificate*2|"
								+ "Caste to which the pupil belongs as entered in G.R.*4|No. of child*2");
				generalDataExcelList.add(" | *2| *6| *2| *2| *2| *2| *2| *2|"
						+ "Tuition Fees*2|Adm Fees*2|Term Fee twice a year*2|Total*2|" + " *2| *2| *2| *4| *2");
				generalDataExcelList.add("1|2|3|4|5|6|7|8|9| |10| | |11|12|13|14|15");
			} else if (formType.equalsIgnoreCase("Statement B")) {
				generalDataExcelList.add(secName + "  " + formType + "  STD:" + stdHead + "  DIV:" + divHead + " "
						+ academicYear + "  SECONDARY  (" + genderClass + ")| " + "| | | | | | | | | | | | | | | ");
				generalDataExcelList.add(
						"PROGRESS REPORTED TO ACCOMPANIED THE B,C,E,B,C,PTC,STW,FREESHIP BILL FOR THE TERM ENDING JUNE "
								+ yearStart + " to MAY " + yearEnd + "| " + "| | | | | | | | | | | | | | | ");
				generalDataExcelList.add("Sr No.|Name in full*7|G.R.No. Caste & Sub Caste of the Pupil*6|Std. & Div "
						+ academicYear + "*2|Conduct*2|" + "Progress*2|Days of Attendance*2|"
						+ "Rate of Fees*2|Amount claimed for*2|" + "Total*2|"
						+ "No. and Date of sanctioned*3|Remarks*2");
				generalDataExcelList.add(" | *7| *6| *2| *2| *2|Working Days of Inst.*2|Days Attended by the student*2|"
						+ "Tuition Fees*2|Adm Fees*2|Term Fee*2|Tuition Fees*2|" + "Adm Fees*2|Term Fee*2| *2| *3| *2");
//				generalDataExcelList.add("1|2|3|4|5|6|7|8| |9| | |10|11|12|13|14");
			}
			while (resultSet.next()) {
				srNo = srNo + 1;
				last_name = resultSet.getString("LAST_NAME") == null ? "-" : (resultSet.getString("LAST_NAME").trim());
				first_name = resultSet.getString("FIRST_NAME") == null ? "-"
						: (resultSet.getString("FIRST_NAME").trim());
				father_name = resultSet.getString("FATHER_NAME") == null ? "-"
						: (resultSet.getString("FATHER_NAME").trim());
				gr_no = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				if (grMap.get(gr_no) == null) {
					grMap.put(gr_no, first_name);
				} else {
					continue;
				}
				academic_year = resultSet.getString("ACADEMIC_YEAR") == null ? "-"
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				failed_previous = resultSet.getString("FAILED_PREVIOUS") == null ? "-"
						: (resultSet.getString("FAILED_PREVIOUS").trim());
				previous_std = resultSet.getString("PREVIOUS_STD") == null ? "-"
						: (resultSet.getString("PREVIOUS_STD").trim());
				previous_div = resultSet.getString("PREVIOUS_DIV") == null ? "-"
						: (resultSet.getString("PREVIOUS_DIV").trim());
				present_std = resultSet.getString("PRESENT_STD") == null ? "-"
						: (resultSet.getString("PRESENT_STD").trim());
				present_div = resultSet.getString("PRESENT_DIV") == null ? "-"
						: (resultSet.getString("PRESENT_DIV").trim());
				freeship_date = resultSet.getString("FREESHIP_DATE") == null ? "-"
						: (resultSet.getString("FREESHIP_DATE").trim());
				tuition_fee = resultSet.getString("TUITION_FEE") == null ? "0"
						: (resultSet.getString("TUITION_FEE").trim());
				adm_fee = resultSet.getString("ADM_FEE") == null ? "0" : (resultSet.getString("ADM_FEE").trim());
				term_fee = resultSet.getString("TERM_FEE") == null ? "0" : (resultSet.getString("TERM_FEE").trim());
				annual_income = resultSet.getString("ANNUAL_INCOME") == null ? "0"
						: (resultSet.getString("ANNUAL_INCOME").trim());
				rural_urban = resultSet.getString("RURAL_URBAN") == null ? "-"
						: (resultSet.getString("RURAL_URBAN").trim());
				income_certificate = resultSet.getString("INCOME_CERTIFICATE") == null ? "-"
						: (resultSet.getString("INCOME_CERTIFICATE").trim());
				no_child = resultSet.getString("NO_CHILD") == null ? "0" : (resultSet.getString("NO_CHILD").trim());
				working_days = resultSet.getString("WORKING_DAYS") == null ? "0"
						: (resultSet.getString("WORKING_DAYS").trim());
				attended_days = resultSet.getString("ATTENDED_DAYS") == null ? "0"
						: (resultSet.getString("ATTENDED_DAYS").trim());
				suid = resultSet.getString("SUID") == null ? "-" : (resultSet.getString("SUID").trim());
				cast = resultSet.getString("CAST") == null ? "-" : (resultSet.getString("CAST").trim());
				date_admitted = resultSet.getString("DATE_ADMITTED") == null ? "-"
						: (resultSet.getString("DATE_ADMITTED").trim());

				if (last_name.equalsIgnoreCase(""))
					last_name = "-";
				if (first_name.equalsIgnoreCase(""))
					first_name = "-";
				if (father_name.equalsIgnoreCase(""))
					father_name = "-";
				name = last_name + " " + first_name + " " + father_name;
				name = name.replace("-", "");
				if (name.trim().equalsIgnoreCase("")) {
					name = "-";
				}
				if (gr_no.equalsIgnoreCase(""))
					gr_no = "-";
				if (academic_year.equalsIgnoreCase(""))
					academic_year = "-";
				if (failed_previous.equalsIgnoreCase(""))
					failed_previous = "-";
				if (previous_std.equalsIgnoreCase(""))
					previous_std = "-";
				if (previous_div.equalsIgnoreCase(""))
					previous_div = "-";
				if (present_std.equalsIgnoreCase(""))
					present_std = "-";
				if (present_div.equalsIgnoreCase(""))
					present_div = "-";
				if (freeship_date.equalsIgnoreCase(""))
					freeship_date = "-";
				if (tuition_fee.equalsIgnoreCase("") || tuition_fee.equalsIgnoreCase("~"))
					tuition_fee = "0";
				if (adm_fee.equalsIgnoreCase("") || adm_fee.equalsIgnoreCase("~"))
					adm_fee = "0";
				if (term_fee.equalsIgnoreCase("") || term_fee.equalsIgnoreCase("~"))
					term_fee = "0";
				totalFee = Integer.parseInt(tuition_fee) + Integer.parseInt(adm_fee) + Integer.parseInt(term_fee);
				if (annual_income.equalsIgnoreCase("") || annual_income.equalsIgnoreCase("~"))
					annual_income = "-";
				if (rural_urban.equalsIgnoreCase(""))
					rural_urban = "-";
				if (income_certificate.equalsIgnoreCase(""))
					income_certificate = "-";
				if (no_child.equalsIgnoreCase("") || no_child.equalsIgnoreCase("~"))
					no_child = "-";
				if (working_days.equalsIgnoreCase("") || working_days.equalsIgnoreCase("~"))
					working_days = "-";
				if (attended_days.equalsIgnoreCase("") || attended_days.equalsIgnoreCase("~"))
					attended_days = "-";
				if (suid.equalsIgnoreCase(""))
					suid = "-";
				if (cast.equalsIgnoreCase(""))
					cast = "-";
				if (date_admitted.equalsIgnoreCase(""))
					date_admitted = null;

				if (formType.equalsIgnoreCase("Statement A")) {
					/*
					 * generalDataExcelList.add(srNo +"|" +gr_no+ "|" + name + "|" + place_of_pupil
					 * + "|" +failed_previous+ "|" + previous_std+ "|"+ present_std+" "+present_div+
					 * "|"+ date_admitted+ "|" + freeship_date+ "|"+tuition_fee+ "|"+ adm_fee+ "|"+
					 * term_fee+ "|"+ totalFee+ "|"+ annual_income+ "|" + rural_urban+ "|"
					 * +income_certificate+ "|" +cast+ "|"+ no_child);
					 */

//					stdDivInteger = Integer.parseInt(cm.RomanToInteger(present_std)+""+cm.AlphabetToInteger(present_div)+srNo);
					stdDivInteger = present_std + present_div + srNo;
					sortStd.put(stdDivInteger,
							srNo + "|" + gr_no + "|" + name + "|" + place_of_pupil + "|" + failed_previous + "|"
									+ previous_std + "|" + present_std + " " + present_div + "|" + date_admitted + "|"
									+ freeship_date + "|" + tuition_fee + "|" + adm_fee + "|" + term_fee + "|"
									+ totalFee + "|" + annual_income + "|" + rural_urban + "|" + income_certificate
									+ "|" + cast + "|" + no_child);
				} else if (formType.equalsIgnoreCase("Statement B")) {
					/*
					 * generalDataExcelList.add(srNo + "|" + name + "|" + gr_no +" "+cast + "|"
					 * +present_std+" "+present_div+ "|" + "Good"+ "|"+ "Good" +"|"+working_days+
					 * "|"+ attended_days+ "|" + tuition_fee+ "|"+adm_fee+ "|"+ term_fee+ "|"+
					 * tuition_fee+ "|"+ adm_fee+ "|"+ term_fee+ "|" +totalFee+ "| | ");
					 */
//					stdDivInteger = Integer.parseInt(cm.RomanToInteger(present_std)+""+cm.AlphabetToInteger(present_div)+srNo);
					stdDivInteger = present_std + present_div + srNo;
					sortStd.put(stdDivInteger,
							srNo + "|" + name + "|" + gr_no + " " + cast + "|" + present_std + " " + present_div + "|"
									+ "Good" + "|" + "Good" + "|" + working_days + "|" + attended_days + "|"
									+ tuition_fee + "|" + adm_fee + "|" + term_fee + "|" + tuition_fee + "|" + adm_fee
									+ "|" + term_fee + "|" + totalFee + "| | ");
				}
				findFlag = true;
			}

			Set set = sortStd.entrySet();
			// Get an iterator
			Iterator i = set.iterator();
			// Display elements
			String value = "";
			int j = 1;
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				value = me.getValue().toString();
				generalDataExcelList.add(j + "|" + value.substring(value.indexOf("|")));
				j++;
			}

			if (formType.equalsIgnoreCase("Statement A") && generalDataExcelList.size() > 1) {
				CreateExcelStatA ceStatA = new CreateExcelStatA();
				ceStatA.generateExcel(sessionData, "PRINTLIST", formType + " ", findQuery, generalDataExcelList, true,
						app_header_0 + " " + app_header);
			} else if (formType.equalsIgnoreCase("Statement B") && generalDataExcelList.size() > 1) {
				CreateExcelStatB ceStatB = new CreateExcelStatB();
				ceStatB.generateExcel(sessionData, "PRINTLIST", formType + " ", findQuery, generalDataExcelList, true,
						app_header_0 + " " + app_header);
			} else {
				JOptionPane.showMessageDialog(null, "No Statement Data found");
			}
			return null;

		} catch (Exception e) {
			cm.logException(e);
		}
		return generalDataList;
	}

	/////////// New admissions Print List////////////////////////////////////////
	public List<String> newAdmissionList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print, String tillDate) throws Exception {

		logger.info("=========newAdmissionList Query============");
		String findQuery = "";
		String generalTypeDB = "";
		int srNo = 0;
		String name = "";
		String rollNo = "";
		String cast = "";
		String birthPlace = "";
		String dobWords = "";
		String lastSchoolAttended = "";
		String dateOfAdmission = "";
		String adhaarCard = "";
		String grNo = "", receiptNo = "", receiptStr = "", receiptAcademicStr = "", studentReceiptNo = "";
		String dob = "";
		String gender = "";
		String category = "";
		String presentStd = "";
		String presentDiv = "";
		String queryCondition = "", feeCondition = "";
		boolean findFlag = false;
		int frequencyInt = 0, k = 0, feeListLength = 0;
		String[] feeHeadList = null, bankDetails = null, dataSplit = null;
		int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
		List generalDataList = new ArrayList();
		List feeReceiptAdded = new ArrayList();
		LinkedHashMap<String, String> grAddedToMap = new LinkedHashMap<String, String>();
		List generalDataExcelList = new ArrayList();
		String addToQuery = "", feesHead = "", feesHeadStr = "", feesHeadColumn = "", feesHeadCatStr = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> feesReceiptAdmissionMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> feesReceiptAcademicMap = new LinkedHashMap<String, String>();
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String acadStart = academicYear.substring(0, 4) + "-"
				+ sessionData.getConfigMap().get("ACADEMIC_YEAR_START_" + sessionData.getDBName());
		String acadEnd = (Integer.parseInt(academicYear.substring(0, 4)) + 1) + "-"
				+ sessionData.getConfigMap().get("ACADEMIC_YEAR_END_" + sessionData.getDBName());

		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING <= '" + tillDate + "'";
		}

		feesHeadMap = getFeesHeadData(sessionData, academicYear, std, section, "");
		Set set = feesHeadMap.entrySet();
		Iterator j = set.iterator();
		while (j.hasNext()) {
			Map.Entry me = (Map.Entry) j.next();
			feesHead = me.getKey().toString();

			frequencyInt = cm
					.frequencyToInteger(((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());
			if (frequencyInt == 12) {
				k = 1;
			} else if (frequencyInt == 4) {
				k = 3;
			} else if (frequencyInt == 2) {
				k = 6;
			} else {
				k = 12;
			}

			for (int i = 0; i < 12; i += k) {
				feesHeadColumn = feesHeadColumn + "," + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
						+ "_BANK";
				if (!feesHeadStr.contains(feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK")) {
					feesHeadStr += "|" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK";
				}
			}
			k = 0;
		}

		if (!feesHeadColumn.equalsIgnoreCase("")) {
//			feesHeadColumn = feesHeadColumn.substring(0, feesHeadColumn.length()-1);
			feesHeadStr = feesHeadColumn.substring(1);
			feeHeadList = feesHeadStr.split(",");
			feeListLength = feeHeadList.length;
		}

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' AND "
					+ "HS_GENERAL_REGISTER.DATE_ADMITTED BETWEEN '" + acadStart + "' AND '" + acadEnd + "'";

			feeCondition = "WHERE  FEES_DATA_MANDATORY.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  FEES_DATA_MANDATORY.STD_1 = '" + std + "' AND  FEES_DATA_MANDATORY.DIV_1 = '" + div
					+ "' AND FEES_DATA_MANDATORY.SECTION_NM='" + section + "'";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND CLASS_ALLOTMENT.SECTION_NM='" + section
					+ "' AND " + "HS_GENERAL_REGISTER.DATE_ADMITTED BETWEEN '" + acadStart + "' AND '" + acadEnd + "'";

			feeCondition = "WHERE  FEES_DATA_MANDATORY.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  FEES_DATA_MANDATORY.STD_1 = '" + std + "' AND FEES_DATA_MANDATORY.SECTION_NM='" + section
					+ "'";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE HS_GENERAL_REGISTER.SECTION_NM='" + section + "' AND "
					+ "HS_GENERAL_REGISTER.DATE_ADMITTED BETWEEN '" + acadStart + "' AND '" + acadEnd + "'";

			feeCondition = "WHERE  FEES_DATA_MANDATORY.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  FEES_DATA_MANDATORY.SECTION_NM='" + section + "'";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' AND HS_GENERAL_REGISTER.SECTION_NM='"
					+ section + "' AND " + "HS_GENERAL_REGISTER.DATE_ADMITTED BETWEEN '" + acadStart + "' AND '"
					+ acadEnd + "'";

			feeCondition = "WHERE  FEES_DATA_MANDATORY.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  FEES_DATA_MANDATORY.DIV_1 = '" + div + "' AND FEES_DATA_MANDATORY.SECTION_NM='" + section
					+ "'";
		}

		try {
			findQuery = "SELECT GR_NO" + feesHeadColumn + " from " + sessionData.getDBName() + "."
					+ "FEES_DATA_MANDATORY " + feeCondition;
			logger.info("findQuery query :: " + findQuery);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				receiptStr = "";
				receiptAcademicStr = "";
				feesHeadCatStr = "";

				grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				for (int i = 0; i < feeListLength; i++) {
					feesHeadCatStr = feesHeadMap.get(feeHeadList[i].substring(0, feeHeadList[i].indexOf("_BANK") - 4))
							.get("category");
					if (!feesHeadCatStr.equalsIgnoreCase("Admission") && !feesHeadCatStr.equalsIgnoreCase("Academic")) {
						continue;
					}
					receiptNo = resultSet.getString(feeHeadList[i]) == null ? ""
							: (resultSet.getString(feeHeadList[i]).trim());
					if (receiptNo.equalsIgnoreCase("")) {
						continue;
					}
					dataSplit = receiptNo.toString().split("\\!");
					for (int m = 0; m < dataSplit.length; m++) {
						if (dataSplit[m].endsWith("^C")) {
							continue;
						}
						bankDetails = dataSplit[m].split("\\^");
						if (!feeReceiptAdded.contains(bankDetails[6])) {
							if (feesHeadCatStr.equalsIgnoreCase("Admission")) {
								receiptStr += "," + bankDetails[6];
							} else if (feesHeadCatStr.equalsIgnoreCase("Academic")) {
								receiptAcademicStr += "," + bankDetails[6];
							}
							feeReceiptAdded.add(bankDetails[6]);
						}
					}
				}
				if (!receiptStr.equalsIgnoreCase("")) {
					feesReceiptAdmissionMap.put(grNo, receiptStr.substring(1));
				}
				if (!receiptAcademicStr.equalsIgnoreCase("")) {
					feesReceiptAcademicMap.put(grNo, receiptAcademicStr.substring(1));
				}
			}

			findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO,HS_GENERAL_REGISTER.CAST,HS_GENERAL_REGISTER.BIRTH_PLACE,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,HS_GENERAL_REGISTER.CATEGORY,"
					+ "HS_GENERAL_REGISTER.DOB_WORDS,HS_GENERAL_REGISTER.LAST_SCHOOL,DATE_FORMAT(HS_GENERAL_REGISTER.DATE_ADMITTED,'%d/%m/%Y') AS DATE_ADMITTED,HS_GENERAL_REGISTER.ADHAAR_CARD,"
					+ "concat(HS_GENERAL_REGISTER.LAST_NAME,' ',HS_GENERAL_REGISTER.FIRST_NAME,' ',HS_GENERAL_REGISTER.FATHER_NAME) AS NAME,"
					+ "HS_GENERAL_REGISTER.GENDER,DATE_FORMAT(HS_GENERAL_REGISTER.DOB,'%d/%m/%Y') AS DOB, CLASS_ALLOTMENT.CREATED_DATE "
					+ "FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN " + sessionData.getDBName()
					+ "." + "HS_GENERAL_REGISTER ON " + "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM " + queryCondition
					+ " ORDER BY HS_GENERAL_REGISTER.DATE_ADMITTED,HS_GENERAL_REGISTER.GR_NO,CLASS_ALLOTMENT.CREATED_DATE ASC";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			generalDataList.add("Std Div|GR No.|Name|Gender|Admission Date");
			generalDataExcelList
					.add("Roll No.|GR No.|Name|Gender|Birth Date|Birth Place|DOB in WORDS|Cast|Category|Last School|"
							+ "Date Admitted|Adhaar Card|Present Std|Present Div|Admission Fee Receipts|Academic Fee Receipts");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? "-" : (resultSet.getString("NAME").trim());
				if (grAddedToMap.get(grNo) != null) {
					continue;
				}
				grAddedToMap.put(grNo, name);
				gender = resultSet.getString("GENDER") == null ? "-" : (resultSet.getString("GENDER").trim());
				dob = resultSet.getString("DOB") == null ? "-" : (resultSet.getString("DOB").trim());

				cast = resultSet.getString("CAST") == null ? "-" : (resultSet.getString("CAST").trim());
				category = resultSet.getString("CATEGORY") == null ? "-" : (resultSet.getString("CATEGORY").trim());
				presentStd = resultSet.getString("PRESENT_STD") == null ? "-"
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? "-"
						: (resultSet.getString("PRESENT_DIV").trim());
				birthPlace = resultSet.getString("BIRTH_PLACE") == null ? "-"
						: (resultSet.getString("BIRTH_PLACE").trim());
				dobWords = resultSet.getString("DOB_WORDS") == null ? "-" : (resultSet.getString("DOB_WORDS").trim());
				lastSchoolAttended = resultSet.getString("LAST_SCHOOL") == null ? "-"
						: (resultSet.getString("LAST_SCHOOL").trim());
				dateOfAdmission = resultSet.getString("DATE_ADMITTED") == null ? "-"
						: (resultSet.getString("DATE_ADMITTED").trim());
				adhaarCard = resultSet.getString("ADHAAR_CARD") == null ? "-"
						: (resultSet.getString("ADHAAR_CARD").trim());

				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNo.equalsIgnoreCase(""))
					grNo = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";
				if (gender.equalsIgnoreCase(""))
					gender = "-";
				if (dob.equalsIgnoreCase(""))
					dob = "-";
				if (cast.equalsIgnoreCase(""))
					cast = "-";
				if (birthPlace.equalsIgnoreCase(""))
					birthPlace = "-";
				if (dobWords.equalsIgnoreCase(""))
					dobWords = "-";
				if (lastSchoolAttended.equalsIgnoreCase(""))
					lastSchoolAttended = "-";
				if (dateOfAdmission.equalsIgnoreCase(""))
					dateOfAdmission = "-";
				if (adhaarCard.equalsIgnoreCase(""))
					adhaarCard = "-";
				if (category.equalsIgnoreCase(""))
					category = "-";
				if (presentStd.equalsIgnoreCase(""))
					presentStd = "-";
				if (presentDiv.equalsIgnoreCase(""))
					presentDiv = "-";

				if (feesReceiptAdmissionMap.get(grNo) != null) {
					studentReceiptNo = feesReceiptAdmissionMap.get(grNo);
				}
				generalDataList.add(
						presentStd + " " + presentDiv + "|" + grNo + "|" + name + "|" + gender + "|" + dateOfAdmission);
				generalDataExcelList.add(
						rollNo + "|" + grNo + "|" + name + "|" + gender + "|" + dob + "|" + birthPlace + "|" + dobWords
								+ "|" + cast + "|" + category + "|" + cm.revertCommaApostrophy(lastSchoolAttended) + "|"
								+ dateOfAdmission + "|" + adhaarCard + "|" + presentStd + "|" + presentDiv + "|"
								+ feesReceiptAdmissionMap.get(grNo) + "|" + feesReceiptAcademicMap.get(grNo));
				findFlag = true;
				studentReceiptNo = "";
			}

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "PRINTLIST", "New Admissions", findQuery, generalDataExcelList, true,
						secName + " New Admissions  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return generalDataList;
	}

	// /////////Fee Status Print List////////////////////////////////////////
	public List<String> feeStatusPrintList(SessionData sessionData, String std, String div, String academicYear,
			String section, String catType, String print) throws Exception {

		logger.info("=========feeStatusPrintList Query============");
		String findQuery = "";
		String generalTypeDB = "";
		int srNo = 0;
		String name = "";
		String rollNo = "";
		String cast = "";
		String birthPlace = "";
		String dobWords = "";
		String lastSchoolAttended = "";
		String dateOfAdmission = "";
		String adhaarCard = "";
		String grNo = "";
		String dob = "";
		String gender = "";
		String category = "";
		String presentStd = "";
		String presentDiv = "";
		String queryCondition = "";
		boolean findFlag = false;
		List generalDataList = new ArrayList();
		List generalDataExcelList = new ArrayList();
		String addToQuery = "";

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);
		logger.info("catType : " + catType);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "'";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "'";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear + "'";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "'";
		}

		try {
			findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,HS_GENERAL_REGISTER.GR_NO,HS_GENERAL_REGISTER.CAST,HS_GENERAL_REGISTER.BIRTH_PLACE,CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV,HS_GENERAL_REGISTER.CATEGORY,"
					+ "HS_GENERAL_REGISTER.DOB_WORDS,HS_GENERAL_REGISTER.LAST_SCHOOL,DATE_FORMAT(HS_GENERAL_REGISTER.DATE_ADMITTED,'%d/%m/%Y') AS DATE_ADMITTED,HS_GENERAL_REGISTER.ADHAAR_CARD,"
					+ "concat(HS_GENERAL_REGISTER.LAST_NAME,' ',HS_GENERAL_REGISTER.FIRST_NAME,' ',HS_GENERAL_REGISTER.FATHER_NAME) AS NAME,"
					+ "HS_GENERAL_REGISTER.GENDER,DATE_FORMAT(HS_GENERAL_REGISTER.DOB,'%d/%m/%Y') AS DOB " + "FROM "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
					+ queryCondition + " ORDER BY CLASS_ALLOTMENT.ROLL_NO * 1 ";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			generalDataList.add("Roll No.|GR No.|Name|Gender|Birth Date");
			generalDataExcelList.add(
					"Roll No.|GR No.|Name|Gender|Birth Date|Birth Place|DOB in WORDS|Cast|Category|Last School|Date Admitted|Adhaar Card|Present Std|Present Div");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? "-" : (resultSet.getString("NAME").trim());
				gender = resultSet.getString("GENDER") == null ? "-" : (resultSet.getString("GENDER").trim());
				dob = resultSet.getString("DOB") == null ? "-" : (resultSet.getString("DOB").trim());

				cast = resultSet.getString("CAST") == null ? "-" : (resultSet.getString("CAST").trim());
				category = resultSet.getString("CATEGORY") == null ? "-" : (resultSet.getString("CATEGORY").trim());
				presentStd = resultSet.getString("PRESENT_STD") == null ? "-"
						: (resultSet.getString("PRESENT_STD").trim());
				presentDiv = resultSet.getString("PRESENT_DIV") == null ? "-"
						: (resultSet.getString("PRESENT_DIV").trim());
				birthPlace = resultSet.getString("BIRTH_PLACE") == null ? "-"
						: (resultSet.getString("BIRTH_PLACE").trim());
				dobWords = resultSet.getString("DOB_WORDS") == null ? "-" : (resultSet.getString("DOB_WORDS").trim());
				lastSchoolAttended = resultSet.getString("LAST_SCHOOL") == null ? "-"
						: (resultSet.getString("LAST_SCHOOL").trim());
				dateOfAdmission = resultSet.getString("DATE_ADMITTED") == null ? "-"
						: (resultSet.getString("DATE_ADMITTED").trim());
				adhaarCard = resultSet.getString("ADHAAR_CARD") == null ? "-"
						: (resultSet.getString("ADHAAR_CARD").trim());

				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNo.equalsIgnoreCase(""))
					grNo = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";
				if (gender.equalsIgnoreCase(""))
					gender = "-";
				if (dob.equalsIgnoreCase(""))
					dob = "-";
				if (cast.equalsIgnoreCase(""))
					cast = "-";
				if (birthPlace.equalsIgnoreCase(""))
					birthPlace = "-";
				if (dobWords.equalsIgnoreCase(""))
					dobWords = "-";
				if (lastSchoolAttended.equalsIgnoreCase(""))
					lastSchoolAttended = "-";
				if (dateOfAdmission.equalsIgnoreCase(""))
					dateOfAdmission = "-";
				if (adhaarCard.equalsIgnoreCase(""))
					adhaarCard = "-";
				if (category.equalsIgnoreCase(""))
					category = "-";
				if (presentStd.equalsIgnoreCase(""))
					presentStd = "-";
				if (presentDiv.equalsIgnoreCase(""))
					presentDiv = "-";

				generalDataList.add(rollNo + "|" + grNo + "|" + name + "|" + gender + "|" + dob);
				generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + gender + "|" + dob + "|" + birthPlace
						+ "|" + dobWords + "|" + cast + "|" + category + "|" + lastSchoolAttended + "|"
						+ dateOfAdmission + "|" + adhaarCard + "|" + presentStd + "|" + presentDiv);
				findFlag = true;
			}

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "PRINTLIST", "GENERAL", findQuery, generalDataExcelList, true,
						"GENERAL   STD:" + std + "   DIV:" + div, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return generalDataList;
	}

	// /////////findYearList////////////////////////////////////////
	public String findYearList(SessionData sessionData, String tableName) throws Exception {

		logger.info("=========findYearList Query============");
		String findQuery = "";
		String yearDb = "";
		boolean findFlag = false;
		String yearDataList = "";

		try {
			findQuery = "SELECT DISTINCT ACADEMIC_YEAR FROM " + sessionData.getDBName() + "." + ""
					+ tableName.toUpperCase() + " ORDER BY ACADEMIC_YEAR DESC";

			logger.info("findYearList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				yearDb = resultSet.getString("ACADEMIC_YEAR") == null ? " "
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				if (yearDataList.equalsIgnoreCase("")) {
					yearDataList = yearDb;
				} else {
					yearDataList = yearDataList + "," + yearDb;
				}
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return yearDataList;
	}

	// /////////Find RESULT DATA List//////////////////////////////////////////
	public List<String> findResultList(SessionData sessionData, String academic, String std, String div, String exam,
			String subject, String type, String section, String last, String first, String father) throws Exception {

		logger.info("=========findResultList Query============");
		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String subjectTitleQuery = "";
		String subTitleDB = "";
		String academicDB = "";
		String gradeDataDB = "";
		String gradeDataSem1 = "";
		String gradeDataSem2 = "";
		String addToMap = "";
		String addToMapForFinal = "";
		String resultDataDB = "";
		String grNoDB = "", lcDate = "";
		String rollNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "";
		String fatherNameDB = "";
		String stdDB = "";
		String divDB = "";
		String semester = "";
		String semPercentDB = "";
		String semProgressDB = "";
		String semImproveDB = "";
		String semResultDB = "";
		String subjectTitle = "";
		String queryCondition = "";
		String semMarksDB = "";
		String semTotalDB = "";

		List<String> subjectTitleList = new ArrayList<String>();
		ArrayList<String> resultDataList = new ArrayList();
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		boolean result_final_sem2_std_flag = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_FINAL_SEM2_"+std.replaceAll(" ", "_")));
		boolean retFlag = false;

		try {

			if (exam.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
			} else {
				semester = "FINAL";
			}

			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);

			// ////////to get subject title list
			subjectTitleList = findSubjectTitleList(sessionData, std, "", academic);
			subjectTitleList.remove(0);
			subjectTitleList.remove(0);
			logger.info("subjectTitleList size : " + subjectTitleList.size());
			// end of getting subject list/////////////////////////////////////
			if (!last.equalsIgnoreCase("") && !first.equalsIgnoreCase("") && !father.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.LAST_NAME='" + last.toUpperCase() + "' AND "
						+ "CLASS_ALLOTMENT.FIRST_NAME='" + first.toUpperCase() + "' AND CLASS_ALLOTMENT.FATHER_NAME='"
						+ father.toUpperCase() + "'";
			} else if (!last.equalsIgnoreCase("") && !first.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.LAST_NAME='" + last.toUpperCase()
						+ "' AND CLASS_ALLOTMENT.FIRST_NAME='" + first.toUpperCase() + "'";
			} else if (!last.equalsIgnoreCase("") && !father.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.LAST_NAME='" + last.toUpperCase()
						+ "' AND CLASS_ALLOTMENT.FATHER_NAME='" + father.toUpperCase() + "'";
			} else if (!first.equalsIgnoreCase("") && !father.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.FIRST_NAME='" + first.toUpperCase()
						+ "' AND CLASS_ALLOTMENT.FATHER_NAME='" + father.toUpperCase() + "'";
			} else if (!last.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.LAST_NAME='" + last.toUpperCase() + "'";
			} else if (!first.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.FIRST_NAME='" + first.toUpperCase() + "'";
			} else if (!father.equalsIgnoreCase("")) {
				queryCondition = "AND CLASS_ALLOTMENT.FATHER_NAME='" + father.toUpperCase() + "'";
			}

			findQuery = "SELECT * FROM " + sessionData.getDBName() + ".RESULT_DATA LEFT JOIN "
					+ sessionData.getDBName() + ".CLASS_ALLOTMENT "
					+ "ON RESULT_DATA.GR_NO = CLASS_ALLOTMENT.GR_NO AND RESULT_DATA.ACADEMIC_YEAR = CLASS_ALLOTMENT.ACADEMIC_YEAR "
					+ "AND RESULT_DATA.SECTION_NM = CLASS_ALLOTMENT.SECTION_NM AND RESULT_DATA.DIV_1 = CLASS_ALLOTMENT.PRESENT_DIV "
					+ "WHERE RESULT_DATA.ACADEMIC_YEAR='" + academic + "' " + "AND CLASS_ALLOTMENT.PRESENT_STD='" + std
					+ "' AND CLASS_ALLOTMENT.PRESENT_DIV='" + div + "' AND " + "RESULT_DATA.SECTION_NM='" + section
					+ "' " + queryCondition + " ORDER BY CLASS_ALLOTMENT.ROLL_NO * 1";

			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				lcDate = studentLCMap.get(grNoDB);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicDB) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicDB),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicDB)) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicDB)) {
					continue;
				}
				addToMap = grNoDB;
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				addToMap = addToMap + "," + rollNoDB;
				lastNameDB = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				addToMap = addToMap + "," + lastNameDB;
				firstNameDB = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				addToMap = addToMap + "," + firstNameDB;
				fatherNameDB = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				addToMap = addToMap + "," + fatherNameDB;
				semPercentDB = resultSet.getString(semester + "_PERCENT") == null ? "NA"
						: (resultSet.getString(semester + "_PERCENT").trim());
				if (semPercentDB.equalsIgnoreCase("")) {
					semPercentDB = "NA";
				}
				addToMap = addToMap + "," + semPercentDB;
				semProgressDB = resultSet.getString(semester + "_PROGRESS") == null ? "NA"
						: (resultSet.getString(semester + "_PROGRESS").trim());
				addToMap = addToMap + "," + semProgressDB;
				semImproveDB = resultSet.getString(semester + "_IMPROVE") == null ? "NA"
						: (resultSet.getString(semester + "_IMPROVE").trim());
				addToMap = addToMap + "," + semImproveDB;
				semResultDB = resultSet.getString(semester + "_RESULT") == null ? "NA"
						: (resultSet.getString(semester + "_RESULT").trim());
				if (semResultDB.equalsIgnoreCase("")) {
					semResultDB = "NA";
				}
				addToMap = addToMap + "," + semResultDB;
				semMarksDB = resultSet.getString(semester + "_MARKS") == null ? "NA"
						: (resultSet.getString(semester + "_MARKS").trim());
				if (semMarksDB.equalsIgnoreCase("")) {
					semMarksDB = "NA";
				}
				addToMap = addToMap + "," + semMarksDB;
				semTotalDB = resultSet.getString(semester + "_TOTAL") == null ? "NA"
						: (resultSet.getString(semester + "_TOTAL").trim());
				if (semTotalDB.equalsIgnoreCase("")) {
					semTotalDB = "NA";
				}
				addToMap = addToMap + "," + semTotalDB;

				if (semester.equalsIgnoreCase("FINAL") && !std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X")
						&& !std.equalsIgnoreCase("XI") && !std.equalsIgnoreCase("XII") && !result_final_sem2_std_flag) {
					addToMapForFinal = grNoDB;
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataSem1 = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						gradeDataSem2 = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						addToMapForFinal = addToMapForFinal + "|" + subjectTitle + "," + gradeDataSem1 + ","
								+ gradeDataSem2;
					}
					// studentResultMap.put(grNoDB, addToMap);
					resultDataList.add(addToMapForFinal);
					gradeDataDB = "";
				} else {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataDB = resultSet.getString(subjectTitle + "_" + semester) == null ? "NA"
								: (resultSet.getString(subjectTitle + "_" + semester).trim());
						if (gradeDataDB.equalsIgnoreCase("")) {
							gradeDataDB = "NA";
						} else if (gradeDataDB.contains("RTE")) {
							gradeDataDB = "RTE";
						}
						addToMap = addToMap + "," + gradeDataDB;
					}
					// studentResultMap.put(grNoDB, addToMap);
					resultDataList.add(addToMap);
					gradeDataDB = "";
				}
			}
			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			logger.error("Exception= " + e);
		}
		return resultDataList;
	}

	// /////////Find RESULT DATA Map//////////////////////////////////////////
	/*
	 * public LinkedHashMap<String,LinkedHashMap<String, String>>
	 * findResultMap(SessionData sessionData, String academic, String std, String
	 * div, String exam, String subject, String section) throws Exception {
	 * 
	 * logger.info("=========findResultMap Query============");
	 * LinkedHashMap<String,LinkedHashMap<String, String>> resultMap = new
	 * LinkedHashMap<String,LinkedHashMap<String, String>>(); String findQuery = "";
	 * String insertQuery = ""; String findMarksQuery = ""; String subjectTitleQuery
	 * = ""; String subTitleDB = ""; String academicDB = ""; String gradeDataDB =
	 * ""; String gradeDataSem1 = ""; String gradeDataSem2 = ""; String addToMap =
	 * ""; String addToMapForFinal = ""; String resultDataDB = ""; String grNoDB =
	 * ""; String rollNoDB = ""; String lastNameDB = ""; String firstNameDB = "";
	 * String fatherNameDB = ""; String stdDB = ""; String divDB = ""; String
	 * semester = ""; String semPercentDB = ""; String semProgressDB = ""; String
	 * semImproveDB = ""; String semResultDB = ""; String subjectTitle = ""; String
	 * queryCondition = ""; String semMarksDB = ""; String semTotalDB = "";
	 * 
	 * List<String> subjectTitleList = new ArrayList<String>(); ArrayList<String>
	 * resultDataList = new ArrayList(); TreeMap<String, String> studentLCMap = new
	 * TreeMap<String, String>(); boolean retFlag = false;
	 * 
	 * try {
	 * 
	 * if (exam.equalsIgnoreCase("Semester 1")) { semester = "SEM1"; } else if
	 * (exam.equalsIgnoreCase("Semester 2")) { semester = "SEM2"; } else { semester
	 * = "FINAL"; }
	 * 
	 * studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "",
	 * academic, "", "", section);
	 * 
	 * // ////////to get subject title list subjectTitleList =
	 * findSubTitleList(sessionData, std, "", academic);
	 * subjectTitleList.remove(0); subjectTitleList.remove(0);
	 * logger.info("subjectTitleList size : " + subjectTitleList.size()); // end of
	 * getting subject list///////////////////////////////////// findQuery =
	 * "SELECT * FROM "+sessionData.getDBName()+"."+"RESULT_DATA " +
	 * "WHERE ACADEMIC_YEAR='" + academic + "' " + "AND STD_1='" + std +
	 * "' AND DIV_1='" + div + "' AND SECTION_NM='" + section +
	 * "' "+queryCondition+" ORDER BY ROLL_NO * 1";
	 * logger.info("fetch new student list query == " + findQuery);
	 * 
	 * statement = connection.createStatement(); resultSet =
	 * statement.executeQuery(findQuery);
	 * 
	 * while (resultSet.next()) { LinkedHashMap<String, String> grResult = new
	 * LinkedHashMap<String, String>(); grNoDB = resultSet.getString("GR_NO") ==
	 * null ? "NA" : (resultSet.getString("GR_NO").trim()); grResult.put("grNo",
	 * grNoDB); rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" :
	 * (resultSet.getString("ROLL_NO").trim()); if(rollNoDB.equalsIgnoreCase("")){
	 * rollNoDB = "1"; } grResult.put("rollNo", rollNoDB); semPercentDB =
	 * resultSet.getString(semester + "_PERCENT") == null ? "NA" :
	 * (resultSet.getString(semester + "_PERCENT").trim());
	 * if(semPercentDB.equalsIgnoreCase("")){ semPercentDB = "NA"; }
	 * grResult.put("semPercent", semPercentDB); semProgressDB =
	 * resultSet.getString(semester + "_PROGRESS") == null ? "NA" :
	 * (resultSet.getString(semester + "_PROGRESS").trim());
	 * grResult.put("semProgress", semProgressDB); semImproveDB =
	 * resultSet.getString(semester + "_IMPROVE") == null ? "NA" :
	 * (resultSet.getString(semester + "_IMPROVE").trim());
	 * grResult.put("semImprove", semImproveDB); semResultDB =
	 * resultSet.getString(semester + "_RESULT") == null ? "NA" :
	 * (resultSet.getString(semester + "_RESULT").trim());
	 * if(semResultDB.equalsIgnoreCase("")){ semResultDB = "NA"; }
	 * grResult.put("semResult", semResultDB); semMarksDB =
	 * resultSet.getString(semester + "_MARKS") == null ? "NA" :
	 * (resultSet.getString(semester + "_MARKS").trim());
	 * if(semMarksDB.equalsIgnoreCase("")){ semMarksDB = "NA"; }
	 * grResult.put("semMarks", semMarksDB); semTotalDB =
	 * resultSet.getString(semester + "_TOTAL") == null ? "NA" :
	 * (resultSet.getString(semester + "_TOTAL").trim());
	 * if(semTotalDB.equalsIgnoreCase("")){ semTotalDB = "NA"; }
	 * grResult.put("semTotal", semTotalDB);
	 * 
	 * if(semester.equalsIgnoreCase("FINAL") && !std.equalsIgnoreCase("IX") &&
	 * !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI") &&
	 * !std.equalsIgnoreCase("XII")){ addToMapForFinal = grNoDB; for (int i = 0; i <
	 * subjectTitleList.size(); i++) { subjectTitle =
	 * subjectTitleList.get(i).replace(" ", "_"); gradeDataSem1 =
	 * resultSet.getString(subjectTitle + "_SEM1") == null ? "NA" :
	 * (resultSet.getString(subjectTitle + "_SEM1").trim()); gradeDataSem2 =
	 * resultSet.getString(subjectTitle + "_SEM2") == null ? "NA" :
	 * (resultSet.getString(subjectTitle + "_SEM2").trim()); addToMapForFinal =
	 * addToMapForFinal + "|" +subjectTitle + "," + gradeDataSem1 + "," +
	 * gradeDataSem2; } // studentResultMap.put(grNoDB, addToMap);
	 * resultDataList.add(addToMapForFinal); gradeDataDB = ""; } else{ for (int i =
	 * 0; i < subjectTitleList.size(); i++) { subjectTitle =
	 * subjectTitleList.get(i).replace(" ", "_"); gradeDataDB =
	 * resultSet.getString(subjectTitle + "_" + semester) == null ? "NA" :
	 * (resultSet.getString(subjectTitle + "_" + semester).trim());
	 * if(gradeDataDB.equalsIgnoreCase("")){ gradeDataDB = "NA"; } addToMap =
	 * addToMap + "," + gradeDataDB; } // studentResultMap.put(grNoDB, addToMap);
	 * resultDataList.add(addToMap); gradeDataDB = ""; } } // /////////end of fetch
	 * result list/////////////////////////////////////////////////////////////////
	 * } catch (Exception e) { logger.error("Exception= " + e); } return resultMap;
	 * }
	 */

	// /////////Print RESULT DATA List for Std >= 9 or Std <=0
	// //////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> printResultWithMarksList(SessionData sessionData,
			String academic, String std, String div, String exam, String section, String last, String first,
			String father, LinkedHashMap<String, String> leftDataMap, boolean marks_flag_std) throws Exception {

		logger.info("=========printResultWithMarksList Query============");
		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String subjectTitleQuery = "";
		String subTitleDB = "";
		String academicDB = "";
		String gradeDataDB = "";
		String gradeDataSem1 = "";
		String gradeDataSem2 = "";
		String addToMap = "";
		String addToMapForFinal = "";
		String resultDataDB = "";
		String grNoDB = "";
		String birthDB = "";
		String hobbiesDB = "";
		String attSem1DB = "";
		String attSem2DB = "";
		String attFinalDB = "";
		String attendanceDB = "";
		int present = 0;
		int total = 0;
		String rollNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "";
		String fatherNameDB = "";
		String stdDB = "";
		String divDB = "";
		String semester = "";
		String semPercentDB = "";
		String sem1PercentDB = "";
		String sem2PercentDB = "";
		String semProgressDB = "";
		String semImproveDB = "";
		String semResultDB = "";
		String semTotal = "", sem1Total = "", sem2Total = "";
		String semMarksObtained = "";
		String remark_0DB = "";
		String remark_1DB = "";
		String conductDB = "";
		String subjectTitle = "";
		String queryCondition = "";

		List<String> subjectTitleList = new ArrayList<String>();
		LinkedHashMap emptyMap = new LinkedHashMap();
		LinkedHashMap grMap = new LinkedHashMap();
		TreeMap grNoMap = new TreeMap();
		TreeMap marksObtainedMap = new TreeMap();
		LinkedHashMap<String, LinkedHashMap<String, String>> attendanceMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		boolean retFlag = false;

		try {

			if (exam.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
			} else {
				semester = "FINAL";
			}
			// ////////to get subject title list
			subjectTitleList = findSubjectTitleList(sessionData, std, "", academic);
			subjectTitleList.remove(0);
			subjectTitleList.remove(0);
			logger.info("subjectTitleList size : " + subjectTitleList.size());
			// end of getting subject list/////////////////////////////////////

			String subjectStr = "";
//			if (semester.equalsIgnoreCase("FINAL") && !std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X")
//					&& !std.equalsIgnoreCase("XI") && !std.equalsIgnoreCase("XII") && !std.equalsIgnoreCase("JR KG")
//					&& !std.equalsIgnoreCase("SR KG")) {
			if (semester.equalsIgnoreCase("FINAL") && !marks_flag_std) {
				for (int i = 0; i < subjectTitleList.size(); i++) {
					subjectTitle = subjectTitleList.get(i).replace(" ", "_");
					subjectStr = subjectStr + "," + subjectTitle + "_SEM1," + subjectTitle + "_SEM2";
				}
			} else if (semester.equalsIgnoreCase("SEM2")) {
				for (int i = 0; i < subjectTitleList.size(); i++) {
					subjectTitle = subjectTitleList.get(i).replace(" ", "_");
					subjectStr = subjectStr + "," + subjectTitle + "_SEM1," + subjectTitle + "_SEM2";
				}
			} else {
				for (int i = 0; i < subjectTitleList.size(); i++) {
					subjectTitle = subjectTitleList.get(i).replace(" ", "_");
					subjectStr = subjectStr + "," + subjectTitle + "_" + semester + "," + subjectTitle + "_SEM1,"
							+ subjectTitle + "_SEM2";
				}
			}

			attendanceMap = getAttendanceMap(sessionData, std, div, academic, semester);

			findQuery = "SELECT STD_1,DIV_1,SEM1_MARKS,SEM1_TOTAL,SEM2_MARKS,SEM2_TOTAL,FINAL_MARKS,FINAL_TOTAL,"
					+ "REMARK_0,REMARK_1,CONDUCT,ATT_SEM1,ATT_SEM2,ATT_FINAL,EXTRA_1,"
					+ "DATE_FORMAT(DOB, '%d/%m/%Y') AS BIRTH_DATE,RESULT_DATA.GR_NO,RESULT_DATA.ROLL_NO,RESULT_DATA.LAST_NAME,"
					+ "RESULT_DATA.FIRST_NAME,RESULT_DATA.FATHER_NAME," + "RESULT_DATA." + semester+ "_PERCENT,"
					+ "RESULT_DATA.SEM1_PERCENT,RESULT_DATA.SEM2_PERCENT,"
					+ "RESULT_DATA." + semester + "_PROGRESS,RESULT_DATA." + semester + "_IMPROVE,"
					+ "RESULT_DATA." + semester + "_RESULT" + subjectStr + " " + "FROM " + sessionData.getDBName()
					+ "." + "RESULT_DATA LEFT JOIN " + sessionData.getDBName() + "." + "hs_general_register "
					+ "ON RESULT_DATA.GR_NO = hs_general_register.GR_NO and RESULT_DATA.SECTION_NM = hs_general_register.SECTION_NM "
					+ "WHERE RESULT_DATA.ACADEMIC_YEAR='" + academic + "' AND RESULT_DATA.STD_1='" + std
					+ "' AND RESULT_DATA.DIV_1='" + div + "' " + "AND RESULT_DATA.SECTION_NM='" + section + "' "
					+ "ORDER BY RESULT_DATA.ROLL_NO * 1";
			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap studentResultMap = new LinkedHashMap();
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				stdDB = resultSet.getString("STD_1") == null ? "NA" : (resultSet.getString("STD_1").trim());
				divDB = resultSet.getString("DIV_1") == null ? "NA" : (resultSet.getString("DIV_1").trim());
				studentResultMap.put("std", stdDB);
				studentResultMap.put("div", divDB);
				hobbiesDB = resultSet.getString("EXTRA_1") == null ? "NA" : (resultSet.getString("EXTRA_1").trim());
				studentResultMap.put("hobbies", hobbiesDB);
				birthDB = resultSet.getString("BIRTH_DATE") == null ? "NA" : (resultSet.getString("BIRTH_DATE").trim());
				studentResultMap.put("birthDate", birthDB);
				studentResultMap.put("grNo", grNoDB);
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				studentResultMap.put("rollNo", rollNoDB);
				lastNameDB = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				studentResultMap.put("lastName", lastNameDB);
				firstNameDB = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				studentResultMap.put("firstName", firstNameDB);
				fatherNameDB = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				studentResultMap.put("fatherName", fatherNameDB);
				studentResultMap.put("name", lastNameDB + " " + firstNameDB + " " + fatherNameDB);
				semPercentDB = resultSet.getString(semester + "_PERCENT") == null ? "NA"
						: (resultSet.getString(semester + "_PERCENT").trim());
				studentResultMap.put("semPercent", semPercentDB);
				sem1PercentDB = resultSet.getString("SEM1_PERCENT") == null ? "NA"
						: (resultSet.getString("SEM1_PERCENT").trim());
				studentResultMap.put("sem1Percent", sem1PercentDB);
				sem2PercentDB = resultSet.getString("SEM2_PERCENT") == null ? "NA"
						: (resultSet.getString("SEM2_PERCENT").trim());
				studentResultMap.put("sem2Percent", sem2PercentDB);
				semProgressDB = resultSet.getString(semester + "_PROGRESS") == null ? "NA"
						: (resultSet.getString(semester + "_PROGRESS").trim());
				studentResultMap.put("semProgress", semProgressDB);
				semImproveDB = resultSet.getString(semester + "_IMPROVE") == null ? "NA"
						: (resultSet.getString(semester + "_IMPROVE").trim());
				studentResultMap.put("semImprove", semImproveDB);
				semResultDB = resultSet.getString(semester + "_RESULT") == null ? "NA"
						: (resultSet.getString(semester + "_RESULT").trim());
				studentResultMap.put("semResult", semResultDB);
				/*
				 * attSem1DB = resultSet.getString("ATT_SEM1") == null ? "NA" :
				 * (resultSet.getString("ATT_SEM1").trim()); studentResultMap.put("ATT_SEM1",
				 * attSem1DB); attSem2DB = resultSet.getString("ATT_SEM2") == null ? "NA" :
				 * (resultSet.getString("ATT_SEM2").trim()); studentResultMap.put("ATT_SEM2",
				 * attSem2DB); attFinalDB = resultSet.getString("ATT_FINAL") == null ? "NA" :
				 * (resultSet.getString("ATT_FINAL").trim()); studentResultMap.put("ATT_FINAL",
				 * attFinalDB);
				 */
				/*
				 * if (semester.equalsIgnoreCase("SEM1")) { attendanceDB =
				 * resultSet.getString("ATT_SEM1") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM1").trim()); } else
				 * if(semester.equalsIgnoreCase("SEM2") && !std.equalsIgnoreCase("IX") &&
				 * !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI") &&
				 * !std.equalsIgnoreCase("XII")){ attendanceDB = resultSet.getString("ATT_SEM1")
				 * == null ? "0/0" : (resultSet.getString("ATT_SEM1").trim());
				 * if(attendanceDB.equalsIgnoreCase("")){ attendanceDB = "0/0"; } present =
				 * present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM2").trim());
				 * if(attendanceDB.equalsIgnoreCase("")){ attendanceDB = "0/0"; } present =
				 * present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = present+"/"+total; present = 0; total = 0; } else if
				 * (semester.equalsIgnoreCase("SEM2")){ attendanceDB =
				 * resultSet.getString("ATT_SEM2") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM2").trim()); } else
				 * if(semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("IX") ||
				 * std.equalsIgnoreCase("X") || std.equalsIgnoreCase("XI") ||
				 * std.equalsIgnoreCase("XII"))){ attendanceDB = resultSet.getString("ATT_SEM1")
				 * == null ? "0/0" : (resultSet.getString("ATT_SEM1").trim());
				 * if(attendanceDB.trim().equalsIgnoreCase("")){ attendanceDB = "0/0"; } present
				 * = present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM2").trim());
				 * if(attendanceDB.trim().equalsIgnoreCase("")){ attendanceDB = "0/0"; } present
				 * = present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = present+"/"+total; present = 0; total = 0; }
				 */

				if (attendanceMap.get(grNoDB) != null && !attendanceMap.isEmpty()
						&& !attendanceMap.get("total").get("total").equalsIgnoreCase("0")) {
					attendanceDB = attendanceMap.get(grNoDB).get("attended") + "/"
							+ attendanceMap.get("total").get("total");
				} else if (attendanceMap.get(grNoDB) != null && !attendanceMap.isEmpty()
						&& !semester.equalsIgnoreCase("FINAL")
						&& !attendanceMap.get("total").get(semester + "_TOT").equalsIgnoreCase("0")) {
					attendanceDB = attendanceMap.get(grNoDB).get(semester) + "/"
							+ attendanceMap.get("total").get(semester + "_TOT");
				} else if (attendanceMap.get(grNoDB) != null && !attendanceMap.isEmpty()
						&& semester.equalsIgnoreCase("FINAL")
						&& !attendanceMap.get("total").get("YEARLY_TOT").equalsIgnoreCase("0")) {
					attendanceDB = attendanceMap.get(grNoDB).get("YEARLY") + "/"
							+ attendanceMap.get("total").get("YEARLY_TOT");
				} else {
					attendanceDB = "0/0";
				}
				studentResultMap.put("attendance", attendanceDB);
				remark_0DB = resultSet.getString("REMARK_0") == null ? "-" : (resultSet.getString("REMARK_0").trim());
				studentResultMap.put("remark_0", attFinalDB);
				remark_1DB = resultSet.getString("REMARK_1") == null ? "-" : (resultSet.getString("REMARK_1").trim());
				studentResultMap.put("remark_1", attFinalDB);
				conductDB = resultSet.getString("CONDUCT") == null ? "-" : (resultSet.getString("CONDUCT").trim());
				studentResultMap.put("conduct", attFinalDB);
				semTotal = resultSet.getString(semester + "_TOTAL") == null ? "-"
						: (resultSet.getString(semester + "_TOTAL").trim());
				studentResultMap.put("semTotal", semTotal);
				sem1Total = resultSet.getString("SEM1_TOTAL") == null ? "-"
						: (resultSet.getString("SEM1_TOTAL").trim());
				studentResultMap.put("sem1Total", sem1Total);
				sem2Total = resultSet.getString("SEM2_TOTAL") == null ? "-"
						: (resultSet.getString("SEM2_TOTAL").trim());
				studentResultMap.put("sem2Total", sem2Total);
				semMarksObtained = resultSet.getString(semester + "_MARKS") == null ? "-"
						: (resultSet.getString(semester + "_MARKS").trim());
				studentResultMap.put("semMarksObtained", semMarksObtained);

				/*
				 * if(semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("IX") ||
				 * std.equalsIgnoreCase("X"))){ addToMapForFinal = grNoDB; for (int i = 0; i <
				 * subjectTitleList.size(); i++) { subjectTitle =
				 * subjectTitleList.get(i).replace(" ", "_"); gradeDataSem1 =
				 * resultSet.getString(subjectTitle + "_FINAL") == null ? "NA" :
				 * (resultSet.getString(subjectTitle + "_FINAL").trim()); // gradeDataSem2 =
				 * resultSet.getString(subjectTitle + "_SEM2") == null ? "NA" :
				 * (resultSet.getString(subjectTitle + "_SEM2").trim()); addToMapForFinal =
				 * addToMapForFinal + "|" +subjectTitle + "," + gradeDataSem1; } //
				 * studentResultMap.put(grNoDB, addToMap); resultDataList.add(addToMapForFinal);
				 * gradeDataDB = ""; }
				 */
//				if (semester.equalsIgnoreCase("FINAL") && !std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X")
//						&& !std.equalsIgnoreCase("XI") && !std.equalsIgnoreCase("XII") && !std.equalsIgnoreCase("JR KG")
//						&& !std.equalsIgnoreCase("SR KG")) {
				if (semester.equalsIgnoreCase("FINAL") && !marks_flag_std) {
					addToMapForFinal = grNoDB;
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataSem1 = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						gradeDataSem2 = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						addToMapForFinal = addToMapForFinal + "|" + subjectTitle + "," + gradeDataSem1 + ","
								+ gradeDataSem2;
					}
					// studentResultMap.put(grNoDB, addToMap);
//					resultDataList.add(addToMapForFinal);
					gradeDataDB = "";
				}
				else if (semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("JR KG") || std.equalsIgnoreCase("SR KG"))) {
//				else if (semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
					addToMapForFinal = grNoDB;
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataSem1 = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						studentResultMap.put(subjectTitle + "_SEM1", gradeDataSem1);
						
						gradeDataSem2 = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						studentResultMap.put(subjectTitle + "_SEM2", gradeDataSem2);
//						addToMapForFinal = addToMapForFinal + "|" + subjectTitle + "," + gradeDataSem1 + ","
//								+ gradeDataSem2;
					}
//					 studentResultMap.put(grNoDB, addToMap);
//					resultDataList.add(addToMapForFinal);
					gradeDataDB = "";
				} else if (semester.equalsIgnoreCase("SEM2")) {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataDB = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						studentResultMap.put(subjectTitle + "_SEM1", gradeDataDB);
						gradeDataDB = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						studentResultMap.put(subjectTitle + "_SEM2", gradeDataDB);
					}
				} else {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataDB = resultSet.getString(subjectTitle + "_" + semester) == null ? "NA"
								: (resultSet.getString(subjectTitle + "_" + semester).trim());
						studentResultMap.put(subjectTitle + "_" + semester, gradeDataDB);
					}
				}
				grMap.put(grNoDB, studentResultMap);
			}
			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Result Print Failed.");
			cm.logException(e);
		}
		return grMap;
	}

	// /////////Gradewise Classification for Std < 9
	// //////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, Integer>> gradewiseClassification(SessionData sessionData,
			String academic, String std, String div, String exam, String section, String stdStr) throws Exception {

		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String academicDB = "";
		String resultDataDB = "";
		String grNoDB = "", grade = "", lcDate = "";
		String ageDB = "", genderDB = "";
		String rollNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "";
		String fatherNameDB = "", motherNameDB = "", contact1 = "", contact2 = "";
		String stdDB = "", addinMap = "";
		String divDB = "";
		String semester = "";
		String semDisplay = "";
		String semPercentDB = "";
		String queryCondition = "";
		String[] stdList;
		List gradewiseDataList = new ArrayList();
		LinkedHashMap<String, Integer> gradeClassTotalMap = new LinkedHashMap<String, Integer>();
		LinkedHashMap<String, String> stdDivMap = new LinkedHashMap<String, String>();
		LinkedHashMap emptyMap = new LinkedHashMap();
		LinkedHashMap<String, LinkedHashMap<String, Integer>> stdMap = new LinkedHashMap<String, LinkedHashMap<String, Integer>>();
		TreeMap grNoMap = new TreeMap();
		TreeMap marksObtainedMap = new TreeMap();
		boolean retFlag = false;
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);
			stdList = stdStr.replace("'", "").split(",");
			if (std.equalsIgnoreCase("All") || std.equalsIgnoreCase("")) {
				for (int i = 0; i < stdList.length; i++) {
					stdDivMap.put(stdList[i], stdList[i]);
				}
			}
			if (exam.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
				semDisplay = "FIRST SEMESTER";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
				semDisplay = "SECOND SEMESTER";
			} else {
				semester = "FINAL";
				semDisplay = "SECOND SEMESTER";
			}

			if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("") && !div.equalsIgnoreCase("All")
					&& !div.equalsIgnoreCase("")) {
				queryCondition = " AND RESULT_DATA.STD_1='" + std + "' AND RESULT_DATA.DIV_1='" + div + "'";
			} else if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
				queryCondition = " AND RESULT_DATA.STD_1='" + std + "' ";
			} else {
				queryCondition = " AND RESULT_DATA.STD_1 IN (" + stdStr + ") ";
			}

			findQuery = "SELECT SEM1_MARKS,SEM1_TOTAL,SEM2_MARKS,SEM2_TOTAL,FINAL_MARKS,FINAL_TOTAL,"
					+ "RESULT_DATA.GR_NO,RESULT_DATA.ROLL_NO,RESULT_DATA.LAST_NAME,"
					+ "RESULT_DATA.FIRST_NAME,RESULT_DATA.FATHER_NAME,HS_GENERAL_REGISTER.MOTHER_NAME,GENDER,"
					+ "SEM1_PERCENT,SEM2_PERCENT,ORIGINAL_LC,RESULT_DATA.STD_1,RESULT_DATA.DIV_1 " + "FROM "
					+ sessionData.getDBName() + "." + "RESULT_DATA LEFT JOIN " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER " + "ON RESULT_DATA.GR_NO = hs_general_register.GR_NO "
					+ "WHERE RESULT_DATA.ACADEMIC_YEAR='" + academic + "' AND RESULT_DATA.SECTION_NM='" + section + "' "
					+ queryCondition + "ORDER BY RESULT_DATA.STD_1,RESULT_DATA.DIV_1 ASC";
			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, Integer> gradeClassificationMap = new LinkedHashMap<String, Integer>();
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				lcDate = studentLCMap.get(grNoDB);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicDB) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicDB),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicDB)) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicDB)) {
					continue;
				}
				genderDB = resultSet.getString("GENDER") == null ? "NA" : (resultSet.getString("GENDER").trim());
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}

				semPercentDB = resultSet.getString(semester + "_PERCENT") == null ? "NA"
						: (resultSet.getString(semester + "_PERCENT").trim());
				stdDB = resultSet.getString("STD_1") == null ? "NA" : (resultSet.getString("STD_1").trim());
				divDB = resultSet.getString("DIV_1") == null ? "NA" : (resultSet.getString("DIV_1").trim());
				if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
					stdDivMap.put(stdDB + "-" + divDB, stdDB + "-" + divDB);
				}
				/*
				 * else{ stdDivMap.put(stdDB, stdDB); }
				 */

				if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
					addinMap = stdDB + "-" + divDB;
				} else {
					addinMap = stdDB;
				}

				if (stdMap.get(addinMap) != null) {
					gradeClassificationMap = stdMap.get(addinMap);
				}

				if (!semPercentDB.equalsIgnoreCase("NA") && !semPercentDB.equalsIgnoreCase("")
						&& !semPercentDB.equalsIgnoreCase("-")) {
					grade = cm.getGradeFromPercent(Double.parseDouble(semPercentDB), stdDB);
				} else {
					grade = "-";
				}

				gradeClassificationMap.put("strength_" + genderDB,
						(gradeClassificationMap.get("strength_" + genderDB) == null ? 1
								: (gradeClassificationMap.get("strength_" + genderDB) + 1)));

				gradeClassificationMap.put("strength_TOTAL", (gradeClassificationMap.get("strength_TOTAL") == null ? 1
						: (gradeClassificationMap.get("strength_TOTAL") + 1)));

				gradeClassTotalMap.put("strength_" + genderDB,
						(gradeClassTotalMap.get("strength_" + genderDB) == null ? 1
								: (gradeClassTotalMap.get("strength_" + genderDB) + 1)));

				gradeClassTotalMap.put("strength_TOTAL", (gradeClassTotalMap.get("strength_TOTAL") == null ? 1
						: (gradeClassTotalMap.get("strength_TOTAL") + 1)));

				if (grade != null && !grade.equalsIgnoreCase("") && !grade.equalsIgnoreCase("-")
						&& !grade.equalsIgnoreCase("NA")) {
					gradeClassificationMap.put("appeared_" + genderDB,
							(gradeClassificationMap.get("appeared_" + genderDB) == null ? 1
									: (gradeClassificationMap.get("appeared_" + genderDB) + 1)));

					gradeClassificationMap.put("appeared_TOTAL",
							(gradeClassificationMap.get("appeared_TOTAL") == null ? 1
									: (gradeClassificationMap.get("appeared_TOTAL") + 1)));

					gradeClassTotalMap.put("appeared_" + genderDB,
							(gradeClassTotalMap.get("appeared_" + genderDB) == null ? 1
									: (gradeClassTotalMap.get("appeared_" + genderDB) + 1)));

					gradeClassTotalMap.put("appeared_TOTAL", (gradeClassTotalMap.get("appeared_TOTAL") == null ? 1
							: (gradeClassTotalMap.get("appeared_TOTAL") + 1)));
				}

				gradeClassificationMap.put(grade,
						(gradeClassificationMap.get(grade) == null ? 1 : (gradeClassificationMap.get(grade) + 1)));

				gradeClassTotalMap.put(grade,
						(gradeClassTotalMap.get(grade) == null ? 1 : (gradeClassTotalMap.get(grade) + 1)));

				if (grade.contains("E")) {
					gradeClassificationMap.put("rte_" + genderDB,
							(gradeClassificationMap.get("rte_" + genderDB) == null ? 1
									: (gradeClassificationMap.get("rte_" + genderDB) + 1)));

					gradeClassificationMap.put("rte_TOTAL", (gradeClassificationMap.get("rte_TOTAL") == null ? 1
							: (gradeClassificationMap.get("rte_TOTAL") + 1)));

					gradeClassTotalMap.put("rte_" + genderDB, (gradeClassTotalMap.get("rte_" + genderDB) == null ? 1
							: (gradeClassTotalMap.get("rte_" + genderDB) + 1)));

					gradeClassTotalMap.put("rte_TOTAL", (gradeClassTotalMap.get("rte_TOTAL") == null ? 1
							: (gradeClassTotalMap.get("rte_TOTAL") + 1)));
				}

				stdMap.put(addinMap, gradeClassificationMap);
			}

			stdMap.put("TOTAL", gradeClassTotalMap);
			stdStr = stdStr.replace("','", ",");
			stdStr = stdStr.replace("'", "");
			stdStr = stdStr + ",TOTAL";
			stdList = stdStr.split(",");
			stdDivMap.put("TOTAL", "TOTAL");
			gradewiseDataList.add(
					"STD|STRENGTH| | |APPEARED| | |GRADEWISE CLASSIFICATION CHART| | | | | | | | |PROMOTTED ON RTE (ABSENT)| | | ");
			gradewiseDataList.add(
					" |BOYS|GIRLS|TOTAL|BOYS|GIRLS|TOTAL|A-1|A-2|B-1|B-2|C-1|C-2|D|E-1|E-2|BOYS|GIRLS|TOTAL|REMARK");

			Set set = stdDivMap.entrySet();
			Iterator n = set.iterator();
			while (n.hasNext()) {
				Map.Entry me = (Map.Entry) n.next();
//			for(int i = 0; i < stdList.length; i++){
				LinkedHashMap<String, Integer> gradeMap = new LinkedHashMap<String, Integer>();

				if (stdMap.get(me.getKey().toString()) != null) {
					gradeMap = stdMap.get(me.getKey().toString());
					String strength_MALE = gradeMap.get("strength_MALE") == null ? "-"
							: gradeMap.get("strength_MALE").toString();
					String strength_FEMALE = gradeMap.get("strength_FEMALE") == null ? "-"
							: gradeMap.get("strength_FEMALE").toString();
					String strength_TOTAL = gradeMap.get("strength_TOTAL") == null ? "-"
							: gradeMap.get("strength_TOTAL").toString();
					String appeared_MALE = gradeMap.get("appeared_MALE") == null ? "-"
							: gradeMap.get("appeared_MALE").toString();
					String appeared_FEMALE = gradeMap.get("appeared_FEMALE") == null ? "-"
							: gradeMap.get("appeared_FEMALE").toString();
					String appeared_TOTAL = gradeMap.get("appeared_TOTAL") == null ? "-"
							: gradeMap.get("appeared_TOTAL").toString();

					String A_1 = gradeMap.get("A-1") == null ? "-" : gradeMap.get("A-1").toString();
					String A_2 = gradeMap.get("A-2") == null ? "-" : gradeMap.get("A-2").toString();
					String B_1 = gradeMap.get("B-1") == null ? "-" : gradeMap.get("B-1").toString();
					String B_2 = gradeMap.get("B-2") == null ? "-" : gradeMap.get("B-2").toString();
					String C_1 = gradeMap.get("C-1") == null ? "-" : gradeMap.get("C-1").toString();
					String C_2 = gradeMap.get("C-2") == null ? "-" : gradeMap.get("C-2").toString();
					String D = gradeMap.get("D") == null ? "-" : gradeMap.get("D").toString();
					String E_1 = gradeMap.get("E-1") == null ? "-" : gradeMap.get("E-1").toString();
					String E_2 = gradeMap.get("E-2") == null ? "-" : gradeMap.get("E-2").toString();
					String rte_MALE = gradeMap.get("rte_MALE") == null ? "-" : gradeMap.get("rte_MALE").toString();
					String rte_FEMALE = gradeMap.get("rte_FEMALE") == null ? "-"
							: gradeMap.get("rte_FEMALE").toString();
					String rte_TOTAL = gradeMap.get("rte_TOTAL") == null ? "-" : gradeMap.get("rte_TOTAL").toString();

					gradewiseDataList.add(me.getKey().toString() + "|" + strength_MALE + "|" + strength_FEMALE + "|"
							+ strength_TOTAL + "|" + appeared_MALE + "|" + appeared_FEMALE + "|" + appeared_TOTAL + "|"
							+ A_1 + "|" + A_2 + "|" + B_1 + "|" + B_2 + "|" + C_1 + "|" + C_2 + "|" + D + "|" + E_1
							+ "|" + E_2 + "|" + rte_MALE + "|" + rte_FEMALE + "|" + rte_TOTAL + "| ");
				} else {
					gradewiseDataList.add(me.getKey().toString() + "|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-");
				}
			}

			cgce.generateExcel(sessionData, "GRADEWISE CLASSIFICATION", "GRADEWISE CLASSIFICATION", findQuery,
					gradewiseDataList, true, semDisplay + "    GRADEWISE CLASSIFICATION  " + academic, 1);
			JOptionPane.showMessageDialog(null, "Gradewise classification Report created.");
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Gradewise classification Failed.");
			cm.logException(e);
		}
		return stdMap;
	}

	// /////////Print RESULT DATA List for Std < 9
	// //////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> printResultList(SessionData sessionData,
			String academic, String std, String div, String exam, String section, String last, String first,
			String father, LinkedHashMap<String, String> leftDataMap) throws Exception {

		logger.info("=========printResultList Query============");
		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String subjectTitleQuery = "";
		String subTitleDB = "";
		String academicDB = "";
		String gradeDataDB = "";
		String gradeDataSem1 = "";
		String gradeDataSem2 = "";
		String addToMap = "";
		String addToMapForFinal = "";
		String resultDataDB = "";
		String grNoDB = "", suidDB = "";
		String birthDB = "";
		String ageDB = "", genderDB = "";
		String hobbiesDB = "";
		String attSem1DB = "";
		String attSem2DB = "";
		String attFinalDB = "";
		String attendanceDB = "";
		int present = 0;
		int total = 0;
		String rollNoDB = "";
		String lastNameDB = "";
		String firstNameDB = "", suid = "";
		String fatherNameDB = "", motherNameDB = "", contact1 = "", contact2 = "";
		String stdDB = "";
		String divDB = "";
		String semester = "";
		String semProgress = "";
		String semPercentDB = "", semMarksDB = "";
		String semProgressDB = "";
		String semImproveDB = "";
		String semResultDB = "";
		String semTotal = "";
		String semMarksObtained = "";
		String remark_0DB = "";
		String remark_1DB = "";
		String conductDB = "";
		String subjectTitle = "";
		String queryCondition = "";

		List<String> subjectTitleList = new ArrayList<String>();
		LinkedHashMap emptyMap = new LinkedHashMap();
		LinkedHashMap grMap = new LinkedHashMap();
		LinkedHashMap<String, LinkedHashMap<String, String>> attendanceMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		TreeMap grNoMap = new TreeMap();
		TreeMap marksObtainedMap = new TreeMap();
		boolean retFlag = false;
		int stdInt = 0;

		try {
			stdInt = cm.RomanToInteger(std);
			if (exam.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
				semProgress = "SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
				semProgress = "SEM2";
			} else {
				semester = "FINAL";
				semProgress = "SEM2";
			}
			// ////////to get subject title list
			subjectTitleList = findSubjectTitleList(sessionData, std, "", academic);
			subjectTitleList.remove(0);
			subjectTitleList.remove(0);
			// end of getting subject list/////////////////////////////////////

			attendanceMap = getAttendanceMap(sessionData, std, div, academic, semProgress);

			String subjectStr = "";
			if ((semester.equalsIgnoreCase("FINAL") || semester.equalsIgnoreCase("SEM2")) && !std.equalsIgnoreCase("IX")
					&& !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI") && !std.equalsIgnoreCase("XII")) {
				for (int i = 0; i < subjectTitleList.size(); i++) {
					subjectTitle = subjectTitleList.get(i).replace(" ", "_");
					subjectStr = subjectStr + "," + subjectTitle + "_SEM1," + subjectTitle + "_SEM2";
				}
			} else if (semester.equalsIgnoreCase("FINAL")) {
				for (int i = 0; i < subjectTitleList.size(); i++) {
					subjectTitle = subjectTitleList.get(i).replace(" ", "_");
					subjectStr = subjectStr + "," + subjectTitle + "_SEM1," + subjectTitle + "_SEM2";
				}
			} else {
				for (int i = 0; i < subjectTitleList.size(); i++) {
					subjectTitle = subjectTitleList.get(i).replace(" ", "_");
					subjectStr = subjectStr + "," + subjectTitle + "_" + semester;
				}
			}

			if (!std.equalsIgnoreCase("")) {
				queryCondition = " AND RESULT_DATA.STD_1='" + std + "' ";
			}
			if (!div.equalsIgnoreCase("")) {
				queryCondition = queryCondition + " AND RESULT_DATA.DIV_1='" + div + "' ";
			}
			findQuery = "SELECT STD_1,DIV_1,SEM1_MARKS,SEM1_TOTAL,SEM2_MARKS,SEM2_TOTAL,FINAL_MARKS,FINAL_TOTAL,"
					+ "REMARK_0,REMARK_1,CONDUCT,ATT_SEM1,ATT_SEM2,ATT_FINAL,EXTRA_1,"
					+ "DATE_FORMAT(DOB, '%d/%m/%Y') AS BIRTH_DATE,RESULT_DATA.GR_NO,RESULT_DATA.ROLL_NO,RESULT_DATA.LAST_NAME,"
					+ "RESULT_DATA.FIRST_NAME,RESULT_DATA.FATHER_NAME,HS_GENERAL_REGISTER.MOTHER_NAME,HS_GENERAL_REGISTER.SUID,CONTACT_1,CONTACT_2,GENDER,TIMESTAMPDIFF(YEAR,DOB,CURDATE()) AS AGE,"
					+ "RESULT_DATA." + semester + "_PERCENT,RESULT_DATA." + semProgress + "_PROGRESS,RESULT_DATA."
					+ semProgress + "_IMPROVE,"
					+ "RESULT_DATA.SEM1_IMPROVE,RESULT_DATA.SEM2_IMPROVE,RESULT_DATA.SEM1_PROGRESS,RESULT_DATA.SEM2_PROGRESS,"
					+ "RESULT_DATA." + semProgress + "_RESULT" + subjectStr + " " + "FROM " + sessionData.getDBName()
					+ "." + "RESULT_DATA LEFT JOIN " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
					+ "ON RESULT_DATA.GR_NO = hs_general_register.GR_NO WHERE RESULT_DATA.ACADEMIC_YEAR='" + academic
					+ "' " + queryCondition + "AND RESULT_DATA.SECTION_NM='" + section + "' "
					+ "ORDER BY RESULT_DATA.ROLL_NO * 1";
			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap studentResultMap = new LinkedHashMap();
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				suidDB = resultSet.getString("SUID") == null ? "NA" : (resultSet.getString("SUID").trim());
				stdDB = resultSet.getString("STD_1") == null ? "NA" : (resultSet.getString("STD_1").trim());
				divDB = resultSet.getString("DIV_1") == null ? "NA" : (resultSet.getString("DIV_1").trim());
				hobbiesDB = resultSet.getString("EXTRA_1") == null ? "NA" : (resultSet.getString("EXTRA_1").trim());
				birthDB = resultSet.getString("BIRTH_DATE") == null ? "NA" : (resultSet.getString("BIRTH_DATE").trim());
				genderDB = resultSet.getString("GENDER") == null ? "NA" : (resultSet.getString("GENDER").trim());
				ageDB = resultSet.getString("AGE") == null ? "NA" : (resultSet.getString("AGE").trim());
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				lastNameDB = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				firstNameDB = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				fatherNameDB = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				motherNameDB = resultSet.getString("MOTHER_NAME") == null ? " "
						: (resultSet.getString("MOTHER_NAME").trim());
				contact1 = resultSet.getString("CONTACT_1") == null ? " " : (resultSet.getString("CONTACT_1").trim());
				contact2 = resultSet.getString("CONTACT_2") == null ? " " : (resultSet.getString("CONTACT_2").trim());
				semMarksDB = resultSet.getString(semester + "_MARKS") == null ? "NA"
						: (resultSet.getString(semester + "_MARKS").trim());
				semPercentDB = resultSet.getString(semester + "_PERCENT") == null ? "NA"
						: (resultSet.getString(semester + "_PERCENT").trim());
				if ((semPercentDB == null || semPercentDB.equalsIgnoreCase("NA") || semPercentDB.equalsIgnoreCase(""))
						&& !semester.equalsIgnoreCase("Final") && stdInt >= 9) {
					continue;
				}

				studentResultMap.put("hobbies", hobbiesDB);
				studentResultMap.put("birthDate", birthDB);
				studentResultMap.put("grNo", grNoDB);
				studentResultMap.put("suid", suidDB);
				studentResultMap.put("gender", genderDB);
				studentResultMap.put("age", ageDB);
				studentResultMap.put("rollNo", rollNoDB);
				studentResultMap.put("lastName", lastNameDB);
				studentResultMap.put("firstName", firstNameDB);
				studentResultMap.put("fatherName", fatherNameDB);
				studentResultMap.put("name", lastNameDB + " " + firstNameDB + " " + fatherNameDB);
				studentResultMap.put("motherName", motherNameDB);
				studentResultMap.put("contact1", contact1);
				studentResultMap.put("contact2", contact2);
				studentResultMap.put("std", stdDB);
				studentResultMap.put("div", divDB);

				studentResultMap.put("semMarks", semMarksDB);
				studentResultMap.put("semPercent", semPercentDB);
				semProgressDB = resultSet.getString("SEM1_PROGRESS") == null ? ""
						: (resultSet.getString("SEM1_PROGRESS").trim());
				studentResultMap.put("sem1Progress", semProgressDB);
				semProgressDB = resultSet.getString("SEM2_PROGRESS") == null ? ""
						: (resultSet.getString("SEM2_PROGRESS").trim());
				studentResultMap.put("sem2Progress", semProgressDB);
				semProgressDB = resultSet.getString(semProgress + "_PROGRESS") == null ? ""
						: (resultSet.getString(semProgress + "_PROGRESS").trim());
				studentResultMap.put("semProgress", semProgressDB);
				semImproveDB = resultSet.getString("SEM1_IMPROVE") == null ? ""
						: (resultSet.getString("SEM1_IMPROVE").trim());
				studentResultMap.put("sem1Improve", semImproveDB);
				semImproveDB = resultSet.getString("SEM2_IMPROVE") == null ? ""
						: (resultSet.getString("SEM2_IMPROVE").trim());
				studentResultMap.put("sem2Improve", semImproveDB);
				semImproveDB = resultSet.getString(semProgress + "_IMPROVE") == null ? ""
						: (resultSet.getString(semProgress + "_IMPROVE").trim());
				studentResultMap.put("semImprove", semImproveDB);
				semResultDB = resultSet.getString(semProgress + "_RESULT") == null ? "NA"
						: (resultSet.getString(semProgress + "_RESULT").trim());
				studentResultMap.put("semResult", semResultDB);
			
				attSem1DB = resultSet.getString("ATT_SEM1") == null ? "NA" :
					(resultSet.getString("ATT_SEM1").trim()); studentResultMap.put("ATT_SEM1",attSem1DB); 
				studentResultMap.put("ATT_SEM1", attSem1DB);
				attSem2DB = resultSet.getString("ATT_SEM2") == null ? "NA" :
					(resultSet.getString("ATT_SEM2").trim()); studentResultMap.put("ATT_SEM2",attSem2DB); 
				studentResultMap.put("ATT_SEM2", attSem2DB);
				attFinalDB = resultSet.getString("ATT_FINAL") == null ? "NA" :
					(resultSet.getString("ATT_FINAL").trim()); studentResultMap.put("ATT_FINAL",attFinalDB);
				studentResultMap.put("ATT_FINAL", attFinalDB);
				 
				/*
				 * if (semester.equalsIgnoreCase("SEM1")) { attendanceDB =
				 * resultSet.getString("ATT_SEM1") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM1").trim());
				 * if(attendanceDB.equalsIgnoreCase("")){ attendanceDB = "0/0"; } } else
				 * if(semester.equalsIgnoreCase("FINAL") && !std.equalsIgnoreCase("IX") &&
				 * !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI") &&
				 * !std.equalsIgnoreCase("XII")){ attendanceDB = resultSet.getString("ATT_SEM1")
				 * == null ? "0/0" : (resultSet.getString("ATT_SEM1").trim());
				 * if(attendanceDB.equalsIgnoreCase("")){ attendanceDB = "0/0"; } present =
				 * present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM2").trim());
				 * if(attendanceDB.equalsIgnoreCase("")){ attendanceDB = "0/0"; } present =
				 * present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = present+"/"+total; present = 0; total = 0; } else if
				 * (semester.equalsIgnoreCase("SEM2")){ attendanceDB =
				 * resultSet.getString("ATT_SEM2") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM2").trim());
				 * if(attendanceDB.equalsIgnoreCase("")){ attendanceDB = "0/0"; } } else
				 * if(semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("IX") ||
				 * std.equalsIgnoreCase("X") || std.equalsIgnoreCase("XI") ||
				 * std.equalsIgnoreCase("XII"))){ attendanceDB = resultSet.getString("ATT_SEM1")
				 * == null ? "0/0" : (resultSet.getString("ATT_SEM1").trim());
				 * if(attendanceDB.trim().equalsIgnoreCase("")){ attendanceDB = "0/0"; } present
				 * = present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = resultSet.getString("ATT_SEM2") == null ? "0/0" :
				 * (resultSet.getString("ATT_SEM2").trim());
				 * if(attendanceDB.trim().equalsIgnoreCase("")){ attendanceDB = "0/0"; } present
				 * = present +
				 * Integer.parseInt(attendanceDB.substring(0,attendanceDB.indexOf("/"))); total
				 * = total +
				 * Integer.parseInt(attendanceDB.substring(attendanceDB.indexOf("/")+1));
				 * attendanceDB = present+"/"+total; present = 0; total = 0; }
				 */
				if (attendanceMap.get(grNoDB) != null && !attendanceMap.isEmpty()
						&& !attendanceMap.get("total").get("total").equalsIgnoreCase("0")) {
					attendanceDB = attendanceMap.get(grNoDB).get("attended") + "/"
							+ attendanceMap.get("total").get("total");
				} else if (attendanceMap.get(grNoDB) != null && !attendanceMap.isEmpty()
						&& !semester.equalsIgnoreCase("FINAL")
						&& !attendanceMap.get("total").get(semester + "_TOT").equalsIgnoreCase("0")) {
					attendanceDB = attendanceMap.get(grNoDB).get(semester) + "/"
							+ attendanceMap.get("total").get(semester + "_TOT");
				} else if (attendanceMap.get(grNoDB) != null && !attendanceMap.isEmpty()
						&& semester.equalsIgnoreCase("FINAL")
						&& !attendanceMap.get("total").get("YEARLY_TOT").equalsIgnoreCase("0")) {
					attendanceDB = attendanceMap.get(grNoDB).get("YEARLY") + "/"
							+ attendanceMap.get("total").get("YEARLY_TOT");
				} else {
					attendanceDB = "0/0";
				}

				studentResultMap.put("attendance", attendanceDB);
				remark_0DB = resultSet.getString("REMARK_0") == null ? "-" : (resultSet.getString("REMARK_0").trim());
				studentResultMap.put("remark_0", attFinalDB);
				remark_1DB = resultSet.getString("REMARK_1") == null ? "-" : (resultSet.getString("REMARK_1").trim());
				studentResultMap.put("remark_1", attFinalDB);
				conductDB = resultSet.getString("CONDUCT") == null ? "-" : (resultSet.getString("CONDUCT").trim());
				studentResultMap.put("conduct", attFinalDB);
				semTotal = resultSet.getString(semester + "_TOTAL") == null ? "-"
						: (resultSet.getString(semester + "_TOTAL").trim());
				studentResultMap.put("semTotal", semTotal);
				semMarksObtained = resultSet.getString(semester + "_MARKS") == null ? "-"
						: (resultSet.getString(semester + "_MARKS").trim());
				studentResultMap.put("semMarksObtained", semMarksObtained);

				/*
				 * if(semester.equalsIgnoreCase("FINAL") && (std.equalsIgnoreCase("IX") ||
				 * std.equalsIgnoreCase("X"))){ addToMapForFinal = grNoDB; for (int i = 0; i <
				 * subjectTitleList.size(); i++) { subjectTitle =
				 * subjectTitleList.get(i).replace(" ", "_"); gradeDataSem1 =
				 * resultSet.getString(subjectTitle + "_FINAL") == null ? "NA" :
				 * (resultSet.getString(subjectTitle + "_FINAL").trim()); // gradeDataSem2 =
				 * resultSet.getString(subjectTitle + "_SEM2") == null ? "NA" :
				 * (resultSet.getString(subjectTitle + "_SEM2").trim()); addToMapForFinal =
				 * addToMapForFinal + "|" +subjectTitle + "," + gradeDataSem1; } //
				 * studentResultMap.put(grNoDB, addToMap); resultDataList.add(addToMapForFinal);
				 * gradeDataDB = ""; }
				 */

				if ((semester.equalsIgnoreCase("FINAL") || semester.equalsIgnoreCase("SEM2"))
						&& !std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI")
						&& !std.equalsIgnoreCase("XII")) {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataDB = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						if (leftDataMap != null && leftDataMap.get(grNoDB) != null) {
							gradeDataDB = "-";
						}
						studentResultMap.put(subjectTitle + "_SEM1", gradeDataDB);
						gradeDataDB = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						if (leftDataMap != null && leftDataMap.get(grNoDB) != null) {
							gradeDataDB = "-";
						}
						studentResultMap.put(subjectTitle + "_SEM2", gradeDataDB);
					}
				} else if (semester.equalsIgnoreCase("FINAL")) {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataDB = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						if (leftDataMap != null && leftDataMap.get(grNoDB) != null) {
							gradeDataDB = "-";
						}
						studentResultMap.put(subjectTitle + "_SEM1", gradeDataDB);
						if (leftDataMap != null && leftDataMap.get(grNoDB) != null) {
							gradeDataDB = "-";
						}
						gradeDataDB = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						studentResultMap.put(subjectTitle + "_SEM2", gradeDataDB);
					}
				} else {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						gradeDataDB = resultSet.getString(subjectTitle + "_" + semester) == null ? "NA"
								: (resultSet.getString(subjectTitle + "_" + semester).trim());
						if (leftDataMap != null && leftDataMap.get(grNoDB) != null) {
							gradeDataDB = "-";
						}
						studentResultMap.put(subjectTitle + "_" + semester, gradeDataDB);
					}
				}
				grMap.put(grNoDB, studentResultMap);
			}
			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Result Print Failed.");
			cm.logException(e);
		}
		return grMap;
	}

	// /////////getCategorywiseReport//////////////////////////////////////////
	public ArrayList<String> getCategoryList(SessionData sessionData, String academic, String std, String div,
			String exam) throws Exception {

		String findQuery = "", category = "";
		ArrayList<String> categoryList = new ArrayList<>();
		boolean retFlag = false;

		try {

			findQuery = "SELECT DISTINCT CATEGORY " + "FROM " + sessionData.getDBName() + "." + "hs_general_register "
					+ "WHERE ACADEMIC_YEAR='" + academic + "' AND PRESENT_STD='" + std + "' AND PRESENT_DIV='" + div
					+ "' AND " + "SECTION_NM='" + sessionData.getSectionName() + "' " + "ORDER BY CATEGORY ASC";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				category = resultSet.getString("CATEGORY") == null ? "NA" : (resultSet.getString("CATEGORY").trim());
				categoryList.add(category);
			}

			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			cm.logException(e);
		}
		return categoryList;
	}

	// /////////getCategorywiseReport//////////////////////////////////////////
	public LinkedHashMap<String, Integer> getCategorywiseReport(SessionData sessionData, String academic, String std,
			String div, String exam, String reportType) throws Exception {

		String findQuery = "", grNoDB = "", gradeDataDB = "", gradeDataSem1 = "", gender = "", category = "", religion,
				sem1, sem2;
		String resultDataDB = "", semester = "", percentRange = "", subjectTitle = "", subjectStr = "";
		String semPercentDB = "", semResultDB = "", semTotal = "", semMarksObtained = "", queryCondition = "";
		LinkedHashMap<String, Integer> categoryMap = new LinkedHashMap<String, Integer>();
		List<String> subjectTitleList = new ArrayList<String>();
		LinkedHashMap<String, String> percentRangeMap = new LinkedHashMap<String, String>();
		boolean retFlag = false;
		int stdInt = 0, divisor = 0;

		try {

			if (exam.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
			} else {
				semester = "FINAL";
			}

			stdInt = cm.RomanToInteger(std);
			if (stdInt < 9) {
				percentRangeMap.put("A1", "91-100");
				percentRangeMap.put("A2", "81-90");
				percentRangeMap.put("B1", "71-80");
				percentRangeMap.put("B2", "61-70");
				percentRangeMap.put("C1", "51-60");
				percentRangeMap.put("C2", "41-50");
				percentRangeMap.put("D", "33-40");
				percentRangeMap.put("E1", "21-32");
				percentRangeMap.put("E2", "UP TO 20");
			}
			if (reportType.equalsIgnoreCase("Subject")) {
				// ////////to get subject title list
				subjectTitleList = findSubjectTitleList(sessionData, std, "", academic);
				subjectTitleList.remove(0);
				subjectTitleList.remove(0);
				logger.info("subjectTitleList size : " + subjectTitleList.size());
				// end of getting subject list/////////////////////////////////////

				if (semester.equalsIgnoreCase("FINAL") && !std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X")
						&& !std.equalsIgnoreCase("XI") && !std.equalsIgnoreCase("XII")) {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						subjectStr = subjectStr + "," + subjectTitle + "_SEM1," + subjectTitle + "_SEM2";
					}
				} else if (semester.equalsIgnoreCase("FINAL")) {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						subjectStr = subjectStr + "," + subjectTitle + "_SEM1," + subjectTitle + "_SEM2";
					}
				} else {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						subjectStr = subjectStr + "," + subjectTitle + "_" + semester;
					}
				}
			}

			if (!div.equalsIgnoreCase("")) {
				queryCondition = " AND RESULT_DATA.DIV_1='" + div + "'";
			}
			findQuery = "SELECT RESULT_DATA.GR_NO,CATEGORY,RELIGION,GENDER,SEM1_MARKS,SEM1_TOTAL,SEM2_MARKS,SEM2_TOTAL,FINAL_MARKS,"
					+ "FINAL_TOTAL,RESULT_DATA.SEM1_PERCENT,RESULT_DATA.SEM2_PERCENT,RESULT_DATA.FINAL_PERCENT,"
					+ "RESULT_DATA.SEM1_RESULT,RESULT_DATA.SEM2_RESULT,RESULT_DATA.FINAL_RESULT" + subjectStr + " "
					+ "FROM " + sessionData.getDBName() + "." + "RESULT_DATA LEFT JOIN " + sessionData.getDBName()
					+ "." + "hs_general_register " + "ON RESULT_DATA.GR_NO = hs_general_register.GR_NO "
					+ "WHERE RESULT_DATA.ACADEMIC_YEAR='" + academic + "' AND RESULT_DATA.STD_1='" + std + "' "
					+ queryCondition + " " + "AND RESULT_DATA.SECTION_NM='" + sessionData.getSectionName() + "' "
					+ "ORDER BY RESULT_DATA.GR_NO";
			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				gender = resultSet.getString("GENDER") == null ? "NA" : (resultSet.getString("GENDER").trim());
				semPercentDB = resultSet.getString(semester + "_PERCENT") == null ? "NA"
						: (resultSet.getString(semester + "_PERCENT").trim());

				if (!reportType.equalsIgnoreCase("Subject")) {
					category = resultSet.getString(reportType) == null ? "NA"
							: (resultSet.getString(reportType).trim());
					if (!semPercentDB.equalsIgnoreCase("NA") && !semPercentDB.equalsIgnoreCase("-")) {
						percentRange = cm.getPercentRangeFromPercent(Double.parseDouble(semPercentDB), std);
					} else {
						percentRange = semPercentDB;
					}

					if (categoryMap.containsKey(percentRange + "_" + category + "_" + gender)) {
						categoryMap.put(percentRange + "_" + category + "_" + gender,
								(categoryMap.get(percentRange + "_" + category + "_" + gender) + 1));
						categoryMap.put(percentRange + "_TOTAL_" + gender,
								(categoryMap.get(percentRange + "_TOTAL_" + gender) + 1));
						categoryMap.put(category + "_TOTAL_" + gender,
								(categoryMap.get(category + "_TOTAL_" + gender) + 1));
						categoryMap.put("TOTAL_TOTAL_" + gender, (categoryMap.get("TOTAL_TOTAL_" + gender) + 1));
					} else {
						categoryMap.put(percentRange + "_" + category + "_" + gender, 1);
						if (categoryMap.containsKey(percentRange + "_TOTAL_" + gender)) {
							categoryMap.put(percentRange + "_TOTAL_" + gender,
									(categoryMap.get(percentRange + "_TOTAL_" + gender) + 1));
						} else {
							categoryMap.put(percentRange + "_TOTAL_" + gender, 1);
						}

						if (categoryMap.containsKey(category + "_TOTAL_" + gender)) {
							categoryMap.put(category + "_TOTAL_" + gender,
									(categoryMap.get(category + "_TOTAL_" + gender) + 1));
						} else {
							categoryMap.put(category + "_TOTAL_" + gender, 1);
						}

						if (categoryMap.containsKey("TOTAL_TOTAL_" + gender)) {
							categoryMap.put("TOTAL_TOTAL_" + gender, (categoryMap.get("TOTAL_TOTAL_" + gender) + 1));
						} else {
							categoryMap.put("TOTAL_TOTAL_" + gender, 1);
						}
					}
				} else {
//					if(semester.equalsIgnoreCase("FINAL")){
//						for (int i = 0; i < subjectTitleList.size(); i++) {
//							subjectTitle = subjectTitleList.get(i).replace(" ", "_");
//							gradeDataDB = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA" : (resultSet.getString(subjectTitle + "_SEM1").trim());
//							gradeDataDB = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA" : (resultSet.getString(subjectTitle + "_SEM2").trim());
//						}
//					}
//					else{
					for (int i = 0; i < subjectTitleList.size(); i++) {
						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						if (semester.equalsIgnoreCase("FINAL")) {
							sem1 = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
									: (resultSet.getString(subjectTitle + "_SEM1").trim());
							if (!sem1.contains("+") && !sem1.equalsIgnoreCase("NA")) {
								sem1 = sem1.substring(0, sem1.indexOf("("));
								divisor = divisor + 1;
							} else if (!sem1.equalsIgnoreCase("NA")) {
								sem1 = sem1.substring(sem1.indexOf("+") + 1, sem1.indexOf("("));
								divisor = divisor + 1;
							} else {
								sem1 = "0";
							}
							if (sem1.contains(".")) {
								sem1 = sem1.substring(0, sem1.indexOf("."));
							}

							sem2 = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
									: (resultSet.getString(subjectTitle + "_SEM2").trim());
							if (!sem2.contains("+") && !sem2.equalsIgnoreCase("NA")) {
								sem2 = sem2.substring(0, sem2.indexOf("("));
								divisor = divisor + 1;
							} else if (!sem2.equalsIgnoreCase("NA")) {
								sem2 = sem2.substring(sem2.indexOf("+") + 1, sem2.indexOf("("));
								divisor = divisor + 1;
							} else {
								sem2 = "0";
							}
							if (sem2.contains(".")) {
								sem2 = sem2.substring(0, sem2.indexOf("."));
							}

							if (divisor > 0) {
								gradeDataDB = "" + ((Integer.parseInt(sem1) + Integer.parseInt(sem2)) / divisor);
							}
						} else {
							gradeDataDB = resultSet.getString(subjectTitle + "_" + semester) == null ? "NA"
									: (resultSet.getString(subjectTitle + "_" + semester).trim());
						}

						if (gradeDataDB.equalsIgnoreCase("NA")) {
							continue;
						}

						if (stdInt >= 9) {
							if (cm.validateOnlyNumber(gradeDataDB)) {
								semPercentDB = gradeDataDB;
							} else if (!gradeDataDB.contains("+") && !gradeDataDB.contains("")) {
								semPercentDB = gradeDataDB.substring(0, gradeDataDB.indexOf("("));
							} else if (!gradeDataDB.contains("")) {
								semPercentDB = gradeDataDB.substring(gradeDataDB.indexOf("+") + 1,
										gradeDataDB.indexOf("("));
							}

							if (!semPercentDB.equalsIgnoreCase("NA") && !semPercentDB.equalsIgnoreCase("-")) {
								percentRange = cm.getPercentRangeFromPercent(Double.parseDouble(semPercentDB), std);
							} else {
								percentRange = semPercentDB;
							}
						} else {
							percentRange = percentRangeMap.get(gradeDataDB.replace("-", ""));
						}

						if (categoryMap.containsKey(percentRange + "_" + subjectTitle + "_" + gender)) {
							categoryMap.put(percentRange + "_" + subjectTitle + "_" + gender,
									(categoryMap.get(percentRange + "_" + subjectTitle + "_" + gender) + 1));
							categoryMap.put(percentRange + "_TOTAL_" + gender,
									(categoryMap.get(percentRange + "_TOTAL_" + gender) + 1));
							categoryMap.put(subjectTitle + "_TOTAL_" + gender,
									(categoryMap.get(subjectTitle + "_TOTAL_" + gender) + 1));
							categoryMap.put("TOTAL_TOTAL_" + gender, (categoryMap.get("TOTAL_TOTAL_" + gender) + 1));
						} else {
							categoryMap.put(percentRange + "_" + subjectTitle + "_" + gender, 1);
							if (categoryMap.containsKey(percentRange + "_TOTAL_" + gender)) {
								categoryMap.put(percentRange + "_TOTAL_" + gender,
										(categoryMap.get(percentRange + "_TOTAL_" + gender) + 1));
							} else {
								categoryMap.put(percentRange + "_TOTAL_" + gender, 1);
							}

							if (categoryMap.containsKey(subjectTitle + "_TOTAL_" + gender)) {
								categoryMap.put(subjectTitle + "_TOTAL_" + gender,
										(categoryMap.get(subjectTitle + "_TOTAL_" + gender) + 1));
							} else {
								categoryMap.put(subjectTitle + "_TOTAL_" + gender, 1);
							}

							if (categoryMap.containsKey("TOTAL_TOTAL_" + gender)) {
								categoryMap.put("TOTAL_TOTAL_" + gender,
										(categoryMap.get("TOTAL_TOTAL_" + gender) + 1));
							} else {
								categoryMap.put("TOTAL_TOTAL_" + gender, 1);
							}
						}
						divisor = 0;
						gradeDataDB = "";
					}
//					}
				}
			}
			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Report Print Failed.");
			cm.logException(e);
		}
		return categoryMap;
	}

	/////////// getLeftStudentReport//////////////////////////////////////////
	public LinkedHashMap<String, Integer> getLeftStudentReport(SessionData sessionData, String academic, String std,
			String div, String exam, String reportType, LinkedHashMap<String, Integer> categoryMap) throws Exception {

		String findQuery = "", grNoDB = "", gender = "", category = "", religion = "", lcDate = "", queryCondition = "";
		boolean retFlag = false;
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "",
					sessionData.getSectionName());

			if (!div.equalsIgnoreCase("")) {
				queryCondition = " AND PRESENT_DIV='" + div + "'";
			}
			findQuery = "SELECT GR_NO,CATEGORY,RELIGION,GENDER FROM " + sessionData.getDBName() + "."
					+ "hs_general_register " + "WHERE ACADEMIC_YEAR='" + academic + "' AND PRESENT_STD='" + std + "' "
					+ queryCondition + " " + "AND SECTION_NM='" + sessionData.getSectionName()
					+ "' AND DATE_LEAVING IS NOT NULL " + "ORDER BY GR_NO";
			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				lcDate = studentLCMap.get(grNoDB);
				// Check for final class allotment date
				if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academic) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academic),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academic)) {
					continue;
				}
				gender = resultSet.getString("GENDER") == null ? "NA" : (resultSet.getString("GENDER").trim());

				if (reportType.equalsIgnoreCase("Subject")) {
					if (categoryMap.get("LEFT_COUNT_" + gender) == null) {
						categoryMap.put("LEFT_COUNT_" + gender, 1);
					} else {
						categoryMap.put("LEFT_COUNT_" + gender, (categoryMap.get("LEFT_COUNT_" + gender) + 1));
					}
				} else {
					category = resultSet.getString(reportType) == null ? "NA"
							: (resultSet.getString(reportType).trim());
					if (categoryMap.get("LEFT_COUNT") == null) {
						categoryMap.put("LEFT_COUNT", 1);
					} else {
						categoryMap.put("LEFT_COUNT", (categoryMap.get("LEFT_COUNT") + 1));
					}
				}

				if (categoryMap.containsKey("LEFT_" + category + "_" + gender)) {
					categoryMap.put("LEFT_" + category + "_" + gender,
							(categoryMap.get("LEFT_" + category + "_" + gender) + 1));
					categoryMap.put("LEFT_TOTAL_" + gender, (categoryMap.get("LEFT_TOTAL_" + gender) + 1));
					categoryMap.put(category + "_TOTAL_" + gender,
							(categoryMap.get(category + "_TOTAL_" + gender) + 1));
					categoryMap.put("TOTAL_TOTAL_" + gender, (categoryMap.get("TOTAL_TOTAL_" + gender) + 1));

				} else {
					categoryMap.put("LEFT_" + category + "_" + gender, 1);
					if (categoryMap.containsKey("LEFT_TOTAL_" + gender)) {
						categoryMap.put("LEFT_TOTAL_" + gender, (categoryMap.get("LEFT_TOTAL_" + gender) + 1));
					} else {
						categoryMap.put("LEFT_TOTAL_" + gender, 1);
					}

					if (categoryMap.containsKey(category + "_TOTAL_" + gender)) {
						categoryMap.put(category + "_TOTAL_" + gender,
								(categoryMap.get(category + "_TOTAL_" + gender) + 1));
					} else {
						categoryMap.put(category + "_TOTAL_" + gender, 1);
					}

					if (categoryMap.containsKey("TOTAL_TOTAL_" + gender)) {
						categoryMap.put("TOTAL_TOTAL_" + gender, (categoryMap.get("TOTAL_TOTAL_" + gender) + 1));
					} else {
						categoryMap.put("TOTAL_TOTAL_" + gender, 1);
					}
				}

			}
			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Report Print Failed.");
			cm.logException(e);
		}
		return categoryMap;
	}

	// /////////Find Final RESULT DATA
	// List//////////////////////////////////////////
	public TreeMap<String, String> findFinalResultList(SessionData sessionData, String academic, String std,
			String div, String exam, String subject, String type, String section, String last, String first,
			String father, TreeMap subjectDetailMap, TreeMap maxMarks, LinkedHashMap<String, Double> subjectSemMap)
			throws Exception {

		logger.info("=========findFinalResultList Query============");
		String findQuery = "";
		String insertQuery = "";
		String findMarksQuery = "";
		String subjectTitleQuery = "";
		String subTitleDB = "";
		String academicDB = "";
		String gradeDataDB = "";
		String gradeDataSem1 = "";
		String gradeDataSem2 = "";
		String addToMap = "";
		String addToMapForFinal = "";
		String resultDataDB = "";
		String grNoDB = "";
		String stdDB = "";
		String divDB = "";
		String avgStr = "";
		String subjectTitle = "";
		String queryCondition = "";
		double avgMarks = 0.0;
		String grade_marks = "";
		double subMaxMarks = 0.0;
		double divisor = 2.0;

		List<String> subjectTitleList = new ArrayList<String>();
		TreeMap<String, String> finalResulData = new TreeMap();
		boolean retFlag = false;
		boolean marks_flag_std = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_MARKS_"+std.replaceAll(" ", "_")));
		boolean result_final_sem2_std_flag = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_FINAL_SEM2_"+std.replaceAll(" ", "_")));

		try {
			// ////////to get subject title list
			subjectTitleList = findSubjectTitleList(sessionData, std, "", academic);
			subjectTitleList.remove(0);
			subjectTitleList.remove(0);
			logger.info("subjectTitleList size : " + subjectTitleList.size());
			// end of getting subject list/////////////////////////////////////

			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "RESULT_DATA " + "WHERE ACADEMIC_YEAR='"
					+ academic + "' AND STD_1='" + std + "' AND DIV_1='" + div + "' AND SECTION_NM='" + section
					+ "' ORDER BY ROLL_NO * 1";
			logger.info("fetch new student list query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grNoDB = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				addToMap = grNoDB;
				if (marks_flag_std) {
					for (int i = 0; i < subjectTitleList.size(); i++) {
						String marks1 = "";
						String passStatus1 = "";
						String reason1 = "";
						String absentMarks1 = "";
						String marks2 = "";
						String passStatus2 = "";
						String reason2 = "";
						String absentMarks2 = "";
						double divisorToPass = 0.0;

						subjectTitle = subjectTitleList.get(i).replace(" ", "_");
						
						subMaxMarks = Double.parseDouble(maxMarks.get(subjectTitle).toString());
						if (subjectSemMap.get(subjectTitle) == 2 && !result_final_sem2_std_flag) {
							divisor = subMaxMarks / 100;
						} else if (subjectSemMap.get(subjectTitle) == 1 || result_final_sem2_std_flag) {
							divisor = 1;
						} else {
							divisor = 0;
						}
						divisorToPass = divisor;
						grade_marks = subjectDetailMap.get(subjectTitle).toString();
						gradeDataSem1 = resultSet.getString(subjectTitle + "_SEM1") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM1").trim());
						gradeDataSem2 = resultSet.getString(subjectTitle + "_SEM2") == null ? "NA"
								: (resultSet.getString(subjectTitle + "_SEM2").trim());
						if (grade_marks.equalsIgnoreCase("GRADE")) {
							if (gradeDataSem1.contains("(")) {
								marks1 = gradeDataSem1.substring(0, gradeDataSem1.indexOf("("));
								passStatus1 = gradeDataSem1.substring(gradeDataSem1.indexOf("(") + 1,
										gradeDataSem1.indexOf("#"));
								reason1 = gradeDataSem1.substring(gradeDataSem1.indexOf("#") + 1,
										gradeDataSem1.indexOf("@"));
								absentMarks1 = gradeDataSem1.substring(gradeDataSem1.indexOf("@") + 1,
										gradeDataSem1.indexOf(")"));
							}
							if (gradeDataSem2.contains("(")) {
								marks2 = gradeDataSem2.substring(0, gradeDataSem2.indexOf("("));
								passStatus2 = gradeDataSem2.substring(gradeDataSem2.indexOf("(") + 1,
										gradeDataSem2.indexOf("#"));
								reason2 = gradeDataSem2.substring(gradeDataSem2.indexOf("#") + 1,
										gradeDataSem2.indexOf("@"));
								absentMarks2 = gradeDataSem2.substring(gradeDataSem2.indexOf("@") + 1,
										gradeDataSem2.indexOf(")"));
							}
						}

						if (!gradeDataSem1.equalsIgnoreCase("NA") && !gradeDataSem2.equalsIgnoreCase("NA")
								&& grade_marks.equalsIgnoreCase("MARKS") && exam.equalsIgnoreCase("Final")) {
							double absentForMarks = 0.0;
							String reasonForAbsence = "NA";
							double totalAbsentMarks = 0.0;

							if(!result_final_sem2_std_flag) {
								marks1 = gradeDataSem1.substring(0, gradeDataSem1.indexOf("("));
								passStatus1 = gradeDataSem1.substring(gradeDataSem1.indexOf("(") + 1,
										gradeDataSem1.indexOf("#"));
								reason1 = gradeDataSem1.substring(gradeDataSem1.indexOf("#") + 1,
										gradeDataSem1.indexOf("@"));
								reasonForAbsence = reason1;
								absentMarks1 = gradeDataSem1.substring(gradeDataSem1.indexOf("@") + 1,
										gradeDataSem1.indexOf(")"));
								if (!absentMarks1.equalsIgnoreCase("NA")) {
									totalAbsentMarks = totalAbsentMarks + Double.parseDouble(absentMarks1);
								}
							}

							marks2 = gradeDataSem2.substring(0, gradeDataSem2.indexOf("("));
							passStatus2 = gradeDataSem2.substring(gradeDataSem2.indexOf("(") + 1,
									gradeDataSem2.indexOf("#"));
							reason2 = gradeDataSem2.substring(gradeDataSem2.indexOf("#") + 1,
									gradeDataSem2.indexOf("@"));
							if (!reasonForAbsence.equalsIgnoreCase("MG") && !reason2.equalsIgnoreCase("NA")) {
								reasonForAbsence = reason2;
							}
							absentMarks2 = gradeDataSem2.substring(gradeDataSem2.indexOf("@") + 1,
									gradeDataSem2.indexOf(")"));
							if (!absentMarks2.equalsIgnoreCase("NA")) {
								totalAbsentMarks = totalAbsentMarks + Double.parseDouble(absentMarks2);
							}

							if (!result_final_sem2_std_flag && (reason1.equalsIgnoreCase("MG") || reason2.equalsIgnoreCase("MG"))) {
								divisor = divisor - ((totalAbsentMarks) / ((double) (subMaxMarks / divisor)));
							}
							else if (result_final_sem2_std_flag && reason2.equalsIgnoreCase("MG")) {
								divisor = divisor - ((totalAbsentMarks) / ((double) (subMaxMarks / divisor)));
							}
							
							if (marks1.equalsIgnoreCase("NA") || marks2.equalsIgnoreCase("NA")) {
								continue;
							}
							
							if(!result_final_sem2_std_flag) {
								avgMarks = (Double.parseDouble(marks1) + Double.parseDouble(marks2)) / divisor;
								avgMarks = Math.round(avgMarks);
								avgStr = avgMarks + "";
							}
							else {
								avgMarks = (Double.parseDouble(marks2)) / divisor;
								avgMarks = Math.round(avgMarks);
								avgStr = avgMarks + "";
							}
							
							Long L = Math.round(Double.parseDouble(avgStr));
							avgStr = Integer.valueOf(L.intValue()) + "";
							avgStr = avgMarks + "";
							if (!reasonForAbsence.equalsIgnoreCase("")) {
								avgStr = avgStr + "+" + reasonForAbsence + "+" + totalAbsentMarks + "~" + divisorToPass;
							}
						} else if (!gradeDataSem1.equalsIgnoreCase("NA") && !gradeDataSem2.equalsIgnoreCase("NA")
								&& grade_marks.equalsIgnoreCase("MARKS")) {
							if (!cm.validateNumber(gradeDataSem1)) {
								gradeDataSem1 = gradeDataSem1.substring(0, gradeDataSem1.indexOf("("));
							}
							if (!cm.validateNumber(gradeDataSem2)) {
								gradeDataSem2 = gradeDataSem2.substring(0, gradeDataSem2.indexOf("("));
							}
							avgMarks = (Double.parseDouble(gradeDataSem1) + Double.parseDouble(gradeDataSem2)) / 2.0;
							avgStr = avgMarks + "";
						} else if (!gradeDataSem1.equalsIgnoreCase("NA") && !gradeDataSem2.equalsIgnoreCase("NA")
								&& grade_marks.equalsIgnoreCase("GRADE") && exam.equalsIgnoreCase("Final")) {
							/*
							 * if(!cm.validateNumber(gradeDataSem1)){ gradeDataSem1 =
							 * gradeDataSem1.substring(0,gradeDataSem1.indexOf("(")); }
							 * if(!cm.validateNumber(gradeDataSem2)){ gradeDataSem2 =
							 * gradeDataSem2.substring(0,gradeDataSem2.indexOf("(")); }
							 */
							if(!result_final_sem2_std_flag) {
								avgMarks = (Double.parseDouble(marks1.substring(marks1.indexOf("+") + 1))
										+ Double.parseDouble(marks2.substring(marks2.indexOf("+") + 1))) / 2.0;
								avgStr = avgMarks + "";
							}
							else {
								if(marks2.contains("+")) {
									marks2 = marks2.substring(marks2.indexOf("+")+1);
								}
								avgStr = marks2 + "";
							}
						} else if (gradeDataSem2.equalsIgnoreCase("NA") && !gradeDataSem1.equalsIgnoreCase("NA")
								&& grade_marks.equalsIgnoreCase("GRADE") && exam.equalsIgnoreCase("Final")) {
							avgMarks = Double.parseDouble(marks1.substring(marks1.indexOf("+") + 1)) / 1.0;
							avgStr = avgMarks + "";
						} else if (gradeDataSem1.equalsIgnoreCase("NA") && !gradeDataSem2.equalsIgnoreCase("NA")
								&& grade_marks.equalsIgnoreCase("GRADE") && exam.equalsIgnoreCase("Final")) {
							avgMarks = Double.parseDouble(marks2.substring(marks2.indexOf("+") + 1)) / 1.0;
							avgStr = avgMarks + "";
						} else if (gradeDataSem1.equalsIgnoreCase("NA") && gradeDataSem2.equalsIgnoreCase("NA")) {
							avgStr = "NA";
						} else if (!gradeDataSem1.equalsIgnoreCase("NA") && gradeDataSem2.equalsIgnoreCase("NA")) {
							if (gradeDataSem1.contains("@")) {
								String reasonForAbsence = "NA";
								double totalAbsentMarks = 0.0;
//								divisor = 1.0;

								marks1 = gradeDataSem1.substring(0, gradeDataSem1.indexOf("("));
								passStatus1 = gradeDataSem1.substring(gradeDataSem1.indexOf("(") + 1,
										gradeDataSem1.indexOf("#"));
								reason1 = gradeDataSem1.substring(gradeDataSem1.indexOf("#") + 1,
										gradeDataSem1.indexOf("@"));
								if (!reasonForAbsence.equalsIgnoreCase("MG") && !reason1.equalsIgnoreCase("NA")) {
									reasonForAbsence = reason1;
								}
								absentMarks1 = gradeDataSem1.substring(gradeDataSem1.indexOf("@") + 1,
										gradeDataSem1.indexOf(")"));
								if (!absentMarks1.equalsIgnoreCase("NA")) {
									totalAbsentMarks = totalAbsentMarks + Double.parseDouble(absentMarks1);
								}

								avgMarks = (Double.parseDouble(marks1)) / divisor;// divisor is 1.0 as this subject is
																					// only for one sem
								avgMarks = Math.round(avgMarks);
								avgStr = avgMarks + "";

								Long L = Math.round(Double.parseDouble(avgStr));
								avgStr = Integer.valueOf(L.intValue()) + "";
								avgStr = avgMarks + "";
								if (!reasonForAbsence.equalsIgnoreCase("")) {
									avgStr = avgStr + "+" + reasonForAbsence + "+" + totalAbsentMarks + "~" + divisor;
								}
							} else {
								avgStr = gradeDataSem1;
							}
						} else if (!gradeDataSem2.equalsIgnoreCase("NA") && gradeDataSem1.equalsIgnoreCase("NA")) {
							if (gradeDataSem2.contains("@")) {
								String reasonForAbsence = "NA";
								double totalAbsentMarks = 0.0;
								divisor = 1.0;

								marks2 = gradeDataSem2.substring(0, gradeDataSem2.indexOf("("));
								passStatus2 = gradeDataSem2.substring(gradeDataSem2.indexOf("(") + 1,
										gradeDataSem2.indexOf("#"));
								reason2 = gradeDataSem2.substring(gradeDataSem2.indexOf("#") + 1,
										gradeDataSem2.indexOf("@"));
								if (!reasonForAbsence.equalsIgnoreCase("MG") && !reason2.equalsIgnoreCase("NA")) {
									reasonForAbsence = reason2;
								}
								absentMarks2 = gradeDataSem2.substring(gradeDataSem2.indexOf("@") + 1,
										gradeDataSem2.indexOf(")"));
								if (!absentMarks2.equalsIgnoreCase("NA")) {
									totalAbsentMarks = totalAbsentMarks + Double.parseDouble(absentMarks2);
								}

								avgMarks = (Double.parseDouble(marks2)) / divisor;// divisor is 1.0 as this subject is
																					// only for one sem
								avgMarks = Math.round(avgMarks);
								avgStr = avgMarks + "";

								Long L = Math.round(Double.parseDouble(avgStr));
								avgStr = Integer.valueOf(L.intValue()) + "";
								avgStr = avgMarks + "";
								if (!reasonForAbsence.equalsIgnoreCase("")) {
									avgStr = avgStr + "+" + reasonForAbsence + "+" + totalAbsentMarks + "~" + divisor;
								}
							} else {
								avgStr = gradeDataSem2;
							}
						}
						/*
						 * DecimalFormat df = new DecimalFormat("#"); avgMarks =
						 * Double.valueOf(df.format(avgMarks));
						 */
						if (!avgStr.equalsIgnoreCase("NA") && cm.validateNumber(avgStr)
								&& !exam.equalsIgnoreCase("Final")) {
							Long L = Math.round(Double.parseDouble(avgStr));
							avgStr = Integer.valueOf(L.intValue()) + "";
						}

						/*
						 * divisor = divisor - ((Double.parseDouble(absentForMarksSem2)) / ((double)
						 * (subMaxMarks/2))); divisor = divisor - ((Double.parseDouble(absentForMarks))
						 * / ((double) (subMaxMarks/2))); if(Integer.parseInt(marksWithReasonSem2) >=
						 * 0){ Long L = Math.round(((Double.parseDouble(marksWithReason) +
						 * Double.parseDouble(marksWithReasonSem2))/divisor)); avgMarks =
						 * Integer.valueOf(L.intValue()); // subMaxMarks = subMaxMarks -
						 * (Integer.parseInt(absentForMarksSem2)); passFail = reasonForAbsenceSem2; }
						 * else{ avgMarks = Integer.parseInt(marksWithReason); // subMaxMarks =
						 * subMaxMarks; passFail = reasonForAbsenceSem2; }
						 */
						if (exam.equalsIgnoreCase("Final")) {
							addToMapForFinal = addToMapForFinal + "|" + subjectTitle + "~" + avgStr;
						} else {
							addToMapForFinal = addToMapForFinal + "|" + subjectTitle + "~" + avgStr + ","
									+ gradeDataSem1 + "," + gradeDataSem2;
						}
						avgStr = "";
					}
					// studentResultMap.put(grNoDB, addToMap);
//					resultDataList.add(addToMapForFinal);
					finalResulData.put(grNoDB, addToMapForFinal.substring(1));
					gradeDataDB = "";
					addToMapForFinal = "";
				}
			}
			// /////////end of fetch result
			// list/////////////////////////////////////////////////////////////////
		} catch (Exception e) {
			cm.logException(e);
		}
		return finalResulData;
	}

	/////////// get max marks for
	/////////// subjectTitle////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findMaxMarksSubTitle(SessionData sessionData,
			String semester, String examType, String std, String subject, String academic) throws Exception {

		logger.info("=========findMaxMarksSubTitle Query============");
		String findQuery = "";
		String subCategory = "";
		String columns = "";
		double subjectTotal = 0.0;
		boolean findFlag = false;
		String maxSubMarks = "", subject_name, subject_title, optional, marks_grade, order_no;
		String dobs, dobs_ct, oral, oral_ct, obt, obt_ct, assign, assign_ct, write, write_ct, pract, pract_ct, pres,
				pres_ct, mcap, mcap_ct, activity, activity_ct, project, project_ct, other, other_ct, oral1, oral1_ct,
				pract1, pract1_ct, write1, write1_ct, listen, listen_ct, speak, speak_ct, assign1, assign1_ct, intot,
				intot_ct;
		String sem = "", semMap = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> maxMarksMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String condition = "";
		List semList = new ArrayList();

		if (semester.equalsIgnoreCase("Semester 1")) {
			sem = "SEM1";
			semMap = "sem1";
			semList.add(sem);
		} else if (semester.equalsIgnoreCase("Semester 2")) {
			sem = "SEM2";
			semMap = "sem2";
			semList.add(sem);
		} else {
			semList.add("SEM1");
			semList.add("SEM2");
		}

		if (!examType.equalsIgnoreCase("") && !subject.equalsIgnoreCase("All")) {
			subCategory = sem + "_" + examType;
			columns = subCategory + ",SUBJECT_NAME,SUBJECT_TITLE,OPTIONAL,MARKS_GRADE,ORDER_NO";
			condition = "SUBJECT_NAME='" + subject + "' AND";
		} else {
			columns = "*";
			condition = "";
		}

		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT " + "WHERE STD_1='" + std
					+ "' AND " + condition + " ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
					+ sessionData.getSectionName() + "')";

			logger.info("findYearList query : " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> marksDetailsMap = new LinkedHashMap<String, String>();
				subject_name = resultSet.getString("SUBJECT_NAME") == null ? " "
						: (resultSet.getString("SUBJECT_NAME").trim());
				marksDetailsMap.put("subject_name", subject_name);
				subject_title = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				marksDetailsMap.put("subject_title", subject_title);
				optional = resultSet.getString("OPTIONAL") == null ? " " : (resultSet.getString("OPTIONAL").trim());
				marksDetailsMap.put("optional", optional);
				marks_grade = resultSet.getString("MARKS_GRADE") == null ? " "
						: (resultSet.getString("MARKS_GRADE").trim());
				marksDetailsMap.put("marks_grade", marks_grade);
				order_no = resultSet.getString("ORDER_NO") == null ? " " : (resultSet.getString("ORDER_NO").trim());
				marksDetailsMap.put("order_no", order_no);

				for (int i = 0; i < semList.size(); i++) {

					sem = semList.get(i).toString();
					semMap = sem.toLowerCase();

					dobs = resultSet.getString(sem + "_DOBS") == null ? "0"
							: resultSet.getString(sem + "_DOBS").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_DOBS").trim());
					dobs_ct = resultSet.getString(sem + "_DOBS_CT") == null ? "0"
							: resultSet.getString(sem + "_DOBS_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_DOBS_CT").trim());
					obt = resultSet.getString(sem + "_OBT") == null ? "0"
							: resultSet.getString(sem + "_OBT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_OBT").trim());
					obt_ct = resultSet.getString(sem + "_OBT_CT") == null ? "0"
							: resultSet.getString(sem + "_OBT_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_OBT_CT").trim());
					oral = resultSet.getString(sem + "_ORAL") == null ? "0"
							: resultSet.getString(sem + "_ORAL").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ORAL").trim());
					oral_ct = resultSet.getString(sem + "_ORAL_CT") == null ? "0"
							: resultSet.getString(sem + "_ORAL_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ORAL_CT").trim());
					assign = resultSet.getString(sem + "_ASSIGN") == null ? "0"
							: resultSet.getString(sem + "_ASSIGN").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ASSIGN").trim());
					assign_ct = resultSet.getString(sem + "_ASSIGN_CT") == null ? "0"
							: resultSet.getString(sem + "_ASSIGN_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ASSIGN_CT").trim());
					write = resultSet.getString(sem + "_WRITE") == null ? "0"
							: resultSet.getString(sem + "_WRITE").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_WRITE").trim());
					write_ct = resultSet.getString(sem + "_WRITE_CT") == null ? "0"
							: resultSet.getString(sem + "_WRITE_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_WRITE_CT").trim());
					pract = resultSet.getString(sem + "_PRACT") == null ? "0"
							: resultSet.getString(sem + "_PRACT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PRACT").trim());
					pract_ct = resultSet.getString(sem + "_PRACT_CT") == null ? "0"
							: resultSet.getString(sem + "_PRACT_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PRACT_CT").trim());
					pres = resultSet.getString(sem + "_PRES") == null ? "0"
							: resultSet.getString(sem + "_PRES").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PRES").trim());
					pres_ct = resultSet.getString(sem + "_PRES_CT") == null ? "0"
							: resultSet.getString(sem + "_PRES_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PRES_CT").trim());
					mcap = resultSet.getString(sem + "_MCAP") == null ? "0"
							: resultSet.getString(sem + "_MCAP").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_MCAP").trim());
					mcap_ct = resultSet.getString(sem + "_MCAP_CT") == null ? "0"
							: resultSet.getString(sem + "_MCAP_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_MCAP_CT").trim());
					activity = resultSet.getString(sem + "_ACTIVITY") == null ? "0"
							: resultSet.getString(sem + "_ACTIVITY").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ACTIVITY").trim());
					activity_ct = resultSet.getString(sem + "_ACTIVITY_CT") == null ? "0"
							: resultSet.getString(sem + "_ACTIVITY_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ACTIVITY_CT").trim());
					project = resultSet.getString(sem + "_PROJECT") == null ? "0"
							: resultSet.getString(sem + "_PROJECT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PROJECT").trim());
					project_ct = resultSet.getString(sem + "_PROJECT_CT") == null ? "0"
							: resultSet.getString(sem + "_PROJECT_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PROJECT_CT").trim());
					other = resultSet.getString(sem + "_OTHER") == null ? "0"
							: resultSet.getString(sem + "_OTHER").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_OTHER").trim());
					other_ct = resultSet.getString(sem + "_OTHER_CT") == null ? "0"
							: resultSet.getString(sem + "_OTHER_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_OTHER_CT").trim());
					oral1 = resultSet.getString(sem + "_ORAL1") == null ? "0"
							: resultSet.getString(sem + "_ORAL1").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ORAL1").trim());
					oral1_ct = resultSet.getString(sem + "_ORAL1_CT") == null ? "0"
							: resultSet.getString(sem + "_ORAL1_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ORAL1_CT").trim());
					pract1 = resultSet.getString(sem + "_PRACT1") == null ? "0"
							: resultSet.getString(sem + "_PRACT1").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PRACT1").trim());
					pract1_ct = resultSet.getString(sem + "_PRACT1_CT") == null ? "0"
							: resultSet.getString(sem + "_PRACT1_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_PRACT1_CT").trim());
					write1 = resultSet.getString(sem + "_WRITE1") == null ? "0"
							: resultSet.getString(sem + "_WRITE1").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_WRITE1").trim());
					write1_ct = resultSet.getString(sem + "_WRITE1_CT") == null ? "0"
							: resultSet.getString(sem + "_WRITE1_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_WRITE1_CT").trim());
					listen = resultSet.getString(sem + "_LISTEN") == null ? "0"
							: resultSet.getString(sem + "_LISTEN").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_LISTEN").trim());
					listen_ct = resultSet.getString(sem + "_LISTEN_CT") == null ? "0"
							: resultSet.getString(sem + "_LISTEN_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_LISTEN_CT").trim());
					speak = resultSet.getString(sem + "_SPEAK") == null ? "0"
							: resultSet.getString(sem + "_SPEAK").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_SPEAK").trim());
					speak_ct = resultSet.getString(sem + "_SPEAK_CT") == null ? "0"
							: resultSet.getString(sem + "_SPEAK_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_SPEAK_CT").trim());
					assign1 = resultSet.getString(sem + "_ASSIGN1") == null ? "0"
							: resultSet.getString(sem + "_ASSIGN1").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ASSIGN1").trim());
					assign1_ct = resultSet.getString(sem + "_ASSIGN1_CT") == null ? "0"
							: resultSet.getString(sem + "_ASSIGN1_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_ASSIGN1_CT").trim());
					intot = resultSet.getString(sem + "_INTOT") == null ? "0"
							: resultSet.getString(sem + "_INTOT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_INTOT").trim());
					intot_ct = resultSet.getString(sem + "_INTOT_CT") == null ? "0"
							: resultSet.getString(sem + "_INTOT_CT").equalsIgnoreCase("null") ? "0"
									: (resultSet.getString(sem + "_INTOT_CT").trim());

					if (maxMarksMap.get(subject_title) == null) {
						subjectTotal = Double.parseDouble(dobs_ct);
						subjectTotal = subjectTotal + Double.parseDouble(obt_ct);
						subjectTotal = subjectTotal + Double.parseDouble(oral_ct);
						subjectTotal = subjectTotal + Double.parseDouble(assign_ct);
						subjectTotal = subjectTotal + Double.parseDouble(write_ct);
						subjectTotal = subjectTotal + Double.parseDouble(pract_ct);
						subjectTotal = subjectTotal + Double.parseDouble(pres_ct);
						subjectTotal = subjectTotal + Double.parseDouble(mcap_ct);
						subjectTotal = subjectTotal + Double.parseDouble(activity_ct);
						subjectTotal = subjectTotal + Double.parseDouble(project_ct);
						subjectTotal = subjectTotal + Double.parseDouble(other_ct);
						subjectTotal = subjectTotal + Double.parseDouble(oral1_ct);
						subjectTotal = subjectTotal + Double.parseDouble(pract1_ct);
						subjectTotal = subjectTotal + Double.parseDouble(write1_ct);
						subjectTotal = subjectTotal + Double.parseDouble(listen_ct);
						subjectTotal = subjectTotal + Double.parseDouble(speak_ct);
						subjectTotal = subjectTotal + Double.parseDouble(assign1_ct);
						marksDetailsMap.put(semMap + "_" + subject_title + "_total", subjectTotal + "");

						marksDetailsMap.put(semMap + "_dobs", dobs);
						marksDetailsMap.put(semMap + "_dobs_ct", dobs_ct);
						marksDetailsMap.put(semMap + "_obt", obt);
						marksDetailsMap.put(semMap + "_obt_ct", obt_ct);
						marksDetailsMap.put(semMap + "_oral", oral);
						marksDetailsMap.put(semMap + "_oral_ct", oral_ct);
						marksDetailsMap.put(semMap + "_assign", assign);
						marksDetailsMap.put(semMap + "_assign_ct", assign_ct);
						marksDetailsMap.put(semMap + "_write", write);
						marksDetailsMap.put(semMap + "_write_ct", write_ct);
						marksDetailsMap.put(semMap + "_pract", pract);
						marksDetailsMap.put(semMap + "_pract_ct", pract_ct);
						marksDetailsMap.put(semMap + "_pres", pres);
						marksDetailsMap.put(semMap + "_pres_ct", pres_ct);
						marksDetailsMap.put(semMap + "_mcap", mcap);
						marksDetailsMap.put(semMap + "_mcap_ct", mcap_ct);
						marksDetailsMap.put(semMap + "_activity", activity);
						marksDetailsMap.put(semMap + "_activity_ct", activity_ct);
						marksDetailsMap.put(semMap + "_project", project);
						marksDetailsMap.put(semMap + "_project_ct", project_ct);
						marksDetailsMap.put(semMap + "_other", other);
						marksDetailsMap.put(semMap + "_other_ct", other_ct);
						marksDetailsMap.put(semMap + "_oral1", oral1);
						marksDetailsMap.put(semMap + "_oral1_ct", oral1_ct);
						marksDetailsMap.put(semMap + "_pract1", pract1);
						marksDetailsMap.put(semMap + "_pract1_ct", pract1_ct);
						marksDetailsMap.put(semMap + "_write1", write1);
						marksDetailsMap.put(semMap + "_write1_ct", write1_ct);

						marksDetailsMap.put(semMap + "_listen", listen);
						marksDetailsMap.put(semMap + "_listen_ct", listen_ct);
						marksDetailsMap.put(semMap + "_speak", speak);
						marksDetailsMap.put(semMap + "_speak_ct", speak_ct);
						marksDetailsMap.put(semMap + "_assign1", assign1);
						marksDetailsMap.put(semMap + "_assign1_ct", assign1_ct);
						marksDetailsMap.put(semMap + "_intot", intot);
						marksDetailsMap.put(semMap + "_intot_ct", intot_ct);
					} else {
						marksDetailsMap = maxMarksMap.get(subject_title);
						subjectTotal = (Double
								.parseDouble(marksDetailsMap.get(semMap + "_" + subject_title + "_total") + "")
								+ Double.parseDouble(dobs_ct));
						subjectTotal = subjectTotal + Double.parseDouble(obt_ct);
						subjectTotal = subjectTotal + Double.parseDouble(oral_ct);
						subjectTotal = subjectTotal + Double.parseDouble(assign_ct);
						subjectTotal = subjectTotal + Double.parseDouble(write_ct);
						subjectTotal = subjectTotal + Double.parseDouble(pract_ct);
						subjectTotal = subjectTotal + Double.parseDouble(pres_ct);
						subjectTotal = subjectTotal + Double.parseDouble(mcap_ct);
						subjectTotal = subjectTotal + Double.parseDouble(activity_ct);
						subjectTotal = subjectTotal + Double.parseDouble(project_ct);
						subjectTotal = subjectTotal + Double.parseDouble(other_ct);
						subjectTotal = subjectTotal + Double.parseDouble(oral1_ct);
						subjectTotal = subjectTotal + Double.parseDouble(pract1_ct);
						subjectTotal = subjectTotal + Double.parseDouble(write1_ct);
						subjectTotal = subjectTotal + Double.parseDouble(listen_ct);
						subjectTotal = subjectTotal + Double.parseDouble(speak_ct);
						subjectTotal = subjectTotal + Double.parseDouble(assign1_ct);
						marksDetailsMap.put(semMap + "_" + subject_title + "_total", subjectTotal + "");

						marksDetailsMap
								.put(semMap + "_dobs",
										(String.format("%.0f",
												Double.parseDouble(dobs)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_dobs")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_dobs_ct",
										(String.format("%.0f",
												Double.parseDouble(dobs_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_dobs_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_obt",
										(String.format("%.0f",
												Double.parseDouble(obt)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_obt")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_obt_ct",
										(String.format("%.0f",
												Double.parseDouble(obt_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_obt_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_oral",
										(String.format("%.0f",
												Double.parseDouble(oral)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_oral")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_oral_ct",
										(String.format("%.0f",
												Double.parseDouble(oral_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_oral_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_assign",
										(String.format("%.0f",
												Double.parseDouble(assign)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_assign")))
												+ ""));
						marksDetailsMap.put(semMap + "_assign_ct",
								(String.format("%.0f",
										Double.parseDouble(assign_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_assign_ct")))
										+ ""));
						marksDetailsMap
								.put(semMap + "_write",
										(String.format("%.0f",
												Double.parseDouble(write)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_write")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_write_ct",
										(String.format("%.0f",
												Double.parseDouble(write_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_write_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_pract",
										(String.format("%.0f",
												Double.parseDouble(pract)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_pract")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_pract_ct",
										(String.format("%.0f",
												Double.parseDouble(pract_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_pract_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_pres",
										(String.format("%.0f",
												Double.parseDouble(pres)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_pres")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_pres_ct",
										(String.format("%.0f",
												Double.parseDouble(pres_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_pres_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_mcap",
										(String.format("%.0f",
												Double.parseDouble(mcap)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_mcap")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_mcap_ct",
										(String.format("%.0f",
												Double.parseDouble(mcap_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_mcap_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_activity",
										(String.format("%.0f",
												Double.parseDouble(activity)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_activity")))
												+ ""));
						marksDetailsMap.put(semMap + "_activity_ct",
								(String.format("%.0f",
										Double.parseDouble(activity_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_activity_ct")))
										+ ""));
						marksDetailsMap
								.put(semMap + "_project",
										(String.format("%.0f",
												Double.parseDouble(project)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_project")))
												+ ""));
						marksDetailsMap.put(semMap + "_project_ct",
								(String.format("%.0f",
										Double.parseDouble(project_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_project_ct")))
										+ ""));
						marksDetailsMap
								.put(semMap + "_other",
										(String.format("%.0f",
												Double.parseDouble(other)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_other")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_other_ct",
										(String.format("%.0f",
												Double.parseDouble(other_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_other_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_oral1",
										(String.format("%.0f",
												Double.parseDouble(oral1)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_oral1")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_oral1_ct",
										(String.format("%.0f",
												Double.parseDouble(oral1_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_oral1_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_pract1",
										(String.format("%.0f",
												Double.parseDouble(pract1)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_pract1")))
												+ ""));
						marksDetailsMap.put(semMap + "_pract1_ct",
								(String.format("%.0f",
										Double.parseDouble(pract1_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_pract1_ct")))
										+ ""));
						marksDetailsMap
								.put(semMap + "_write1",
										(String.format("%.0f",
												Double.parseDouble(write1)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_write1")))
												+ ""));
						marksDetailsMap.put(semMap + "_write1_ct",
								(String.format("%.0f",
										Double.parseDouble(write1_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_write1_ct")))
										+ ""));

						marksDetailsMap
								.put(semMap + "_listen",
										(String.format("%.0f",
												Double.parseDouble(listen)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_listen")))
												+ ""));
						marksDetailsMap.put(semMap + "_listen_ct",
								(String.format("%.0f",
										Double.parseDouble(listen_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_listen_ct")))
										+ ""));
						marksDetailsMap
								.put(semMap + "_speak",
										(String.format("%.0f",
												Double.parseDouble(speak)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_speak")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_speak_ct",
										(String.format("%.0f",
												Double.parseDouble(speak_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_speak_ct")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_assign1",
										(String.format("%.0f",
												Double.parseDouble(assign1)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_assign1")))
												+ ""));
						marksDetailsMap.put(semMap + "_assign1_ct",
								(String.format("%.0f",
										Double.parseDouble(assign1_ct)
												+ Double.parseDouble(marksDetailsMap.get(semMap + "_assign1_ct")))
										+ ""));
						marksDetailsMap
								.put(semMap + "_intot",
										(String.format("%.0f",
												Double.parseDouble(intot)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_intot")))
												+ ""));
						marksDetailsMap
								.put(semMap + "_intot_ct",
										(String.format("%.0f",
												Double.parseDouble(intot_ct)
														+ Double.parseDouble(marksDetailsMap.get(semMap + "_intot_ct")))
												+ ""));
					}
				}
				maxMarksMap.put(subject_title, marksDetailsMap);
				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return maxMarksMap;
	}

	/////////// get max marks for subject////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findMaxMarks(SessionData sessionData, String semester,
			String examType, String std, String subject, String academic) throws Exception {

		logger.info("=========findMaxMarks Query============");
		String findQuery = "";
		String subCategory = "";
		String columns = "";
		boolean findFlag = false;
		String maxSubMarks = "", subject_name, subject_title, optional, marks_grade, order_no;
		String dobs, dobs_ct, oral, oral_ct, obt, obt_ct, assign, assign_ct, write, write_ct, pract, pract_ct, pres,
				pres_ct, mcap, mcap_ct, activity, activity_ct, project, project_ct, other, other_ct, oral1, oral1_ct,
				pract1, pract1_ct, write1, write1_ct, listen, listen_ct, speak, speak_ct, assign1, assign1_ct, intot,
				intot_ct;
		String sem = "", semMap = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> maxMarksMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String condition = "";
		List semList = new ArrayList();

		if (semester.equalsIgnoreCase("Semester 1")) {
			sem = "SEM1";
			semMap = "sem1";
			semList.add(sem);
		} else if (semester.equalsIgnoreCase("Semester 2")) {
			sem = "SEM2";
			semMap = "sem2";
			semList.add(sem);
		} else {
			semList.add("SEM1");
			semList.add("SEM2");
		}

		if (!examType.equalsIgnoreCase("") && !subject.equalsIgnoreCase("All")) {
			subCategory = sem + "_" + examType;
			columns = subCategory + ",SUBJECT_NAME,SUBJECT_TITLE,OPTIONAL,MARKS_GRADE,ORDER_NO";
			condition = "SUBJECT_NAME='" + subject + "' AND";
		} else {
			columns = "*";
			condition = "";
		}

		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT " + "WHERE STD_1='" + std
					+ "' AND " + condition + " ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
					+ sessionData.getSectionName() + "')";

			logger.info("findYearList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> marksDetailsMap = new LinkedHashMap<String, String>();
				subject_name = resultSet.getString("SUBJECT_NAME") == null ? " "
						: (resultSet.getString("SUBJECT_NAME").trim());
				marksDetailsMap.put("subject_name", subject_name);
				subject_title = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				marksDetailsMap.put("subject_title", subject_title);
				optional = resultSet.getString("OPTIONAL") == null ? " " : (resultSet.getString("OPTIONAL").trim());
				marksDetailsMap.put("optional", optional);
				marks_grade = resultSet.getString("MARKS_GRADE") == null ? " "
						: (resultSet.getString("MARKS_GRADE").trim());
				marksDetailsMap.put("marks_grade", marks_grade);
				order_no = resultSet.getString("ORDER_NO") == null ? " " : (resultSet.getString("ORDER_NO").trim());
				marksDetailsMap.put("order_no", order_no);

				for (int i = 0; i < semList.size(); i++) {

					sem = semList.get(i).toString();
					semMap = sem.toLowerCase();

					dobs = resultSet.getString(sem + "_DOBS") == null ? "0"
							: (resultSet.getString(sem + "_DOBS").trim());
					marksDetailsMap.put(semMap + "_dobs", dobs);
					dobs_ct = resultSet.getString(sem + "_DOBS_CT") == null ? "0"
							: (resultSet.getString(sem + "_DOBS_CT").trim());
					marksDetailsMap.put(semMap + "_dobs_ct", dobs_ct);
					obt = resultSet.getString(sem + "_OBT") == null ? "0" : (resultSet.getString(sem + "_OBT").trim());
					marksDetailsMap.put(semMap + "_obt", obt);
					obt_ct = resultSet.getString(sem + "_OBT_CT") == null ? "0"
							: (resultSet.getString(sem + "_OBT_CT").trim());
					marksDetailsMap.put(semMap + "_obt_ct", obt_ct);
					oral = resultSet.getString(sem + "_ORAL") == null ? "0"
							: (resultSet.getString(sem + "_ORAL").trim());
					marksDetailsMap.put(semMap + "_oral", oral);
					oral_ct = resultSet.getString(sem + "_ORAL_CT") == null ? "0"
							: (resultSet.getString(sem + "_ORAL_CT").trim());
					marksDetailsMap.put(semMap + "_oral_ct", oral_ct);
					assign = resultSet.getString(sem + "_ASSIGN") == null ? "0"
							: (resultSet.getString(sem + "_ASSIGN").trim());
					marksDetailsMap.put(semMap + "_assign", assign);
					assign_ct = resultSet.getString(sem + "_ASSIGN_CT") == null ? "0"
							: (resultSet.getString(sem + "_ASSIGN_CT").trim());
					marksDetailsMap.put(semMap + "_assign_ct", assign_ct);
					write = resultSet.getString(sem + "_WRITE") == null ? "0"
							: (resultSet.getString(sem + "_WRITE").trim());
					marksDetailsMap.put(semMap + "_write", write);
					write_ct = resultSet.getString(sem + "_WRITE_CT") == null ? "0"
							: (resultSet.getString(sem + "_WRITE_CT").trim());
					marksDetailsMap.put(semMap + "_write_ct", write_ct);
					pract = resultSet.getString(sem + "_PRACT") == null ? "0"
							: (resultSet.getString(sem + "_PRACT").trim());
					marksDetailsMap.put(semMap + "_pract", pract);
					pract_ct = resultSet.getString(sem + "_PRACT_CT") == null ? "0"
							: (resultSet.getString(sem + "_PRACT_CT").trim());
					marksDetailsMap.put(semMap + "_pract_ct", pract_ct);
					pres = resultSet.getString(sem + "_PRES") == null ? "0"
							: (resultSet.getString(sem + "_PRES").trim());
					marksDetailsMap.put(semMap + "_pres", pres);
					pres_ct = resultSet.getString(sem + "_PRES_CT") == null ? "0"
							: (resultSet.getString(sem + "_PRES_CT").trim());
					marksDetailsMap.put(semMap + "_pres_ct", pres_ct);
					mcap = resultSet.getString(sem + "_MCAP") == null ? "0"
							: (resultSet.getString(sem + "_MCAP").trim());
					marksDetailsMap.put(semMap + "_mcap", mcap);
					mcap_ct = resultSet.getString(sem + "_MCAP_CT") == null ? "0"
							: (resultSet.getString(sem + "_MCAP_CT").trim());
					marksDetailsMap.put(semMap + "_mcap_ct", mcap_ct);
					activity = resultSet.getString(sem + "_ACTIVITY") == null ? "0"
							: (resultSet.getString(sem + "_ACTIVITY").trim());
					marksDetailsMap.put(semMap + "_activity", activity);
					activity_ct = resultSet.getString(sem + "_ACTIVITY_CT") == null ? "0"
							: (resultSet.getString(sem + "_ACTIVITY_CT").trim());
					marksDetailsMap.put(semMap + "_activity_ct", activity_ct);
					project = resultSet.getString(sem + "_PROJECT") == null ? "0"
							: (resultSet.getString(sem + "_PROJECT").trim());
					marksDetailsMap.put(semMap + "_project", project);
					project_ct = resultSet.getString(sem + "_PROJECT_CT") == null ? "0"
							: (resultSet.getString(sem + "_PROJECT_CT").trim());
					marksDetailsMap.put(semMap + "_project_ct", project_ct);
					other = resultSet.getString(sem + "_OTHER") == null ? "0"
							: (resultSet.getString(sem + "_OTHER").trim());
					marksDetailsMap.put(semMap + "_other", other);
					other_ct = resultSet.getString(sem + "_OTHER_CT") == null ? "0"
							: (resultSet.getString(sem + "_OTHER_CT").trim());
					marksDetailsMap.put(semMap + "_other_ct", other_ct);
					oral1 = resultSet.getString(sem + "_ORAL1") == null ? "0"
							: (resultSet.getString(sem + "_ORAL1").trim());
					marksDetailsMap.put(semMap + "_oral1", oral1);
					oral1_ct = resultSet.getString(sem + "_ORAL1_CT") == null ? "0"
							: (resultSet.getString(sem + "_ORAL1_CT").trim());
					marksDetailsMap.put(semMap + "_oral1_ct", oral1_ct);
					pract1 = resultSet.getString(sem + "_PRACT1") == null ? "0"
							: (resultSet.getString(sem + "_PRACT1").trim());
					marksDetailsMap.put(semMap + "_pract1", pract1);
					pract1_ct = resultSet.getString(sem + "_PRACT1_CT") == null ? "0"
							: (resultSet.getString(sem + "_PRACT1_CT").trim());
					marksDetailsMap.put(semMap + "_pract1_ct", pract1_ct);
					write1 = resultSet.getString(sem + "_WRITE1") == null ? "0"
							: (resultSet.getString(sem + "_WRITE1").trim());
					marksDetailsMap.put(semMap + "_write1", write1);
					write1_ct = resultSet.getString(sem + "_WRITE1_CT") == null ? "0"
							: (resultSet.getString(sem + "_WRITE1_CT").trim());
					marksDetailsMap.put(semMap + "_write1_ct", write1_ct);

					listen = resultSet.getString(sem + "_LISTEN") == null ? "0"
							: (resultSet.getString(sem + "_LISTEN").trim());
					marksDetailsMap.put(semMap + "_listen", listen);
					listen_ct = resultSet.getString(sem + "_LISTEN_CT") == null ? "0"
							: (resultSet.getString(sem + "_LISTEN_CT").trim());
					marksDetailsMap.put(semMap + "_listen_ct", listen_ct);
					speak = resultSet.getString(sem + "_SPEAK") == null ? "0"
							: (resultSet.getString(sem + "_SPEAK").trim());
					marksDetailsMap.put(semMap + "_speak", speak);
					speak_ct = resultSet.getString(sem + "_SPEAK_CT") == null ? "0"
							: (resultSet.getString(sem + "_SPEAK_CT").trim());
					marksDetailsMap.put(semMap + "_speak_ct", speak_ct);
					assign1 = resultSet.getString(sem + "_ASSIGN1") == null ? "0"
							: (resultSet.getString(sem + "_ASSIGN1").trim());
					marksDetailsMap.put(semMap + "_assign1", assign1);
					assign1_ct = resultSet.getString(sem + "_ASSIGN1_CT") == null ? "0"
							: (resultSet.getString(sem + "_ASSIGN1_CT").trim());
					marksDetailsMap.put(semMap + "_assign1_ct", assign1_ct);
					intot = resultSet.getString(sem + "_INTOT") == null ? "0"
							: (resultSet.getString(sem + "_INTOT").trim());
					marksDetailsMap.put(semMap + "_intot", intot);
					intot_ct = resultSet.getString(sem + "_INTOT_CT") == null ? "0"
							: (resultSet.getString(sem + "_INTOT_CT").trim());
					marksDetailsMap.put(semMap + "_intot_ct", intot_ct);
				}

				maxMarksMap.put(subject_name, marksDetailsMap);
				findFlag = true;
			}

			logger.info("findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return maxMarksMap;
	}

	// update result data
	public boolean updateResult(SessionData sessionData, String academic, String std, String div, String exam,
			String section, String lastName, String firstName, String fatherName) throws Exception {

		logger.info("=========updateResult Query============");
		String findQuery = "";
		String subjectTitleDB = "";
		String subjectNameDB = "";
		String optionalStatusDB = "";
		String marksGradeDB = "";
		String groupNameDB = "";
		String subjectMarksRetrive = "";
		String lvExam = "";
		String subjectAndMarksDB = "";
		String prevSubjectTitle = "";
		String prevSubjectName = "";
		String grNo = "", suid = "", promoteDiv = div;
		int stdInt = cm.RomanToInteger(std);
		String optionalSubject = "";
		List<String> optionalSubjectList = new ArrayList<String>();
		String semester = "";
		String remark = "";
		boolean isGroupingNeeded = false;
		boolean resultUpdateFlag = false;
		TreeMap subjectOptionMap = new TreeMap();
		Map<String, String> subjectOptionMapOrder = new LinkedHashMap<String, String>();
		TreeMap subjectTitleMap = new TreeMap();
		Map<String, String> compSubjectMap = new HashMap<String, String>();
		TreeMap subjectDetailMap = new TreeMap();
		TreeMap marskInAscending = new TreeMap();//// sort grace required
		TreeMap subjectGroupMap = new TreeMap();
		TreeMap subjectGroupCount = new TreeMap();
		TreeMap studentMarksMap = new TreeMap();
		Map<String, String> studentMarksMapOrder = new LinkedHashMap<String, String>();
		TreeMap subjectReasonMap = new TreeMap();
		TreeMap maxMarksMap = new TreeMap();
		Map<String, String> maxMarksMapOrder = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> subjectSemMap = new LinkedHashMap<String, Double>();
		TreeMap subjectMarksMap = new TreeMap();
		TreeMap studentMarksFinalMap = new TreeMap();
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
//		List<String> studentResultFinal = new ArrayList<String>();
		String maxMarks = "";
		String sem1MaxMarks = "0";
		String sem2MaxMarks = "0";
		String subjectTitle = "";
		String updateResultQuery = "";
		String updateGrade = "";
		String semesterGrade = "";
		double semesterMarks = 0.0;
		double semesterSum = 0.0;
		double totalMarks = 0.0;
		String graceInTotal = "";
		double semesterPercent = 0.0;
		boolean calculateMarks = true;
		boolean isComposite = false;
		double maxGracePerSubject = 0.0;
		int k = 0;
		String grFinal = "";
		String resultFinal = "";
		boolean isResultUpdated = true;
		String subjectTitleError = "";
		String result_filter_gp = sessionData.getConfigMap().get("RESULT_FILTER_GP");
		boolean marks_flag_std = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_MARKS_"+std.replaceAll(" ", "_")));
		boolean result_final_sem2_std_flag = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_FINAL_SEM2_"+std.replaceAll(" ", "_")));
		boolean process_lc_student = false;
		screenWidth = cm.screeWidth();
		screenHeight = cm.screeHeight();
		mainCentre = (screenWidth - 150) / 2;
		int reply = 0;

		if (sessionData.getConfigMap().get("PROCESS_LC_STUDENT") != null) {
			process_lc_student = Boolean.parseBoolean(sessionData.getConfigMap().get("PROCESS_LC_STUDENT"));
		}

		try {
			String insertMarksTotalCoulmn = "ALTER TABLE " + sessionData.getDBName() + "."
					+ "RESULT_DATA ADD (SEM1_MARKS  TEXT,SEM2_MARKS  TEXT,FINAL_MARKS  TEXT,"
					+ "SEM1_TOTAL  TEXT,SEM2_TOTAL  TEXT,FINAL_TOTAL  TEXT)";
			logger.info("insert marks total Column query == " + insertMarksTotalCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(insertMarksTotalCoulmn);
		} catch (Exception e) {
			logger.error("failed to add marks total column in Result_Data table >>> " + e);
		}

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName() + "."
					+ "RESULT_DATA ADD (SEM1_REMARK  TEXT,SEM2_REMARK  TEXT,FINAL_REMARK  TEXT)";
			statement = connection.createStatement();
			logger.info(statement.executeUpdate(insertCoulmn));
		} catch (Exception e) {
			logger.warn("failed to modify varchar size Column query in SMS_DATA table >>> " + e);
		}

		/// modify varchar size of column
		try {
			String modifyVarcharSizeCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".RESULT_DATA  MODIFY COLUMN SEM1_RESULT VARCHAR(100), "
					+ "MODIFY COLUMN SEM2_RESULT VARCHAR(100), MODIFY COLUMN FINAL_RESULT VARCHAR(100), MODIFY COLUMN SEM1_IMPROVE VARCHAR(300), "
					+ "MODIFY COLUMN SEM2_IMPROVE VARCHAR(300), MODIFY COLUMN FINAL_IMPROVE VARCHAR(300),"
					+ "MODIFY COLUMN SEM1_PERCENT VARCHAR(10),MODIFY COLUMN SEM2_PERCENT VARCHAR(10),"
					+ "MODIFY COLUMN FINAL_PERCENT VARCHAR(10)";
			logger.info("modify varchar size Column query == " + modifyVarcharSizeCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(modifyVarcharSizeCoulmn);
		} catch (Exception e) {
			logger.error("failed to modify varchar size Column query in Result_Data table >>> " + e);
		}

		if (exam.equalsIgnoreCase("Semester 1")) {
			lvExam = "_FTOT";
			semester = "SEM1";
		} else if (exam.equalsIgnoreCase("Semester 2")) {
			lvExam = "_STOT";
			semester = "SEM2";
		} else if (exam.equalsIgnoreCase("Final")) {
			semester = "FINAL";
		}

		studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);

		try {
			maxGracePerSubject = Double
					.parseDouble(sessionData.getConfigMap().get("MAXGRACEPERSUBJECT_" + sessionData.getAppType()));
			isGroupingNeeded = Boolean.parseBoolean(sessionData.getConfigMap().get("RESULT_SUB_GROUP_" + semester));
			//// insert new students into result data
			String grNew, rollNew, firstNew, lastNew, fatherNew, divNew = null;
			String newStudentInResult = "SELECT GR_NO,ROLL_NO,FIRST_NAME,LAST_NAME,FATHER_NAME FROM "
					+ sessionData.getDBName() + "." + "MARKS_ENTRY " + "WHERE GR_NO NOT IN (SELECT GR_NO FROM "
					+ sessionData.getDBName() + "." + "RESULT_DATA " + "WHERE STD_1='" + std + "' AND DIV_1='" + div
					+ "' AND ACADEMIC_YEAR='" + academic + "' AND RESULT_DATA.SECTION_NM='"
					+ sessionData.getSectionName() + "') AND STD_1='" + std + "' " + "AND DIV_1='" + div
					+ "' AND ACADEMIC_YEAR='" + academic + "' AND MARKS_ENTRY.SECTION_NM='"
					+ sessionData.getSectionName() + "'";
			logger.info("newStudentInResult == " + newStudentInResult);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentInResult);

			while (resultSet.next()) {
				grNew = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				rollNew = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNew.equalsIgnoreCase("")) {
					rollNew = "1";
				}
				firstNew = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim());
				lastNew = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				fatherNew = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());

				if (studentLCMap.containsKey(grNew)) {
					continue;
				}
				String updateNewResult = "INSERT INTO " + sessionData.getDBName() + ".RESULT_DATA "
						+ "(GR_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,ROLL_NO,"
						+ "STD_1,DIV_1,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES ('" + grNew + "','"
						+ lastNew.trim().toUpperCase() + "','" + firstNew.trim().toUpperCase() + "','"
						+ fatherNew.trim().toUpperCase() + "','" + rollNew.trim().toUpperCase() + "','" + std + "','"
						+ div + "','" + academic + "',SYSDATE(),'" + sessionData.getUserName() + "','"
						+ section.trim().toUpperCase() + "')";

				logger.info("updateNewResult query===>" + updateNewResult);
				statement = connection.createStatement();
				statement.executeUpdate(updateNewResult);
			}

			///////////////// insert in result data ends
			///// get subject title max marks///////////////
			String maxMarksQuery = "";
			if (!semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
				maxMarksQuery = "SELECT SUBJECT_TITLE,SUM(IF(" + semester + "_DOBS_CT>=0, " + semester
						+ "_DOBS_CT, 0)) + " + "SUM(IF(" + semester + "_OBT_CT>=0, " + semester
						+ "_OBT_CT, 0)) + SUM(IF(" + semester + "_ORAL_CT>=0, " + semester + "_ORAL_CT, 0)) + "
						+ "SUM(IF(" + semester + "_ASSIGN_CT>=0, " + semester + "_ASSIGN_CT, 0)) + SUM(IF(" + semester
						+ "_WRITE_CT>=0, " + semester + "_WRITE_CT, 0)) + " + "SUM(IF(" + semester + "_PRACT_CT>=0, "
						+ semester + "_PRACT_CT, 0)) + SUM(IF(" + semester + "_WRITE1_CT>=0, " + semester
						+ "_WRITE1_CT, 0)) + " + "SUM(IF(" + semester + "_PRES_CT>=0, " + semester
						+ "_PRES_CT, 0)) + SUM(IF(" + semester + "_MCAP_CT>=0, " + semester + "_MCAP_CT, 0)) + "
						+ "SUM(IF(" + semester + "_ACTIVITY_CT>=0, " + semester + "_ACTIVITY_CT, 0)) + SUM(IF("
						+ semester + "_PROJECT_CT>=0, " + semester + "_PROJECT_CT, 0)) + " + "SUM(IF(" + semester
						+ "_OTHER_CT>=0, " + semester + "_OTHER_CT, 0)) + SUM(IF(" + semester + "_ORAL1_CT>=0, "
						+ semester + "_ORAL1_CT, 0)) + " + "SUM(IF(" + semester + "_PRACT1_CT>=0, " + semester
						+ "_PRACT1_CT, 0)) + SUM(IF(" + semester + "_LISTEN_CT>=0, " + semester + "_LISTEN_CT, 0)) + "
						+ "SUM(IF(" + semester + "_SPEAK_CT>=0, " + semester + "_SPEAK_CT, 0)) + SUM(IF(" + semester
						+ "_ASSIGN1_CT>=0, " + semester + "_ASSIGN1_CT, 0)) AS " + semester + "_MAX_MARKS,ORDER_NO "
						+ "FROM " + sessionData.getDBName() + "." + "subject_allotment WHERE STD_1='" + std
						+ "' AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='" + sessionData.getSectionName()
						+ "') GROUP BY  SUBJECT_TITLE,ORDER_NO ORDER BY ORDER_NO ASC";
			} else if (!semester.equalsIgnoreCase("FINAL")) {
				maxMarksQuery = "SELECT SUBJECT_TITLE,SUM(IF(" + semester + "_DOBS>=0, " + semester + "_DOBS, 0)) + "
						+ "SUM(IF(" + semester + "_OBT>=0, " + semester + "_OBT, 0)) + SUM(IF(" + semester
						+ "_ORAL>=0, " + semester + "_ORAL, 0)) + " + "SUM(IF(" + semester + "_ASSIGN>=0, " + semester
						+ "_ASSIGN, 0)) + SUM(IF(" + semester + "_WRITE>=0, " + semester + "_WRITE, 0)) + " + "SUM(IF("
						+ semester + "_PRACT>=0, " + semester + "_PRACT, 0)) + SUM(IF(" + semester + "_WRITE1>=0, "
						+ semester + "_WRITE1, 0)) + " + "SUM(IF(" + semester + "_PRES>=0, " + semester
						+ "_PRES, 0))+ SUM(IF(" + semester + "_MCAP>=0, " + semester + "_MCAP, 0)) + " + "SUM(IF("
						+ semester + "_ACTIVITY>=0, " + semester + "_ACTIVITY, 0))+ SUM(IF(" + semester
						+ "_PROJECT>=0, " + semester + "_PROJECT, 0)) + " + "SUM(IF(" + semester + "_OTHER>=0, "
						+ semester + "_OTHER, 0))+ SUM(IF(" + semester + "_ORAL1>=0, " + semester + "_ORAL1, 0)) + "
						+ "SUM(IF(" + semester + "_PRACT1>=0, " + semester + "_PRACT1, 0)) + SUM(IF(" + semester
						+ "_LISTEN_CT>=0, " + semester + "_LISTEN_CT, 0)) + " + "SUM(IF(" + semester + "_SPEAK_CT>=0, "
						+ semester + "_SPEAK_CT, 0)) + SUM(IF(" + semester + "_ASSIGN1_CT>=0, " + semester
						+ "_ASSIGN1_CT, 0)) AS " + semester + "_MAX_MARKS,ORDER_NO " + "FROM "
						+ sessionData.getDBName() + "." + "subject_allotment WHERE STD_1='" + std
						+ "' AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='" + sessionData.getSectionName()
						+ "') GROUP BY  SUBJECT_TITLE,ORDER_NO ORDER BY ORDER_NO ASC";
			} 
			else if (semester.equalsIgnoreCase("FINAL") && marks_flag_std && result_final_sem2_std_flag) {
				maxMarksQuery = "SELECT SUBJECT_TITLE,"
						+ "SUM(IF(SEM2_DOBS_CT>=0, SEM2_DOBS_CT, IF(SEM2_DOBS>=0, SEM2_DOBS, 0))) + "
						+ "SUM(IF(SEM2_OBT_CT>=0, SEM2_OBT_CT, IF(SEM2_OBT>=0, SEM2_OBT, 0))) + "
						+ "SUM(IF(SEM2_ORAL_CT>=0, SEM2_ORAL_CT, IF(SEM2_ORAL>=0, SEM2_ORAL, 0))) + "
						+ "SUM(IF(SEM2_ASSIGN_CT>=0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>=0, SEM2_ASSIGN, 0))) + "
						+ "SUM(IF(SEM2_WRITE_CT>=0, SEM2_WRITE_CT, IF(SEM2_WRITE>=0, SEM2_WRITE, 0))) + "
						+ "SUM(IF(SEM2_PRACT_CT>=0, SEM2_PRACT_CT, IF(SEM2_PRACT>=0, SEM2_PRACT, 0)))  + "
						+ "SUM(IF(SEM2_PRES_CT>=0, SEM2_PRES_CT, IF(SEM2_PRES>=0, SEM2_PRES, 0))) + "
						+ "SUM(IF(SEM2_MCAP_CT>=0, SEM2_MCAP_CT, IF(SEM2_MCAP>=0, SEM2_MCAP, 0))) + "
						+ "SUM(IF(SEM2_ACTIVITY_CT>=0, SEM2_ACTIVITY_CT, IF(SEM2_ACTIVITY>=0, SEM2_ACTIVITY, 0))) + "
						+ "SUM(IF(SEM2_PROJECT_CT>=0, SEM2_PROJECT_CT, IF(SEM2_PROJECT>=0, SEM2_PROJECT, 0))) + "
						+ "SUM(IF(SEM2_OTHER_CT>=0, SEM2_OTHER_CT, IF(SEM2_OTHER>=0, SEM2_OTHER, 0))) + "
						+ "SUM(IF(SEM2_ORAL1_CT>=0, SEM2_ORAL1_CT, IF(SEM2_ORAL1>=0, SEM2_ORAL1, 0))) + "
						+ "SUM(IF(SEM2_PRACT1_CT>=0, SEM2_PRACT1_CT, IF(SEM2_PRACT1>=0, SEM2_PRACT1, 0))) + "
						+ "SUM(IF(SEM2_WRITE1_CT>=0, SEM2_WRITE1_CT, IF(SEM2_WRITE1>=0, SEM2_WRITE1, 0))) + "
						+ "SUM(IF(SEM2_LISTEN_CT>=0, SEM2_LISTEN_CT, IF(SEM2_LISTEN>=0, SEM2_LISTEN, 0))) + "
						+ "SUM(IF(SEM2_SPEAK_CT>=0, SEM2_SPEAK_CT, IF(SEM2_SPEAK>=0, SEM2_SPEAK, 0))) + "
						+ "SUM(IF(SEM2_ASSIGN1_CT>=0, SEM2_ASSIGN1_CT, IF(SEM2_ASSIGN1>=0, SEM2_ASSIGN1, 0))) "
						+ "AS SEM2_MAX_MARKS,ORDER_NO " + "FROM " + sessionData.getDBName() + "."
						+ "subject_allotment " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic + "' AND "
						+ "(SECTION_NM='" + sessionData.getSectionName()
						+ "') GROUP BY  SUBJECT_TITLE,ORDER_NO ORDER BY ORDER_NO ASC";
			} 
			else if (semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
				maxMarksQuery = "SELECT SUBJECT_TITLE,"
						+ "SUM(IF(SEM1_DOBS_CT>=0, SEM1_DOBS_CT, IF(SEM1_DOBS>=0, SEM1_DOBS, 0))) + "
						+ "SUM(IF(SEM1_OBT_CT>=0, SEM1_OBT_CT, IF(SEM1_OBT>=0, SEM1_OBT, 0))) + "
						+ "SUM(IF(SEM1_ORAL_CT>=0, SEM1_ORAL_CT, IF(SEM1_ORAL>=0, SEM1_ORAL, 0))) + "
						+ "SUM(IF(SEM1_ASSIGN_CT>=0, SEM1_ASSIGN_CT, IF(SEM1_ASSIGN>=0, SEM1_ASSIGN, 0))) + "
						+ "SUM(IF(SEM1_WRITE_CT>=0, SEM1_WRITE_CT, IF(SEM1_WRITE>=0, SEM1_WRITE, 0))) + "
						+ "SUM(IF(SEM1_PRACT_CT>=0, SEM1_PRACT_CT, IF(SEM1_PRACT>=0, SEM1_PRACT, 0))) + "
						+ "SUM(IF(SEM1_PRES_CT>=0, SEM1_PRES_CT, IF(SEM1_PRES>=0, SEM1_PRES, 0))) + "
						+ "SUM(IF(SEM1_MCAP_CT>=0, SEM1_MCAP_CT, IF(SEM1_MCAP>=0, SEM1_MCAP, 0))) + "
						+ "SUM(IF(SEM1_ACTIVITY_CT>=0, SEM1_ACTIVITY_CT, IF(SEM1_ACTIVITY>=0, SEM1_ACTIVITY, 0))) + "
						+ "SUM(IF(SEM1_PROJECT_CT>=0, SEM1_PROJECT_CT, IF(SEM1_PROJECT>=0, SEM1_PROJECT, 0))) + "
						+ "SUM(IF(SEM1_OTHER_CT>=0, SEM1_OTHER_CT, IF(SEM1_OTHER>=0, SEM1_OTHER, 0))) + "
						+ "SUM(IF(SEM1_ORAL1_CT>=0, SEM1_ORAL1_CT, IF(SEM1_ORAL1>=0, SEM1_ORAL1, 0))) + "
						+ "SUM(IF(SEM1_PRACT1_CT>=0, SEM1_PRACT1_CT, IF(SEM1_PRACT1>=0, SEM1_PRACT1, 0))) + "
						+ "SUM(IF(SEM1_WRITE1_CT>=0, SEM1_WRITE1_CT, IF(SEM1_WRITE1>=0, SEM1_WRITE1, 0))) + "
						+ "SUM(IF(SEM1_LISTEN_CT>=0, SEM1_LISTEN_CT, IF(SEM1_LISTEN>=0, SEM1_LISTEN, 0))) + "
						+ "SUM(IF(SEM1_SPEAK_CT>=0, SEM1_SPEAK_CT, IF(SEM1_SPEAK>=0, SEM1_SPEAK, 0))) + "
						+ "SUM(IF(SEM1_ASSIGN1_CT>=0, SEM1_ASSIGN1_CT, IF(SEM1_ASSIGN1>=0, SEM1_ASSIGN1, 0)))  AS SEM1_MAX_MARKS, "
						+ "SUM(IF(SEM2_DOBS_CT>=0, SEM2_DOBS_CT, IF(SEM2_DOBS>=0, SEM2_DOBS, 0))) + "
						+ "SUM(IF(SEM2_OBT_CT>=0, SEM2_OBT_CT, IF(SEM2_OBT>=0, SEM2_OBT, 0))) + "
						+ "SUM(IF(SEM2_ORAL_CT>=0, SEM2_ORAL_CT, IF(SEM2_ORAL>=0, SEM2_ORAL, 0))) + "
						+ "SUM(IF(SEM2_ASSIGN_CT>=0, SEM2_ASSIGN_CT, IF(SEM2_ASSIGN>=0, SEM2_ASSIGN, 0))) + "
						+ "SUM(IF(SEM2_WRITE_CT>=0, SEM2_WRITE_CT, IF(SEM2_WRITE>=0, SEM2_WRITE, 0))) + "
						+ "SUM(IF(SEM2_PRACT_CT>=0, SEM2_PRACT_CT, IF(SEM2_PRACT>=0, SEM2_PRACT, 0)))  + "
						+ "SUM(IF(SEM2_PRES_CT>=0, SEM2_PRES_CT, IF(SEM2_PRES>=0, SEM2_PRES, 0))) + "
						+ "SUM(IF(SEM2_MCAP_CT>=0, SEM2_MCAP_CT, IF(SEM2_MCAP>=0, SEM2_MCAP, 0))) + "
						+ "SUM(IF(SEM2_ACTIVITY_CT>=0, SEM2_ACTIVITY_CT, IF(SEM2_ACTIVITY>=0, SEM2_ACTIVITY, 0))) + "
						+ "SUM(IF(SEM2_PROJECT_CT>=0, SEM2_PROJECT_CT, IF(SEM2_PROJECT>=0, SEM2_PROJECT, 0))) + "
						+ "SUM(IF(SEM2_OTHER_CT>=0, SEM2_OTHER_CT, IF(SEM2_OTHER>=0, SEM2_OTHER, 0))) + "
						+ "SUM(IF(SEM2_ORAL1_CT>=0, SEM2_ORAL1_CT, IF(SEM2_ORAL1>=0, SEM2_ORAL1, 0))) + "
						+ "SUM(IF(SEM2_PRACT1_CT>=0, SEM2_PRACT1_CT, IF(SEM2_PRACT1>=0, SEM2_PRACT1, 0))) + "
						+ "SUM(IF(SEM2_WRITE1_CT>=0, SEM2_WRITE1_CT, IF(SEM2_WRITE1>=0, SEM2_WRITE1, 0))) + "
						+ "SUM(IF(SEM2_LISTEN_CT>=0, SEM2_LISTEN_CT, IF(SEM2_LISTEN>=0, SEM2_LISTEN, 0))) + "
						+ "SUM(IF(SEM2_SPEAK_CT>=0, SEM2_SPEAK_CT, IF(SEM2_SPEAK>=0, SEM2_SPEAK, 0))) + "
						+ "SUM(IF(SEM2_ASSIGN1_CT>=0, SEM2_ASSIGN1_CT, IF(SEM2_ASSIGN1>=0, SEM2_ASSIGN1, 0))) "
						+ "AS SEM2_MAX_MARKS,ORDER_NO " + "FROM " + sessionData.getDBName() + "."
						+ "subject_allotment " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic + "' AND "
						+ "(SECTION_NM='" + sessionData.getSectionName()
						+ "') GROUP BY  SUBJECT_TITLE,ORDER_NO ORDER BY ORDER_NO ASC";
			} 
			else {
				maxMarksQuery = "SELECT SUBJECT_TITLE,SUM(IF(SEM1_DOBS>=0, SEM1_DOBS, 0)) + SUM(IF(SEM1_OBT>=0, SEM1_OBT, 0)) + "
						+ "SUM(IF(SEM1_ORAL>=0, SEM1_ORAL, 0)) + SUM(IF(SEM1_ASSIGN>=0, SEM1_ASSIGN, 0)) + SUM(IF(SEM1_WRITE>=0, SEM1_WRITE, 0)) + "
						+ "SUM(IF(SEM1_PRACT>=0, SEM1_PRACT, 0)) + SUM(IF(SEM1_PRES>=0, SEM1_PRES, 0)) + SUM(IF(SEM1_MCAP>=0, SEM1_MCAP, 0)) + "
						+ "SUM(IF(SEM1_ACTIVITY>=0, SEM1_ACTIVITY, 0)) + SUM(IF(SEM1_PROJECT>=0, SEM1_PROJECT, 0)) + SUM(IF(SEM1_OTHER>=0, SEM1_OTHER, 0)) + "
						+ "SUM(IF(SEM1_ORAL1>=0, SEM1_ORAL1, 0)) + SUM(IF(SEM1_PRACT1>=0, SEM1_PRACT1, 0)) + SUM(IF(SEM1_WRITE1>=0, SEM1_WRITE1, 0)) + "
						+ "SUM(IF(SEM1_LISTEN>=0, SEM1_LISTEN, 0)) + SUM(IF(SEM1_SPEAK>=0, SEM1_SPEAK, 0)) + SUM(IF(SEM1_ASSIGN1>=0, SEM1_ASSIGN1, 0)) AS SEM1_MAX_MARKS, "
						+ "SUM(IF(SEM2_DOBS>=0, SEM2_DOBS, 0)) + SUM(IF(SEM2_OBT>=0, SEM2_OBT, 0)) + "
						+ "SUM(IF(SEM2_ORAL>=0, SEM2_ORAL, 0)) + SUM(IF(SEM2_ASSIGN>=0, SEM2_ASSIGN, 0)) + SUM(IF(SEM2_WRITE>=0, SEM2_WRITE, 0)) + "
						+ "SUM(IF(SEM2_PRACT>=0, SEM2_PRACT, 0)) + SUM(IF(SEM2_PRES>=0, SEM2_PRES, 0)) + SUM(IF(SEM2_MCAP>=0, SEM2_MCAP, 0)) + "
						+ "SUM(IF(SEM2_ACTIVITY>=0, SEM2_ACTIVITY, 0)) + SUM(IF(SEM2_PROJECT>=0, SEM2_PROJECT, 0)) + SUM(IF(SEM2_OTHER>=0, SEM2_OTHER, 0)) + "
						+ "SUM(IF(SEM2_ORAL1>=0, SEM2_ORAL1, 0)) + SUM(IF(SEM2_PRACT1>=0, SEM2_PRACT1, 0)) + SUM(IF(SEM2_WRITE1>=0, SEM2_WRITE1, 0)) + "
						+ "SUM(IF(SEM2_LISTEN>=0, SEM2_LISTEN, 0)) + SUM(IF(SEM2_SPEAK>=0, SEM2_SPEAK, 0)) + SUM(IF(SEM2_ASSIGN1>=0, SEM2_ASSIGN1, 0)) AS SEM2_MAX_MARKS,ORDER_NO "
						+ "FROM " + sessionData.getDBName() + "." + "subject_allotment " + "WHERE STD_1='" + std
						+ "' AND ACADEMIC_YEAR='" + academic + "' AND " + "(SECTION_NM='"
						+ sessionData.getSectionName() + "') GROUP BY  SUBJECT_TITLE,ORDER_NO ORDER BY ORDER_NO ASC";
			}
			statement = connection.createStatement();
			resultSet = statement.executeQuery(maxMarksQuery);

			while (resultSet.next()) {
				subjectTitle = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				if (semester.equalsIgnoreCase("SEM1")) {
					sem1MaxMarks = resultSet.getString("SEM1_MAX_MARKS") == null ? "0"
							: (resultSet.getString("SEM1_MAX_MARKS").trim());
				} else if (semester.equalsIgnoreCase("SEM2")) {
					sem2MaxMarks = resultSet.getString("SEM2_MAX_MARKS") == null ? "0"
							: (resultSet.getString("SEM2_MAX_MARKS").trim());
				} else if(semester.equalsIgnoreCase("FINAL") && result_final_sem2_std_flag){
					sem2MaxMarks = resultSet.getString("SEM2_MAX_MARKS") == null ? "0"
							: (resultSet.getString("SEM2_MAX_MARKS").trim());
				} else {
					sem1MaxMarks = resultSet.getString("SEM1_MAX_MARKS") == null ? "0"
							: (resultSet.getString("SEM1_MAX_MARKS").trim());
					sem2MaxMarks = resultSet.getString("SEM2_MAX_MARKS") == null ? "0"
							: (resultSet.getString("SEM2_MAX_MARKS").trim());
				}

				if (!sem1MaxMarks.equalsIgnoreCase("0") && !sem1MaxMarks.equalsIgnoreCase("NA")) {
					semesterSum += 1;
				}
				if (!sem2MaxMarks.equalsIgnoreCase("0") && !sem2MaxMarks.equalsIgnoreCase("NA")) {
					semesterSum += 1;
				}
				maxMarks = (Double.parseDouble(sem1MaxMarks) + Double.parseDouble(sem2MaxMarks)) + "";

				if (maxMarksMap.get(subjectTitle) != null) {
					maxMarks = (Double.parseDouble((maxMarksMap.get(subjectTitle) + "")) + Double.parseDouble(maxMarks))
							+ "";
				}
				maxMarksMap.put(subjectTitle.replace(" ", "_"), maxMarks);
				maxMarksMapOrder.put(subjectTitle.replace(" ", "_"), maxMarks);
				subjectSemMap.put(subjectTitle.replace(" ", "_"), semesterSum);
				semesterSum = 0.0;
			}
			//////// get subject title max marks ends/////////////////////

			///// get subject list by order////
			String subListQueryByOrder = "SELECT SUBJECT_TITLE,SUBJECT_NAME,OPTIONAL,MARKS_GRADE,GROUP_NAME FROM "
					+ sessionData.getDBName() + "." + "SUBJECT " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='"
					+ academic + "' AND (SECTION_NM='" + sessionData.getSectionName() + "') "
					+ "ORDER BY ORDER_NO ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(subListQueryByOrder);
			while (resultSet.next()) {
				subjectTitleDB = resultSet.getString("SUBJECT_TITLE") == null ? ""
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subjectTitleDB = subjectTitleDB.replace(" ", "_");
				subjectNameDB = resultSet.getString("SUBJECT_NAME") == null ? ""
						: (resultSet.getString("SUBJECT_NAME").trim());
				optionalStatusDB = resultSet.getString("OPTIONAL") == null ? ""
						: (resultSet.getString("OPTIONAL").trim());
				marksGradeDB = resultSet.getString("MARKS_GRADE") == null ? ""
						: (resultSet.getString("MARKS_GRADE").trim());
				groupNameDB = resultSet.getString("GROUP_NAME") == null ? ""
						: (resultSet.getString("GROUP_NAME").trim());
				subjectOptionMapOrder.put(subjectTitleDB.replace(" ", "_"), optionalStatusDB);
			}
			//////// get subject list//////////////////////
			subjectMarksRetrive = "SELECT MARKS_ENTRY.GR_NO,MARKS_ENTRY.STD_1,MARKS_ENTRY.DIV_1,MARKS_ENTRY.ACADEMIC_YEAR,MARKS_ENTRY.SUID,optional_allotment.OPTIONAL_SUBJECT";
			String subListQuery = "SELECT SUBJECT_TITLE,SUBJECT_NAME,OPTIONAL,MARKS_GRADE,GROUP_NAME FROM "
					+ sessionData.getDBName() + "." + "SUBJECT " + "WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='"
					+ academic + "' AND (SECTION_NM='" + sessionData.getSectionName() + "') "
					+ "ORDER BY SUBJECT_TITLE ASC";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(subListQuery);
			int rowCount = 0;
			if (resultSet.last()) {// make cursor to point to the last row in the ResultSet object
				rowCount = resultSet.getRow();
				resultSet.beforeFirst(); // make cursor to point to the front of the ResultSet object, just before the
											// first row.
			}

			String subjectGroupOption = "";
			String ft_marksObtained = "";
			int j = 0;
			while (resultSet.next()) {
				j++;
				subjectTitleDB = resultSet.getString("SUBJECT_TITLE") == null ? ""
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subjectTitleDB = subjectTitleDB.replace(" ", "_");
				subjectNameDB = resultSet.getString("SUBJECT_NAME") == null ? ""
						: (resultSet.getString("SUBJECT_NAME").trim());
				optionalStatusDB = resultSet.getString("OPTIONAL") == null ? ""
						: (resultSet.getString("OPTIONAL").trim());
				marksGradeDB = resultSet.getString("MARKS_GRADE") == null ? ""
						: (resultSet.getString("MARKS_GRADE").trim());
				groupNameDB = resultSet.getString("GROUP_NAME") == null ? ""
						: (resultSet.getString("GROUP_NAME").trim());
				subjectDetailMap.put(subjectTitleDB.replace(" ", "_"), marksGradeDB);
				subjectOptionMap.put(subjectTitleDB.replace(" ", "_"), optionalStatusDB);
//				subjectOptionMapOrder.put(subjectTitleDB.replace(" ", "_"), optionalStatusDB);
				subjectGroupMap.put(subjectTitleDB, groupNameDB);
				subjectTitleMap.put(subjectNameDB, subjectTitleDB);

				if (!subjectGroupOption.contains(groupNameDB + "_" + optionalStatusDB)) {
					if (optionalStatusDB.equalsIgnoreCase("YES")) {
						subjectGroupOption = subjectGroupOption + "|" + groupNameDB + "_" + optionalStatusDB;
					}

					if (subjectGroupCount.get(groupNameDB) != null) {
						int count = Integer.parseInt(subjectGroupCount.get(groupNameDB).toString());
						count = count + 1;
						subjectGroupCount.put(groupNameDB, count);
					} else {
						subjectGroupCount.put(groupNameDB, "1");
					}
				} else if (optionalStatusDB.equalsIgnoreCase("NO")) {
					if (subjectGroupCount.get(groupNameDB) != null) {
						int count = Integer.parseInt(subjectGroupCount.get(groupNameDB).toString());
						count = count + 1;
						subjectGroupCount.put(groupNameDB, count);
					} else {
						subjectGroupCount.put(groupNameDB, "1");
					}
				}

				if (!semester.equalsIgnoreCase("FINAL")) {
					if (subjectTitleDB.equalsIgnoreCase(prevSubjectTitle)) {
						subjectMarksRetrive = subjectMarksRetrive + "AS " + prevSubjectName + "," + "IF("
								+ subjectNameDB + lvExam + ">=0, " + subjectNameDB + lvExam + ", 0) ";
						compSubjectMap.put(prevSubjectTitle, prevSubjectName);
						if (j == rowCount) {
							String compValue = compSubjectMap.get(prevSubjectTitle);
							compSubjectMap.put(prevSubjectTitle, compValue + "," + subjectNameDB);
						}
						isComposite = true;
					} else {
						if (isComposite) {
							subjectMarksRetrive = subjectMarksRetrive + "AS " + prevSubjectName;
							String compValue = compSubjectMap.get(prevSubjectTitle);
							compSubjectMap.put(prevSubjectTitle, compValue + "," + prevSubjectName);
							isComposite = false;
						} else if (!prevSubjectTitle.equalsIgnoreCase("")) {
							subjectMarksRetrive = subjectMarksRetrive + "AS " + prevSubjectTitle;
						}
						subjectMarksRetrive = subjectMarksRetrive + ",IF(" + subjectNameDB + lvExam + ">=0, "
								+ subjectNameDB + lvExam + ", 0) ";
					}
				} else if (semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
					if (subjectTitleDB.equalsIgnoreCase(prevSubjectTitle)) {
						ft_marksObtained = ft_marksObtained + "+IF(" + subjectNameDB + "_FTOT" + ">=0, " + subjectNameDB
								+ "_FTOT" + ", 0) ";
					} else {
						if (!prevSubjectTitle.equalsIgnoreCase("")) {
							ft_marksObtained = ft_marksObtained + "AS " + prevSubjectTitle;
						}
						ft_marksObtained = ft_marksObtained + ",IF(" + subjectNameDB + "_FTOT" + ">=0, " + subjectNameDB
								+ "_FTOT" + ", 0) ";
					}
				} else {
					if (subjectTitleDB.equalsIgnoreCase(prevSubjectTitle)) {
						subjectMarksRetrive = subjectMarksRetrive + "+IF(" + subjectNameDB + "_STOT" + ">=0, "
								+ subjectNameDB + "_STOT" + ", 0) ";
					} else {
						if (!prevSubjectTitle.equalsIgnoreCase("")) {
							subjectMarksRetrive = subjectMarksRetrive + "AS " + prevSubjectTitle;
						}
						subjectMarksRetrive = subjectMarksRetrive + ",IF(" + subjectNameDB + "_STOT" + ">=0, "
								+ subjectNameDB + "_STOT" + ", 0) ";
					}
				}
				if (j != rowCount) {
					prevSubjectTitle = subjectTitleDB;
					prevSubjectName = subjectNameDB;
				}
			}
			/// while loop ends
			/// finding last key from map
			Set setLk = subjectOptionMapOrder.entrySet();
			Iterator lk = setLk.iterator();
			String lastKeySubjectOptionMapOrder = "";
			while (lk.hasNext()) {
				Map.Entry me = (Map.Entry) lk.next();
				lastKeySubjectOptionMapOrder = me.getKey().toString();
			}
			////////////////
			/// get student result map
			if (marks_flag_std || exam.equalsIgnoreCase("Final")) {
				studentMarksFinalMap = findFinalResultList(sessionData, academic, std, div, exam, "", "", section,
						lastName, firstName, fatherName, subjectDetailMap, maxMarksMap, subjectSemMap);
			}

			if (ft_marksObtained.equalsIgnoreCase("")) {
				if (!semester.equalsIgnoreCase("FINAL") && subjectTitleDB.equalsIgnoreCase(prevSubjectTitle)) {
					subjectMarksRetrive = subjectMarksRetrive + " AS " + subjectNameDB;
				}
				else if (subjectTitleDB.equalsIgnoreCase(prevSubjectTitle) && j == rowCount) {
					subjectMarksRetrive = subjectMarksRetrive + " AS " + subjectTitleDB;
				} else if (j == rowCount) {
					subjectMarksRetrive = subjectMarksRetrive + " AS " + subjectTitleDB;
				} else if (j != rowCount) {
					subjectMarksRetrive = subjectMarksRetrive + " AS " + prevSubjectTitle;
				}
			} else if (!semester.equalsIgnoreCase("FINAL")) {
				ft_marksObtained = ft_marksObtained + " AS " + prevSubjectTitle;
				String st_marksObtained = ft_marksObtained;
				st_marksObtained = st_marksObtained.replaceAll("_FTOT", "_STOT");
				subjectMarksRetrive = subjectMarksRetrive + ft_marksObtained + st_marksObtained;
			}

			subjectMarksRetrive = subjectMarksRetrive + " FROM " + sessionData.getDBName() + "."
					+ "MARKS_ENTRY LEFT JOIN " + sessionData.getDBName() + "." + "OPTIONAL_ALLOTMENT"
					+ " ON MARKS_ENTRY.GR_NO = OPTIONAL_ALLOTMENT.GR_NO AND MARKS_ENTRY.SECTION_NM = OPTIONAL_ALLOTMENT.SECTION_NM "
					+ "WHERE MARKS_ENTRY.STD_1='" + std + "' AND MARKS_ENTRY.DIV_1='" + div
					+ "' AND MARKS_ENTRY.ACADEMIC_YEAR='" + academic + "' AND " + "OPTIONAL_ALLOTMENT.PRESENT_STD='"
					+ std + "' AND OPTIONAL_ALLOTMENT.PRESENT_DIV='" + div + "' AND OPTIONAL_ALLOTMENT.ACADEMIC_YEAR='"
					+ academic + "'";

			/////// get subject list ends//////////////////////
			//////// get marks list//////////////////////

			/// get student GR list ////////////
			List studentList = new ArrayList();
			String studentQuery = "SELECT GR_NO FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE STD_1='"
					+ std + "' AND DIV_1='" + div + "' AND ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='"
					+ sessionData.getSectionName() + "'";
			logger.info("find studentQuery == " + studentQuery);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(studentQuery);
			while (resultSet.next()) {
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				studentList.add(grNo);
			}
			
			if (studentList.size() > 0) {
				double divisor = 2;
				double totalMarksWithGrace = 0.0;
				double totalMarksWithoutGrace = 0.0;
				int noOfStudents = studentList.size();

				JFrame f = new JFrame();
				f.setBounds(screenWidth / 2 - 150, screenHeight / 2, 90, 25);
				f.setSize(500, 0);
				f.setResizable(false);
				f.setVisible(true);
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

				boolean dataInOptionalAllotment = false;
				String checkOptionalAllotment = "SELECT GR_NO FROM OPTIONAL_ALLOTMENT WHERE PRESENT_STD='" + std
						+ "' AND PRESENT_DIV='" + div + "' AND " + "ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='"
						+ section + "'";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(checkOptionalAllotment);
				while (resultSet.next()) {
					dataInOptionalAllotment = true;
					break;
				}

				if (!dataInOptionalAllotment) {
					String getMarksEntry = "SELECT GR_NO,ROLL_NO,SUID FROM MARKS_ENTRY WHERE STD_1='" + std
							+ "' AND DIV_1='" + div + "' AND " + "ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='"
							+ section + "'";
					statement = connection.createStatement();
					resultSet = statement.executeQuery(getMarksEntry);

					String insertOptionalAllot = "";
					String grMarks = "";
					String rollMarks = "";
					String suidMarks = "";

					while (resultSet.next()) {
						grMarks = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
						rollMarks = resultSet.getString("ROLL_NO") == null ? " "
								: (resultSet.getString("ROLL_NO").trim());
						suidMarks = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());

						insertOptionalAllot = "INSERT INTO OPTIONAL_ALLOTMENT "
								+ "(GR_NO,PRESENT_STD,PRESENT_DIV,ACADEMIC_YEAR,"
								+ "CREATED_BY,SECTION_NM,ROLL_NO,CREATED_DATE,SUID) " + "VALUES ('"
								+ grMarks.trim().toUpperCase() + "','" + std.trim().toUpperCase() + "','"
								+ div.trim().toUpperCase() + "','" + academic.trim().toUpperCase() + "','"
								+ sessionData.getUserName().trim().toUpperCase() + "','" + section.trim().toUpperCase()
								+ "'," + rollMarks + ",SYSDATE(),'" + suidMarks + "')";

						logger.info("insertOptionalAllot===>" + insertOptionalAllot);
						statement = connection.createStatement();
						statement.executeUpdate(insertOptionalAllot);
					}
				}

				for (int n = 0; n < studentList.size(); n++) {
					f.setTitle("Updated result for " + (n + 1) + " student out of " + noOfStudents);

					try {
						// Retrieve marks from marks entry
						boolean isRTE = false;
						String subjectMarksRetriveWithGR = subjectMarksRetrive + " AND MARKS_ENTRY.GR_NO='"
								+ studentList.get(n).toString() + "' " + " and OPTIONAL_ALLOTMENT.section_nm='"
								+ sessionData.getSectionName() + "'";
						logger.info("find subjectMarksRetriveWithGR == " + subjectMarksRetriveWithGR);

						statement = connection.createStatement();
						resultSet = statement.executeQuery(subjectMarksRetriveWithGR);

						while (resultSet.next()) {
							TreeMap marksBeforeGrace = new TreeMap();
							updateResultQuery = "UPDATE " + sessionData.getDBName() + ".RESULT_DATA SET ";
							boolean mgFlag = false;
							grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
							suid = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());
							optionalSubject = resultSet.getString("OPTIONAL_SUBJECT") == null ? " "
									: (resultSet.getString("OPTIONAL_SUBJECT").trim());
							optionalSubject = optionalSubject.replace("|", ",");
							optionalSubjectList = new ArrayList(Arrays.asList(optionalSubject.split(",")));
							if (studentLCMap.containsKey(grNo) && !process_lc_student) {
								continue;
							}
							// Get an iterator
							Set subjectSet = subjectOptionMapOrder.entrySet();
							Iterator i = subjectSet.iterator();
							int subjectMapSize = subjectOptionMapOrder.size();
							totalMarks = 0.0;
							semesterMarks = 0.0;

							if (semester.equalsIgnoreCase("FINAL") && marks_flag_std) {
								String marksSemWise = "";
								int failCount = 0;
								int graceCount = 0;
								int tokenSize = 0;
								int m = 0;
								double totalMarksToPass = 0;
								double maxMarksForFinal = 0;
								boolean isOverallFail = false;
								boolean isSubjectFail = false;
								double totalGrace = Double
										.parseDouble(sessionData.getConfigMap().get("MAXGRACEMARKS_" + sessionData.getAppType()));// max
																														// grace
								String maxGraceSub = sessionData.getConfigMap().get("MAXGRACESUB_" + sessionData.getAppType());
								String failedSubjects = "";
								boolean isGraceRequired = true;
								boolean groupPass = false;
								// logic for final result
								// 1 - check for group logic
								if (studentMarksFinalMap.get(grNo) != null) {
									marksSemWise = studentMarksFinalMap.get(grNo).toString();

									StringTokenizer st = new StringTokenizer(marksSemWise, "|");
									tokenSize = st.countTokens();
									String[] columnArray = new String[tokenSize];
									while (st.hasMoreTokens()) {
										columnArray[m] = st.nextToken();
										String subjectData = columnArray[m];
										String subject = subjectData.substring(0, subjectData.indexOf("~"));
										String subMarks = subjectData.substring(subjectData.indexOf("~") + 1);
										subjectMarksMap.put(subject, subMarks);
										m++;
									}
								}

								Set set = subjectMarksMap.entrySet();
								Iterator p = set.iterator();
								while (p.hasNext()) {// iterate each subject for student
									String avgMarksStr = "";
									String reasonForAbsence = "";
									String passFail = "P";
									double avgDivisor = 2.0;
									Map.Entry me = (Map.Entry) p.next();
									String subject = me.getKey().toString();
									String subjectMarks = me.getValue().toString();// avg,sem1,sem2
									String subjectGroupName = subjectGroupMap.get(subject).toString();
									String gradeMarks = subjectDetailMap.get(subject).toString();

									/** getting marks as average+reason+marksAbsent~divisor **/
									if (optionalSubjectList.contains(subject + "_NO")) {
										updateResultQuery = updateResultQuery + subject + "_" + semester + " = "
												+ "'NA',";
										continue;
									}
									if (subjectMarks.contains("MG") || subjectMarks.contains("AB")) {
//							    	   subjectMarks = subjectMarks.substring(0, subjectMarks.indexOf(","));
										avgMarksStr = subjectMarks.substring(0, subjectMarks.indexOf("+"));
										if (subjectMarks.contains("MG")) {
											subjectReasonMap.put(subject, "MG");
											reasonForAbsence = subjectMarks.substring(subjectMarks.indexOf("+") + 1,
													subjectMarks.lastIndexOf("+"));
											avgDivisor = Double.parseDouble(
													subjectMarks.substring(subjectMarks.lastIndexOf("~") + 1));
											mgFlag = true;
										}
									} else {
										if (!subjectMarks.equalsIgnoreCase("NA") && subjectMarks.contains("+")) {
											avgMarksStr = subjectMarks.substring(0, subjectMarks.indexOf("+"));
											avgDivisor = Double.parseDouble(
													subjectMarks.substring(subjectMarks.lastIndexOf("~") + 1));
										} else {
											avgMarksStr = subjectMarks;
										}
									}

									if (avgMarksStr.equalsIgnoreCase("NA")) {
										continue;
									}
									if (gradeMarks.equalsIgnoreCase("MARKS")) {
										totalMarks = totalMarks
												+ ((Double.parseDouble(maxMarksMap.get(subject).toString()))
														/ avgDivisor);
									}
									double avgMarks = Double.parseDouble(avgMarksStr);

									double subMaxMarks = Double.parseDouble(maxMarksMap.get(subject).toString());
									if (subjectDetailMap.get(subject).toString().equalsIgnoreCase("MARKS")) {
										maxMarksForFinal = maxMarksForFinal + (subMaxMarks / avgDivisor);
									}
									/// if one or both subject has MG/AB ///
									/**
									 * getting marks as average+reason+marksAbsent~divisor marks obtained 30 & AB
									 * for 50 marks exam
									 ****/
									///////////////////////////////////////
									Double percent_35 = ((35 * (subMaxMarks / avgDivisor)) / 100);
									if (avgMarks >= ((25 * (subMaxMarks / avgDivisor)) / 100)) {// check if marks are
																								// greater than 25%
										if (avgMarks >= ((35 * (subMaxMarks / avgDivisor)) / 100)) {// check if marks
																									// are greater than
																									// 35%
											if (subjectDetailMap.get(subject).toString().equalsIgnoreCase("MARKS")) {
												totalMarksWithoutGrace = totalMarksWithoutGrace + avgMarks;
											}
											marksBeforeGrace.put(subject,
													avgMarks + "|0" + "|" + passFail + "~" + avgDivisor);// map before
																											// calculating
																											// grace
										} else if (isGroupingNeeded) {// check for group sum greater than 35%
											double subGroupSum = 0.0;
											double subGroupMaxSum = 0.0;
											Set set2 = subjectGroupMap.entrySet();
											Iterator p2 = set2.iterator();

											while (p2.hasNext()) {// loop to check subject sum with group name
												Map.Entry me2 = (Map.Entry) p2.next();
												String subName = me2.getKey().toString();
												String subGroup = me2.getValue().toString();

												if (subjectGroupName.equalsIgnoreCase(subGroup)
														&& !subjectGroupName.equalsIgnoreCase("") && !subjectMarksMap
																.get(subName).toString().equalsIgnoreCase("NA")) {
													String subGroupAvg = subjectMarksMap.get(subName).toString()
															.substring(0, subjectMarksMap.get(subName).toString()
																	.indexOf("+"));
													if (!subGroupAvg.equalsIgnoreCase("NA")) {
														subGroupSum = subGroupSum + Double.parseDouble(subGroupAvg);
														subGroupMaxSum = subGroupMaxSum + ((Double
																.parseDouble(maxMarksMap.get(subName).toString()))
																/ avgDivisor);
													}
												}
											}

											// If sum is greater than 35% then pass
											if ((subGroupSum / subGroupMaxSum) * 100.0 >= percent_35) {
												if (subjectDetailMap.get(subject).toString()
														.equalsIgnoreCase("MARKS")) {
													totalMarksWithoutGrace = totalMarksWithoutGrace + avgMarks;
												}
												failedSubjects = failedSubjects + "~" + subject;
												passFail = "P";
												if (!result_filter_gp.equalsIgnoreCase("true")) {
													failCount = failCount + 1;
												}
												marksBeforeGrace.put(subject,
														avgMarks + "|0|" + passFail + "~" + avgDivisor);// map before
																										// calculating
																										// grace
												groupPass = true;
												isGraceRequired = false;
											} else {
												passFail = "F";
												resultFinal = "FAIL";
												failedSubjects = failedSubjects + "~" + subject;
												double requiredMarks = 0.0;
												if (subMaxMarks > 0) {
													requiredMarks = Double.parseDouble((percent_35 - avgMarks) + "");
												}
												Long requiredMarksRound = Math.round(requiredMarks);
												if (requiredMarksRound > 0) {
													failCount = failCount + 1;
												}
												if (subjectDetailMap.get(subject).toString()
														.equalsIgnoreCase("MARKS")) {
													totalMarksWithoutGrace = totalMarksWithoutGrace + avgMarks;
												}
												marksBeforeGrace.put(subject, avgMarks + "|" + requiredMarksRound + "|"
														+ passFail + "~" + avgDivisor);// map before calculating grace
											}
										} else {
											passFail = "F";
											resultFinal = "FAIL";
											isSubjectFail = true;
											failedSubjects = failedSubjects + "~" + subject;
											if (subjectDetailMap.get(subject).toString().equalsIgnoreCase("MARKS")) {
												totalMarksWithoutGrace = totalMarksWithoutGrace + avgMarks;
											}
											marksBeforeGrace.put(subject,
													avgMarks + "|0" + "|" + passFail + "~" + avgDivisor);// map before
																											// calculating
																											// grace
										}
									} else {
										passFail = "F";
										resultFinal = "FAIL";
										isSubjectFail = true;
										failedSubjects = failedSubjects + "~" + subject;
										double requiredMarks = 0.0;
										if (subMaxMarks > 0 && isGroupingNeeded) {
											requiredMarks = Double.parseDouble(
													(((35 / (subMaxMarks / avgDivisor)) * 100) - avgMarks) + "");
										}
										Long requiredMarksRound = Math.round(requiredMarks);
										if (requiredMarksRound > 0) {
											failCount = failCount + 1;
										}
										if (subjectDetailMap.get(subject).toString().equalsIgnoreCase("MARKS")) {
											totalMarksWithoutGrace = totalMarksWithoutGrace + avgMarks;
										}
										marksBeforeGrace.put(subject, avgMarks + "|" + requiredMarksRound + "|"
												+ passFail + "~" + avgDivisor);// map before calculating grace
									}
								}
								if (((totalMarksWithoutGrace / maxMarksForFinal) * 100) < 35) {
									isOverallFail = true;
								}
								/// logic for grace allotment///////////
								// 2 - check for grace logic
								/******* if failed count is less than 3 then apply grace logic *****/
								if (failCount <= Integer.parseInt(maxGraceSub) && isGroupingNeeded && !isOverallFail
										&& !isSubjectFail) {
									Set getMarksBeforeGrace = marksBeforeGrace.entrySet();
									Iterator q = getMarksBeforeGrace.iterator();

									while (q.hasNext()) {
										Map.Entry me = (Map.Entry) q.next();
										String sub = me.getKey().toString();
										String subStr = me.getValue().toString();
										if (subjectDetailMap.get(sub).toString().equalsIgnoreCase("GRADE")) {
											String avgMarks = subStr.substring(0, subStr.indexOf("|"));
											updateGrade = cm.getGradeFromMarks(
													(Double.parseDouble(maxMarksMap.get(sub).toString()) / 2), sub,
													Double.parseDouble(avgMarks + ""), std);
											if (updateGrade.equalsIgnoreCase("D")) {
												isSubjectFail = true;
											}
											continue;
										}
										double marksToPassDouble = Double.parseDouble(
												subStr.substring(subStr.indexOf("|") + 1, subStr.lastIndexOf("|")));
										int marksToPass = (int) marksToPassDouble;
										if (marksToPass > 0 && marksToPassDouble <= maxGracePerSubject) {
											totalMarksToPass = totalMarksToPass + marksToPass;
											marskInAscending.put(marksToPass + "|" + me.getKey(), me.getKey());
										} else if (marksToPassDouble > maxGracePerSubject) {
											totalMarksToPass = totalMarksToPass + marksToPass;
											isSubjectFail = true;
										}
									}

									if (totalMarksToPass <= totalGrace && marskInAscending.size() > 0) {// if total
																										// grace need is
																										// less than or
																										// equal to
																										// maxGrace then
																										// apply grace
																										// logic
										Set setGrace = marskInAscending.entrySet();
										Iterator r = setGrace.iterator();
										isGraceRequired = true;
										double graceRemain = totalGrace;
										while (r.hasNext()) {
											Map.Entry me = (Map.Entry) r.next();
											String marksStr = me.getKey().toString();
											double marksNeed = Double
													.parseDouble(marksStr.substring(0, marksStr.indexOf("|")));
											Long marksNeedRound = Math.round(marksNeed);
											String subMarks = marksBeforeGrace.get(me.getValue()).toString();
											String marksObtained = subMarks.substring(0, subMarks.indexOf("|"));
											totalMarksWithGrace = totalMarksWithGrace
													+ Double.parseDouble(marksObtained);
											String passStatus = subMarks.substring(subMarks.lastIndexOf("|") + 1);
											if (marksNeedRound > 0 && graceRemain > 0
													&& marksNeedRound <= maxGracePerSubject) {
												graceCount = graceCount + 1;
//									    		subMarks = marksObtained + "|" +marksNeedRound + "|" + passStatus;
//									    		subMarks = marksObtained + "|" +marksNeedRound + "|P";
												subMarks = subMarks.replace("|F~", "|P~");// grace within limit hence
																							// pass
												marksBeforeGrace.put(me.getValue(), subMarks);
												graceRemain = graceRemain - marksNeed;
											}
										}
									} else {// remove all grace marks
										isGraceRequired = false;
//								    	isSubjectFail = true;
									}
								}
								// END check for grace logic

								Set setUpdateQuery = marksBeforeGrace.entrySet();
								Iterator q = setUpdateQuery.iterator();

								while (q.hasNext()) {
									Map.Entry me = (Map.Entry) q.next();
									String subject = me.getKey().toString();
									String gradeMarks = subjectDetailMap.get(subject).toString();
									String marksStr = me.getValue().toString();
									String graceMarks = marksStr.substring(marksStr.indexOf("|") + 1,
											marksStr.lastIndexOf("|"));
									if (failCount > Integer.parseInt(maxGraceSub) || isOverallFail || isSubjectFail
											|| Double.parseDouble(graceMarks) > maxGracePerSubject) {
										graceMarks = "0";
									}
									double avgMarks = Double.parseDouble(
											marksStr.toString().substring(0, marksStr.toString().indexOf("|")));
									String passFail = marksStr.toString()
											.substring(marksStr.toString().lastIndexOf("|") + 1);
									if (gradeMarks.equalsIgnoreCase("MARKS")
											&& !optionalSubjectList.contains(subject + "_NO")) {
										semesterMarks = semesterMarks + avgMarks;
									} else if (gradeMarks.equalsIgnoreCase("MARKS")) {
										passFail = "NA~0.0";
									}
									updateResultQuery = updateQueryMethod(subjectOptionMap, subjectDetailMap,
											maxMarksMap, subject, optionalSubjectList, subjectAndMarksDB, avgMarks,
											semester, updateResultQuery, passFail, graceMarks, std, isGraceRequired,
											subjectReasonMap);
									studentMarksMap.put(subject, Math.round(avgMarks));
									studentMarksMapOrder.put(subject, Math.round(avgMarks) + "");
								}
								subjectReasonMap.clear();
								///////// calculate final result parameters/////////////////////////////
								String semesterProgress = "";
								String semesterResult = "";
								String semesterImprove = "";
								int stdPromoted = cm.RomanToInteger(std) + 1;
								String romanPromotedStd = cm.IntegerToRoman("a" + stdPromoted);

								if(std.equalsIgnoreCase("SR KG")) {
									promoteDiv = "";
								}
								semesterPercent = Math.round((semesterMarks / totalMarks * 100) * 100.0) / 100.0;
								String resultAndSubjects = cm.getResultSemester(studentMarksMapOrder, std, maxMarksMap,
										optionalSubjectList, subjectOptionMap, marksBeforeGrace);
								if (isOverallFail || isSubjectFail) {
									semesterResult = "FAIL|Detained in Std." + std + "-" + div;
									semesterImprove = failedSubjects;
									semesterProgress = "Poor";
								} else if (failCount > Integer.parseInt(maxGraceSub)) {
									semesterResult = "FAIL|Detained in Std." + std + "-" + div;
									semesterImprove = failedSubjects;
									semesterProgress = "Poor";
								} else if (totalMarksToPass > totalGrace
										&& failCount <= Integer.parseInt(maxGraceSub)) {
									semesterResult = "FAIL|Detained in Std." + std + "-" + div;
									semesterImprove = failedSubjects;
									semesterProgress = "Poor";
								} else if (failCount <= Integer.parseInt(maxGraceSub)
										&& totalMarksToPass <= totalGrace) {
									if (failCount == 0 && groupPass && result_filter_gp.equalsIgnoreCase("true")) {
										semesterImprove = "NA";
										String mgStr = "";
										if (mgFlag) {
											mgStr = "on MG ";
										}
										semesterResult = "GP|GP & promoted " + mgStr + "to Std." + romanPromotedStd
												+ "-" + promoteDiv;
									} else if (failCount == 0) {
										semesterImprove = "NA";
										String mgStr = "";
										if (mgFlag) {
											mgStr = "on MG ";
										}
										semesterResult = "PASS|Passed & promoted " + mgStr + "to Std."
												+ romanPromotedStd + "-" + promoteDiv;
									} else if (failCount > 0 && graceCount == 0) {// only group pass
										String mgStr = "";
										if (mgFlag) {
											mgStr = "on MG ";
										}
										semesterResult = "F" + failCount + "|GP with F" + failCount + " & Promoted "
												+ mgStr + "to Std." + romanPromotedStd + "-" + promoteDiv
												+ " with condonation";
										semesterImprove = failedSubjects;
										semesterProgress = "Poor";
									} else if (groupPass == false && failCount > 0 && graceCount > 0) {// only grace
																										// pass
										String mgStr = "";
										if (mgFlag) {
											mgStr = "on MG ";
										}
										semesterResult = "F" + failCount + "|F" + failCount + " & Promoted " + mgStr
												+ "to Std." + romanPromotedStd + "-" + promoteDiv + " with condonation";
										semesterImprove = failedSubjects;
										semesterProgress = "Poor";
										graceInTotal = "+" + (int) totalMarksToPass;
									} else if (failCount > 0 && graceCount > 0) {// for group and grace pass
										semesterResult = "F" + failCount + "|GP with F" + failCount
												+ " & Promoted to Std." + romanPromotedStd + "-" + promoteDiv
												+ " with condonation";
										semesterImprove = failedSubjects;
										semesterProgress = "Poor";
										graceInTotal = "+" + (int) totalMarksToPass;
									} else {
										semesterImprove = failedSubjects;
										semesterResult = "F" + graceCount;
									}
									semesterProgress = cm.getProgressFromPercentage(semesterPercent);
								}

								if (resultFinal.equalsIgnoreCase("FAIL") && failCount == 0) {
									semesterResult = "FAIL|Detained in Std." + std + "-" + div;
								}

								if (stdInt > 8) {
									remark = cm.getResultRemark(semesterResult, semesterPercent);
								} else {
									remark = semesterProgress;
								}

								semesterGrade = cm.getGradeFromMarks(totalMarks, "All", semesterMarks, std);
								updateResultQuery = updateResultQuery + "SUID = " + "'" + suid + "',";
								updateResultQuery = updateResultQuery + semester + "_PERCENT = " + "'" + semesterPercent
										+ "',";
								updateResultQuery = updateResultQuery + semester + "_RESULT = " + "'" + semesterResult
										+ "',";
								updateResultQuery = updateResultQuery + semester + "_PROGRESS = " + "'"
										+ semesterProgress + "',";
								updateResultQuery = updateResultQuery + semester + "_IMPROVE = " + "'" + semesterImprove
										+ "',";
								updateResultQuery = updateResultQuery + semester + "_MARKS = " + "'"
										+ Math.round(semesterMarks) + graceInTotal + "',";
								updateResultQuery = updateResultQuery + semester + "_TOTAL = " + "'"
										+ Math.round(totalMarks) + "',";
								updateResultQuery = updateResultQuery + semester + "_REMARK = " + "'" + remark + "',";
								updateResultQuery = updateResultQuery.substring(0, updateResultQuery.length() - 1);
								updateResultQuery = updateResultQuery + " WHERE ACADEMIC_YEAR='" + academic
										+ "' AND GR_NO='" + grNo + "' AND STD_1='" + std + "' AND DIV_1='" + div
										+ "' and SECTION_NM='" + sessionData.getSectionName() + "'";

								resultFinal = "";
								graceInTotal = "";
								remark = "";
								try {
									statement = connection.createStatement();
									statement.executeUpdate(updateResultQuery);
									resultUpdateFlag = true;
								} catch (Exception e) {
									isResultUpdated = false;
									logger.error("result Update Exception ::  " + e);
								}
								marskInAscending.clear();
								totalMarksWithoutGrace = 0;
								//////////////////////////////////////

							} // end of IX & X Final
							else if (marks_flag_std) {
								int failCount = 0;
								double totalMarksToPass = 0;
								double totalGrace = Double
										.parseDouble(sessionData.getConfigMap().get("MAXGRACEMARKS_" + sessionData.getAppType()));// max
																														// grace
								String maxGraceSub = sessionData.getConfigMap().get("MAXGRACESUB_" + sessionData.getAppType());
								String failedSubjects = "";
								boolean isGraceRequired = true;

								while (i.hasNext()) {
									Map.Entry me = (Map.Entry) i.next();
									String subTitleFromMap = me.getKey().toString();
									subjectTitleError = subTitleFromMap;
									String reasonForAbsence = "";
									String absentForMarks = "";
									String subjectMarks = "";
									double maxMarksForSubject = 0.0;

									if (optionalSubjectList.contains(subTitleFromMap + "_NO")
											|| (!optionalSubjectList.contains(subTitleFromMap + "_YES")
													&& subjectOptionMapOrder.get(subTitleFromMap)
															.equalsIgnoreCase("YES"))) {
										updateResultQuery = updateResultQuery + subTitleFromMap + "_" + semester + " = "
												+ "'NA',";
										continue;
									}
									if (!compSubjectMap.containsKey(subTitleFromMap)) {
										subjectAndMarksDB = resultSet.getString(subTitleFromMap) == null ? " "
												: (resultSet.getString(subTitleFromMap).trim());
									} else if (optionalSubjectList.contains(subTitleFromMap + "_YES")
											|| (compSubjectMap.containsKey(subTitleFromMap) && subjectOptionMapOrder
													.get(subTitleFromMap).equalsIgnoreCase("NO"))) {
										String[] parts = compSubjectMap.get(subTitleFromMap).split(Pattern.quote(","));
										double marksObtained = 0;
										double marksTotal = 0;
										double absentForMarksComp = 0;
										for (int l = 0; l < parts.length; l++) {
											String subDetails = resultSet.getString(parts[l]) == null ? " "
													: (resultSet.getString(parts[l]).trim());
											if (subDetails.contains("+")) {
												marksObtained = marksObtained + Double
														.parseDouble(subDetails.substring(0, subDetails.indexOf("+")));
											} else {
												if (subDetails.trim().equalsIgnoreCase("")) {
													subDetails = "0";
												}
												marksObtained = marksObtained + Double.parseDouble(subDetails);
											}
											if (subDetails.contains("MG") || subDetails.contains("AB")) {
												String reasonForAbsenceComp = subDetails.substring(
														subDetails.indexOf("+") + 1, subDetails.lastIndexOf("+"));
												if (reasonForAbsenceComp.contains("MG")) {
													absentForMarksComp = absentForMarksComp
															+ Double.parseDouble(reasonForAbsenceComp.substring(
																	reasonForAbsenceComp.lastIndexOf("+") + 1));
													reasonForAbsence = "MG";
												} else if (reasonForAbsenceComp.contains("AB")
														&& !reasonForAbsence.equalsIgnoreCase("MG")) {
													reasonForAbsence = "AB";
												}
											}
											marksTotal = marksTotal + Double
													.parseDouble(subDetails.substring(subDetails.lastIndexOf("T") + 1));
										}
										if (reasonForAbsence.equalsIgnoreCase("")) {
											subjectAndMarksDB = marksObtained + "+T" + marksTotal;
										} else {
											subjectAndMarksDB = marksObtained + "+" + reasonForAbsence + "+"
													+ absentForMarksComp + "+T" + marksTotal;
										}
									}

									subjectMarks = subjectAndMarksDB;
									if (subjectMarks.equalsIgnoreCase("") || subjectMarks == null
											|| subjectMarks.equalsIgnoreCase("null")) {
										continue;
									}
									if (!cm.validateNumber(subjectMarks)
											&& (subjectMarks.contains("MG") || subjectMarks.contains("AB"))) {
										// reasonForAbsence = reasonForAbsence +","+
										// subjectAndMarksDB.substring(subjectAndMarksDB.indexOf("+")+1,subjectAndMarksDB.lastIndexOf("+"));
										reasonForAbsence = subjectMarks.substring(subjectMarks.indexOf("+") + 1,
												subjectMarks.lastIndexOf("+"));
										absentForMarks = reasonForAbsence
												.substring(reasonForAbsence.lastIndexOf("+") + 1);
										subjectAndMarksDB = subjectMarks.substring(0, subjectMarks.indexOf("+"));
										// absentForMarks =
										// subjectAndMarksDB.substring(subjectAndMarksDB.lastIndexOf("+")+1);
										// subjectAndMarksDB = subjectAndMarksDB.substring(0,
										// subjectAndMarksDB.indexOf("+"));
									} else if (!cm.validateNumber(subjectMarks)) {
										// reasonForAbsence = reasonForAbsence +","+
										// subjectMarks.substring(subjectMarks.indexOf("+")+1,subjectMarks.lastIndexOf("+"));
										// absentForMarks = subjectMarks.substring(subjectMarks.lastIndexOf("+")+1);
										subjectAndMarksDB = subjectMarks.substring(0, subjectMarks.indexOf("+"));
									}
//									semesterMarks = semesterMarks + Double.parseDouble(subjectAndMarksDB);
									if (subjectMarks.contains("+T")) {
										maxMarksForSubject = Double
												.parseDouble(subjectMarks.substring(subjectMarks.lastIndexOf("T") + 1));
										maxMarksMap.put(subTitleFromMap, maxMarksForSubject);
									} else {
										maxMarksForSubject = Double
												.parseDouble(maxMarksMap.get(subTitleFromMap).toString());
									}
//									totalMarks = totalMarks + maxMarksForSubject;
									// semesterMarks = semesterMarks + Integer.parseInt(subjectAndMarksDB);
									// totalMarks = totalMarks +
									// Integer.parseInt(maxMarksMap.get(subTitleFromMap).toString());

									if (subjectOptionMap.get(subTitleFromMap).toString().equalsIgnoreCase("YES")) {
										if (optionalSubjectList.contains(subTitleFromMap + "_YES")) {
											calculateMarks = true;
										} else {
											calculateMarks = false;
											updateGrade = "NA";
										}
									} else {
										calculateMarks = true;
									}

									String passFail = "P";
									if (reasonForAbsence.contains("MG")) {
										updateGrade = subjectAndMarksDB + "+MG+" + absentForMarks;
										subjectReasonMap.put(subTitleFromMap, "MG," + absentForMarks);
									} else if (reasonForAbsence.contains("AB")) {
										updateGrade = subjectAndMarksDB + "+AB+" + absentForMarks;
									} else {
										updateGrade = subjectAndMarksDB;
									}

									String gradeMarks = subjectDetailMap.get(subTitleFromMap).toString();
									if (calculateMarks && gradeMarks.equalsIgnoreCase("GRADE")) {
										passFail = "P";
										updateGrade = cm.getGradeFromMarks(
												Double.parseDouble(maxMarksMap.get(subTitleFromMap).toString()),
												subTitleFromMap, Double.parseDouble(subjectAndMarksDB.toString()), std);

										if (reasonForAbsence.contains("MG")) {
											updateGrade = updateGrade + "+MG+" + absentForMarks;
											;
										} else if (reasonForAbsence.contains("AB")) {
											updateGrade = updateGrade + "+AB+" + absentForMarks;
										}
										if (updateGrade.contains("D")) {
											passFail = "F";
											resultFinal = "FAIL";
//											failedSubjects = failedSubjects +"~"+ subTitleFromMap;
										}
										marksBeforeGrace.put(subTitleFromMap, subjectAndMarksDB + "|0|" + passFail);// map
																													// before
																													// calculating
																													// grace
									} else if (calculateMarks) {
										// calculate marks
										int m = 0;
										double marksObtained = Double.parseDouble(subjectAndMarksDB);
										double subMaxMarks = Double
												.parseDouble(maxMarksMap.get(subTitleFromMap).toString());

										if (studentMarksFinalMap.get(grNo) != null) {
											String marksSemWise = studentMarksFinalMap.get(grNo).toString();

											StringTokenizer st = new StringTokenizer(marksSemWise, "|");
											int tokenSize = st.countTokens();
											String[] columnArray = new String[tokenSize];
											while (st.hasMoreTokens()) {
												columnArray[m] = st.nextToken();
												String subjectData = columnArray[m];
												String subject = subjectData.substring(0, subjectData.indexOf("~"));
												String subMarks = subjectData.substring(subjectData.indexOf("~") + 1);
												subjectMarksMap.put(subject, subMarks);
												m++;
											}
										}

										if (marksObtained >= cm.roundEven(subMaxMarks * 0.25)) {// check if marks are
																								// greater than 25%
											if (marksObtained >= cm.roundEven(subMaxMarks * 0.35)) {// check if marks
																									// are greater than
																									// 35%
												totalMarksWithoutGrace = totalMarksWithoutGrace + marksObtained;
												marksBeforeGrace.put(subTitleFromMap,
														marksObtained + "|0" + "|" + passFail);// map before calculating
																								// grace
												passFail = "P";
											} else if (isGroupingNeeded) {// check for group sum greater than 35%
												String subjectGroupName = subjectGroupMap.get(subTitleFromMap)
														.toString();
												double subGroupSum = 0.0;
												double subGroupMaxSum = 0.0;
												Set set2 = subjectGroupMap.entrySet();
												Iterator p2 = set2.iterator();

												while (p2.hasNext()) {// loop to check subject sum with group name
													Map.Entry me2 = (Map.Entry) p2.next();
													String subName = me2.getKey().toString();
													String subGroup = me2.getValue().toString();

													if (subjectGroupName.equalsIgnoreCase(subGroup)
															&& !subjectGroupName.equalsIgnoreCase("")) {
														String isOptional = subjectOptionMap.get(subName).toString();
														if (isOptional.equalsIgnoreCase("NO") || (isOptional
																.equalsIgnoreCase("YES")
																&& optionalSubjectList.contains(subName + "_YES"))) {
															String subMarks = subjectMarksMap.get(subName).toString();
															subMarks = subMarks.substring(subMarks.indexOf(",") + 1,
																	subMarks.lastIndexOf(","));
															String subGroupAvg = subMarks;
															if (!subGroupAvg.equalsIgnoreCase("NA")) {
																String subMarksStr = subGroupAvg;
																if (subGroupAvg.contains("+")) {
																	subMarksStr = subGroupAvg.substring(0,
																			subGroupAvg.indexOf("+"));
																} else if (subGroupAvg.contains("F")) {
																	subMarksStr = subGroupAvg.substring(0,
																			subGroupAvg.indexOf("("));
																}
																subGroupSum = subGroupSum
																		+ Double.parseDouble(subMarksStr);
																subGroupMaxSum = subGroupMaxSum + ((Double.parseDouble(
																		maxMarksMap.get(subName).toString())));
															}
														}
													}
												}
												// If sum is greater than 35% then pass
												if ((subGroupSum / subGroupMaxSum) * 100.0 >= 35) {
													double requiredMarks = 0.0;
													if (subMaxMarks > 0) {
														requiredMarks = Double.parseDouble(
																(((35 / (subMaxMarks)) * 100) - marksObtained) + "");
													}
													Long requiredMarksRound = Math.round(requiredMarks);
													totalMarksWithoutGrace = Math
															.round(totalMarksWithoutGrace + marksObtained);
													marksBeforeGrace.put(subTitleFromMap,
															marksObtained + "|" + requiredMarksRound + "|" + passFail);// map
																														// before
																														// calculating
																														// grace
													passFail = "P";
												} else {
													failCount = failCount + 1;
													passFail = "F";
													resultFinal = "FAIL";
													failedSubjects = failedSubjects + "~" + subTitleFromMap;
													double requiredMarks = 0.0;
													if (subMaxMarks > 0) {
														requiredMarks = Double.parseDouble(
																(((35 / (subMaxMarks)) * 100) - marksObtained) + "");
													}
													Long requiredMarksRound = Math.round(requiredMarks);
													totalMarksWithoutGrace = Math
															.round(totalMarksWithoutGrace + marksObtained);
													marksBeforeGrace.put(subTitleFromMap,
															marksObtained + "|" + requiredMarksRound + "|" + passFail);// map
																														// before
																														// calculating
																														// grace
												}
											} else {
												failCount = failCount + 1;
												passFail = "F";
												resultFinal = "FAIL";
												failedSubjects = failedSubjects + "~" + subTitleFromMap;
												totalMarksWithoutGrace = totalMarksWithoutGrace + marksObtained;
												marksBeforeGrace.put(subTitleFromMap,
														marksObtained + "|0" + "|" + passFail);// map before calculating
																								// grace
											}
										} else {
											failCount = failCount + 1;
											passFail = "F";
											resultFinal = "FAIL";
											failedSubjects = failedSubjects + "~" + subTitleFromMap;
											double requiredMarks = 0.0;
											if (subMaxMarks > 0 && isGroupingNeeded) {
												requiredMarks = Double.parseDouble(
														(((35 / (subMaxMarks)) * 100) - marksObtained) + "");
											}
											Long requiredMarksRound = Math.round(requiredMarks);
											totalMarksWithoutGrace = Math.round(totalMarksWithoutGrace + marksObtained);
											marksBeforeGrace.put(subTitleFromMap,
													marksObtained + "|" + requiredMarksRound + "|" + passFail);// map
																												// before
																												// calculating
																												// grace
										}
									}

									studentMarksMap.put(subTitleFromMap, updateGrade);
									studentMarksMapOrder.put(subTitleFromMap, updateGrade);
								}
								//// end of subject while loop

								/// logic for grace allotment///////////
								/******* if failed count is less than 3 then apply grace logic *****/
								String resultAndSubjects = cm.getResultSemester(studentMarksMapOrder, std, maxMarksMap,
										optionalSubjectList, subjectOptionMap, marksBeforeGrace);
								if (failCount <= Integer.parseInt(maxGraceSub) && isGroupingNeeded) {
									Set getMarksBeforeGrace = marksBeforeGrace.entrySet();
									Iterator q = getMarksBeforeGrace.iterator();

									while (q.hasNext()) {
										Map.Entry me1 = (Map.Entry) q.next();
										String subName = me1.getKey().toString();
										String subStr = me1.getValue().toString();
										String gradeMarks = subjectDetailMap.get(subName).toString();
										if (gradeMarks.equalsIgnoreCase("GRADE")) {
											continue;
										}
										double marksToPassDouble = Double.parseDouble(
												subStr.substring(subStr.indexOf("|") + 1, subStr.lastIndexOf("|")));
										int marksToPass = (int) marksToPassDouble;
										if (marksToPass > 0) {
											totalMarksToPass = totalMarksToPass + marksToPass;
											marskInAscending.put(marksToPass + "|" + me1.getKey(), me1.getKey());
										}
									}

									if (totalMarksToPass <= maxGracePerSubject) {// if total grace need is less than or
																					// equal to 15 then apply grace
																					// logic
										Set setGrace = marskInAscending.entrySet();
										Iterator r = setGrace.iterator();
										double graceRemain = totalGrace;
										while (r.hasNext()) {
											Map.Entry me2 = (Map.Entry) r.next();
											String marksStr = me2.getKey().toString();
											double marksNeed = Double
													.parseDouble(marksStr.substring(0, marksStr.indexOf("|")));
											String subMarks = marksBeforeGrace.get(me2.getValue()).toString();
											String marksObtained = subMarks.substring(0, subMarks.indexOf("|"));
											totalMarksWithGrace = totalMarksWithGrace
													+ Double.parseDouble(marksObtained);
											String passStatus = subMarks.substring(subMarks.lastIndexOf("|") + 1);
											if (marksNeed > 0 && graceRemain > 0) {
												subMarks = marksObtained + "|" + marksNeed + "|" + passStatus;
												marksBeforeGrace.put(me2.getValue(), subMarks);
												graceRemain = graceRemain - marksNeed;
											}
										}
									}
								}

								Set setUpdateQuery = marksBeforeGrace.entrySet();
								Iterator q = setUpdateQuery.iterator();

								while (q.hasNext()) {
									Map.Entry me = (Map.Entry) q.next();
									String subject = me.getKey().toString();
									String gradeMarks = subjectDetailMap.get(subject).toString();
									String marksStr = me.getValue().toString();
									String graceMarks = marksStr.substring(marksStr.indexOf("|") + 1,
											marksStr.lastIndexOf("|"));
									graceMarks = Math.round(Double.parseDouble(graceMarks)) + "";
									Double avgMarks = Double.parseDouble(
											marksStr.toString().substring(0, marksStr.toString().indexOf("|")));
									String passFail = marksStr.toString()
											.substring(marksStr.toString().lastIndexOf("|") + 1);
									if (gradeMarks.equalsIgnoreCase("MARKS")
											&& !optionalSubjectList.contains(subject + "_NO")) {
										semesterMarks = semesterMarks + avgMarks;
										totalMarks = totalMarks
												+ ((Double.parseDouble(maxMarksMap.get(subject).toString())));
									} else if (gradeMarks.equalsIgnoreCase("MARKS")) {
										passFail = "NA~0.0";
									}

									updateResultQuery = updateQueryMethod(subjectOptionMap, subjectDetailMap,
											maxMarksMap, subject, optionalSubjectList, subjectAndMarksDB, avgMarks,
											semester, updateResultQuery, passFail, graceMarks, std, isGraceRequired,
											subjectReasonMap);
								}
								subjectReasonMap.clear();
								////////////////
								///////// calculate final result parameters/////////////////////////////
								String semesterProgress = "";
								String semesterResult = "";
								String semesterImprove = "";
								if (totalMarks == 0) {
									cm.showMessageDialog(
											"Please enter marks obtained under marks entry for all students.");
									return false;
								}
								semesterPercent = Math.round((semesterMarks / totalMarks * 100) * 100.0) / 100.0;

								if (isGroupingNeeded) {
									if (failCount > 0 && totalMarksToPass > totalGrace) {
										semesterResult = "FAIL";
										semesterImprove = failedSubjects;
										semesterProgress = "Poor";
									} else if (failCount <= Integer.parseInt(maxGraceSub)
											&& totalMarksToPass <= totalGrace) {
										semesterResult = "PASS";
										if (failCount == 0) {
											semesterImprove = "NA";
										} else {
											semesterImprove = failedSubjects;
										}

										semesterProgress = cm.getProgressFromPercentage(semesterPercent);
									} else if (failCount > Integer.parseInt(maxGraceSub)) {
										semesterResult = "FAIL";
										semesterImprove = failedSubjects;
										semesterProgress = "Poor";
									}
								} else {
									if (failCount > 0) {
										semesterResult = "F" + failCount;
										semesterImprove = failedSubjects;
										semesterProgress = "Poor";
									} else {
										semesterResult = "PASS";
										semesterImprove = "NA";
										semesterProgress = cm.getProgressFromPercentage(semesterPercent);
									}
								}

								if (resultFinal.equalsIgnoreCase("FAIL") && !semesterResult.contains("F")) {
									semesterResult = "FAIL";
								}

								if (stdInt > 8) {
									remark = cm.getResultRemark(semesterResult, semesterPercent);
								} else {
									remark = semesterProgress;
								}

								semesterGrade = cm.getGradeFromMarks(totalMarks, "All", semesterMarks, std);
								updateResultQuery = updateResultQuery + "SUID = " + "'" + suid + "',";
								updateResultQuery = updateResultQuery + semester + "_PERCENT = " + "'" + semesterPercent
										+ "',";
								updateResultQuery = updateResultQuery + semester + "_RESULT = " + "'" + semesterResult
										+ "',";
								updateResultQuery = updateResultQuery + semester + "_PROGRESS = " + "'"
										+ semesterProgress + "',";
								updateResultQuery = updateResultQuery + semester + "_IMPROVE = " + "'" + semesterImprove
										+ "',";
								updateResultQuery = updateResultQuery + semester + "_MARKS = " + "'"
										+ Math.round(semesterMarks) + "',";
								updateResultQuery = updateResultQuery + semester + "_TOTAL = " + "'"
										+ Math.round(totalMarks) + "',";
								updateResultQuery = updateResultQuery + semester + "_REMARK = " + "'" + remark + "',";
								updateResultQuery = updateResultQuery.substring(0, updateResultQuery.length() - 1);
								updateResultQuery = updateResultQuery + " WHERE ACADEMIC_YEAR='" + academic
										+ "' AND GR_NO='" + grNo + "' AND STD_1='" + std + "' AND DIV_1='" + div
										+ "' and SECTION_NM='" + sessionData.getSectionName() + "'";

								resultFinal = "";
								try {
									statement = connection.createStatement();
									statement.executeUpdate(updateResultQuery);
									resultUpdateFlag = true;
								} catch (Exception e) {
									isResultUpdated = false;
									logger.error("result Update Exception ::  " + e);
								}
								marskInAscending.clear();
								totalMarksWithoutGrace = 0;
								//////////////////////////////////////
							} // end of IX & X SEM Data
							else {
								while (i.hasNext()) {
									Map.Entry me = (Map.Entry) i.next();
									String subTitleFromMap = me.getKey().toString();
									subjectTitleError = subTitleFromMap;
									String reasonForAbsence = "";
									String absentForMarks = "";
									String subjectMarks = "";
									double maxMarksForSubject = 0;

									if (optionalSubjectList.contains(subTitleFromMap + "_NO")
											|| (!optionalSubjectList.contains(subTitleFromMap + "_YES")
													&& subjectOptionMapOrder.get(subTitleFromMap)
															.equalsIgnoreCase("YES"))) {
										updateResultQuery = updateResultQuery + subTitleFromMap + "_" + semester + " = "
												+ "'NA',";
										continue;
									}
									if (!compSubjectMap.containsKey(subTitleFromMap)) {
										subjectAndMarksDB = resultSet.getString(subTitleFromMap) == null ? " "
												: (resultSet.getString(subTitleFromMap).trim());

										if (lastKeySubjectOptionMapOrder.equalsIgnoreCase(me.getKey().toString())
												&& subjectAndMarksDB.equalsIgnoreCase("")) {
											if (reply == 0) {
												reply = JOptionPane.showConfirmDialog(null,
														grNo + " => No marks entry details found for " + subTitleFromMap
																+ " ? \n Press No to abort",
														"Confirm to proceed", JOptionPane.YES_NO_OPTION);

												if (reply == JOptionPane.YES_OPTION) {
													subjectAndMarksDB = "0+T0";
												}
											}
										}
									} else if (optionalSubjectList.contains(subTitleFromMap + "_YES")
											|| (compSubjectMap.containsKey(subTitleFromMap) && subjectOptionMapOrder
													.get(subTitleFromMap).equalsIgnoreCase("NO"))) {
										String[] parts = compSubjectMap.get(subTitleFromMap).split(Pattern.quote(","));
										double marksObtained = 0;
										double marksTotal = 0;
										double absentForMarksComp = 0;
										String optSubject = "";
										try {
											for (int l = 0; l < parts.length; l++) {
												optSubject = parts[l];
												String subDetails = resultSet.getString(parts[l]) == null ? " "
														: (resultSet.getString(parts[l]).trim());
												if (subDetails.contains("+")) {
													marksObtained = marksObtained + Double.parseDouble(
															subDetails.substring(0, subDetails.indexOf("+")));
												} else {
													if (subDetails.trim().equalsIgnoreCase("")) {
														subDetails = "0";
													}
													marksObtained = marksObtained + Double.parseDouble(subDetails);
												}

												if (subDetails.contains("MG") || subDetails.contains("AB")
														|| subDetails.contains("RTE")) {
													String reasonForAbsenceComp = subDetails.substring(
															subDetails.indexOf("+") + 1, subDetails.lastIndexOf("+"));
													if (reasonForAbsenceComp.contains("MG")) {
														absentForMarksComp = absentForMarksComp
																+ Double.parseDouble(reasonForAbsenceComp.substring(
																		reasonForAbsenceComp.lastIndexOf("+") + 1));
														reasonForAbsence = "MG";
													} else if (reasonForAbsenceComp.contains("AB")
															&& !reasonForAbsence.equalsIgnoreCase("MG")) {
														reasonForAbsence = "AB";
													} else if (reasonForAbsenceComp.contains("RTE")) {
														reasonForAbsence = "RTE";
													}
												}
												marksTotal = marksTotal + Double.parseDouble(
														subDetails.substring(subDetails.lastIndexOf("T") + 1));
											}
										} catch (Exception e) {
											cm.logException(e);
											if (!subjectTitleError.equalsIgnoreCase("")) {
												subjectTitleError = " \n Also check/edit for subject : " + subjectTitleError;
											}
											cm.showMessageDialog(
													"Before creating result please enter data for marks allotment,student subject allotment,marks entry."
															+ subjectTitleError +" -> "+optSubject);
											f.setVisible(false);
											return false;
										}
										if (reasonForAbsence.equalsIgnoreCase("")) {
											subjectAndMarksDB = marksObtained + "+T" + marksTotal;
										} else {
											subjectAndMarksDB = marksObtained + "+" + reasonForAbsence + "+"
													+ absentForMarksComp + "+T" + marksTotal;
										}
									}
//									subjectAndMarksDB = resultSet.getString(subTitleFromMap) == null ? " " : (resultSet.getString(subTitleFromMap).trim());
									subjectMarks = subjectAndMarksDB;
									if (subjectMarks.equalsIgnoreCase("") || subjectMarks == null
											|| subjectMarks.equalsIgnoreCase("null")) {
										continue;
									}
									if (!cm.validateNumber(subjectMarks) && (subjectMarks.contains("MG")
											|| subjectMarks.contains("AB") || subjectMarks.contains("RTE"))) {
										reasonForAbsence = subjectMarks.substring(subjectMarks.indexOf("+") + 1,
												subjectMarks.lastIndexOf("+"));
										absentForMarks = subjectMarks.substring(subjectMarks.lastIndexOf("+") + 1);
										subjectAndMarksDB = subjectMarks.substring(0, subjectMarks.indexOf("+"));
									} else if (!cm.validateNumber(subjectMarks)) {
										// reasonForAbsence = reasonForAbsence +","+
										// subjectMarks.substring(subjectMarks.indexOf("+")+1,subjectMarks.lastIndexOf("+"));
										// absentForMarks = subjectMarks.substring(subjectMarks.lastIndexOf("+")+1);
										subjectAndMarksDB = subjectMarks.substring(0, subjectMarks.indexOf("+"));
									}
									semesterMarks = semesterMarks + Double.parseDouble(subjectAndMarksDB);
									if (subjectMarks.contains("+T")) {
										maxMarksForSubject = Double
												.parseDouble(subjectMarks.substring(subjectMarks.lastIndexOf("T") + 1));
										maxMarksMapOrder.put(subTitleFromMap.toString(), maxMarksForSubject + "");
									} else {
										maxMarksForSubject = Double
												.parseDouble(maxMarksMapOrder.get(subTitleFromMap.toString()));
									}
									totalMarks = totalMarks + maxMarksForSubject;
									// totalMarks = totalMarks +
									// Integer.parseInt(maxMarksMap.get(subTitleFromMap).toString());

									if (subjectOptionMap.get(subTitleFromMap).toString().equalsIgnoreCase("YES")) {
										if (optionalSubjectList.contains(subTitleFromMap + "_YES")) {
											calculateMarks = true;
										} else {
											calculateMarks = false;
											updateGrade = "NA";
										}
									} else {
										calculateMarks = true;
									}
									String gradeMarks = subjectDetailMap.get(subTitleFromMap).toString();
									if (calculateMarks && gradeMarks.equalsIgnoreCase("GRADE")) {
										updateGrade = cm.getGradeFromMarks(maxMarksForSubject, subTitleFromMap,
												Double.parseDouble(subjectAndMarksDB.toString()), std);
										// updateGrade =
										// cm.getGradeFromMarks(Integer.parseInt(maxMarksMap.get(subTitleFromMap).toString()),
										// subTitleFromMap,
										// Integer.parseInt(subjectAndMarksDB.toString()));
									} else if (calculateMarks) {
										Double marksObtained = Double.parseDouble(subjectAndMarksDB);
//										updateGrade = cm.getPercentFromMarks(Double.parseDouble(maxMarks), subTitleFromMap, marksObtained)+"";
										updateGrade = Math.round(cm.getPercentFromMarks(Double.parseDouble(maxMarks),
												subTitleFromMap, marksObtained)) + "";
										if (marks_flag_std) {
											// calculate marks

										}
									}
									if (reasonForAbsence.contains("MG")) {
										updateGrade = updateGrade + "+MG+" + absentForMarks;
										;
									} else if (reasonForAbsence.contains("AB")) {
										updateGrade = updateGrade + "+AB+" + absentForMarks;
									} else if (reasonForAbsence.contains("RTE")) {
										updateGrade = updateGrade + "+RTE+" + absentForMarks;
										isRTE = true;
									}
									studentMarksMap.put(subTitleFromMap, updateGrade);
									studentMarksMapOrder.put(subTitleFromMap, updateGrade);
									updateResultQuery = updateResultQuery + subTitleFromMap + "_" + semester + " = "
											+ "'" + updateGrade + "',";

									if (lastKeySubjectOptionMapOrder.equalsIgnoreCase(me.getKey().toString())) {
										String semesterProgress = "";
										String semesterResult = "";
										String semesterImprove = "";
										semesterPercent = Math.round((semesterMarks / totalMarks * 100) * 100.0)
												/ 100.0;
										String resultAndSubjects = cm.getResult(studentMarksMapOrder, std,
												maxMarksMapOrder);

										if (!resultAndSubjects.contains("Pass")
												&& !resultAndSubjects.contains("PASS")) {
											semesterResult = resultAndSubjects.substring(0,
													resultAndSubjects.indexOf("|"));
											semesterImprove = resultAndSubjects
													.substring(resultAndSubjects.lastIndexOf("|") + 1);
											semesterProgress = "Poor";
										} else {
											semesterResult = resultAndSubjects.substring(0,
													resultAndSubjects.indexOf("|"));
											semesterImprove = resultAndSubjects
													.substring(resultAndSubjects.lastIndexOf("|") + 1);
											semesterProgress = cm.getProgressFromPercentage(semesterPercent);
										}

										if (stdInt > 8) {
											remark = cm.getResultRemark(semesterResult, semesterPercent);
										} else {
											remark = semesterProgress;
										}

										if (isRTE) {
											semesterProgress = "-";
										}

										semesterGrade = cm.getGradeFromMarks(totalMarks, "All", semesterMarks, std);
										updateResultQuery = updateResultQuery + "SUID = " + "'" + suid + "',";
										updateResultQuery = updateResultQuery + semester + "_PERCENT = " + "'"
												+ semesterPercent + "',";
										updateResultQuery = updateResultQuery + semester + "_RESULT = " + "'"
												+ semesterResult + "',";
										updateResultQuery = updateResultQuery + semester + "_PROGRESS = " + "'"
												+ semesterProgress + "',";
										updateResultQuery = updateResultQuery + semester + "_IMPROVE = " + "'"
												+ semesterImprove + "',";
										updateResultQuery = updateResultQuery + semester + "_MARKS = " + "'"
												+ Math.round(semesterMarks) + "',";
										updateResultQuery = updateResultQuery + semester + "_TOTAL = " + "'"
												+ Math.round(totalMarks) + "',";
										updateResultQuery = updateResultQuery + semester + "_REMARK = " + "'" + remark
												+ "',";
										updateResultQuery = updateResultQuery.substring(0,
												updateResultQuery.length() - 1);
										updateResultQuery = updateResultQuery + " WHERE ACADEMIC_YEAR='" + academic
												+ "' AND GR_NO='" + grNo + "' AND STD_1='" + std + "' AND DIV_1='" + div
												+ "' and SECTION_NM='" + sessionData.getSectionName() + "'";

										try {
											statement = connection.createStatement();
											statement.executeUpdate(updateResultQuery);
											resultUpdateFlag = true;
										} catch (Exception e) {
											isResultUpdated = false;
											f.setVisible(false);
											logger.error("result Update Exception ::  " + e);
										}
									}
									subjectTitleError = "";
								}
							}
						}
					} catch (Exception e) {
						isResultUpdated = false;
						f.setVisible(false);
						cm.logException(e);
						if (!subjectTitleError.equalsIgnoreCase("")) {
							subjectTitleError = " \n Also check/edit for subject : " + subjectTitleError;
						}
						cm.showMessageDialog(
								"Before creating result please enter data for marks allotment,student subject allotment,marks entry."
										+ subjectTitleError);
						f.setVisible(false);
						return false;
					}
				}
				f.setVisible(false);
				try {
					String updateMarksQuery = "UPDATE MARKS_ENTRY SET CHANGED = 0 WHERE STD_1='" + std + "' AND "
							+ "DIV_1='" + div + "' AND ACADEMIC_YEAR='" + academic + "' AND CHANGED = 1";
					logger.info("updateMarksQuery == " + updateMarksQuery);
					statement = connection.createStatement();
					statement.executeUpdate(updateMarksQuery);
				} catch (Exception e) {
					JOptionPane.showMessageDialog(null, "MARKS_ENTRY Updation for changed failed...");
					cm.logException(e);
				}
				if (isResultUpdated == true) {
					JOptionPane.showMessageDialog(null, "Result Updated successfully...");
				} else {
					JOptionPane.showMessageDialog(null, "Result Updation failed...");
				}
			} else {
				JOptionPane.showMessageDialog(null, "No data found to update result");
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Result Updation failed...");
			cm.logException(e);
		}
		return resultUpdateFlag;
	}

	// print unit test result
	public boolean printUnitTestResult(SessionData sessionData, String academic, String std, String div, String exam,
			String section, String lastName, String firstName, String fatherName) throws Exception {
		boolean resultPrintFlag = false;
		LinkedHashMap subjectTitleMap = new LinkedHashMap();
		LinkedHashMap subjectMap = new LinkedHashMap();
		LinkedHashMap studentMap = new LinkedHashMap();
		LinkedHashMap optionalMap = new LinkedHashMap();
		LinkedHashMap optionalAllotmentMap = new LinkedHashMap();
		String semester = "";
		String subject_name = "";
		String optional = "";
		String subject_title = "";
		String subjectQuery = "";
		String max_marks = "";
		String first_name = "";
		String last_name = "";
		String father_name = "";
		String gr_no = "";
		String std_1 = "";
		String div_1 = "";
		String roll_no = "";
		String birth_date = "";

		if (exam.equalsIgnoreCase("FUT")) {
			semester = "SEM1";
		} else if (exam.equalsIgnoreCase("SUT")) {
			semester = "SEM2";
		}

		try {
			String maxMarksQuery = "SELECT OPTIONAL,SUBJECT_NAME,SUBJECT_TITLE,IF(" + semester + "_OBT>0, " + semester
					+ "_OBT, 0) AS MAX_MARKS " + "FROM " + sessionData.getDBName() + "."
					+ "subject_allotment WHERE STD_1='" + std + "' AND ACADEMIC_YEAR='" + academic
					+ "' AND (SECTION_NM='" + sessionData.getSectionName() + "') ORDER BY ORDER_NO ASC";
			logger.info("find maxMarksQuery == " + maxMarksQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(maxMarksQuery);

			while (resultSet.next()) {
				optional = resultSet.getString("OPTIONAL") == null ? " " : (resultSet.getString("OPTIONAL").trim());
				subject_name = resultSet.getString("SUBJECT_NAME") == null ? " "
						: (resultSet.getString("SUBJECT_NAME").trim());
				subject_title = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				max_marks = resultSet.getString("MAX_MARKS") == null ? " " : (resultSet.getString("MAX_MARKS").trim());
				if (subjectTitleMap.get(subject_title) != null) {
					int maxMarksFromMap = Integer.parseInt(subjectTitleMap.get(subject_title).toString())
							+ Integer.parseInt(max_marks);
					subjectTitleMap.put(subject_title, maxMarksFromMap);
				} else if (Integer.parseInt(max_marks) > 0) {
					subjectTitleMap.put(subject_title, max_marks);
				}
				subjectMap.put(subject_name, subject_title);
				optionalMap.put(subject_name, optional);
				subjectQuery = subjectQuery + "," + "IF(" + subject_name + "_" + exam.charAt(0) + "OBT > 0, "
						+ subject_name + "_" + exam.charAt(0) + "OBT, 0) AS " + subject_name;
			}
			subjectTitleMap.put("GRAND TOTAL", "0");
		} catch (Exception e) {
			cm.logException(e);
		}

		try {
			String grNo = "";
			String optionalSubject = "";
			String optional_allotmentQuery = "SELECT GR_NO,OPTIONAL_SUBJECT " + "FROM " + sessionData.getDBName() + "."
					+ "OPTIONAL_ALLOTMENT WHERE PRESENT_STD='" + std + "' AND PRESENT_DIV='" + div + "'"
					+ " AND ACADEMIC_YEAR='" + academic + "' AND (SECTION_NM='" + sessionData.getSectionName()
					+ "') ORDER BY GR_NO ASC";
			logger.info("find optional_allotmentQuery == " + optional_allotmentQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(optional_allotmentQuery);

			while (resultSet.next()) {
				grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				optionalSubject = resultSet.getString("OPTIONAL_SUBJECT") == null ? ""
						: (resultSet.getString("OPTIONAL_SUBJECT").trim());
				optionalAllotmentMap.put(grNo, optionalSubject);
			}
		} catch (Exception e) {
			cm.logException(e);
		}

		try {
			String subName = "";
			String subTitleName = "";
			String obtainedMarksQuery = "SELECT DATE_FORMAT(HS_GENERAL_REGISTER.DOB,'%d/%m/%Y') AS DOB,MARKS_ENTRY.FIRST_NAME,MARKS_ENTRY.LAST_NAME,MARKS_ENTRY.FATHER_NAME,MARKS_ENTRY.GR_NO,MARKS_ENTRY.STD_1,MARKS_ENTRY.DIV_1,MARKS_ENTRY.ROLL_NO"
					+ subjectQuery + " " + "FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY LEFT JOIN "
					+ sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER ON MARKS_ENTRY.GR_NO=HS_GENERAL_REGISTER.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM = MARKS_ENTRY.SECTION_NM WHERE MARKS_ENTRY.STD_1='" + std
					+ "' AND MARKS_ENTRY.DIV_1='" + div + "' " + "AND MARKS_ENTRY.ACADEMIC_YEAR='" + academic
					+ "' AND (MARKS_ENTRY.SECTION_NM='" + sessionData.getSectionName() + "') ORDER BY ROLL_NO * 1";

			logger.info("find obtainedMarksQuery == " + obtainedMarksQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(obtainedMarksQuery);

			while (resultSet.next()) {
				LinkedHashMap marksObtainedMap = new LinkedHashMap();
				first_name = resultSet.getString("FIRST_NAME") == null ? ""
						: (resultSet.getString("FIRST_NAME").trim());
				marksObtainedMap.put("first_name", first_name);
				last_name = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				marksObtainedMap.put("last_name", last_name);
				father_name = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				marksObtainedMap.put("father_name", father_name);
				gr_no = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				marksObtainedMap.put("gr_no", gr_no);
				std_1 = resultSet.getString("STD_1") == null ? " " : (resultSet.getString("STD_1").trim());
				marksObtainedMap.put("std_1", std_1);
				div_1 = resultSet.getString("DIV_1") == null ? " " : (resultSet.getString("DIV_1").trim());
				marksObtainedMap.put("div_1", div_1);
				roll_no = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				marksObtainedMap.put("roll_no", roll_no);
				birth_date = resultSet.getString("DOB") == null ? " " : (resultSet.getString("DOB").trim());
				marksObtainedMap.put("birth_date", birth_date);

				Set set = subjectMap.entrySet();
				Iterator iterator = set.iterator();
				while (iterator.hasNext()) {
					Map.Entry me = (Map.Entry) iterator.next();
					subName = me.getKey().toString();
					subTitleName = me.getValue().toString();
					marksObtainedMap.put(subName,
							resultSet.getString(subName) == null ? " " : (resultSet.getString(subName).trim()));
				}
				studentMap.put(gr_no, marksObtainedMap);
				resultPrintFlag = true;
			}
			if (studentMap.size() == 0) {
				cm.showMessageDialog("Please validate you have entered marks..");
			}
		} catch (Exception e) {
			logger.error("Exception e => " + e);
		}
		ResultUnitTestPDF resultGradePDF = new ResultUnitTestPDF(sessionData, section, academic, subjectTitleMap,
				subjectMap, exam, std, div, studentMap, optionalAllotmentMap, optionalMap);
		return resultPrintFlag;
	}

	/****
	 * marks format as marksObtained(passStatus#reasonForAbsence@AbsentForMarks)
	 *****************/
	public String updateQueryMethod(TreeMap subjectMap, TreeMap subjectDetailMap, TreeMap maxMarksMap, String subject,
			List<String> optionalSubject, String subjectAndMarksDB, double avgMarks, String semester,
			String updateResultQuery, String markFail, String graceMarks, String std, boolean isGraceRequired,
			TreeMap subjectReasonMap) {
		boolean calculateMarks = true;
		String updateGrade = "";
		String reasonForAbsence = "NA";
		String absentForMarks = "NA";
		String reasonDetail = "";

		if (subjectReasonMap.get(subject) != null) {
			reasonDetail = subjectReasonMap.get(subject).toString();
			if (semester.equalsIgnoreCase("FINAL")) {
				reasonForAbsence = reasonDetail;
			} else {
				reasonForAbsence = reasonDetail.substring(0, reasonDetail.indexOf(","));
				absentForMarks = reasonDetail.substring(reasonDetail.indexOf(",") + 1);
			}
		}

		if (subjectMap.get(subject).toString().equalsIgnoreCase("YES")) {
			if (optionalSubject.contains(subject + "_YES")) {
				calculateMarks = true;
			} else {
				calculateMarks = false;
				updateGrade = "NA";
			}
		} else {
			calculateMarks = true;
		}

		String gradeMarks = subjectDetailMap.get(subject).toString();
		if (calculateMarks && gradeMarks.equalsIgnoreCase("GRADE") && semester.equalsIgnoreCase("FINAL")) {
			updateGrade = cm.getGradeFromMarks((Double.parseDouble(maxMarksMap.get(subject).toString()) / 2), subject,
					Double.parseDouble(avgMarks + ""), std);
		} else if (calculateMarks && gradeMarks.equalsIgnoreCase("GRADE")) {
			updateGrade = cm.getGradeFromMarks(Double.parseDouble(maxMarksMap.get(subject).toString()), subject,
					Double.parseDouble(avgMarks + ""), std);
		} else if (calculateMarks) {
			updateGrade = Math.round(avgMarks) + "";
		}

		if (!graceMarks.equalsIgnoreCase("0") && gradeMarks.equalsIgnoreCase("MARKS") && isGraceRequired
				&& !updateGrade.equalsIgnoreCase("NA")) {
			updateGrade = updateGrade + "+" + graceMarks;
		}
		if (semester.equalsIgnoreCase("FINAL")) {
			updateGrade = updateGrade + "(" + markFail + "#" + reasonForAbsence + "@" + absentForMarks + ")";
		} else {
			String avgMarksForGrade = "";
			if (gradeMarks.equalsIgnoreCase("GRADE")) {
				avgMarksForGrade = "+" + avgMarks;
			}
			updateGrade = updateGrade + avgMarksForGrade + "(" + markFail + "#" + reasonForAbsence + "@"
					+ absentForMarks + ")";
		}

		if (!updateGrade.equalsIgnoreCase("NA")) {
			updateResultQuery = updateResultQuery + subject + "_" + semester + " = " + "'" + updateGrade + "',";
		}
		return updateResultQuery;
	}

	// /////////createUser////////////////////////////
	public boolean createUser(SessionData sessionData, String firstName, String lastName, String userName,
			String password, String role, String contact, String email, String secQuest_1, String secAns_1,
			String secQuest_2, String secAns_2, String secQuest_3, String secAns_3, String user_status)
			throws Exception {

		logger.info("========createUser==========");
		boolean insertFlag = false;
		String insertNewUser = "";
		int udpdateCount = 0;
		try {
			insertNewUser = "INSERT INTO APP_USERS "
					+ "(FIRST_NAME,LAST_NAME,USERNAME,PASSWORD,ROLE,CONTACT,EMAIL,SECRET_QUEST_1,SECRET_ANS_1,SECRET_QUEST_2,SECRET_ANS_2,SECRET_QUEST_3,SECRET_ANS_3,CREATE_DATE,USER_STATUS) "
					+ "VALUES ('" + firstName.trim().toUpperCase() + "','" + lastName.trim().toUpperCase() + "','"
					+ userName.trim().toUpperCase() + "'" + ",'" + password.trim() + "','" + role.trim().toUpperCase()
					+ "','" + contact.trim().toUpperCase() + "','" + email.trim().toUpperCase() + "'" + ",'"
					+ secQuest_1.trim().toUpperCase() + "','" + secAns_1.trim().toUpperCase() + "'" + ",'"
					+ secQuest_2.trim().toUpperCase() + "','" + secAns_2.trim().toUpperCase() + "'" + ",'"
					+ secQuest_3.trim().toUpperCase() + "','" + secAns_3.trim().toUpperCase() + "',SYSDATE(), '"
					+ user_status + "')";

			// logger.info("insertNewUser query===>" + insertNewUser);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(insertNewUser);
			if (udpdateCount > 0) {
				insertFlag = true;
				logger.info(udpdateCount + " data for createUser " + userName + " inserted successfully.");
			}

		} catch (Exception e) {
			logger.error("createUser Exception=" + e);
		}
		return insertFlag;
	}

	// /////////updateUser////////////////////////////
	public boolean updateUser(SessionData sessionData, String password, String secQuest_1, String secAns_1,
			String secQuest_2, String secAns_2, String secQuest_3, String secAns_3) throws Exception {

		logger.info("========updateUser==========");
		boolean updateFlag = false;
		String updateNewUser = "";
		int udpdateCount = 0;
		try {
			updateNewUser = "UPDATE APP_USERS SET PASSWORD = '" + password + "', " + "SECRET_QUEST_1 = '"
					+ secQuest_1.trim().toUpperCase() + "', SECRET_ANS_1 = '" + secAns_1.trim().toUpperCase() + "', "
					+ "SECRET_QUEST_2 = '" + secQuest_2.trim().toUpperCase() + "', SECRET_ANS_2 = '"
					+ secAns_2.trim().toUpperCase() + "', " + "SECRET_QUEST_3 = '" + secQuest_3.trim().toUpperCase()
					+ "', SECRET_ANS_3 = '" + secAns_3.trim().toUpperCase() + "', USER_STATUS='OLD' "
					+ "WHERE USERNAME='" + sessionData.getUserName().toUpperCase() + "' AND ROLE='"
					+ sessionData.getUserRole().toUpperCase() + "'";

			// logger.info("insertNewUser query===>" + insertNewUser);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(updateNewUser);
			if (udpdateCount > 0) {
				updateFlag = true;
				logger.info("Password updated successfully for " + sessionData.getUserName().toUpperCase() + ".");
			}

		} catch (Exception e) {
			logger.error("createUser Exception=" + e);
		}
		return updateFlag;
	}

	// /////////updateSecret////////////////////////////
	public boolean updateSecret(SessionData sessionData, String secQuest_1, String secAns_1, String secQuest_2,
			String secAns_2, String secQuest_3, String secAns_3, String contact, String email) throws Exception {

		logger.info("========updateSecret==========");
		boolean updateFlag = false;
		String updateSecret = "";
		int udpdateCount = 0;
		try {
			updateSecret = "UPDATE APP_USERS SET SECRET_QUEST_1 = '" + secQuest_1.trim() + "', SECRET_ANS_1 = '"
					+ secAns_1.trim() + "', " + "SECRET_QUEST_2 = '" + secQuest_2.trim() + "', SECRET_ANS_2 = '"
					+ secAns_2.trim() + "', " + "SECRET_QUEST_3 = '" + secQuest_3.trim() + "', SECRET_ANS_3 = '"
					+ secAns_3.trim() + "', CONTACT='" + contact + "',EMAIL='" + email + "' " + "WHERE USERNAME='"
					+ sessionData.getUserName() + "' AND ROLE='" + sessionData.getUserRole() + "'";

			// logger.info("insertNewUser query===>" + insertNewUser);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(updateSecret);
			sessionData.setSecretQuestion1(secQuest_1.trim());
			sessionData.setSecretQuestion2(secQuest_2.trim());
			sessionData.setSecretQuestion3(secQuest_3.trim());
			sessionData.setSecretAnswer1(secAns_1.trim());
			sessionData.setSecretAnswer2(secAns_2.trim());
			sessionData.setSecretAnswer3(secAns_3.trim());
			sessionData.setUserContact(contact);
			sessionData.setUserEmail(email);
			if (udpdateCount > 0) {
				updateFlag = true;
				logger.info(
						"Secret Question updated successfully for " + sessionData.getUserName().toUpperCase() + ".");
			}

			/// add admin contact details///
			String adminuser = "admin";
			if (sessionData.getUserName().equalsIgnoreCase("prp")) {
				adminuser = "prp";
			}
			String query = "SELECT * FROM " + sessionData.getDBName() + "." + "APP_USERS WHERE USERNAME='" + adminuser
					+ "' AND ROLE='ADMINISTRATOR'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				sessionData.setAdminContact(resultSet.getString("CONTACT"));
			}
		} catch (Exception e) {
			logger.error("Secret Question Exception=" + e);
		}
		return updateFlag;
	}

	// /////////updatePassword////////////////////////////
	public boolean updatePassword(SessionData sessionData, String password) throws Exception {

		logger.info("========updatePassword==========");
		boolean updateFlag = false;
		String updatePassword = "";
		int udpdateCount = 0;
		try {
			updatePassword = "UPDATE APP_USERS SET PASSWORD = '" + password + "', USER_STATUS='OLD' "
					+ "WHERE USERNAME='" + sessionData.getUserName().toUpperCase() + "' AND ROLE='"
					+ sessionData.getUserRole().toUpperCase() + "'";

			// logger.info("insertNewUser query===>" + insertNewUser);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(updatePassword);
			if (udpdateCount > 0) {
				updateFlag = true;
				logger.info("Password updated successfully for " + sessionData.getUserName().toUpperCase() + ".");
			}

		} catch (Exception e) {
			logger.error("createUser Exception=" + e);
		}
		return updateFlag;
	}

	/////////// getSecretQuestions////////////////////////////////////////
	public String getSecretQuestions(SessionData sessionData, String userName) throws Exception {

		logger.info("=========getSecretQuestions Query============");
		String findQuery = "";
		String secretQuestions = "";
		String secretQuestion1 = "";
		String secretQuestion2 = "";
		String secretQuestion3 = "";
		String userStatus = "";
		boolean findFlag = false;

		try {
			findQuery = "SELECT SECRET_QUEST_1,SECRET_QUEST_2,SECRET_QUEST_3,USER_STATUS FROM "
					+ sessionData.getDBName() + "." + "APP_USERS " + "WHERE USERNAME='" + userName + "'";

			logger.info("getSecretQuestions query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				secretQuestion1 = resultSet.getString("SECRET_QUEST_1") == null ? ""
						: (resultSet.getString("SECRET_QUEST_1").trim());
				secretQuestion2 = resultSet.getString("SECRET_QUEST_2") == null ? ""
						: (resultSet.getString("SECRET_QUEST_2").trim());
				secretQuestion3 = resultSet.getString("SECRET_QUEST_3") == null ? ""
						: (resultSet.getString("SECRET_QUEST_3").trim());
				userStatus = resultSet.getString("USER_STATUS") == null ? ""
						: (resultSet.getString("USER_STATUS").trim());
				findFlag = true;
			}
			secretQuestions = secretQuestion1 + "," + secretQuestion2 + "," + secretQuestion3;
			logger.info("secretQuestions=" + secretQuestions);
		} catch (Exception e) {
			logger.error("getSecretQuestions Exception=" + e);
		}
		return secretQuestions;
	}

	/////////// getPassword////////////////////////////////////////
	public boolean getPassword(SessionData sessionData, String userName, String question1, String answer1,
			String question2, String answer2, String question3, String answer3) throws Exception {

		logger.info("=========getPassword Query============");
		String findQuery = "";
		boolean findFlag = false;

		try {
			findQuery = "SELECT USERNAME FROM " + sessionData.getDBName() + "." + "APP_USERS WHERE USERNAME='"
					+ userName + "' AND " + "SECRET_QUEST_1='" + question1 + "' AND SECRET_ANS_1='" + answer1 + "' AND "
					+ "SECRET_QUEST_2='" + question2 + "' AND SECRET_ANS_2='" + answer2 + "' AND " + "SECRET_QUEST_3='"
					+ question3 + "' AND SECRET_ANS_3='" + answer3 + "'";

			logger.info("getPassword query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				findFlag = true;
			}
			logger.info("getPassword findFlag=" + findFlag);
		} catch (Exception e) {
			logger.error("getSecretQuestions Exception=" + e);
		}
		return findFlag;
	}

	// /////////updateForgotPassword////////////////////////////
	public boolean updateForgotPassword(SessionData sessionData, String userName, String password) throws Exception {

		logger.info("========updateForgotPassword==========");
		boolean updateFlag = false;
		String updateQuery = "";
		int udpdateCount = 0;
		try {
			updateQuery = "UPDATE APP_USERS SET PASSWORD = '" + password + "' WHERE USERNAME='" + userName.toUpperCase()
					+ "'";

			logger.info("updateForgotPassword query===>" + updateQuery);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(updateQuery);
			if (udpdateCount > 0) {
				updateFlag = true;
				logger.info("Password updated successfully for " + sessionData.getUserName().toUpperCase() + ".");
			}

		} catch (Exception e) {
			logger.error("createUser Exception=" + e);
		}
		return updateFlag;
	}

	// /////////recordsNotInAttendance////////////////////////////////////////
	public List<String> recordsNotInAttendanceForDate(SessionData sessionData, String std, String div,
			String academicYear, String section, String selectedDate, String defaultStatus) throws Exception {

		logger.info("=========recordsNotInAttendance Query============");
		String findQuery = "";
		String firstName = "";
		String lastName = "";
		String fatherName = "";
		String rollNo = "", contact1 = "", contact2 = "";
		String grNo = "", lcDate = "";
		String queryCondition = "";
		boolean findFlag = false;
		List recordsNotInAttendanceList = new ArrayList();
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		String addToQuery = "";

		selectedDate = cm.dateFormat_yyyymmdd(selectedDate);

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);

		if (defaultStatus.equalsIgnoreCase("")) {
			defaultStatus = " ";
		}
		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = " CLASS_ALLOTMENT.PRESENT_STD = '" + std + "'  AND  CLASS_ALLOTMENT.PRESENT_DIV = '" + div
					+ "' AND  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear + "' AND ROLL_NO IS NOT null";
		}

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);

			findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,CLASS_ALLOTMENT.GR_NO,CLASS_ALLOTMENT.FIRST_NAME,CLASS_ALLOTMENT.LAST_NAME,CLASS_ALLOTMENT.FATHER_NAME,"
					+ "CLASS_ALLOTMENT.ROLL_NO,CLASS_ALLOTMENT.ACADEMIC_YEAR,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2 "
					+ "FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN " + sessionData.getDBName()
					+ "." + "HS_GENERAL_REGISTER ON CLASS_ALLOTMENT.GR_NO=HS_GENERAL_REGISTER.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM = CLASS_ALLOTMENT.SECTION_NM "
					+ "WHERE CLASS_ALLOTMENT.GR_NO NOT IN (SELECT ATTENDANCE.GR_NO FROM " + sessionData.getDBName()
					+ "." + "ATTENDANCE " + "WHERE DATE(ATTENDACE_DATE) = '" + selectedDate
					+ "' AND ATTENDANCE.ACADEMIC_YEAR = '" + academicYear + "') " + " AND CLASS_ALLOTMENT.SECTION_NM='"
					+ sessionData.getSectionName() + "' AND  " + queryCondition + " ORDER BY ROLL_NO * 1";

			logger.info("recordsNotInAttendanceList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

//			recordsNotInAttendanceList.add("Roll No.|Gr No.|Name|Attendance");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				lcDate = studentLCMap.get(grNo);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicYear)) {
					continue;
				}
				firstName = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				lastName = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				contact1 = resultSet.getString("CONTACT_1") == null ? "0" : (resultSet.getString("CONTACT_1").trim());
				contact2 = resultSet.getString("CONTACT_2") == null ? "0" : (resultSet.getString("CONTACT_2").trim());

				if (contact1.trim().equalsIgnoreCase("")) {
					contact1 = "0";
				}
				if (contact2.trim().equalsIgnoreCase("")) {
					contact2 = "0";
				}

				recordsNotInAttendanceList.add(rollNo + "|" + grNo + "|" + lastName + " " + firstName + " " + fatherName
						+ "|" + defaultStatus + "|" + contact1 + "|" + contact2);
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return recordsNotInAttendanceList;
	}

	// /////////recordsFoundInAttendanceForDate////////////////////////////////////////
	public List<String> recordsFoundInAttendanceForDate(SessionData sessionData, String std, String div,
			String academicYear, String section, String selectedDate, String defaultStatus) throws Exception {

		logger.info("=========recordsFoundInAttendanceForDate Query============");
		String findQuery = "";
		String name = "";
		String attendStatus = "";
		String attendDate = "";
		String rollNo = "", contactNo1 = "", contactNo2 = "";
		String grNo = "", lcDate = "";
		String queryCondition = "";
		boolean findFlag = false;
		List recordsInAttendanceList = new ArrayList();
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		String addToQuery = "";

		selectedDate = cm.dateFormat_yyyymmdd(selectedDate);

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);

			findQuery = "SELECT CLASS_ALLOTMENT.ROLL_NO,ATTENDANCE.GR_NO,"
					+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
					+ "ATTENDANCE.ATTENDACE_STATUS,DATE_FORMAT(ATTENDANCE.ATTENDACE_DATE, '%d/%m/%Y') AS ATTENDAE_DATE,HS_GENERAL_REGISTER.CONTACT_1,HS_GENERAL_REGISTER.CONTACT_2 "
					+ "FROM " + sessionData.getDBName() + "." + "ATTENDANCE LEFT JOIN " + sessionData.getDBName()
					+ "." + "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO " + "LEFT JOIN "
					+ sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
					+ "WHERE ATTENDANCE.ACADEMIC_YEAR = '" + academicYear + "' AND DATE(ATTENDACE_DATE) = '"
					+ selectedDate + "' AND CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' "
					+ "AND CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' ORDER BY CLASS_ALLOTMENT.ROLL_NO * 1";

			logger.info("recordsInAttendanceList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
//			recordsInAttendanceList.add("Roll No.|Gr No.|Name|Attendance");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				lcDate = studentLCMap.get(grNo);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicYear)) {
					continue;
				}
				name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				attendStatus = resultSet.getString("ATTENDACE_STATUS") == null ? " "
						: (resultSet.getString("ATTENDACE_STATUS").trim());
				contactNo1 = resultSet.getString("CONTACT_1") == null ? "0" : (resultSet.getString("CONTACT_1").trim());
				contactNo2 = resultSet.getString("CONTACT_2") == null ? "0" : (resultSet.getString("CONTACT_2").trim());
//				attendDate = resultSet.getString("ATTENDAE_DATE") == null ? " " : (resultSet.getString("ATTENDAE_DATE").trim());

				if (attendStatus.equalsIgnoreCase("P")) {
					attendStatus = "PRESENT";
				} else if (attendStatus.equalsIgnoreCase("A")) {
					attendStatus = "ABSENT";
				} else if (attendStatus.equalsIgnoreCase("H")) {
					attendStatus = "HOLIDAY";
				} else if (attendStatus.equalsIgnoreCase("M")) {
					attendStatus = "MEDICAL";
				}

				if (contactNo1.trim().equalsIgnoreCase("")) {
					contactNo1 = "0";
				}
				if (contactNo2.trim().equalsIgnoreCase("")) {
					contactNo2 = "0";
				}

				recordsInAttendanceList.add(
						rollNo + "|" + grNo + "|" + name + "|" + attendStatus + "|" + contactNo1 + "|" + contactNo2);
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return recordsInAttendanceList;
	}

	// /////////insertRecordsNotInAttendance////////////////////////////
	public boolean insertRecordsNotInAttendance(SessionData sessionData, List<String> recordsNotInAttendance,
			String std, String div, String academicSel) throws Exception {

		logger.info("========insertRecordsNotInAttendance==========");
		boolean insertFlag = false;
		String insertNewrecords = "";
		int udpdateCount = 0;
		String grNo = "";
		String firstName = "";
		String lastName = "";
		String fatherName = "";
		String rollNo = "";
//		String academicYear = "";

		try {

			for (int i = 0; i <= recordsNotInAttendance.size(); i++) {
				udpdateCount++;
				String newRecord = recordsNotInAttendance.get(i);
				grNo = newRecord.substring(0, newRecord.indexOf("|"));
				firstName = newRecord.substring(newRecord.indexOf("|") + 1, newRecord.indexOf("||"));
				lastName = newRecord.substring(newRecord.indexOf("||") + 2, newRecord.indexOf("|||"));
				fatherName = newRecord.substring(newRecord.indexOf("|||") + 3, newRecord.indexOf("||||"));
				rollNo = newRecord.substring(newRecord.indexOf("||||") + 4, newRecord.indexOf("|||||"));
//				academicYear = newRecord.substring(newRecord.lastIndexOf("|||||") + 5);

				insertNewrecords = "INSERT INTO ATTENDANCE "
						+ "(GR_NO,FIRST_NAME,LAST_NAME,FATHER_NAME,ROLL_NO,ACADEMIC_YEAR,PRESENT_STD,PRESENT_DIV) "
						+ "VALUES ('" + grNo.trim().toUpperCase() + "','" + firstName.trim().toUpperCase() + "','"
						+ lastName.trim().toUpperCase() + "','" + fatherName.trim().toUpperCase() + "'" + ",'"
						+ rollNo.trim() + "','" + academicSel.trim() + "','" + std.trim() + "','" + div.trim() + "')";

				// logger.info("insertNewUser query===>" + insertNewUser);
				statement = connection.createStatement();
				udpdateCount = statement.executeUpdate(insertNewrecords);

			}
			logger.info("New records inserted in attendance academic year " + academicSel + " for std " + std
					+ " and div " + div + "is " + udpdateCount);

		} catch (Exception e) {
			logger.error("createUser Exception=" + e);
		}
		return insertFlag;
	}

	// /////////attendanceUpdate List////////////////////////////////////////
	public List<String> attendanceUpdateList(SessionData sessionData, String std, String div, String academicYear,
			String section) throws Exception {

		logger.info("=========attendanceUpdateList Query============");
		String findQuery = "";
		String firstName = "";
		String lastName = "";
		String fatherName = "";
		String rollNo = "";
		String grNo = "";
		String queryCondition = "";
		boolean findFlag = false;
		List attendanceUpdateList = new ArrayList();
		String addToQuery = "";

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = " PRESENT_STD = '" + std + "'  AND  PRESENT_DIV = '" + div + "' AND  ACADEMIC_YEAR = '"
					+ academicYear + "'";
		}

		try {
			findQuery = "SELECT GR_NO,FIRST_NAME,LAST_NAME,FATHER_NAME,ROLL_NO,ACADEMIC_YEAR FROM "
					+ sessionData.getDBName() + "." + "ATTENDANCE WHERE " + queryCondition + " ORDER BY ROLL_NO * 1";

			logger.info("attendanceUpdateList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				firstName = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				lastName = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());

				if (lastName.equalsIgnoreCase("")) {
					lastName = " ";
				}
				if (fatherName.equalsIgnoreCase("")) {
					fatherName = " ";
				}

				attendanceUpdateList.add(rollNo + "|" + grNo + "||" + firstName + " " + lastName + " " + fatherName
						+ "|||" + academicYear);
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return attendanceUpdateList;
	}

	// /////////////insertStudentAttendance///////////////////////////////
	public boolean insertStudentAttendance(SessionData sessionData, List<String> studentList, String academic,
			String std, String div, boolean isUpdate, String section, String fromDate, String toDate,
			String updateAllStatus) throws Exception {

		logger.info("=======inside insertStudentAttendance========");
		String updateQuery = "";
		String subject = "";
		String attendanceStatus = "";
		String contact1 = "", contact2 = "";
		String smsTemplate = "";
		String fromDateUpdate = cm.dateFormat_yyyymmdd(fromDate);
		List<String> passGrList = new ArrayList();
		LinkedHashMap foundStudentMap = new LinkedHashMap<>();
		LinkedHashMap grMap = new LinkedHashMap<>();
		String smsText = "", sms_attendance_flag = "", smsTemplateId = "";
		String smsType = "Send Sms";

		int udpdateCount = 0;
		try {
			smsTemplate = sessionData.getConfigMap().get("SMS_ABSENT");
			smsTemplateId = sessionData.getConfigMap().get("SMS_ABSENT_TEMP_ID");
			sms_attendance_flag = sessionData.getConfigMap().get("SMS_ATTENDANCE_FLAG");

			if (connectDatabase(sessionData)) {

				String[] studentArray = new String[studentList.size()];
				studentArray = (String[]) studentList.toArray(studentArray);
				logger.info("studentArray === " + studentArray.length);

				for (int k = 0; k < studentArray.length; k++) {

					int tokenSize = 0;
					int m = 0;

					StringTokenizer st = new StringTokenizer(studentArray[k], "|");
					tokenSize = st.countTokens();
					String[] columnArray = new String[tokenSize];
					while (st.hasMoreTokens()) {
						columnArray[m] = st.nextToken();
						m++;
					}

					attendanceStatus = updateAllStatus;
					if (tokenSize > 3) {
						attendanceStatus = columnArray[3];
					}
					attendanceStatus = attendanceStatus.substring(0, 1);

					if (tokenSize > 4) {
						contact1 = columnArray[4];
					}
					if (tokenSize > 5) {
						contact2 = columnArray[5];
					}

					if (isUpdate) {
						updateQuery = "UPDATE ATTENDANCE SET ATTENDACE_STATUS='" + attendanceStatus + "' "
								+ "WHERE GR_NO='" + columnArray[1] + "' AND ACADEMIC_YEAR='" + academic
								+ "' AND DATE(ATTENDACE_DATE) = '" + fromDateUpdate + "'";
					} else {
						updateQuery = "INSERT INTO ATTENDANCE " + "(GR_NO,ACADEMIC_YEAR,ATTENDACE_STATUS,SUBJECT,"
								+ "ATTENDACE_DATE,MODIFIED_BY,SECTION_NM) " + "VALUES ('" + columnArray[1] + "','"
								+ academic + "'," + "'" + attendanceStatus + "','" + subject.toUpperCase()
								+ "',STR_TO_DATE('" + fromDate.trim().toUpperCase() + "', '%d/%m/%Y')," + "'"
								+ sessionData.getUserName() + "','" + section + "')";
					}
					logger.info("insertStudentAttendance query " + k + " :: " + updateQuery);
					statement = connection.createStatement();
					udpdateCount = udpdateCount + statement.executeUpdate(updateQuery);

					// send sms to absent student////
					if (attendanceStatus.equalsIgnoreCase("A") && sms_attendance_flag.equalsIgnoreCase("true")) {
						passGrList.clear();
						foundStudentMap.clear();
						grMap.clear();

						passGrList.add(columnArray[1]);
						grMap.put("gr_no", columnArray[1]);
						grMap.put("std", std);
						grMap.put("div", div);
						grMap.put("roll_no", columnArray[0]);
						grMap.put("name", columnArray[2]);
						grMap.put("contact1", contact1);
						grMap.put("contact2", contact2);
						foundStudentMap.put(columnArray[1], grMap);
						smsText = smsTemplate.replace("#name#", columnArray[2]);
						smsText = smsText.replace("#std#", std);
						smsText = smsText.replace("#div#", div);
						if(fromDate != null && !fromDate.equalsIgnoreCase("")) {
							smsText = smsText.replace("#date#", fromDate);
						}
						else {
							smsText = smsText.replace("#date#", cm.getCurrentDate());
						}

						String smsResponse = cm.sendHspSms(sessionData, passGrList, foundStudentMap, smsText, smsTemplateId, section,
								smsType, academic, std, div, "", "ATT");
						if (!smsResponse.contains("connecting")) {
							smsResponse = "SMS sent successfully...";
						}
					}

				}
			}
			logger.info("StudentAttendance data updated successfully..." + udpdateCount);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	// /////////////Update Manual Attendance///////////////////////////////
	public boolean updateManualAttendance(SessionData sessionData, List<String> studentList, String academic,
			String std, String div, boolean isUpdate, String section, String exam, String month) throws Exception {

		logger.info("=======inside updateManualAttendance========");
		String updateQuery = "", updateResultAttendance = "";
		String grStr = "";
		String columnName = "", totCol = "", resultCol = "";
		String attendanceStatus = "", total = "";

		int udpdateCount = 0;
		try {

			if (connectDatabase(sessionData)) {

				String[] studentArray = new String[studentList.size()];
				studentArray = (String[]) studentList.toArray(studentArray);

				if (!month.equalsIgnoreCase("") && !month.equalsIgnoreCase("All")) {
					columnName = month.substring(0, 3) + "_";
					totCol = columnName + "TOT";
				} else if (exam.equalsIgnoreCase("Semester 1")) {
					columnName = "SEM1";
					totCol = columnName + "_TOT";
					resultCol = "ATT_" + columnName;
				} else if (exam.equalsIgnoreCase("Semester 2")) {
					columnName = "SEM2";
					totCol = columnName + "_TOT";
					resultCol = "ATT_" + columnName;
				} else if (exam.equalsIgnoreCase("Final")) {
					columnName = "FINAL";
					totCol = columnName + "_TOT";
					resultCol = "ATT_" + columnName;
				}

				for (int k = 0; k < studentArray.length; k++) {

					int tokenSize = 0;
					int m = 0;

					StringTokenizer st = new StringTokenizer(studentArray[k], "|");
					tokenSize = st.countTokens();
					String[] columnArray = new String[tokenSize];
					while (st.hasMoreTokens()) {
						columnArray[m] = st.nextToken();
						m++;
					}

					if (tokenSize > 3) {
						attendanceStatus = columnArray[3];
					}

					updateQuery = updateQuery + " WHEN '" + columnArray[1] + "' THEN '"
							+ attendanceStatus.substring(0, attendanceStatus.indexOf("/")) + "'";
					
					updateResultAttendance = updateResultAttendance + " WHEN '" + columnArray[1] + "' THEN '" + attendanceStatus + "'";
					
					grStr = grStr + ",'" + columnArray[1] + "'";
					if (k == 0) {
						total = attendanceStatus.substring(attendanceStatus.indexOf("/") + 1);
					}
				}
				grStr = grStr.substring(1);
//					updateQuery = "UPDATE HS_GENERAL_REGISTER SET ATT_"+exam+" = CASE GR_NO " + updateQuery;
//					updateQuery = updateQuery + " ELSE ATT_SEM1 END WHERE GR_NO IN("+grStr+") AND ACADEMIC_YEAR = '"+academic+"' "
//							+ "and SECTION_NM='"+sessionData.getSectionName()+"'";

				updateQuery = "UPDATE ATTENDANCE_PERIOD SET " + totCol + "=" + total + "," + columnName
						+ " = CASE GR_NO " + updateQuery;
				updateQuery = updateQuery + " ELSE " + columnName + " END WHERE GR_NO IN(" + grStr
						+ ") AND ACADEMIC_YEAR = '" + academic + "' " + "and SECTION_NM='"
						+ sessionData.getSectionName() + "'";
				statement = connection.createStatement();
				udpdateCount = udpdateCount + statement.executeUpdate(updateQuery);
				
				if(!exam.equalsIgnoreCase("Select")) {
					updateResultAttendance = "UPDATE HS_GENERAL_REGISTER SET " + resultCol
							+ " = CASE GR_NO " + updateResultAttendance;
					updateResultAttendance = updateResultAttendance + " ELSE " + resultCol + " END WHERE GR_NO IN(" + grStr
							+ ") AND ACADEMIC_YEAR = '" + academic + "' " + "and SECTION_NM='" + sessionData.getSectionName() + "'";
					statement = connection.createStatement();
					udpdateCount = udpdateCount + statement.executeUpdate(updateResultAttendance);
				}
			}
			logger.info("StudentAttendance data updated successfully..." + udpdateCount);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	/////////////// markVacationtAttendance///////////////////////////////
	public boolean markVacationtAttendance(SessionData sessionData, List<String> studentList, String academic,
			String std, String div, boolean isUpdate, String section, String fromDate, String toDate,
			String updateAllStatus) throws Exception {

		logger.info("=======inside insertStudentAttendance========");
		String updateQuery = "";
		String valueQuery = "";
		String subject = "";
		String attendanceStatus = "";
		String fromDateUpdate = cm.dateFormat_yyyymmdd(fromDate);
		updateAllStatus = "HOLIDAY";
		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal = Calendar.getInstance();
		int numberOfDays = 0;
		int udpdateCount = 0;
		String dateToUpdate = "";

		try {

			if (connectDatabase(sessionData)) {

				String[] studentArray = new String[studentList.size()];
				studentArray = (String[]) studentList.toArray(studentArray);
				updateQuery = "INSERT INTO ATTENDANCE " + "(GR_NO,ACADEMIC_YEAR,ATTENDACE_STATUS,SUBJECT,"
						+ "ATTENDACE_DATE,MODIFIED_BY,SECTION_NM) " + "VALUES ";

				Date dateFrom = formatter.parse(fromDate);
				Date dateTo = formatter.parse(toDate);
				numberOfDays = cm.daysBetween(dateFrom, dateTo);

				for (int i = 0; i <= numberOfDays; i++) {
					cal.setTime(formatter.parse(fromDate));
					if (i != 0) {
						cal.add(Calendar.DATE, 1);
					}
					dateToUpdate = formatter.format(cal.getTime()).toString();

					for (int k = 0; k < studentArray.length; k++) {

						int tokenSize = 0;
						int m = 0;

						StringTokenizer st = new StringTokenizer(studentArray[k], "|");
						tokenSize = st.countTokens();
						String[] columnArray = new String[tokenSize];
						while (st.hasMoreTokens()) {
							columnArray[m] = st.nextToken();
							m++;
						}

						attendanceStatus = updateAllStatus;
						if (tokenSize > 3) {
							attendanceStatus = columnArray[3];
						}

						attendanceStatus = attendanceStatus.substring(0, 1);

						valueQuery = valueQuery + "('" + columnArray[1] + "','" + academic + "'," + "'"
								+ attendanceStatus + "','" + subject.toUpperCase() + "',STR_TO_DATE('"
								+ dateToUpdate.trim().toUpperCase() + "', '%d/%m/%Y')," + "'"
								+ sessionData.getUserName() + "','" + section + "'),";
					}

					fromDate = dateToUpdate;
				}
				updateQuery = updateQuery + valueQuery;
				updateQuery = updateQuery.substring(0, updateQuery.lastIndexOf(","));
				statement = connection.createStatement();
				udpdateCount = udpdateCount + statement.executeUpdate(updateQuery);
			}
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	/////////////// Attendance Report///////////////////////////////
	public List<String> attendanceStatus(SessionData sessionData, String academic, String std, String div,
			String section, String fromDate, String toDate, String month, String year, int noOfDays) throws Exception {

		logger.info("=======inside attendanceStatus========");
		String reportQuery = "";
		String findQuery = "";
		String attendanceStatus = "";
		String distinctDate = "";
		String grNo = "";
		String roll_no = "";
		String name = "";
		String statusCount = "";
		String fromDateReport = cm.dateFormat_yyyymmdd(fromDate);
		String toDateReport = cm.dateFormat_yyyymmdd(toDate);
		List dateReport = new ArrayList();
		List attendanceReport = new ArrayList();
		TreeMap<Integer, String> tm = new TreeMap();

		logger.info("academic == " + academic);
		logger.info("std == " + std);
		logger.info("div == " + div);

		try {
			if (connectDatabase(sessionData)) {
				try {
					attendanceReport.clear();

					try {
						attendanceReport.clear();
						findQuery = "SELECT DISTINCT DATE_FORMAT(ATTENDANCE.ATTENDACE_DATE, '%d-%M') AS ATTENDACE_DATE  "
								+ "FROM " + sessionData.getDBName() + "." + "ATTENDANCE LEFT JOIN "
								+ sessionData.getDBName() + "."
								+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO  "
								+ "where CLASS_ALLOTMENT.PRESENT_STD='" + std + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
								+ div + "' AND  " + "ATTENDANCE.ACADEMIC_YEAR='" + academic
								+ "' AND ATTENDACE_DATE BETWEEN '" + fromDateReport + "' AND '" + toDateReport + "'  "
								+ "ORDER BY ATTENDACE_DATE ASC";

						logger.info("dateReport query :: " + findQuery);

						statement = connection.createStatement();
						resultSet = statement.executeQuery(findQuery);

						while (resultSet.next()) {
							distinctDate = resultSet.getString("ATTENDACE_DATE") == null ? " "
									: (resultSet.getString("ATTENDACE_DATE").trim());

							dateReport.add(distinctDate.subSequence(0, 3).toString()
									+ distinctDate.subSequence(3, 6).toString());
						}

					} catch (Exception e) {
						logger.error("Exception dateReport =" + e);
					}

					if (dateReport.size() > 0) {
						findQuery = "SELECT ATTENDANCE.GR_NO,CLASS_ALLOTMENT.ROLL_NO, "
								+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
								+ "DATE_FORMAT(ATTENDANCE.ATTENDACE_DATE, '%d/%m/%Y') AS ATTENDACE_DATE,ATTENDACE_STATUS  "
								+ "FROM " + sessionData.getDBName() + "." + "ATTENDANCE LEFT JOIN "
								+ sessionData.getDBName() + "."
								+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO  "
								+ "where CLASS_ALLOTMENT.PRESENT_STD='" + std + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
								+ div + "' AND  " + "ATTENDANCE.ACADEMIC_YEAR='" + academic
								+ "' AND ATTENDACE_DATE BETWEEN '" + fromDateReport + "' AND '" + toDateReport + "'  "
								+ "ORDER BY CLASS_ALLOTMENT.GR_NO * 1 ASC, ATTENDACE_DATE ASC";

						logger.info("attendance status query :: " + findQuery);

						statement = connection.createStatement();
						resultSet = statement.executeQuery(findQuery);

						String gr_roll_name = "";
						String statusReport = "";
						String statusData = "";
						String attendanceDate = "";
						String header = "Roll No.|Gr No.|Name*auto";
						int j = 1;
						for (int p = 0; p < dateReport.size(); p++) {
							header = header + "|" + dateReport.get(p);
						}
//							attendanceReport.add(header);
						tm.put(0, header);
						while (resultSet.next()) {

							grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
							roll_no = resultSet.getString("ROLL_NO") == null ? "1"
									: (resultSet.getString("ROLL_NO").trim());
							if (roll_no.equalsIgnoreCase("")) {
								roll_no = "1";
							}
							name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
							statusData = resultSet.getString("ATTENDACE_STATUS") == null ? " "
									: (resultSet.getString("ATTENDACE_STATUS").trim());
							attendanceDate = resultSet.getString("ATTENDACE_DATE") == null ? " "
									: (resultSet.getString("ATTENDACE_DATE").trim());

							if (j == 1) {
								statusReport = statusData;
							} else {
								statusReport = statusReport + "|" + statusData;
							}

							if (!grNo.equalsIgnoreCase(null) && !grNo.equalsIgnoreCase(" ")) {
								gr_roll_name = roll_no + "|" + grNo + "|" + name;
							}

							if (j == dateReport.size()) {
//									attendanceReport.add(gr_roll_name + "|" + statusReport);
								tm.put(Integer.parseInt(roll_no), gr_roll_name + "|" + statusReport);
								gr_roll_name = "";
								statusReport = "";
								j = 0;
							}
							j++;
						}
					}
					Set set = tm.entrySet();
					Iterator k = set.iterator();
					while (k.hasNext()) {
						Map.Entry me = (Map.Entry) k.next();
						attendanceReport.add(me.getValue());
					}
					if (attendanceReport.size() <= 1) {
						attendanceReport.clear();
					}
				} catch (Exception e) {
					logger.error("Exception dateReport =" + e);
				}
			}
			return attendanceReport;
		} catch (Exception e) {
			logger.error("reportQuery error = " + e);
		} finally {
			closeDatabase(sessionData);
		}
		return attendanceReport;
	}

///////////////Attendance Month Report///////////////////////////////
	public List<String> attendanceMonth(SessionData sessionData, String academic, String std, String div,
			String section, String fromDate, String toDate, String month, List<String> studentReport, int noOfDays)
			throws Exception {

		logger.info("=======inside attendanceMonth========");
		String reportQuery = "";
		String findQuery = "";
		String attendanceMonth = "";
		String distinctDate = "";
		String grNo = "";
		String roll_no = "";
		String name = "";
		String statusCount = "";
		String grNoHash = "";
		String fromDateReport = cm.dateFormat_yyyymmdd(fromDate);
		String toDateReport = cm.dateFormat_yyyymmdd(toDate);
		List dateReport = new ArrayList();
		List attendanceReport = new ArrayList();
		TreeMap<Integer, String> tm = new TreeMap();
		LinkedHashMap<String, String> hmap = new LinkedHashMap<String, String>();
		int i = 1;

		logger.info("academic == " + academic);
		logger.info("std == " + std);
		logger.info("div == " + div);

		for (int j = 1; j < studentReport.size(); j++) {
			grNoHash = studentReport.get(j).substring(studentReport.get(j).indexOf("|") + 1);
			grNoHash = grNoHash.substring(0, grNoHash.indexOf("|"));
			hmap.put(grNoHash.trim(), studentReport.get(j).trim());
		}

		if (!month.equalsIgnoreCase("") && !month.equalsIgnoreCase("All")) {
			int monthInInteger = cm.monthInInteger(month);
			int yearFromAcademic = cm.yearFromAcademic(monthInInteger, academic);
			toDateReport = cm.lastDayOfMonth(monthInInteger, yearFromAcademic);
			fromDateReport = yearFromAcademic + "/" + (monthInInteger + 1) + "/01";
			;
		}

		try {
			if (connectDatabase(sessionData)) {
				try {
					attendanceReport.clear();

					try {
						attendanceReport.clear();
						findQuery = "SELECT DISTINCT DATE_FORMAT(ATTENDANCE.ATTENDACE_DATE, '%d-%M') AS ATTENDACE_DATE  "
								+ "FROM " + sessionData.getDBName() + "." + "ATTENDANCE LEFT JOIN "
								+ sessionData.getDBName() + "."
								+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO  "
								+ "where CLASS_ALLOTMENT.PRESENT_STD='" + std + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
								+ div + "' AND  " + "ATTENDANCE.ACADEMIC_YEAR='" + academic
								+ "' AND ATTENDACE_DATE BETWEEN '" + fromDateReport + "' AND '" + toDateReport + "'  "
								+ "ORDER BY ATTENDACE_DATE ASC";

						logger.info("dateReport query  :: " + findQuery);

						statement = connection.createStatement();
						resultSet = statement.executeQuery(findQuery);

						while (resultSet.next()) {
							distinctDate = resultSet.getString("ATTENDACE_DATE") == null ? " "
									: (resultSet.getString("ATTENDACE_DATE").trim());

							dateReport.add(distinctDate.subSequence(0, 3).toString()
									+ distinctDate.subSequence(3, 6).toString());
						}

					} catch (Exception e) {
						logger.error("Exception dateReport =" + e);
					}

					if (dateReport.size() > 0) {
						findQuery = "SELECT ATTENDANCE.GR_NO,CLASS_ALLOTMENT.ROLL_NO, "
								+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
								+ "DATE_FORMAT(ATTENDANCE.ATTENDACE_DATE, '%d/%m/%Y') AS ATTENDACE_DATE,ATTENDACE_STATUS  "
								+ "FROM " + sessionData.getDBName() + "." + "ATTENDANCE LEFT JOIN "
								+ sessionData.getDBName() + "."
								+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO  "
								+ "where CLASS_ALLOTMENT.PRESENT_STD='" + std + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
								+ div + "' AND  " + "ATTENDANCE.ACADEMIC_YEAR='" + academic
								+ "' AND ATTENDACE_DATE BETWEEN '" + fromDateReport + "' AND '" + toDateReport + "'  "
								+ "ORDER BY CLASS_ALLOTMENT.ROLL_NO * 1 ASC, ATTENDACE_DATE ASC";

						logger.info("attendance status query :: " + findQuery);

						statement = connection.createStatement();
						resultSet = statement.executeQuery(findQuery);

						String gr_roll_name = "";
						String statusReport = "";
						String statusData = "";
						String attendanceDate = "";
						String header = "Roll No.|Gr No.|Name";
						int j = 1;
						for (int p = 0; p < dateReport.size(); p++) {
							header = header + "|" + dateReport.get(p);
						}
						header = header + "|Present|Absent|Working|Holiday|Total";
//						attendanceReport.add(header);
						tm.put(0, header);
						while (resultSet.next()) {

							grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
							roll_no = resultSet.getString("ROLL_NO") == null ? "1"
									: (resultSet.getString("ROLL_NO").trim());
							if (roll_no.equalsIgnoreCase("")) {
								roll_no = "1";
							}
							name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
							statusData = resultSet.getString("ATTENDACE_STATUS") == null ? " "
									: (resultSet.getString("ATTENDACE_STATUS").trim());
							attendanceDate = resultSet.getString("ATTENDACE_DATE") == null ? " "
									: (resultSet.getString("ATTENDACE_DATE").trim());

							if (j == 1) {
								statusReport = statusData;
							} else {
								statusReport = statusReport + "|" + statusData;
							}

							if (!grNo.equalsIgnoreCase(null) && !grNo.equalsIgnoreCase(" ")) {
								gr_roll_name = roll_no + "|" + grNo + "|" + name;
							}

							if (j == dateReport.size()) {
								String studentMonthReport = hmap.get(grNo);
								studentMonthReport = studentMonthReport.substring(studentMonthReport.indexOf("|") + 1);
								studentMonthReport = studentMonthReport.substring(studentMonthReport.indexOf("|") + 1);
								studentMonthReport = studentMonthReport.substring(studentMonthReport.indexOf("|") + 1);
//								attendanceReport.add(gr_roll_name + "|" + statusReport + "|" + studentMonthReport);
								tm.put(Integer.parseInt(roll_no),
										gr_roll_name + "|" + statusReport + "|" + studentMonthReport);
								gr_roll_name = "";
								statusReport = "";
								j = 0;
								i++;
							}
							j++;
						}
					}
					Set set = tm.entrySet();
					Iterator k = set.iterator();
					while (k.hasNext()) {
						Map.Entry me = (Map.Entry) k.next();
						attendanceReport.add(me.getValue());
					}
					if (attendanceReport.size() <= 1) {
						attendanceReport.clear();
					}
				} catch (Exception e) {
					logger.error("Exception dateReport =" + e);
				}
			}
			return attendanceReport;
		} catch (Exception e) {
			logger.error("reportQuery error = " + e);
		} finally {
			closeDatabase(sessionData);
		}
		return attendanceReport;
	}

	/////////////// Attendance Report///////////////////////////////
	public List<String> attendanceReport(SessionData sessionData, String academic, String std, String div,
			String section, String fromDate, String toDate, String month, String year) throws Exception {

		logger.info("=======inside attendanceReport========");
		String reportQuery = "";
		String findQuery = "";
		String attendanceStatus = "";
		String grNo = "";
		String roll_no = "";
		String name = "";
		String statusCount = "";
		String fromDateReport = cm.dateFormat_yyyymmdd(fromDate);
		String toDateReport = cm.dateFormat_yyyymmdd(toDate);
		List grForReport = new ArrayList();
		List attendanceReport = new ArrayList();
		TreeMap<Integer, String> tm = new TreeMap();

		logger.info("academic == " + academic);
		logger.info("std == " + std);
		logger.info("div == " + div);

		if (!month.equalsIgnoreCase("") && !month.equalsIgnoreCase("All")) {
			int monthInInteger = cm.monthInInteger(month);
			int yearFromAcademic = cm.yearFromAcademic(monthInInteger, academic);
			toDateReport = cm.lastDayOfMonth(monthInInteger, yearFromAcademic);
			fromDateReport = yearFromAcademic + "/" + (monthInInteger + 1) + "/01";
			;
		} else if (month.equalsIgnoreCase("All")) {
			toDateReport = Integer.parseInt(academic.substring(0, 2) + academic.substring(5, 7)) + "/05/31";
			fromDateReport = academic.substring(0, 4) + "/06/01";
		}

		try {
			if (connectDatabase(sessionData)) {
				try {
					attendanceReport.clear();
					/*
					 * findQuery =
					 * "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO FROM "+sessionData.getDBName()+
					 * "."+"attendance " + "where ATTENDACE_DATE BETWEEN '"+fromDateReport+"' AND '"
					 * +toDateReport+"' ORDER BY GR_NO ASC";
					 */
					findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO " + "FROM " + sessionData.getDBName() + "."
							+ "ATTENDANCE LEFT JOIN " + sessionData.getDBName() + "."
							+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO "
							+ "where CLASS_ALLOTMENT.PRESENT_STD='" + std + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
							+ div + "' AND " + "ATTENDANCE.ACADEMIC_YEAR='" + academic + "' AND "
							+ "ATTENDACE_DATE BETWEEN '" + fromDateReport + "' AND '" + toDateReport
							+ "' ORDER BY GR_NO ASC";

					logger.info("grForReport query :: " + findQuery);

					statement = connection.createStatement();
					resultSet = statement.executeQuery(findQuery);

					while (resultSet.next()) {
						grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());

						grForReport.add(grNo);
					}

				} catch (Exception e) {
					logger.error("Exception grForReport =" + e);
				}
				if (grForReport.size() > 0) {
					try {
						for (int k = 0; k < grForReport.size(); k++) {
							reportQuery = reportQuery + "SELECT ATTENDANCE.GR_NO, CLASS_ALLOTMENT.ROLL_NO, "
									+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
									+ "count(ATTENDACE_STATUS) AS PRESENT_DAYS " + "FROM " + sessionData.getDBName()
									+ "." + "ATTENDANCE LEFT JOIN " + sessionData.getDBName() + "."
									+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO "
									+ "where ATTENDACE_STATUS='P' and attendance.GR_NO = '" + grForReport.get(k)
									+ "' and " + "CLASS_ALLOTMENT.PRESENT_STD='" + std
									+ "' and CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' and "
									+ "ATTENDANCE.ACADEMIC_YEAR='" + academic + "' AND " + "ATTENDACE_DATE BETWEEN '"
									+ fromDateReport + "' AND '" + toDateReport + "' " + "UNION ALL "
									+ "SELECT ATTENDANCE.GR_NO, CLASS_ALLOTMENT.ROLL_NO, "
									+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
									+ "count(ATTENDACE_STATUS) AS ABSENT_DAYS  " + "FROM " + sessionData.getDBName()
									+ "." + "ATTENDANCE LEFT JOIN " + sessionData.getDBName() + "."
									+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO "
									+ "where ATTENDACE_STATUS='A' and attendance.GR_NO = '" + grForReport.get(k)
									+ "' and  " + "CLASS_ALLOTMENT.PRESENT_STD='" + std
									+ "' and CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' and "
									+ "ATTENDANCE.ACADEMIC_YEAR='" + academic + "' AND " + "ATTENDACE_DATE BETWEEN '"
									+ fromDateReport + "' AND '" + toDateReport + "'  " + "UNION ALL  "
									+ "SELECT ATTENDANCE.GR_NO, CLASS_ALLOTMENT.ROLL_NO, "
									+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
									+ "count(ATTENDACE_STATUS) AS WORKING_DAYS  " + "FROM " + sessionData.getDBName()
									+ "." + "ATTENDANCE LEFT JOIN " + sessionData.getDBName() + "."
									+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO "
									+ "where (ATTENDACE_STATUS='A' or ATTENDACE_STATUS='P') and attendance.GR_NO = '"
									+ grForReport.get(k) + "' and " + "CLASS_ALLOTMENT.PRESENT_STD='" + std
									+ "' and CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' and "
									+ "ATTENDANCE.ACADEMIC_YEAR='" + academic + "' AND " + "ATTENDACE_DATE BETWEEN '"
									+ fromDateReport + "' AND '" + toDateReport + "'  " + "UNION ALL  "
									+ "SELECT ATTENDANCE.GR_NO, CLASS_ALLOTMENT.ROLL_NO, "
									+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
									+ "count(ATTENDACE_STATUS) AS HOLIDAYS  " + "FROM " + sessionData.getDBName() + "."
									+ "ATTENDANCE LEFT JOIN " + sessionData.getDBName() + "."
									+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO "
									+ "where ATTENDACE_STATUS='H' and attendance.GR_NO = '" + grForReport.get(k)
									+ "' and  " + "CLASS_ALLOTMENT.PRESENT_STD='" + std
									+ "' and CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "' and "
									+ "ATTENDANCE.ACADEMIC_YEAR='" + academic + "' AND " + "ATTENDACE_DATE BETWEEN '"
									+ fromDateReport + "' AND '" + toDateReport + "'  " + "UNION ALL  "
									+ "(SELECT ATTENDANCE.GR_NO, CLASS_ALLOTMENT.ROLL_NO, "
									+ "concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME, "
									+ "(SELECT DATEDIFF('" + toDateReport + "','" + fromDateReport
									+ "')+1) AS TOTAL_DAYS  " + "FROM " + sessionData.getDBName() + "."
									+ "ATTENDANCE LEFT JOIN " + sessionData.getDBName() + "."
									+ "CLASS_ALLOTMENT ON ATTENDANCE.GR_NO=CLASS_ALLOTMENT.GR_NO "
									+ "where attendance.GR_NO = '" + grForReport.get(k) + "' and "
									+ "CLASS_ALLOTMENT.PRESENT_STD='" + std + "' and CLASS_ALLOTMENT.PRESENT_DIV = '"
									+ div + "' and " + "ATTENDANCE.ACADEMIC_YEAR='" + academic + "' AND "
									+ "ATTENDACE_DATE BETWEEN '" + fromDateReport + "' AND '" + toDateReport
									+ "' LIMIT 1)";
							if (k < (grForReport.size() - 1)) {
								reportQuery = reportQuery + " UNION ALL ";
							}
						}

						logger.info("reportQuery :: " + reportQuery);

						statement = connection.createStatement();
						resultSet = statement.executeQuery(reportQuery);

						String gr_roll_name = "";
						String statusReport = "";
						int j = 1;
//							attendanceReport.add("Roll No.|Gr No.|Name|Present|Absent|Working|Holiday|Total");
						tm.put(0, "Roll No.|Gr No.|Name|Present|Absent|Working|Holiday|Total");
						while (resultSet.next()) {

							grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
							roll_no = resultSet.getString("ROLL_NO") == null ? "1"
									: (resultSet.getString("ROLL_NO").trim());
							if (roll_no.equalsIgnoreCase("")) {
								roll_no = "1";
							}
							name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
							statusCount = resultSet.getString("PRESENT_DAYS") == null ? " "
									: (resultSet.getString("PRESENT_DAYS").trim());

							if (j == 1) {
								statusReport = statusCount;
							} else {
								statusReport = statusReport + "|" + statusCount;
							}

							if (!grNo.equalsIgnoreCase(null) && !grNo.equalsIgnoreCase(" ")) {
								gr_roll_name = roll_no + "|" + grNo + "|" + name;
							}

							if (j == 5) {
//									attendanceReport.add(gr_roll_name + "|" + statusReport);
								tm.put(Integer.parseInt(roll_no), gr_roll_name + "|" + statusReport);
								gr_roll_name = "";
								statusReport = "";
								j = 0;
							}
							j++;
						}
					} catch (Exception e) {
						logger.error("Exception grForReport =" + e);
					}
				}
			}
			Set set = tm.entrySet();
			Iterator k = set.iterator();
			while (k.hasNext()) {
				Map.Entry me = (Map.Entry) k.next();
				attendanceReport.add(me.getValue());
			}
			return attendanceReport;
		} catch (Exception e) {
			logger.error("reportQuery error = " + e);
		} finally {
			closeDatabase(sessionData);
		}
		return attendanceReport;
	}

	// //////method to find Bonafide / NOC data list////////////////////
	public List<String> findStudentBonafide(SessionData sessionData, List<String> passGrList, String section,
			String category) throws Exception {

		logger.info("=========findStudentBonafide list Query============");
		String motherNameDb = "";
		String findQuery = "";
		String formGrList = "";
		String genderDb = "";
		String nameDb = "";
		String currentStdDb = "";
		String currentDivDb = "";
		String admittedStdDb = "";
		String admittedDivDb = "";
		String academicYear = "";
		String dobDb = "";
		String doaDb = "";
		String dobWordsDb = "";
		String religionDb = "";
		String otherReligionDb = "";
		String castDb = "";
		String birthPlaceDb = "";
		String talukaDb = "";
		String districtDb = "";
		String stateDb = "";
		String countryDb = "";
		String grDb = "";
		String originalLcdb = "";
		String originalLcDatedb = "";
		String adhaardb = "";
		String suid_db = "", pen_db = "";
		boolean findFlag = false;
		List<String> studentBonafideList = new ArrayList<String>();

		logger.info("passGrList.size() : " + passGrList.size());
		for (int i = 0; i < passGrList.size(); i++) {
			if (passGrList.size() - i == 1)
				formGrList = formGrList + "'" + passGrList.get(i) + "'";
			else
				formGrList = formGrList + "'" + passGrList.get(i) + "',";
		}
		logger.info("formGrList :: " + formGrList);
		try {

			if (!formGrList.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT HS_GENERAL_REGISTER.ADMITTED_STD,HS_GENERAL_REGISTER.ADMITTED_DIV,HS_GENERAL_REGISTER.GR_NO, HS_GENERAL_REGISTER.LAST_NAME, HS_GENERAL_REGISTER.FIRST_NAME, HS_GENERAL_REGISTER.FATHER_NAME, HS_GENERAL_REGISTER.MOTHER_NAME, RELIGION, SUB_RELIGION, CAST, HS_GENERAL_REGISTER.PEN, "
						+ "DATE_FORMAT(HS_GENERAL_REGISTER.DATE_ADMITTED, '%d-%m-%Y') AS DATE_ADMITTED,DATE_FORMAT(DOB, '%d-%m-%Y') AS DOB, DOB_WORDS, HS_GENERAL_REGISTER.PRESENT_STD, HS_GENERAL_REGISTER.PRESENT_DIV, BIRTH_PLACE, GENDER, HS_GENERAL_REGISTER.ACADEMIC_YEAR, "
						+ "ORIGINAL_LC, DATE_FORMAT(HS_GENERAL_REGISTER.DATE_LEAVING, '%d/%m/%Y') AS DATE_LEAVING, TALUKA, DISTRICT, STATE, COUNTRY,ROLL_NO,ADHAAR_CARD,HS_GENERAL_REGISTER.SUID  "
						+ "FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN "
						+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO  AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE "
						+ "HS_GENERAL_REGISTER.GR_NO IN (" + formGrList.trim()
						+ ") AND HS_GENERAL_REGISTER.SECTION_NM='" + section + "' ORDER BY ROLL_NO * 1";
			}
			logger.info(findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				grDb = resultSet.getString("GR_NO");
				grDb = cm.ifNullThenDash("" + grDb);
				nameDb = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				motherNameDb = resultSet.getString("MOTHER_NAME");
				motherNameDb = cm.ifNullThenDash("" + motherNameDb);
				religionDb = resultSet.getString("RELIGION");
				religionDb = cm.ifNullThenDash("" + religionDb);
				otherReligionDb = resultSet.getString("SUB_RELIGION");
				otherReligionDb = cm.ifNullThenDash("" + otherReligionDb);
				if (otherReligionDb.equalsIgnoreCase("-")) {
					otherReligionDb = religionDb;
				}
				castDb = resultSet.getString("CAST");
				castDb = cm.ifNullThenDash("" + castDb);
				doaDb = resultSet.getString("DATE_ADMITTED");
				doaDb = cm.ifNullThenDash("" + doaDb);
				dobDb = resultSet.getString("DOB");
				dobDb = cm.ifNullThenDash("" + dobDb);
				dobWordsDb = resultSet.getString("DOB_WORDS");
				dobWordsDb = cm.ifNullThenDash("" + dobWordsDb);
				currentStdDb = resultSet.getString("PRESENT_STD");
				currentStdDb = cm.ifNullThenDash("" + currentStdDb);
				currentDivDb = resultSet.getString("PRESENT_DIV");
				currentDivDb = cm.ifNullThenDash("" + currentDivDb);
				admittedStdDb = resultSet.getString("ADMITTED_STD");
				admittedStdDb = cm.ifNullThenDash("" + admittedStdDb);
				admittedDivDb = resultSet.getString("ADMITTED_DIV");
				admittedDivDb = cm.ifNullThenDash("" + admittedDivDb);
				birthPlaceDb = resultSet.getString("BIRTH_PLACE") == null ? "#"
						: (resultSet.getString("BIRTH_PLACE").trim());
				if (birthPlaceDb.equalsIgnoreCase("")) {
					birthPlaceDb = "#";
				}
				talukaDb = resultSet.getString("TALUKA") == null ? "#" : (resultSet.getString("TALUKA").trim());
				if (talukaDb.equalsIgnoreCase("")) {
					talukaDb = "#";
				}
				districtDb = resultSet.getString("DISTRICT") == null ? "#" : (resultSet.getString("DISTRICT").trim());
				if (districtDb.equalsIgnoreCase("")) {
					districtDb = "#";
				}
				stateDb = resultSet.getString("STATE") == null ? "#" : (resultSet.getString("STATE").trim());
				if (stateDb.equalsIgnoreCase("")) {
					stateDb = "#";
				}
				countryDb = resultSet.getString("COUNTRY") == null ? "#" : (resultSet.getString("COUNTRY").trim());
				if (countryDb.equalsIgnoreCase("")) {
					countryDb = "#";
				}
				genderDb = resultSet.getString("GENDER");
				genderDb = cm.ifNullThenDash("" + genderDb);
				academicYear = resultSet.getString("ACADEMIC_YEAR");
				academicYear = cm.ifNullThenDash("" + academicYear);
				originalLcDatedb = resultSet.getString("DATE_LEAVING");
				originalLcdb = resultSet.getString("ORIGINAL_LC");
				pen_db = resultSet.getString("PEN");
				adhaardb = resultSet.getString("ADHAAR_CARD") == null ? " "
						: (resultSet.getString("ADHAAR_CARD").trim());
				if (adhaardb.equalsIgnoreCase("")) {
					adhaardb = " ";
				}

				suid_db = resultSet.getString("SUID") == null ? " " : (resultSet.getString("SUID").trim());
				if (suid_db.equalsIgnoreCase("")) {
					suid_db = " ";
				}

				if (category.equalsIgnoreCase("BONAFIDE") || (category.equalsIgnoreCase("NOC") && originalLcdb != null
						&& !originalLcdb.equalsIgnoreCase(""))) {
					studentBonafideList.add(genderDb + "|" + nameDb + "|" + currentStdDb + "|" + currentDivDb + "|"
							+ academicYear + "|" + dobDb + "|" + dobWordsDb + "|" + otherReligionDb + "|" + castDb + "|"
							+ birthPlaceDb + "|" + grDb + "|" + originalLcdb + "|" + originalLcDatedb + "|" + talukaDb
							+ "|" + districtDb + "|" + stateDb + "|" + countryDb + "|" + admittedStdDb + "|"
							+ admittedDivDb + "|" + doaDb + "|" + adhaardb + "|" + motherNameDb + "|" + suid_db + "|" + pen_db);
				}

				findFlag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentBonafideList;
	}

	//////// method to find Student details////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> findStudentDetails(SessionData sessionData,
			List<String> passGrList) throws Exception {

		logger.info("=========findStudentDetails Query============");
		LinkedHashMap<String, LinkedHashMap<String, String>> studentDetailsMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String motherNameDb = "";
		String findQuery = "";
		String formGrList = "";
		String genderDb = "";
		String nameDb = "";
		String currentStdDb = "";
		String currentDivDb = "";
		String academicYear = "";
		String dobDb = "";
		String dobWordsDb = "";
		String religionDb = "";
		String otherReligionDb = "";
		String castDb = "";
		String birthPlaceDb = "";
		String talukaDb = "";
		String districtDb = "";
		String stateDb = "";
		String countryDb = "";
		String grDb = "";
		String originalLcdb = "";
		String originalLcDatedb = "", dateLeavingDb = "", remarkDb = "", progressDb = "", conductDb = "";
		String lastSchoolAttended = "", doaDB = "", admittedStdDb = "", admittedDivDb = "", leavingStdDb = "";
		boolean findFlag = false;
		String stdStar = "";
		String romanStd = "";
		int stdPromoted = 0;
		List<String> studentBonafideList = new ArrayList<String>();

		logger.info("passGrList.size() : " + passGrList.size());
		for (int i = 0; i < passGrList.size(); i++) {
			if (passGrList.size() - i == 1)
				formGrList = formGrList + "'" + passGrList.get(i) + "'";
			else
				formGrList = formGrList + "'" + passGrList.get(i) + "',";
		}
		logger.info("formGrList :: " + formGrList);
		try {

			if (!formGrList.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT HS_GENERAL_REGISTER.PROGRESS,HS_GENERAL_REGISTER.CONDUCT,HS_GENERAL_REGISTER.REMARK_0,"
						+ "HS_GENERAL_REGISTER.LEAVING_STD,HS_GENERAL_REGISTER.ADMITTED_DIV,HS_GENERAL_REGISTER.ADMITTED_STD,"
						+ "HS_GENERAL_REGISTER.DATE_ADMITTED,HS_GENERAL_REGISTER.LAST_SCHOOL,HS_GENERAL_REGISTER.GR_NO, "
						+ "HS_GENERAL_REGISTER.LAST_NAME, HS_GENERAL_REGISTER.FIRST_NAME, HS_GENERAL_REGISTER.FATHER_NAME, "
						+ "HS_GENERAL_REGISTER.MOTHER_NAME, RELIGION, SUB_RELIGION, CAST, "
						+ "DATE_FORMAT(DOB, '%d-%m-%Y') AS DOB, DOB_WORDS, HS_GENERAL_REGISTER.PRESENT_STD, "
						+ "HS_GENERAL_REGISTER.PRESENT_DIV, BIRTH_PLACE, GENDER, HS_GENERAL_REGISTER.ACADEMIC_YEAR, "
						+ "ORIGINAL_LC, DATE_LEAVING, TALUKA, DISTRICT, STATE, COUNTRY,ROLL_NO  " + "FROM "
						+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER LEFT JOIN " + sessionData.getDBName()
						+ "." + "CLASS_ALLOTMENT ON "
						+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO  AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM AND HS_GENERAL_REGISTER.ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR WHERE "
						+ "HS_GENERAL_REGISTER.GR_NO IN (" + formGrList.trim()
						+ ") AND HS_GENERAL_REGISTER.SECTION_NM='" + sessionData.getSectionName()
						+ "' ORDER BY ROLL_NO * 1";
			}
			logger.info(findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				LinkedHashMap<String, String> studentDetails = new LinkedHashMap<String, String>();
				grDb = resultSet.getString("GR_NO");
				nameDb = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				motherNameDb = resultSet.getString("MOTHER_NAME");
				motherNameDb = cm.ifNullThenDash("" + motherNameDb);
				religionDb = resultSet.getString("RELIGION");
				religionDb = cm.ifNullThenDash("" + religionDb);
				otherReligionDb = resultSet.getString("SUB_RELIGION");
				otherReligionDb = cm.ifNullThenDash("" + otherReligionDb);
				if (otherReligionDb.equalsIgnoreCase("-")) {
					otherReligionDb = religionDb;
				}
				castDb = resultSet.getString("CAST");
				castDb = cm.ifNullThenDash("" + castDb);
				dobDb = resultSet.getString("DOB");
				dobDb = cm.ifNullThenDash("" + dobDb);
				dobWordsDb = resultSet.getString("DOB_WORDS");
				dobWordsDb = cm.ifNullThenDash("" + dobWordsDb);
				currentStdDb = resultSet.getString("PRESENT_STD");
				currentStdDb = cm.ifNullThenDash("" + currentStdDb);
				currentDivDb = resultSet.getString("PRESENT_DIV");
				currentDivDb = cm.ifNullThenDash("" + currentDivDb);
				birthPlaceDb = resultSet.getString("BIRTH_PLACE") == null ? "-"
						: (resultSet.getString("BIRTH_PLACE").trim());
				if (birthPlaceDb.equalsIgnoreCase("")) {
					birthPlaceDb = "-";
				}
				talukaDb = resultSet.getString("TALUKA") == null ? "-" : (resultSet.getString("TALUKA").trim());
				if (talukaDb.equalsIgnoreCase("")) {
					talukaDb = "-";
				}
				districtDb = resultSet.getString("DISTRICT") == null ? "-" : (resultSet.getString("DISTRICT").trim());
				if (districtDb.equalsIgnoreCase("")) {
					districtDb = "-";
				}
				stateDb = resultSet.getString("STATE") == null ? "-" : (resultSet.getString("STATE").trim());
				if (stateDb.equalsIgnoreCase("")) {
					stateDb = "-";
				}
				countryDb = resultSet.getString("COUNTRY") == null ? "-" : (resultSet.getString("COUNTRY").trim());
				if (countryDb.equalsIgnoreCase("")) {
					countryDb = "-";
				}
				genderDb = resultSet.getString("GENDER");
				genderDb = cm.ifNullThenDash("" + genderDb);
				academicYear = resultSet.getString("ACADEMIC_YEAR");
				academicYear = cm.ifNullThenDash("" + academicYear);
				originalLcdb = resultSet.getString("ORIGINAL_LC");
				lastSchoolAttended = resultSet.getString("LAST_SCHOOL") == null ? "-"
						: (resultSet.getString("LAST_SCHOOL").trim());
				lastSchoolAttended = cm.revertCommaApostrophy(lastSchoolAttended);
				doaDB = resultSet.getString("DATE_ADMITTED") == null ? " "
						: (resultSet.getString("DATE_ADMITTED").trim());
				doaDB = cm.formatyyyymmddtoddmmyyyy(doaDB);
				admittedStdDb = resultSet.getString("ADMITTED_STD");
				admittedStdDb = cm.ifNullThenDash("" + admittedStdDb);
				admittedDivDb = resultSet.getString("ADMITTED_DIV");
				admittedDivDb = cm.ifNullThenDash("" + admittedDivDb);
				leavingStdDb = resultSet.getString("LEAVING_STD");
				leavingStdDb = cm.ifNullThenDash("" + leavingStdDb);
				dateLeavingDb = resultSet.getString("DATE_LEAVING");
				dateLeavingDb = cm.ifNullThenDash("" + dateLeavingDb);
				dateLeavingDb = cm.formatyyyymmddtoddmmyyyy(dateLeavingDb);
				remarkDb = resultSet.getString("REMARK_0");
				progressDb = resultSet.getString("PROGRESS");
				conductDb = resultSet.getString("CONDUCT");

				if (remarkDb.contains("promoted") || remarkDb.contains("PROMOTED")) {
					stdPromoted = cm.RomanToInteger(leavingStdDb) + 1;
					romanStd = cm.IntegerToRoman("a" + stdPromoted);
				}
				if (leavingStdDb.equalsIgnoreCase("I") || romanStd.equalsIgnoreCase("I")) {
					stdStar = "Ist";
					if (remarkDb.contains("promoted") || remarkDb.contains("PROMOTED")) {
						stdStar = romanStd + "nd";
					}
				} else if (leavingStdDb.equalsIgnoreCase("II") || romanStd.equalsIgnoreCase("II")) {
					stdStar = "IInd";
					if (remarkDb.contains("promoted") || remarkDb.contains("PROMOTED")) {
						stdStar = romanStd + "rd";
					}
				} else if (leavingStdDb.equalsIgnoreCase("III") || romanStd.equalsIgnoreCase("III")) {
					stdStar = "IIIrd";
					if (remarkDb.contains("promoted") || remarkDb.contains("PROMOTED")) {
						stdStar = romanStd + "th";
					}
				} else if (!leavingStdDb.equalsIgnoreCase("JR.KG") && !leavingStdDb.equalsIgnoreCase("SR.KG")) {
					stdStar = leavingStdDb + "th";
					if (remarkDb.contains("promoted") || remarkDb.contains("PROMOTED")) {
						stdStar = romanStd + "th";
					}
				}
				remarkDb = remarkDb.replace("****", stdStar.substring(0, stdStar.length() - 2));
				remarkDb = cm.ifNullThenDash("" + remarkDb);

				studentDetails.put("grNo", grDb);
				studentDetails.put("name", nameDb);
				studentDetails.put("religion", otherReligionDb);
				studentDetails.put("caste", castDb);
				studentDetails.put("birthplace", birthPlaceDb);
				studentDetails.put("taluka", talukaDb);
				studentDetails.put("district", districtDb);
				studentDetails.put("state", stateDb);
				studentDetails.put("country", countryDb);
				studentDetails.put("birthDate", dobDb);
				studentDetails.put("birthDateWords", dobWordsDb);
				studentDetails.put("lastSchool", lastSchoolAttended);
				studentDetails.put("admmissionDate", doaDB);
				studentDetails.put("admittedStd", admittedStdDb);
				studentDetails.put("admittedDiv", admittedDivDb);
				studentDetails.put("leavingStd", leavingStdDb);
				studentDetails.put("dateOfLeaving", dateLeavingDb);
				studentDetails.put("remark", remarkDb);
				studentDetails.put("conduct", conductDb);
				studentDetails.put("progress", progressDb);

				studentDetailsMap.put(grDb, studentDetails);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentDetailsMap;
	}

	////// getAuthenticationDetails/////////////
	public TreeMap<String, String> getAuthenticationDetails(SessionData sessionData, String schoolName)
			throws Exception {

		TreeMap tm = new TreeMap();
		String query = "", expiry_date = "", expiry_status = "", valid_sn = "", renew_code = "";

		try {
			query = "SELECT DATE_FORMAT(EXPIRY_DATE, '%d-%m-%Y') AS EXPIRY_DATE,EXPIRY_STATUS,VALID_SN,RENEW_CODE FROM "
					+ sessionData.getDBName() + "." + "administrator where SCHOOL_NAME = '" + schoolName + "'";
			logger.info("query ===>>>" + query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				logger.info("inside while ===>>>");
				expiry_date = resultSet.getString("EXPIRY_DATE");
				expiry_status = resultSet.getString("EXPIRY_STATUS");
				valid_sn = resultSet.getString("VALID_SN");
				renew_code = resultSet.getString("RENEW_CODE");
				tm.put("expiry_date", expiry_date);
				tm.put("expiry_status", expiry_status);
				tm.put("valid_sn", valid_sn);
				tm.put("renew_code", renew_code);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		logger.info("outside while ===>>>" + tm);
		return tm;
	}

	////// updateAuthenticationDetails/////////////
	public void updateAuthenticationDetails() throws Exception {

		String query = "";

		try {
			query = "update administrator set EXPIRY_STATUS='EXPIRE' WHERE SCHOOL_NAME='PR'";
			statement = connection.createStatement();
			statement.executeUpdate(query);

		} catch (Exception e) {
			cm.logException(e);
		}
	}

	///////////// Details changed in marks_entry ///////////////

	public boolean marksEntryChanged(SessionData sessionData, String std, String div, String academic)
			throws Exception {

		String query = "";
		String changedDB = "";
		boolean changedFlag = false;
		String grNew = "";

		try {
			query = "SELECT * FROM " + sessionData.getDBName() + "." + "MARKS_ENTRY WHERE STD_1='" + std + "' AND "
					+ "DIV_1='" + div + "' AND ACADEMIC_YEAR='" + academic + "' AND CHANGED = 1";
			logger.info("query == " + query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				changedDB = resultSet.getString("CHANGED") == null ? "" : (resultSet.getString("CHANGED").trim());
				changedFlag = true;
				cm.showMessageDialog("Marks details changed. Please update result to proceed.");
				break;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return changedFlag;
	}

	///////////// get Academic year list///////////////

	public String getAcademicYearList(SessionData sessionData, String tableName, String columnName) throws Exception {

		String query = "";
		String academicYear = "";
		String academicYearList = "";
		int i = 0;

		try {
			query = "SELECT DISTINCT " + columnName + " FROM " + sessionData.getDBName() + "." + tableName
					+ " ORDER BY " + columnName + " DESC";
			logger.info("query == " + query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				academicYear = resultSet.getString(columnName) == null ? "" : (resultSet.getString(columnName).trim());

				if (i == 0) {
					academicYearList = academicYear;
				} else {
					academicYearList = academicYearList + "," + academicYear;
				}
				i++;
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return academicYearList;
	}

	// /////////recordsNotInFeeStatus////////////////////////////////////////
	public List<String> recordsNotInFeeStatus(SessionData sessionData, String gr_no, String lastName, String firstName,
			String fatherName, String std, String div, String academicYear, String section, String rollFromSubmit,
			String rollToSubmit, String defaultStatus) throws Exception {

		logger.info("=========recordsNotInFeeStatus Query============");
		String findQuery = "";
		String firstNamedb = "";
		String lastNamedb = "";
		String fatherNamedb = "";
		String rollNodb = "";
		String grNodb = "";
		String queryCondition = "";
		boolean findFlag = false;
		List recordsNotInFeeStatusList = new ArrayList();
		String addToQuery = "";

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = " PRESENT_STD = '" + std + "'  AND  PRESENT_DIV = '" + div + "' AND  ACADEMIC_YEAR = '"
					+ academicYear + "' AND ROLL_NO IS NOT null";
		}

		try {
			findQuery = "SELECT GR_NO,FIRST_NAME,LAST_NAME,FATHER_NAME,ROLL_NO,ACADEMIC_YEAR FROM "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT " + "WHERE GR_NO NOT IN (SELECT GR_NO FROM "
					+ sessionData.getDBName() + "." + "FEE_STATUS WHERE ACADEMIC_YEAR = '" + academicYear + "' "
					+ "AND SECTION_NM='" + section + "') AND " + queryCondition + " AND SECTION_NM='" + section
					+ "' ORDER BY ROLL_NO * 1";

			logger.info("recordsNotInFeeStatusList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				rollNodb = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNodb.equalsIgnoreCase("")) {
					rollNodb = "1";
				}
				grNodb = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				firstNamedb = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				lastNamedb = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				fatherNamedb = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());

				recordsNotInFeeStatusList.add(rollNodb + "|" + grNodb + "|" + firstNamedb + " " + lastNamedb + " "
						+ fatherNamedb + "|" + defaultStatus);
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return recordsNotInFeeStatusList;
	}

	// /////////////insertStudentFeeStatus///////////////////////////////
	public boolean insertStudentFeeStatus(SessionData sessionData, List<String> studentList, String academic,
			String std, String div, boolean isUpdate, String section, String updateAllStatus) throws Exception {

		logger.info("=======inside insertStudentFeeStatus========");
		String updateQuery = "";
		String subject = "";
		String feeStatus = "";

		int udpdateCount = 0;
		try {
			logger.info("academic == " + academic);
			logger.info("std == " + std);
			logger.info("div == " + div);
			logger.info("isUpdate == " + isUpdate);

//			if(connectDatabase(sessionData)){

			String[] studentArray = new String[studentList.size()];
			studentArray = (String[]) studentList.toArray(studentArray);
			logger.info("studentArray === " + studentArray.length);

			for (int k = 0; k < studentArray.length; k++) {

				int tokenSize = 0;
				int m = 0;

				StringTokenizer st = new StringTokenizer(studentArray[k], "|");
				tokenSize = st.countTokens();
				String[] columnArray = new String[tokenSize];
				while (st.hasMoreTokens()) {
					columnArray[m] = st.nextToken();
					m++;
				}

				feeStatus = updateAllStatus;
				if (tokenSize > 3) {
					feeStatus = columnArray[3];
				}

				if (isUpdate) {
					updateQuery = "UPDATE FEE_STATUS SET FEE_STATUS='" + feeStatus + "',"
							+ "MODIFIED_DATE = SYSDATE(),MODIFIED_BY = '"
							+ sessionData.getUserName().trim().toUpperCase() + "' " + "WHERE GR_NO='" + columnArray[1]
							+ "' AND ACADEMIC_YEAR='" + academic + "'";
				} else {
					updateQuery = "INSERT INTO FEE_STATUS " + "(GR_NO,ACADEMIC_YEAR,FEE_STATUS,"
							+ "CREATED_BY,SECTION_NM) " + "VALUES ('" + columnArray[1] + "','" + academic + "'," + "'"
							+ feeStatus + "'," + "'" + sessionData.getUserName() + "','" + section + "')";
				}
				logger.info("insertStudentFeeStatus query " + k + " :: " + updateQuery);
				statement = connection.createStatement();
				udpdateCount = udpdateCount + statement.executeUpdate(updateQuery);
				if (updateAllStatus.equalsIgnoreCase("LC") && udpdateCount == 0) {
					return false;
				}
			}
//			}
			logger.info("StudentAttendance data updated successfully..." + udpdateCount);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////recordsFoundInFeeStatusForYear////////////////////////////////////////
	public List<String> recordsFoundInFeeStatusForYear(SessionData sessionData, String std, String div,
			String academicYear, String section, String defaultStatus) throws Exception {

		logger.info("=========recordsFoundInFeeStatusForYear Query============");
		String findQuery = "";
		String name = "";
		String feeStatus = "";
		String attendDate = "";
		String rollNo = "";
		String grNo = "";
		String queryCondition = "";
		boolean findFlag = false;
		List recordsInFeeStatusList = new ArrayList();
		String addToQuery = "";

		logger.info("std : " + std);
		logger.info("div : " + div);
		logger.info("academicYear : " + academicYear);

		try {
			findQuery = "SELECT DISTINCT FEE_STATUS.GR_NO,FEE_STATUS.ROLL_NO,"
					+ "concat(FEE_STATUS.LAST_NAME,' ',FEE_STATUS.FIRST_NAME,' ',FEE_STATUS.FATHER_NAME) AS NAME, "
					+ "FEE_STATUS.FEE_STATUS " + "FROM " + sessionData.getDBName() + "."
					+ "FEE_STATUS WHERE FEE_STATUS.ACADEMIC_YEAR = '" + academicYear + "' AND FEE_STATUS.STD_1 = '"
					+ std + "' " + "AND FEE_STATUS.DIV_1 = '" + div + "' AND FEE_STATUS.SECTION_NM='"
					+ sessionData.getSectionName() + "' " + "AND " + sessionData.getDBName() + "."
					+ "fee_status.GR_NO NOT IN " + "(SELECT GR_NO FROM HS_GENERAL_REGISTER WHERE SECTION_NM='" + section
					+ "' AND (ORIGINAL_LC IS NOT NULL OR ORIGINAL_LC != 0)) " + "ORDER BY FEE_STATUS.ROLL_NO * 1";

			logger.info("recordsInFeeStatusList query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
//				recordsInAttendanceList.add("Roll No.|Gr No.|Name|Attendance");

			while (resultSet.next()) {
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				feeStatus = resultSet.getString("FEE_STATUS") == null ? " "
						: (resultSet.getString("FEE_STATUS").trim());

				if (feeStatus.equalsIgnoreCase("") || feeStatus.equalsIgnoreCase(" ")) {
					feeStatus = "UNPAID";
				}

				recordsInFeeStatusList.add(rollNo + "|" + grNo + "|" + name + "|" + feeStatus);
				findFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return recordsInFeeStatusList;
	}

	// /////////BackupTables////////////////////////////////////////
	public List<String> BackupTables(SessionData sessionData, String bckPath) throws Exception {

		logger.info("=========BackupTables Query============");
		ResultSet resultSetBackup = null;
		resultSet = connection.getMetaData().getCatalogs();
		resultSetBackup = connection.getMetaData().getCatalogs();
		ResultSet resultSetColumn = connection.getMetaData().getCatalogs();
		String databaseName = sessionData.getDBName();
		String dateToday = cm.getCurrentDate().toLowerCase();
		BackupExcel backupExcel = new BackupExcel();
		List tableColumnList = new ArrayList();
		List emptyList = new ArrayList();
		FileWriter fw;

		screenWidth = cm.screeWidth();
		screenHeight = cm.screeHeight();
		mainCentre = (screenWidth - 150) / 2;

		JFrame f = new JFrame();
		f.setBounds(screenWidth / 2 - 150, screenHeight / 2, 90, 25);
		f.setSize(400, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {

			// this query gets all the tables in your database(put your db name in the
			// query)
			String path = cm.createTodayFolder(
					cm.getDriveName() + sessionData.getConfigMap().get("BACKUP_PATH_" + sessionData.getDBName()), true);
//			String filePath = path+"/"+categoryType+"_"+headers.replace("/", "_")+"_"+commonObj.timeInMillis()+".xlsx";
			statement = connection.createStatement();
			resultSetColumn = statement
					.executeQuery("SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '"
							+ sessionData.getDBName() + "' ");

			// Preparing List of table Names
			List<String> tableNameList = new ArrayList<String>();
			while (resultSetColumn.next()) {
				tableNameList.add(resultSetColumn.getString(1));
			}

			// path to the folder where you will save your csv files
			String filename = bckPath;

			// star iterating on each table to fetch its data and save in a .csv file
			for (String tableName : tableNameList) {
				int k = 0;

				int j = 1;

				List<String> columnsNameList = new ArrayList<String>();

				// select all data from table
				resultSetColumn = statement.executeQuery("select * from " + sessionData.getDBName() + "." + tableName);

				// colunm count is necessay as the tables are dynamic and we need to figure out
				// the numbers of columns
				int colunmCount = getColumnCount(resultSetColumn);

				try {
					fw = new FileWriter(filename + "/" + tableName + ".csv");

					LinkedHashMap columnMap = new LinkedHashMap();
					// this loop is used to add column names at the top of file , if you do not need
					// it just comment this loop
					for (int i = 1; i <= colunmCount; i++) {
						columnMap.put(i, resultSetColumn.getMetaData().getColumnName(i));
						fw.append(resultSetColumn.getMetaData().getColumnName(i));
						fw.append(",");

					}

					fw.append(System.getProperty("line.separator"));

					while (resultSetColumn.next()) {
						for (int i = 1; i <= colunmCount; i++) {

							/****
							 * you can update it here by using the column type but i am fine with the data
							 * so just converting everything to string first and then saving ************
							 */
							if (resultSetColumn.getObject(i) != null) {
								String data = resultSetColumn.getObject(i).toString();
//	                        if(!data.equalsIgnoreCase("") && !data.equalsIgnoreCase("-") && !data.equalsIgnoreCase("null") && data!=null && 
//                            		(columnMap.get(i).toString().contains("SINCE") || 
//                            		columnMap.get(i).toString().contains("DATE"))){
//	                        	if(!data.contains("(")){
//	                        		data = data.substring(0,10);
//	                        	}
//                            }
								fw.append(data);
								fw.append(",");
							} else {
								String data = "";
								fw.append(data);
								fw.append(",");
							}

						}
						// new line entered after each row
						fw.append(System.getProperty("line.separator"));
					}

					fw.flush();
					fw.close();
					CSVToExcelConverter csvtoexcelconverter = new CSVToExcelConverter(filename, tableName);
//	                 cm.deleteFile(filename+"/"+tableName+".csv");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			f.setVisible(false);
			cm.logException(e);
		} finally {
			f.setVisible(false);
			resultSet.close();
			resultSetColumn.close();
			System.gc();
		}
		return tableColumnList;
	}

	// to get numbers of rows in a result set
	public static int getRowCount(ResultSet res) throws SQLException {
		res.last();
		int numberOfRows = res.getRow();
		res.beforeFirst();
		return numberOfRows;
	}

	// to get no of columns in result set

	public static int getColumnCount(ResultSet res) throws SQLException {
		return res.getMetaData().getColumnCount();
	}

	public boolean updateStatement(SessionData session1, String workingDays, String tuitionFee, String admFee,
			String termFee, String failLastYear, String ruralUrban, String freeshipDateStr, String incomeCert,
			String academicYear, String section, HashMap<String, String> hmapStudents) throws SQLException {

		try {
			logger.info("==updateStatement==");
			int tokenSize = 0;
			int m = 0;
			String annualIncome = "";
			String noOfChild = "";
			String daysAttended = "";
			String studentData = "";
			String gr = "";
			String failLastYearArr = "";
			String freeshipDateArr = "";
			String tuitionFeeArr = "";
			String admFeeArr = "";
			String termFeeArr = "";
			String ruralUrbanArr = "";
			String incomeCertArr = "";
			String workingDaysArr = "";

			Set set = hmapStudents.entrySet();
			Iterator iterator = set.iterator();
			while (iterator.hasNext()) {
				Map.Entry me = (Map.Entry) iterator.next();
				studentData = me.getValue().toString();
				studentData = studentData.replace(" ", "~");
				gr = me.getKey().toString();

				StringTokenizer st = new StringTokenizer(studentData, "|");
				tokenSize = st.countTokens();
				String[] columnArray = new String[tokenSize];
				while (st.hasMoreTokens()) {
					columnArray[m] = st.nextToken().replace("~", "");
					m++;
				}

				if (!failLastYear.equalsIgnoreCase("") && failLastYear.equalsIgnoreCase("Select")) {
					failLastYearArr = columnArray[3].toString();
				} else {
					failLastYearArr = failLastYear;
				}
				if (freeshipDateStr.equalsIgnoreCase("")) {
					freeshipDateArr = columnArray[6].toString();
				} else {
					freeshipDateArr = freeshipDateStr;
				}
				if (!tuitionFee.equalsIgnoreCase("") && tuitionFee.equalsIgnoreCase("")) {
					tuitionFeeArr = columnArray[7].toString();
				} else {
					tuitionFeeArr = tuitionFee;
				}
				if (!admFee.equalsIgnoreCase("") && admFee.equalsIgnoreCase("")) {
					admFeeArr = columnArray[8].toString();
				} else {
					admFeeArr = admFee;
				}
				if (!termFee.equalsIgnoreCase("") && termFee.equalsIgnoreCase("")) {
					termFeeArr = columnArray[9].toString();
				} else {
					termFeeArr = termFee;
				}
				annualIncome = columnArray[10].toString();
				if (!ruralUrban.equalsIgnoreCase("") && ruralUrban.equalsIgnoreCase("Select")) {
					ruralUrbanArr = columnArray[11].toString();
				} else {
					ruralUrbanArr = ruralUrban;
				}
				if (!incomeCert.equalsIgnoreCase("") && incomeCert.equalsIgnoreCase("Select")) {
					incomeCertArr = columnArray[12].toString();
				} else {
					incomeCertArr = incomeCert;
				}
				noOfChild = columnArray[13].toString();
				if (workingDays.equalsIgnoreCase("")) {
					workingDaysArr = columnArray[14].toString();
				} else {
					workingDaysArr = workingDays;
				}
				daysAttended = columnArray[15].toString();

				String updateAdmit = "UPDATE STATEMENT_DATA SET FAILED_PREVIOUS = '" + failLastYearArr
						+ "', FREESHIP_DATE = STR_TO_DATE('" + freeshipDateArr + "', '%d/%m/%Y')," + "TUITION_FEE = '"
						+ tuitionFeeArr + "'," + "ADM_FEE = '" + admFeeArr + "',TERM_FEE = '" + termFeeArr
						+ "',ANNUAL_INCOME = '" + annualIncome + "'," + "RURAL_URBAN = '" + ruralUrbanArr
						+ "',INCOME_CERTIFICATE = '" + incomeCertArr + "'," + "NO_CHILD = '" + noOfChild + "',"
						+ "WORKING_DAYS = '" + workingDaysArr + "',ATTENDED_DAYS = '" + daysAttended + "',"
						+ "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '" + session1.getUserName() + "'" + " WHERE GR_NO='"
						+ gr.trim() + "' AND SECTION_NM='" + section + "'" + " AND ACADEMIC_YEAR='" + academicYear
						+ "'";

				logger.info("updateAdmit===>" + updateAdmit);
				statement = connection.createStatement();
				logger.info(statement.executeUpdate(updateAdmit));
				m = 0;
				failLastYearArr = "";
				freeshipDateArr = "";
				tuitionFeeArr = "";
				admFeeArr = "";
				termFeeArr = "";
				ruralUrbanArr = "";
				incomeCertArr = "";
				workingDaysArr = "";
			}

			logger.info("Update data inserted successfully...");
//			JOptionPane.showMessageDialog(null, "Data updated Sucessfully");
			admitFormFlag = true;
			logger.info("admitflag 1 ::" + admitFormFlag);
		} catch (Exception e) {
			cm.logException(e);
			admitFormFlag = false;
			return admitFormFlag;

		}
		return admitFormFlag;
	}

	// /////////getDistinctDiv//////////////////////////////
	public String getDistinctDiv(SessionData sessionData, String std, String section, String divColumn,
			String stdColumn, String tableName, String academic) {

		logger.info("======inside getDistinctDiv======");
		String retDiv = "", condition = "";
		try {
			if(!academic.equalsIgnoreCase("") && !academic.equalsIgnoreCase("All") && !academic.equalsIgnoreCase("Select")) {
				condition = " AND ACADEMIC_YEAR='" + academic + "'";
			}
			String query = "SELECT DISTINCT " + divColumn + " FROM " + sessionData.getDBName() + "." + tableName
					+ " WHERE SECTION_NM='" + section + "' AND " + stdColumn + "='" + std + "' "+ condition
					+ "ORDER BY " + divColumn + " ASC";
			logger.info(query);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				retDiv = retDiv + "," + resultSet.getString(divColumn);
			}
			if (retDiv.length() > 0) {
				retDiv = retDiv.substring(1);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return retDiv;
	}

	//// retrieve LC list
	public TreeMap<String, String> findStudentLCList(SessionData sessionData, String gr, String std, String div,
			String last, String first, String middle, String academicYear, String rollFrom, String rollTo,
			String section) {

		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		String grNoDb = "";
		String lcNo = "", dol = "";
		String condition = "PRESENT_STD='" + std + "' AND PRESENT_DIV='" + div + "' AND ";

		try {
			if (!gr.equalsIgnoreCase("")) {
				condition = "GR_NO='" + gr + "' AND ";
				;
			}
			String lcQuery = "SELECT GR_NO,ORIGINAL_LC,DATE_FORMAT(DATE_LEAVING, '%d-%m-%Y') AS DATE_LEAVING " + "FROM "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER WHERE " + condition + "SECTION_NM='"
					+ section + "' AND ORIGINAL_LC IS NOT NULL AND ACADEMIC_YEAR='" + academicYear + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(lcQuery);

			while (resultSet.next()) {
				grNoDb = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				lcNo = resultSet.getString("ORIGINAL_LC") == null ? "" : (resultSet.getString("ORIGINAL_LC").trim());
				dol = resultSet.getString("DATE_LEAVING") == null ? "" : (resultSet.getString("DATE_LEAVING").trim());
				if (!lcNo.equalsIgnoreCase("") && !lcNo.equalsIgnoreCase("null")) {
					studentLCMap.put(grNoDb, lcNo + "|" + cm.MM_ddlmmlyyyy(dol));
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return studentLCMap;
	}

	// /////////CategoryWise Print List////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> top10ReportList(SessionData sessionData, String std,
			String div, String academicYear, String section, String catType, String print, String exam, String orderBy,
			String subjectTitle) throws Exception {

		logger.info("=========top10ReportList Query============");
		String findQuery = "";
		String catTypeDB = "";
		String genderDB = "";
		int srNo = 0;
		String firstName = "";
		String lastName = "";
		String fatherName = "";
		String grNo = "", lcDate = "";
		String rollNo = "";
		String stdDb = "", divDb = "";
		String percent = "";
		String marks = "";
		String name = "";
		String totalDB = "";
		String queryCondition = "";
		boolean findFlag = false;
		LinkedHashMap top10hmap = new LinkedHashMap();
		LinkedHashMap headerHmap = new LinkedHashMap();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String examDisplay = "", percentColumn = "";
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		if (exam.equalsIgnoreCase("Semester 1")) {
			examDisplay = "SEM1";
		}
		if (exam.equalsIgnoreCase("Semester 2")) {
			examDisplay = "SEM2";
		}
		if (exam.equalsIgnoreCase("Final")) {
			examDisplay = "FINAL";
		}

		if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  RESULT_DATA.ACADEMIC_YEAR = '" + academicYear + "'  AND  RESULT_DATA.STD_1 = '"
					+ std + "' AND  RESULT_DATA.DIV_1 = '" + div + "' AND RESULT_DATA.SECTION_NM='" + section + "'";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  RESULT_DATA.ACADEMIC_YEAR = '" + academicYear + "'  AND  RESULT_DATA.STD_1 = '"
					+ std + "' AND RESULT_DATA.SECTION_NM='" + section + "'";
		} else if (std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  RESULT_DATA.ACADEMIC_YEAR = '" + academicYear + "' AND RESULT_DATA.SECTION_NM='"
					+ section + "'";
		} else if (std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  RESULT_DATA.ACADEMIC_YEAR = '" + academicYear + "'  AND  RESULT_DATA.DIV_1 = '"
					+ div + "' AND RESULT_DATA.SECTION_NM='" + section + "'";
		}

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);

			percentColumn = examDisplay + "_PERCENT";
			findQuery = "SELECT * FROM " + sessionData.getDBName() + ".RESULT_DATA " + queryCondition + " ORDER BY "
					+ examDisplay + "_PERCENT * 1 " + orderBy;
			logger.info("findCategoryWise query :: " + findQuery);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			headerHmap.put("srNo", "Sr No");
			headerHmap.put("std", "Std-Div");
			headerHmap.put("rollNo", "Roll No");
			headerHmap.put("rollNo", "Roll No");
			headerHmap.put("grNo", "GR No.");
			headerHmap.put("name", "Name");
			if (!subjectTitle.equalsIgnoreCase("") && !subjectTitle.equalsIgnoreCase("Select")) {
				headerHmap.put("percent", subjectTitle.replace("_", " "));
				percentColumn = subjectTitle + "_" + examDisplay;
			} else {
				headerHmap.put("percent", "Percent");
			}
			headerHmap.put("marks", "Marks");
			top10hmap.put("header", headerHmap);

			while (resultSet.next()) {
				LinkedHashMap studenthmap = new LinkedHashMap();
				rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO").trim());
				stdDb = resultSet.getString("STD_1") == null ? " " : (resultSet.getString("STD_1").trim());
				divDb = resultSet.getString("DIV_1") == null ? " " : (resultSet.getString("DIV_1").trim());
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				firstName = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME").trim());
				lcDate = studentLCMap.get(grNo);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicYear)) {
					continue;
				}
				lastName = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				name = lastName + " " + firstName + " " + fatherName;
				percent = resultSet.getString(percentColumn) == null ? " "
						: (resultSet.getString(percentColumn).trim());
				if (percent.contains("(")) {
					percent = percent.substring(0, percent.indexOf("("));
				}
				if (percent.contains("+")) {
					percent = percent.substring(0, percent.indexOf("+"));
				}
				marks = resultSet.getString(examDisplay + "_MARKS") == null ? " "
						: (resultSet.getString(examDisplay + "_MARKS").trim());
				srNo++;

				studenthmap.put("srNo", "  " + srNo);
				studenthmap.put("std", "  " + stdDb + "-" + divDb);
				studenthmap.put("rollNo", rollNo);
				studenthmap.put("grNo", grNo);
				studenthmap.put("name", name);
				studenthmap.put("percent", percent);
				studenthmap.put("marks", marks);
				top10hmap.put(grNo, studenthmap);
				findFlag = true;
			}

			/*
			 * if (!print.equalsIgnoreCase("")) { if(div.equalsIgnoreCase("")){ div = "All";
			 * } if(std.equalsIgnoreCase("")){ std = "All"; } ce.generateExcel(sessionData,
			 * "PRINTLIST", "CATEGORY_WISE", findQuery, catDataList, false,
			 * secName+" CATEGORY_WISE  STD:"+std+"  DIV:"+div+ " "+academicYear); return
			 * null; }
			 */

		} catch (Exception e) {
			cm.logException(e);
		}
		return top10hmap;
	}

	/////////// Obtained Marks for subjectwise marksheet
	/////////// report////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getMarksheetSubjectwise(SessionData sessionData,
			String std, String div, String academicYear, String section, String print, String exam, String subjectTitle,
			LinkedHashMap<String, LinkedHashMap<String, String>> subjectMap,
			LinkedHashMap<String, LinkedHashMap<String, String>> maxSubMarks, LinkedHashMap<String, String> leftDataMap,
			String reportType) throws Exception {

		logger.info("=========getMarksheetSubjectwise Query============");
		String findQuery = "";
		String generalTypeDB = "";
		int srNo = 0;
		String name = "", lcDate = "";
		String rollNo = "", subjectTitleForMap = "";
		String grNo = "", subjectTitleSem1 = "", subjectTitleSem2 = "", subjectTitleFinal = "";
		String dob = "", obt = "", ora = "", ass = "", wri = "", pra = "", pre = "", mca = "", act = "", pro = "",
				oth = "", ora1 = "", dob2 = "", obt2 = "", ora2 = "", ass2 = "", wri2 = "", pra2 = "", pra12 = "",
				pre2 = "", mca2 = "", act2 = "", pro2 = "", oth2 = "", ora12 = "", wri12 = "", pra1 = "", wri1 = "",
				examInitial = "", subject = "", sem = "", lis = "", spe = "", ass1 = "", itot = "", lis2 = "",
				spe2 = "", ass12 = "", itot2 = "";
		boolean findFlag = false;
		int stdInt = 0, academicStart = 0;
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> subjectMaxMarks = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		List generalDataExcelList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		if (!academicYear.equalsIgnoreCase("")) {
			academicStart = Integer.parseInt(academicYear.substring(0, 4));
		}
		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "F";
			sem = "sem1";
		} else {
			examInitial = "S";
			sem = "sem2";
		}

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);
			stdInt = cm.RomanToInteger(std);
			subjectMaxMarks = findMaxMarks(sessionData, "", "", std, subjectTitle, academicYear);

			Set set = subjectMap.entrySet();
			Iterator n = set.iterator();
			while (n.hasNext()) {
				Map.Entry me = (Map.Entry) n.next();
				LinkedHashMap subjectmap = new LinkedHashMap();
				subjectmap = (LinkedHashMap) me.getValue();
				subjectTitleForMap = subjectTitle;
				if (!subjectTitle.equalsIgnoreCase(subjectmap.get("subject_title").toString())
						&& !reportType.equalsIgnoreCase("Exam Register")) {
					continue;
				} else if (reportType.equalsIgnoreCase("Exam Register")) {
					subjectTitle = subjectmap.get("subject_title").toString();
				}
				subject = subjectmap.get("subject_name").toString();
				if (subjectMaxMarks.get(subject) == null) {
					continue;
				}

				findQuery = "select MARKS_ENTRY.ROLL_NO,MARKS_ENTRY.GR_NO,concat(MARKS_ENTRY.LAST_NAME,' ',MARKS_ENTRY.FIRST_NAME,' ',MARKS_ENTRY.FATHER_NAME) AS NAME,"
						+ "MARKS_ENTRY." + subject + "_FOBT,MARKS_ENTRY." + subject + "_FDOB,MARKS_ENTRY." + subject
						+ "_FORA,MARKS_ENTRY." + subject + "_FASS,MARKS_ENTRY." + subject + "_FWRI," + "MARKS_ENTRY."
						+ subject + "_FPRA,MARKS_ENTRY." + subject + "_FPRE,MARKS_ENTRY." + subject
						+ "_FMCA,MARKS_ENTRY." + subject + "_FACT," + "MARKS_ENTRY." + subject + "_FPRO,MARKS_ENTRY."
						+ subject + "_FOTH,MARKS_ENTRY." + subject + "_FORA1,MARKS_ENTRY." + subject + "_FPRA1,"
						+ "MARKS_ENTRY." + subject + "_FWRI1,MARKS_ENTRY." + subject + "_FLIS,MARKS_ENTRY." + subject
						+ "_FSPE,MARKS_ENTRY." + subject + "_FASS1," + "MARKS_ENTRY." + subject + "_FITOT,"
						+ "MARKS_ENTRY." + subject + "_SOBT,MARKS_ENTRY." + subject + "_SDOB,MARKS_ENTRY." + subject
						+ "_SORA,MARKS_ENTRY." + subject + "_SASS," + "MARKS_ENTRY." + subject + "_SWRI,MARKS_ENTRY."
						+ subject + "_SPRA,MARKS_ENTRY." + subject + "_SPRE,MARKS_ENTRY." + subject + "_SMCA,"
						+ "MARKS_ENTRY." + subject + "_SACT,MARKS_ENTRY." + subject + "_SPRO,MARKS_ENTRY." + subject
						+ "_SOTH,MARKS_ENTRY." + subject + "_SORA1," + "MARKS_ENTRY." + subject + "_SPRA1,MARKS_ENTRY."
						+ subject + "_SWRI1,MARKS_ENTRY." + subject + "_SLIS,MARKS_ENTRY." + subject + "_SSPE,"
						+ "MARKS_ENTRY." + subject + "_SASS1,MARKS_ENTRY." + subject + "_SITOT,RESULT_DATA."
						+ subjectTitle + "_SEM1,RESULT_DATA." + subjectTitle + "_SEM2," + "RESULT_DATA." + subjectTitle
						+ "_FINAL " + "from " + sessionData.getDBName() + "." + "MARKS_ENTRY LEFT JOIN "
						+ sessionData.getDBName() + "." + "RESULT_DATA "
						+ "ON MARKS_ENTRY.GR_NO=result_data.GR_NO AND MARKS_ENTRY.SECTION_NM=result_data.SECTION_NM AND "
						+ "MARKS_ENTRY.ACADEMIC_YEAR=result_data.ACADEMIC_YEAR AND MARKS_ENTRY.DIV_1=result_data.DIV_1 "
						+ "where MARKS_ENTRY.ACADEMIC_YEAR = '" + academicYear + "' " + "and MARKS_ENTRY.section_nm='"
						+ sessionData.getSectionName() + "' and MARKS_ENTRY.STD_1='" + std
						+ "' and MARKS_ENTRY.DIV_1='" + div + "' " + "ORDER BY MARKS_ENTRY.ROLL_NO * 1 ";

				logger.info("findgeneralWise query :: " + findQuery);

				statement = connection.createStatement();
				resultSet = statement.executeQuery(findQuery);

				if (!std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI")
						&& !std.equalsIgnoreCase("XII")) {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_DOB|" + subject
							+ "_TEST|" + subject + "_ORAL|" + subject + "_ASSIGN|" + subject + "_PRACT|" + subject
							+ "_ACT|" + subject + "_PROJECT|" + subject + "_OTHER|" + subject + "_SUM_ORAL|" + subject
							+ "_SUM_PRACT|" + subject + "_SUM_WRITE");
				} else if (cm.is9thEvaluation(std, academicYear)) {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + examInitial + "UT|"
							+ subject + "_PRACT|" + subject + "_LISTEN|" + subject + "_SPEAK|" + subject + "_ASSIGN|"
							+ subject + "_PROJECT|" + subject + "_WRITE");
				} else if (std.equalsIgnoreCase("IX")) {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + examInitial + "UT|"
							+ subject + "_PRES|" + subject + "_MCAP|" + subject + "_WRITE|" + subject + "_PRACT|"
							+ subject + "_ACT");
				} else {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + examInitial + "UT|"
							+ subject + "_ORAL|" + subject + "_ASSIGN|" + subject + "_WRITE|" + subject + "_PRACT");
				}

				while (resultSet.next()) {
					LinkedHashMap<String, String> marksDetails = new LinkedHashMap<String, String>();
					rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
					if (rollNo.equalsIgnoreCase("")) {
						rollNo = "1";
					}

					grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
					lcDate = studentLCMap.get(grNo);
					// Check for final class allotment date
					if (lcDate != null
							&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
							&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
									sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
									lcDate.substring(lcDate.indexOf("|") + 1))) {
						continue;
					} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
							&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
									sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
									lcDate.substring(lcDate.indexOf("|") + 1))
							&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
									.equalsIgnoreCase(academicYear)) {
						continue;
					}
					name = resultSet.getString("NAME") == null ? "-" : (resultSet.getString("NAME").trim());

					if (academicStart < 2019 && stdInt < 9) {// changed since 9th evaluation was implemented
						dob = resultSet.getString(subject + "_" + examInitial + "DOB") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "DOB").trim());
						obt = resultSet.getString(subject + "_" + examInitial + "OBT") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "OBT").trim());
						ora = resultSet.getString(subject + "_" + examInitial + "ORA") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "ORA").trim());
						ass = resultSet.getString(subject + "_" + examInitial + "ASS") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "ASS").trim());
						wri = resultSet.getString(subject + "_" + examInitial + "WRI") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "WRI").trim());
						pra = resultSet.getString(subject + "_" + examInitial + "PRA") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "PRA").trim());
						pre = resultSet.getString(subject + "_" + examInitial + "PRE") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "PRE").trim());
						mca = resultSet.getString(subject + "_" + examInitial + "MCA") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "MCA").trim());
						act = resultSet.getString(subject + "_" + examInitial + "ACT") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "ACT").trim());
						pro = resultSet.getString(subject + "_" + examInitial + "PRO") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "PRO").trim());
						oth = resultSet.getString(subject + "_" + examInitial + "OTH") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "OTH").trim());
						ora1 = resultSet.getString(subject + "_" + examInitial + "ORA1") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "ORA1").trim());
						pra1 = resultSet.getString(subject + "_" + examInitial + "PRA1") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "PRA1").trim());
						wri1 = resultSet.getString(subject + "_" + examInitial + "WRI1") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "WRI1").trim());
					} else {

						dob = resultSet.getString(subject + "_FDOB") == null ? "-"
								: (resultSet.getString(subject + "_FDOB").trim());
						obt = resultSet.getString(subject + "_FOBT") == null ? "-"
								: (resultSet.getString(subject + "_FOBT").trim());
						ora = resultSet.getString(subject + "_FORA") == null ? "-"
								: (resultSet.getString(subject + "_FORA").trim());
						ass = resultSet.getString(subject + "_FASS") == null ? "-"
								: (resultSet.getString(subject + "_FASS").trim());
						wri = resultSet.getString(subject + "_FWRI") == null ? "-"
								: (resultSet.getString(subject + "_FWRI").trim());
						pra = resultSet.getString(subject + "_FPRA") == null ? "-"
								: (resultSet.getString(subject + "_FPRA").trim());
						pre = resultSet.getString(subject + "_FPRE") == null ? "-"
								: (resultSet.getString(subject + "_FPRE").trim());
						mca = resultSet.getString(subject + "_FMCA") == null ? "-"
								: (resultSet.getString(subject + "_FMCA").trim());
						act = resultSet.getString(subject + "_FACT") == null ? "-"
								: (resultSet.getString(subject + "_FACT").trim());
						pro = resultSet.getString(subject + "_FPRO") == null ? "-"
								: (resultSet.getString(subject + "_FPRO").trim());
						oth = resultSet.getString(subject + "_FOTH") == null ? "-"
								: (resultSet.getString(subject + "_FOTH").trim());
						ora1 = resultSet.getString(subject + "_FORA1") == null ? "-"
								: (resultSet.getString(subject + "_FORA1").trim());
						pra1 = resultSet.getString(subject + "_FPRA1") == null ? "-"
								: (resultSet.getString(subject + "_FPRA1").trim());
						wri1 = resultSet.getString(subject + "_FWRI1") == null ? "-"
								: (resultSet.getString(subject + "_FWRI1").trim());
						lis = resultSet.getString(subject + "_FLIS") == null ? "-"
								: (resultSet.getString(subject + "_FLIS").trim());
						spe = resultSet.getString(subject + "_FSPE") == null ? "-"
								: (resultSet.getString(subject + "_FSPE").trim());
						ass1 = resultSet.getString(subject + "_FASS1") == null ? "-"
								: (resultSet.getString(subject + "_FASS1").trim());
						itot = resultSet.getString(subject + "_FITOT") == null ? "-"
								: (resultSet.getString(subject + "_FITOT").trim());

						dob2 = resultSet.getString(subject + "_SDOB") == null ? "-"
								: (resultSet.getString(subject + "_SDOB").trim());
						obt2 = resultSet.getString(subject + "_SOBT") == null ? "-"
								: (resultSet.getString(subject + "_SOBT").trim());
						ora2 = resultSet.getString(subject + "_SORA") == null ? "-"
								: (resultSet.getString(subject + "_SORA").trim());
						ass2 = resultSet.getString(subject + "_SASS") == null ? "-"
								: (resultSet.getString(subject + "_SASS").trim());
						wri2 = resultSet.getString(subject + "_SWRI") == null ? "-"
								: (resultSet.getString(subject + "_SWRI").trim());
						pra2 = resultSet.getString(subject + "_SPRA") == null ? "-"
								: (resultSet.getString(subject + "_SPRA").trim());
						pre2 = resultSet.getString(subject + "_SPRE") == null ? "-"
								: (resultSet.getString(subject + "_SPRE").trim());
						mca2 = resultSet.getString(subject + "_SMCA") == null ? "-"
								: (resultSet.getString(subject + "_SMCA").trim());
						act2 = resultSet.getString(subject + "_SACT") == null ? "-"
								: (resultSet.getString(subject + "_SACT").trim());
						pro2 = resultSet.getString(subject + "_SPRO") == null ? "-"
								: (resultSet.getString(subject + "_SPRO").trim());
						oth2 = resultSet.getString(subject + "_SOTH") == null ? "-"
								: (resultSet.getString(subject + "_SOTH").trim());
						ora12 = resultSet.getString(subject + "_SORA1") == null ? "-"
								: (resultSet.getString(subject + "_SORA1").trim());
						pra12 = resultSet.getString(subject + "_SPRA1") == null ? "-"
								: (resultSet.getString(subject + "_SPRA1").trim());
						wri12 = resultSet.getString(subject + "_SWRI1") == null ? "-"
								: (resultSet.getString(subject + "_SWRI1").trim());
						lis2 = resultSet.getString(subject + "_SLIS") == null ? "-"
								: (resultSet.getString(subject + "_SLIS").trim());
						spe2 = resultSet.getString(subject + "_SSPE") == null ? "-"
								: (resultSet.getString(subject + "_SSPE").trim());
						ass12 = resultSet.getString(subject + "_SASS1") == null ? "-"
								: (resultSet.getString(subject + "_SASS1").trim());
						itot2 = resultSet.getString(subject + "_SITOT") == null ? "-"
								: (resultSet.getString(subject + "_SITOT").trim());
					}
					subjectTitleSem1 = resultSet.getString(subjectTitle + "_SEM1") == null ? "-"
							: (resultSet.getString(subjectTitle + "_SEM1").trim());
					subjectTitleSem2 = resultSet.getString(subjectTitle + "_SEM2") == null ? "-"
							: (resultSet.getString(subjectTitle + "_SEM2").trim());
					subjectTitleFinal = resultSet.getString(subjectTitle + "_FINAL") == null ? "-"
							: (resultSet.getString(subjectTitle + "_FINAL").trim());

					if (rollNo.equalsIgnoreCase(""))
						rollNo = "-";
					if (grNo.equalsIgnoreCase(""))
						grNo = "-";
					if (name.equalsIgnoreCase(""))
						name = "-";
					if (dob.equalsIgnoreCase(""))
						dob = "-";
					if (obt.equalsIgnoreCase(""))
						obt = "-";
					if (ora.equalsIgnoreCase(""))
						ora = "-";
					if (ass.equalsIgnoreCase(""))
						ass = "-";
					if (wri.equalsIgnoreCase(""))
						wri = "-";
					if (pra.equalsIgnoreCase(""))
						pra = "-";
					if (pre.equalsIgnoreCase(""))
						pre = "-";
					if (mca.equalsIgnoreCase(""))
						mca = "-";
					if (act.equalsIgnoreCase(""))
						act = "-";
					if (pro.equalsIgnoreCase(""))
						pro = "-";
					if (oth.equalsIgnoreCase(""))
						oth = "-";
					if (ora1.equalsIgnoreCase(""))
						ora1 = "-";
					if (pra1.equalsIgnoreCase(""))
						pra1 = "-";
					if (wri1.equalsIgnoreCase(""))
						wri1 = "-";
					if (lis.equalsIgnoreCase(""))
						lis = "-";
					if (spe.equalsIgnoreCase(""))
						spe = "-";
					if (ass1.equalsIgnoreCase(""))
						ass1 = "-";
					if (itot.equalsIgnoreCase(""))
						itot = "-";

					if (dob2.equalsIgnoreCase(""))
						dob2 = "-";
					if (obt2.equalsIgnoreCase(""))
						obt2 = "-";
					if (ora2.equalsIgnoreCase(""))
						ora2 = "-";
					if (ass2.equalsIgnoreCase(""))
						ass2 = "-";
					if (wri2.equalsIgnoreCase(""))
						wri2 = "-";
					if (pra2.equalsIgnoreCase(""))
						pra2 = "-";
					if (pre2.equalsIgnoreCase(""))
						pre2 = "-";
					if (mca2.equalsIgnoreCase(""))
						mca2 = "-";
					if (act2.equalsIgnoreCase(""))
						act2 = "-";
					if (pro2.equalsIgnoreCase(""))
						pro2 = "-";
					if (oth2.equalsIgnoreCase(""))
						oth2 = "-";
					if (ora12.equalsIgnoreCase(""))
						ora12 = "-";
					if (pra12.equalsIgnoreCase(""))
						pra12 = "-";
					if (wri12.equalsIgnoreCase(""))
						wri12 = "-";
					if (lis2.equalsIgnoreCase(""))
						lis2 = "-";
					if (spe2.equalsIgnoreCase(""))
						spe2 = "-";
					if (ass12.equalsIgnoreCase(""))
						ass12 = "-";
					if (itot2.equalsIgnoreCase(""))
						itot2 = "-";

					if (!std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI")
							&& !std.equalsIgnoreCase("XII")) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + dob + "|" + obt + "|" + ora + "|" + ass + "|" + pra + "|" + act + "|" + pro
								+ "|" + oth + "|" + ora1 + "|" + pra1 + "|" + wri1);
					} else if (cm.is9thEvaluation(std, academicYear)) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + obt + "|" + pra + "|" + lis + "|" + spe + "|" + ass1 + "|" + pro + "|" + wri);
					} else if (std.equalsIgnoreCase("IX")) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + obt + "|" + pre + "|" + mca + "|" + wri + "|" + pra + "|" + act);
					} else {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + obt + "|" + ora + "|" + ass + "|" + wri + "|" + pra);
					}

					if (reportType.equalsIgnoreCase("Exam Register")) {
						subjectTitleForMap = subject;
					}
					if (marksDataMap.get(grNo) == null) {
						marksDetails.put("rollNo", rollNo);
						marksDetails.put("grNo", grNo);
						marksDetails.put("name", name);

						if (academicStart < 2019 && stdInt < 9) {// changed since 9th evaluation was implemented
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "DOB", cm.marksCalculation("0",
									dob, subjectMaxMarks.get(subject).get(sem + "_dobs"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "OBT", cm.marksCalculation("0",
									obt, subjectMaxMarks.get(subject).get(sem + "_obt"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ORA", cm.marksCalculation("0",
									ora, subjectMaxMarks.get(subject).get(sem + "_oral"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ASS", cm.marksCalculation("0",
									ass, subjectMaxMarks.get(subject).get(sem + "_assign"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "WRI", cm.marksCalculation("0",
									wri, subjectMaxMarks.get(subject).get(sem + "_write"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRA", cm.marksCalculation("0",
									pra, subjectMaxMarks.get(subject).get(sem + "_pract"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRE", cm.marksCalculation("0",
									pre, subjectMaxMarks.get(subject).get(sem + "_pres"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "MCA", cm.marksCalculation("0",
									mca, subjectMaxMarks.get(subject).get(sem + "_mcap"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ACT", cm.marksCalculation("0",
									act, subjectMaxMarks.get(subject).get(sem + "_activity"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRO", cm.marksCalculation("0",
									pro, subjectMaxMarks.get(subject).get(sem + "_project"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "OTH", cm.marksCalculation("0",
									oth, subjectMaxMarks.get(subject).get(sem + "_other"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ORA1", cm.marksCalculation("0",
									ora1, subjectMaxMarks.get(subject).get(sem + "_oral1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRA1", cm.marksCalculation("0",
									pra1, subjectMaxMarks.get(subject).get(sem + "_pract1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "WRI1", cm.marksCalculation("0",
									wri1, subjectMaxMarks.get(subject).get(sem + "_write1"), leftDataMap, grNo));
						} else {
							// get converted marks
							marksDetails.put(subjectTitleForMap + "_FDOB", cm.validateNumber(dob)
									? (cm.convertMarks(std, dob, subject, subjectMaxMarks.get(subject).get("sem1_dobs"),
											"DOBS", subjectMaxMarks, "sem1")) + ""
									: dob);
							marksDetails.put(subjectTitleForMap + "_FOBT", cm.validateNumber(obt)
									? (cm.convertMarks(std, obt, subject, subjectMaxMarks.get(subject).get("sem1_obt"),
											"OBT", subjectMaxMarks, "sem1")) + ""
									: obt);
							marksDetails.put(subjectTitleForMap + "_FORA", cm.validateNumber(ora)
									? (cm.convertMarks(std, ora, subject, subjectMaxMarks.get(subject).get("sem1_oral"),
											"ORAL", subjectMaxMarks, "sem1")) + ""
									: ora);
							marksDetails.put(subjectTitleForMap + "_FASS",
									cm.validateNumber(ass)
											? (cm.convertMarks(std, ass, subject,
													subjectMaxMarks.get(subject).get("sem1_assign"), "ASSIGN",
													subjectMaxMarks, "sem1")) + ""
											: ass);
							marksDetails.put(subjectTitleForMap + "_FWRI",
									cm.validateNumber(wri)
											? (cm.convertMarks(std, wri, subject,
													subjectMaxMarks.get(subject).get("sem1_write"), "WRITE",
													subjectMaxMarks, "sem1")) + ""
											: wri);
							marksDetails.put(subjectTitleForMap + "_FPRA",
									cm.validateNumber(pra)
											? (cm.convertMarks(std, pra, subject,
													subjectMaxMarks.get(subject).get("sem1_pract"), "PRACT",
													subjectMaxMarks, "sem1")) + ""
											: pra);
							marksDetails.put(subjectTitleForMap + "_FPRE", cm.validateNumber(pre)
									? (cm.convertMarks(std, pre, subject, subjectMaxMarks.get(subject).get("sem1_pres"),
											"PRES", subjectMaxMarks, "sem1")) + ""
									: pre);
							marksDetails.put(subjectTitleForMap + "_FMCA", cm.validateNumber(mca)
									? (cm.convertMarks(std, mca, subject, subjectMaxMarks.get(subject).get("sem1_mcap"),
											"MCAP", subjectMaxMarks, "sem1")) + ""
									: mca);
							marksDetails.put(subjectTitleForMap + "_FACT",
									cm.validateNumber(act)
											? (cm.convertMarks(std, act, subject,
													subjectMaxMarks.get(subject).get("sem1_activity"), "ACTIVITY",
													subjectMaxMarks, "sem1")) + ""
											: act);
							marksDetails.put(subjectTitleForMap + "_FPRO",
									cm.validateNumber(pro)
											? (cm.convertMarks(std, pro, subject,
													subjectMaxMarks.get(subject).get("sem1_project"), "PROJECT",
													subjectMaxMarks, "sem1")) + ""
											: pro);
							marksDetails.put(subjectTitleForMap + "_FOTH",
									cm.validateNumber(oth)
											? (cm.convertMarks(std, oth, subject,
													subjectMaxMarks.get(subject).get("sem1_other"), "OTHER",
													subjectMaxMarks, "sem1")) + ""
											: oth);
							marksDetails.put(subjectTitleForMap + "_FORA1",
									cm.validateNumber(ora1)
											? (cm.convertMarks(std, ora1, subject,
													subjectMaxMarks.get(subject).get("sem1_oral1"), "ORAL1",
													subjectMaxMarks, "sem1")) + ""
											: ora1);
							marksDetails.put(subjectTitleForMap + "_FPRA1",
									cm.validateNumber(pra1)
											? (cm.convertMarks(std, pra1, subject,
													subjectMaxMarks.get(subject).get("sem1_pract1"), "PRACT1",
													subjectMaxMarks, "sem1")) + ""
											: pra1);
							marksDetails.put(subjectTitleForMap + "_FWRI1",
									cm.validateNumber(wri1)
											? (cm.convertMarks(std, wri1, subject,
													subjectMaxMarks.get(subject).get("sem1_write1"), "WRITE1",
													subjectMaxMarks, "sem1")) + ""
											: wri1);
							marksDetails.put(subjectTitleForMap + "_FLIS",
									cm.validateNumber(lis)
											? (cm.convertMarks(std, lis, subject,
													subjectMaxMarks.get(subject).get("sem1_listen"), "LISTEN",
													subjectMaxMarks, "sem1")) + ""
											: lis);
							marksDetails.put(subjectTitleForMap + "_FSPE",
									cm.validateNumber(spe)
											? (cm.convertMarks(std, spe, subject,
													subjectMaxMarks.get(subject).get("sem1_speak"), "SPEAK",
													subjectMaxMarks, "sem1")) + ""
											: spe);
							marksDetails.put(subjectTitleForMap + "_FASS1",
									cm.validateNumber(ass1)
											? (cm.convertMarks(std, ass1, subject,
													subjectMaxMarks.get(subject).get("sem1_assign1"), "ASSIGN1",
													subjectMaxMarks, "sem1")) + ""
											: ass1);
							marksDetails.put(subjectTitleForMap + "_FITOT",
									cm.validateNumber(itot)
											? (cm.convertMarks(std, itot, subject,
													subjectMaxMarks.get(subject).get("sem1_intot"), "INTOT",
													subjectMaxMarks, "sem1")) + ""
											: itot);

							marksDetails.put(subjectTitleForMap + "_SDOB",
									cm.validateNumber(dob2)
											? (cm.convertMarks(std, dob2, subject,
													subjectMaxMarks.get(subject).get("sem2_dobs"), "DOBS",
													subjectMaxMarks, "sem2")) + ""
											: dob2);
							marksDetails.put(subjectTitleForMap + "_SOBT", cm.validateNumber(obt2)
									? (cm.convertMarks(std, obt2, subject, subjectMaxMarks.get(subject).get("sem2_obt"),
											"OBT", subjectMaxMarks, "sem2")) + ""
									: obt2);
							marksDetails.put(subjectTitleForMap + "_SORA",
									cm.validateNumber(ora2)
											? (cm.convertMarks(std, ora2, subject,
													subjectMaxMarks.get(subject).get("sem2_oral"), "ORAL",
													subjectMaxMarks, "sem2")) + ""
											: ora2);
							marksDetails.put(subjectTitleForMap + "_SASS",
									cm.validateNumber(ass2)
											? (cm.convertMarks(std, ass2, subject,
													subjectMaxMarks.get(subject).get("sem2_assign"), "ASSIGN",
													subjectMaxMarks, "sem2")) + ""
											: ass2);
							marksDetails.put(subjectTitleForMap + "_SWRI",
									cm.validateNumber(wri2)
											? (cm.convertMarks(std, wri2, subject,
													subjectMaxMarks.get(subject).get("sem2_write"), "WRITE",
													subjectMaxMarks, "sem2")) + ""
											: wri2);
							marksDetails.put(subjectTitleForMap + "_SPRA",
									cm.validateNumber(pra2)
											? (cm.convertMarks(std, pra2, subject,
													subjectMaxMarks.get(subject).get("sem2_pract"), "PRACT",
													subjectMaxMarks, "sem2")) + ""
											: pra2);
							marksDetails.put(subjectTitleForMap + "_SPRE",
									cm.validateNumber(pre2)
											? (cm.convertMarks(std, pre2, subject,
													subjectMaxMarks.get(subject).get("sem2_pres"), "PRES",
													subjectMaxMarks, "sem2")) + ""
											: pre2);
							marksDetails.put(subjectTitleForMap + "_SMCA",
									cm.validateNumber(mca2)
											? (cm.convertMarks(std, mca2, subject,
													subjectMaxMarks.get(subject).get("sem2_mcap"), "MCAP",
													subjectMaxMarks, "sem2")) + ""
											: mca2);
							marksDetails.put(subjectTitleForMap + "_SACT",
									cm.validateNumber(act2)
											? (cm.convertMarks(std, act2, subject,
													subjectMaxMarks.get(subject).get("sem2_activity"), "ACTIVITY",
													subjectMaxMarks, "sem2")) + ""
											: act2);
							marksDetails.put(subjectTitleForMap + "_SPRO",
									cm.validateNumber(pro2)
											? (cm.convertMarks(std, pro2, subject,
													subjectMaxMarks.get(subject).get("sem2_project"), "PROJECT",
													subjectMaxMarks, "sem2")) + ""
											: pro2);
							marksDetails.put(subjectTitleForMap + "_SOTH",
									cm.validateNumber(oth2)
											? (cm.convertMarks(std, oth2, subject,
													subjectMaxMarks.get(subject).get("sem2_other"), "OTHER",
													subjectMaxMarks, "sem2")) + ""
											: oth2);
							marksDetails.put(subjectTitleForMap + "_SORA1",
									cm.validateNumber(ora12)
											? (cm.convertMarks(std, ora12, subject,
													subjectMaxMarks.get(subject).get("sem2_oral1"), "ORAL1",
													subjectMaxMarks, "sem2")) + ""
											: ora12);
							marksDetails.put(subjectTitleForMap + "_SPRA1",
									cm.validateNumber(pra12)
											? (cm.convertMarks(std, pra12, subject,
													subjectMaxMarks.get(subject).get("sem2_pract1"), "PRACT1",
													subjectMaxMarks, "sem2")) + ""
											: pra12);
							marksDetails.put(subjectTitleForMap + "_SWRI1",
									cm.validateNumber(wri12)
											? (cm.convertMarks(std, wri12, subject,
													subjectMaxMarks.get(subject).get("sem2_write1"), "WRITE1",
													subjectMaxMarks, "sem2")) + ""
											: wri12);
							marksDetails.put(subjectTitleForMap + "_SLIS",
									cm.validateNumber(lis2)
											? (cm.convertMarks(std, lis2, subject,
													subjectMaxMarks.get(subject).get("sem2_listen"), "LISTEN",
													subjectMaxMarks, "sem2")) + ""
											: lis2);
							marksDetails.put(subjectTitleForMap + "_SSPE",
									cm.validateNumber(spe2)
											? (cm.convertMarks(std, spe2, subject,
													subjectMaxMarks.get(subject).get("sem2_speak"), "SPEAK",
													subjectMaxMarks, "sem2")) + ""
											: spe2);
							marksDetails.put(subjectTitleForMap + "_SASS1",
									cm.validateNumber(ass12)
											? (cm.convertMarks(std, ass12, subject,
													subjectMaxMarks.get(subject).get("sem2_assign1"), "ASSIGN1",
													subjectMaxMarks, "sem2")) + ""
											: ass12);
							marksDetails.put(subjectTitleForMap + "_SITOT",
									cm.validateNumber(itot2)
											? (cm.convertMarks(std, itot2, subject,
													subjectMaxMarks.get(subject).get("sem2_intot"), "INTOT",
													subjectMaxMarks, "sem2")) + ""
											: itot2);
						}
						marksDetails.put(subjectTitleForMap + "_SEM1", subjectTitleSem1);
						marksDetails.put(subjectTitleForMap + "_SEM2", subjectTitleSem2);
						marksDetails.put(subjectTitleForMap + "_FINAL", subjectTitleFinal);
						marksDataMap.put(grNo, marksDetails);
					} else {
						marksDetails = marksDataMap.get(grNo);

						if (academicStart < 2019 && stdInt < 9) {// changed since 9th evaluation was implemented
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "DOB",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "DOB"), dob,
											subjectMaxMarks.get(subject).get(sem + "_dobs"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "OBT",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "OBT"), obt,
											subjectMaxMarks.get(subject).get(sem + "_obt"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ORA",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "ORA"), ora,
											subjectMaxMarks.get(subject).get(sem + "_oral"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ASS",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "ASS"), ass,
											subjectMaxMarks.get(subject).get(sem + "_assign"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "WRI",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "WRI"), wri,
											subjectMaxMarks.get(subject).get(sem + "_write"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRA",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "PRA"), pra,
											subjectMaxMarks.get(subject).get(sem + "_pract"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRE",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "PRE"), pre,
											subjectMaxMarks.get(subject).get(sem + "_pres"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "MCA",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "MCA"), mca,
											subjectMaxMarks.get(subject).get(sem + "_mcap"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ACT",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "ACT"), act,
											subjectMaxMarks.get(subject).get(sem + "_activity"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRO",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "PRO"), pro,
											subjectMaxMarks.get(subject).get(sem + "_project"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "OTH",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "OTH"), oth,
											subjectMaxMarks.get(subject).get(sem + "_other"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "ORA1",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "ORA1"), ora1,
											subjectMaxMarks.get(subject).get(sem + "_oral1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "PRA1",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "PRA1"), pra1,
											subjectMaxMarks.get(subject).get(sem + "_pract1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_" + examInitial + "WRI1",
									cm.marksCalculation(
											marksDetails.get(subjectTitleForMap + "_" + examInitial + "WRI1"), wri1,
											subjectMaxMarks.get(subject).get(sem + "_write1"), leftDataMap, grNo));
						} else {

							marksDetails.put(subjectTitleForMap + "_FDOB", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FDOB"),
									cm.validateNumber(dob) ? (cm.convertMarks(std, dob, subject,
											subjectMaxMarks.get(subject).get("sem1_dobs"), "DOBS", subjectMaxMarks,
											"sem1")) + "" : dob,
									subjectMaxMarks.get(subject).get("sem1_dobs"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FOBT", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FOBT"),
									cm.validateNumber(obt) ? (cm.convertMarks(std, obt, subject,
											subjectMaxMarks.get(subject).get("sem1_obt"), "OBT", subjectMaxMarks,
											"sem1")) + "" : obt,
									subjectMaxMarks.get(subject).get("sem1_obt"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FORA", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FORA"),
									cm.validateNumber(ora) ? (cm.convertMarks(std, ora, subject,
											subjectMaxMarks.get(subject).get("sem1_oral"), "ORAL", subjectMaxMarks,
											"sem1")) + "" : ora,
									subjectMaxMarks.get(subject).get("sem1_oral"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FASS", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FASS"),
									cm.validateNumber(ass) ? (cm.convertMarks(std, ass, subject,
											subjectMaxMarks.get(subject).get("sem1_assign"), "ASSIGN", subjectMaxMarks,
											"sem1")) + "" : ass,
									subjectMaxMarks.get(subject).get("sem1_assign"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FWRI", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FWRI"),
									cm.validateNumber(wri) ? (cm.convertMarks(std, wri, subject,
											subjectMaxMarks.get(subject).get("sem1_write"), "WRITE", subjectMaxMarks,
											"sem1")) + "" : wri,
									subjectMaxMarks.get(subject).get("sem1_write"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FPRA", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FPRA"),
									cm.validateNumber(pra) ? (cm.convertMarks(std, pra, subject,
											subjectMaxMarks.get(subject).get("sem1_pract"), "PRACT", subjectMaxMarks,
											"sem1")) + "" : pra,
									subjectMaxMarks.get(subject).get("sem1_pract"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FPRE", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FPRE"),
									cm.validateNumber(pre) ? (cm.convertMarks(std, pre, subject,
											subjectMaxMarks.get(subject).get("sem1_pres"), "PRES", subjectMaxMarks,
											"sem1")) + "" : pre,
									subjectMaxMarks.get(subject).get("sem1_pres"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FMCA", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FMCA"),
									cm.validateNumber(mca) ? (cm.convertMarks(std, mca, subject,
											subjectMaxMarks.get(subject).get("sem1_mcap"), "MCAP", subjectMaxMarks,
											"sem1")) + "" : mca,
									subjectMaxMarks.get(subject).get("sem1_mcap"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FACT", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FACT"),
									cm.validateNumber(act) ? (cm.convertMarks(std, act, subject,
											subjectMaxMarks.get(subject).get("sem1_activity"), "ACTIVITY",
											subjectMaxMarks, "sem1")) + "" : act,
									subjectMaxMarks.get(subject).get("sem1_activity"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FPRO", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FPRO"),
									cm.validateNumber(pro) ? (cm.convertMarks(std, pro, subject,
											subjectMaxMarks.get(subject).get("sem1_project"), "PROJECT",
											subjectMaxMarks, "sem1")) + "" : pro,
									subjectMaxMarks.get(subject).get("sem1_project"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FOTH", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FOTH"),
									cm.validateNumber(oth) ? (cm.convertMarks(std, oth, subject,
											subjectMaxMarks.get(subject).get("sem1_other"), "OTHER", subjectMaxMarks,
											"sem1")) + "" : oth,
									subjectMaxMarks.get(subject).get("sem1_other"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FORA1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FORA1"),
									cm.validateNumber(ora1) ? (cm.convertMarks(std, ora1, subject,
											subjectMaxMarks.get(subject).get("sem1_oral1"), "ORAL1", subjectMaxMarks,
											"sem1")) + "" : ora1,
									subjectMaxMarks.get(subject).get("sem1_oral1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FPRA1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FPRA1"),
									cm.validateNumber(pra1) ? (cm.convertMarks(std, pra1, subject,
											subjectMaxMarks.get(subject).get("sem1_pract1"), "PRACT1", subjectMaxMarks,
											"sem1")) + "" : pra1,
									subjectMaxMarks.get(subject).get("sem1_pract1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FWRI1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FWRI1"),
									cm.validateNumber(wri1) ? (cm.convertMarks(std, wri1, subject,
											subjectMaxMarks.get(subject).get("sem1_write1"), "WRITE1", subjectMaxMarks,
											"sem1")) + "" : wri1,
									subjectMaxMarks.get(subject).get("sem1_write1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FLIS", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FLIS"),
									cm.validateNumber(lis) ? (cm.convertMarks(std, lis, subject,
											subjectMaxMarks.get(subject).get("sem1_listen"), "LISTEN", subjectMaxMarks,
											"sem1")) + "" : lis,
									subjectMaxMarks.get(subject).get("sem1_listen"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FSPE", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FSPE"),
									cm.validateNumber(spe) ? (cm.convertMarks(std, spe, subject,
											subjectMaxMarks.get(subject).get("sem1_speak"), "SPEAK", subjectMaxMarks,
											"sem1")) + "" : spe,
									subjectMaxMarks.get(subject).get("sem1_speak"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FASS1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FASS1"),
									cm.validateNumber(ass1) ? (cm.convertMarks(std, ass1, subject,
											subjectMaxMarks.get(subject).get("sem1_assign1"), "ASSIGN1",
											subjectMaxMarks, "sem1")) + "" : ass1,
									subjectMaxMarks.get(subject).get("sem1_assign1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_FITOT", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_FITOT"),
									cm.validateNumber(itot) ? (cm.convertMarks(std, itot, subject,
											subjectMaxMarks.get(subject).get("sem1_intot"), "INTOT", subjectMaxMarks,
											"sem1")) + "" : itot,
									subjectMaxMarks.get(subject).get("sem1_intot"), leftDataMap, grNo));

							marksDetails.put(subjectTitleForMap + "_SDOB", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SDOB"),
									cm.validateNumber(dob2) ? (cm.convertMarks(std, dob2, subject,
											subjectMaxMarks.get(subject).get("sem2_dobs"), "DOBS", subjectMaxMarks,
											"sem2")) + "" : dob2,
									subjectMaxMarks.get(subject).get("sem2_dobs"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SOBT", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SOBT"),
									cm.validateNumber(obt2) ? (cm.convertMarks(std, obt2, subject,
											subjectMaxMarks.get(subject).get("sem2_obt"), "OBT", subjectMaxMarks,
											"sem2")) + "" : obt2,
									subjectMaxMarks.get(subject).get("sem2_obt"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SORA", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SORA"),
									cm.validateNumber(ora2) ? (cm.convertMarks(std, ora2, subject,
											subjectMaxMarks.get(subject).get("sem2_oral"), "ORAL", subjectMaxMarks,
											"sem2")) + "" : ora2,
									subjectMaxMarks.get(subject).get("sem2_oral"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SASS", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SASS"),
									cm.validateNumber(ass2) ? (cm.convertMarks(std, ass2, subject,
											subjectMaxMarks.get(subject).get("sem2_assign"), "ASSIGN", subjectMaxMarks,
											"sem2")) + "" : ass2,
									subjectMaxMarks.get(subject).get("sem2_assign"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SWRI", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SWRI"),
									cm.validateNumber(wri2) ? (cm.convertMarks(std, wri2, subject,
											subjectMaxMarks.get(subject).get("sem2_write"), "WRITE", subjectMaxMarks,
											"sem2")) + "" : wri2,
									subjectMaxMarks.get(subject).get("sem2_write"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SPRA", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SPRA"),
									cm.validateNumber(pra2) ? (cm.convertMarks(std, pra2, subject,
											subjectMaxMarks.get(subject).get("sem2_pract"), "PRACT", subjectMaxMarks,
											"sem2")) + "" : pra2,
									subjectMaxMarks.get(subject).get("sem2_pract"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SPRE", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SPRE"),
									cm.validateNumber(pre2) ? (cm.convertMarks(std, pre2, subject,
											subjectMaxMarks.get(subject).get("sem2_pres"), "PRES", subjectMaxMarks,
											"sem2")) + "" : pre2,
									subjectMaxMarks.get(subject).get("sem2_pres"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SMCA", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SMCA"),
									cm.validateNumber(mca2) ? (cm.convertMarks(std, mca2, subject,
											subjectMaxMarks.get(subject).get("sem2_mcap"), "MCAP", subjectMaxMarks,
											"sem2")) + "" : mca2,
									subjectMaxMarks.get(subject).get("sem2_mcap"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SACT", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SACT"),
									cm.validateNumber(act2) ? (cm.convertMarks(std, act2, subject,
											subjectMaxMarks.get(subject).get("sem2_activity"), "ACTIVITY",
											subjectMaxMarks, "sem2")) + "" : act2,
									subjectMaxMarks.get(subject).get("sem2_activity"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SPRO", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SPRO"),
									cm.validateNumber(pro2) ? (cm.convertMarks(std, pro2, subject,
											subjectMaxMarks.get(subject).get("sem2_project"), "PROJECT",
											subjectMaxMarks, "sem2")) + "" : pro2,
									subjectMaxMarks.get(subject).get("sem2_project"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SOTH", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SOTH"),
									cm.validateNumber(oth2) ? (cm.convertMarks(std, oth2, subject,
											subjectMaxMarks.get(subject).get("sem2_other"), "OTHER", subjectMaxMarks,
											"sem2")) + "" : oth2,
									subjectMaxMarks.get(subject).get("sem2_other"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SORA1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SORA1"),
									cm.validateNumber(ora12) ? (cm.convertMarks(std, ora12, subject,
											subjectMaxMarks.get(subject).get("sem2_oral1"), "ORAL1", subjectMaxMarks,
											"sem2")) + "" : ora12,
									subjectMaxMarks.get(subject).get("sem2_oral1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SPRA1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SPRA1"),
									cm.validateNumber(pra12) ? (cm.convertMarks(std, pra12, subject,
											subjectMaxMarks.get(subject).get("sem2_pract1"), "PRACT1", subjectMaxMarks,
											"sem2")) + "" : pra12,
									subjectMaxMarks.get(subject).get("sem2_pract1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SWRI1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SWRI1"),
									cm.validateNumber(wri12) ? (cm.convertMarks(std, wri12, subject,
											subjectMaxMarks.get(subject).get("sem2_write1"), "WRITE1", subjectMaxMarks,
											"sem2")) + "" : wri12,
									subjectMaxMarks.get(subject).get("sem2_write1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SLIS", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SLIS"),
									cm.validateNumber(lis2) ? (cm.convertMarks(std, lis2, subject,
											subjectMaxMarks.get(subject).get("sem2_listen"), "LISTEN", subjectMaxMarks,
											"sem2")) + "" : lis2,
									subjectMaxMarks.get(subject).get("sem2_listen"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SSPE", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SSPE"),
									cm.validateNumber(spe2) ? (cm.convertMarks(std, spe2, subject,
											subjectMaxMarks.get(subject).get("sem2_speak"), "SPEAK", subjectMaxMarks,
											"sem2")) + "" : spe2,
									subjectMaxMarks.get(subject).get("sem2_speak"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SASS1", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SASS1"),
									cm.validateNumber(ass12) ? (cm.convertMarks(std, ass12, subject,
											subjectMaxMarks.get(subject).get("sem2_assign1"), "ASSIGN1",
											subjectMaxMarks, "sem2")) + "" : ass12,
									subjectMaxMarks.get(subject).get("sem2_assign1"), leftDataMap, grNo));
							marksDetails.put(subjectTitleForMap + "_SITOT", cm.marksCalculation(
									marksDetails.get(subjectTitleForMap + "_SITOT"),
									cm.validateNumber(itot2) ? (cm.convertMarks(std, itot2, subject,
											subjectMaxMarks.get(subject).get("sem2_intot"), "INTOT", subjectMaxMarks,
											"sem2")) + "" : itot2,
									subjectMaxMarks.get(subject).get("sem2_intot"), leftDataMap, grNo));

							marksDetails.put(subjectTitleForMap + "_SEM1", subjectTitleSem1);
							marksDetails.put(subjectTitleForMap + "_SEM2", subjectTitleSem2);
							marksDetails.put(subjectTitleForMap + "_FINAL", subjectTitleFinal);
						}
					}
				}

				findFlag = true;
			}

			logger.info("findFlag=" + findFlag);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "MARKS_ENTRY", "OBTAINED MARKS", findQuery, generalDataExcelList, true,
						secName + " " + subject + " MARKS OBTAINED  STD:" + std + "  DIV:" + div + " " + academicYear,
						1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return marksDataMap;
	}

	/////////// Obtained Marks for all subjects cc book///////////
	/////////// report////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getMarksAllSubject(SessionData sessionData, String std,
			String div, String academicYear, String section, String exam,
			LinkedHashMap<String, LinkedHashMap<String, String>> subjectMap,
			LinkedHashMap<String, LinkedHashMap<String, String>> maxSubMarks) throws Exception {

		logger.info("=========getMarksheetSubjectwise Query============");
		String findQuery = "";
		String generalTypeDB = "";
		int srNo = 0;
		String name = "", lastName = "", firstName = "", fatherName = "";
		String rollNo = "";
		String grNo = "", lcDate = "";
		String dob = "";
		String obt = "";
		String ora = "";
		String ass = "";
		String wri = "";
		String pra = "";
		String pre = "";
		String mca = "";
		String act = "";
		String pro = "";
		String oth = "";
		String ora1 = "";
		String pra1 = "";
		String wri1 = "";
		String rem = "";
		String examInitial = "", subject = "", sem = "", subjectTitle = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> subjectMaxMarks = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> leftDataMap = new LinkedHashMap<String, String>();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "F";
			sem = "sem1";
		} else {
			examInitial = "S";
			sem = "sem2";
		}

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);
			leftDataMap = getLeftStudentMap(sessionData, academicYear, std, div);

			subjectMaxMarks = findMaxMarks(sessionData, "", "", std, "", academicYear);

			findQuery = "select * from " + sessionData.getDBName() + ".marks_entry where ACADEMIC_YEAR = '"
					+ academicYear + "' " + "and section_nm='" + sessionData.getSectionName() + "' and STD_1='" + std
					+ "' and DIV_1='" + div + "' " + "ORDER BY ROLL_NO * 1 ";

			logger.info("find marks query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> marksDetails = new LinkedHashMap<String, String>();
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}

				grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				lcDate = studentLCMap.get(grNo);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicYear)) {
					continue;
				}
				firstName = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME").trim());
				lastName = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				name = lastName + " " + firstName + " " + fatherName;

				Set set = subjectMap.entrySet();
				Iterator n = set.iterator();
				while (n.hasNext()) {
					Map.Entry me = (Map.Entry) n.next();
					LinkedHashMap subjectmap = new LinkedHashMap();
					subjectmap = (LinkedHashMap) me.getValue();
					subject = subjectmap.get("subject_name").toString();
					subjectTitle = subjectmap.get("subject_title").toString();

					dob = resultSet.getString(subject + "_" + examInitial + "DOB") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "DOB").trim()));
					obt = resultSet.getString(subject + "_" + examInitial + "OBT") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "OBT").trim()));
					ora = resultSet.getString(subject + "_" + examInitial + "ORA") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "ORA").trim()));
					ass = resultSet.getString(subject + "_" + examInitial + "ASS") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "ASS").trim()));
					wri = resultSet.getString(subject + "_" + examInitial + "WRI") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "WRI").trim()));
					pra = resultSet.getString(subject + "_" + examInitial + "PRA") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "PRA").trim()));
					pre = resultSet.getString(subject + "_" + examInitial + "PRE") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "PRE").trim()));
					mca = resultSet.getString(subject + "_" + examInitial + "MCA") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "MCA").trim()));
					act = resultSet.getString(subject + "_" + examInitial + "ACT") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "ACT").trim()));
					pro = resultSet.getString(subject + "_" + examInitial + "PRO") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "PRO").trim()));
					oth = resultSet.getString(subject + "_" + examInitial + "OTH") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "OTH").trim()));
					ora1 = resultSet.getString(subject + "_" + examInitial + "ORA1") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "ORA1").trim()));
					pra1 = resultSet.getString(subject + "_" + examInitial + "PRA1") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "PRA1").trim()));
					wri1 = resultSet.getString(subject + "_" + examInitial + "WRI1") == null ? "-"
							: cm.roundUpString((resultSet.getString(subject + "_" + examInitial + "WRI1").trim()));
					try {
						rem = resultSet.getString(subject + "_" + examInitial + "REM") == null ? "-"
								: (resultSet.getString(subject + "_" + examInitial + "REM").trim());
					} catch (Exception e) {
						rem = "-";
//						logger.error("Column "+subject + "_" + examInitial + "REM"+" not found");
					}

					if (rollNo.equalsIgnoreCase(""))
						rollNo = "-";
					if (grNo.equalsIgnoreCase(""))
						grNo = "-";
					if (name.equalsIgnoreCase(""))
						name = "-";
					if (dob.equalsIgnoreCase(""))
						dob = "-";
					if (obt.equalsIgnoreCase(""))
						obt = "-";
					if (ora.equalsIgnoreCase(""))
						ora = "-";
					if (ass.equalsIgnoreCase(""))
						ass = "-";
					if (wri.equalsIgnoreCase(""))
						wri = "-";
					if (pra.equalsIgnoreCase(""))
						pra = "-";
					if (pre.equalsIgnoreCase(""))
						pre = "-";
					if (mca.equalsIgnoreCase(""))
						mca = "-";
					if (act.equalsIgnoreCase(""))
						act = "-";
					if (pro.equalsIgnoreCase(""))
						pro = "-";
					if (oth.equalsIgnoreCase(""))
						oth = "-";
					if (ora1.equalsIgnoreCase(""))
						ora1 = "-";
					if (pra1.equalsIgnoreCase(""))
						pra1 = "-";
					if (wri1.equalsIgnoreCase(""))
						wri1 = "-";

					if (marksDataMap.get(grNo) == null) {
						marksDetails.put("rollNo", rollNo);
						marksDetails.put("grNo", grNo);
						marksDetails.put("name", name);
						marksDetails.put(subjectTitle + "_" + examInitial + "DOB", cm.marksCalculation("0", dob,
								subjectMaxMarks.get(subject).get(sem + "_dobs"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "OBT", cm.marksCalculation("0", obt,
								subjectMaxMarks.get(subject).get(sem + "_obt"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ORA", cm.marksCalculation("0", ora,
								subjectMaxMarks.get(subject).get(sem + "_oral"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ASS", cm.marksCalculation("0", ass,
								subjectMaxMarks.get(subject).get(sem + "_assign"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "WRI", cm.marksCalculation("0", wri,
								subjectMaxMarks.get(subject).get(sem + "_write"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRA", cm.marksCalculation("0", pra,
								subjectMaxMarks.get(subject).get(sem + "_pract"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRE", cm.marksCalculation("0", pre,
								subjectMaxMarks.get(subject).get(sem + "_pres"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "MCA", cm.marksCalculation("0", mca,
								subjectMaxMarks.get(subject).get(sem + "_mcap"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ACT", cm.marksCalculation("0", act,
								subjectMaxMarks.get(subject).get(sem + "_activity"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRO", cm.marksCalculation("0", pro,
								subjectMaxMarks.get(subject).get(sem + "_project"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "OTH", cm.marksCalculation("0", oth,
								subjectMaxMarks.get(subject).get(sem + "_other"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ORA1", cm.marksCalculation("0", ora1,
								subjectMaxMarks.get(subject).get(sem + "_oral1"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRA1", cm.marksCalculation("0", pra1,
								subjectMaxMarks.get(subject).get(sem + "_pract1"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "WRI1", cm.marksCalculation("0", wri1,
								subjectMaxMarks.get(subject).get(sem + "_write1"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "REM", rem);
						marksDataMap.put(grNo, marksDetails);
					} else {
						marksDetails = marksDataMap.get(grNo);
						marksDetails.put(subjectTitle + "_" + examInitial + "DOB",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "DOB"), dob,
										subjectMaxMarks.get(subject).get(sem + "_dobs"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "OBT",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "OBT"), obt,
										subjectMaxMarks.get(subject).get(sem + "_obt"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ORA",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "ORA"), ora,
										subjectMaxMarks.get(subject).get(sem + "_oral"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ASS",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "ASS"), ass,
										subjectMaxMarks.get(subject).get(sem + "_assign"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "WRI",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "WRI"), wri,
										subjectMaxMarks.get(subject).get(sem + "_write"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRA",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "PRA"), pra,
										subjectMaxMarks.get(subject).get(sem + "_pract"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRE",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "PRE"), pre,
										subjectMaxMarks.get(subject).get(sem + "_pres"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "MCA",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "MCA"), mca,
										subjectMaxMarks.get(subject).get(sem + "_mcap"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ACT",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "ACT"), act,
										subjectMaxMarks.get(subject).get(sem + "_activity"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRO",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "PRO"), pro,
										subjectMaxMarks.get(subject).get(sem + "_project"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "OTH",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "OTH"), oth,
										subjectMaxMarks.get(subject).get(sem + "_other"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "ORA1",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "ORA1"), ora1,
										subjectMaxMarks.get(subject).get(sem + "_oral1"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "PRA1",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "PRA1"), pra1,
										subjectMaxMarks.get(subject).get(sem + "_pract1"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "WRI1",
								cm.marksCalculation(marksDetails.get(subjectTitle + "_" + examInitial + "WRI1"), wri1,
										subjectMaxMarks.get(subject).get(sem + "_write1"), leftDataMap, grNo));
						marksDetails.put(subjectTitle + "_" + examInitial + "REM", rem);
					}
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return marksDataMap;
	}

	/////////// Obtained Marks for Gradewise marksheet
	/////////// report////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getMarksheetGradewise(SessionData sessionData,
			String std, String div, String academicYear, String section, String exam,
			LinkedHashMap<String, LinkedHashMap<String, String>> subjectMap,
			LinkedHashMap<String, LinkedHashMap<String, String>> maxSubMarks,
			LinkedHashMap<String, LinkedHashMap<String, String>> studentOptSubAllotMap,
			LinkedHashMap<String, LinkedHashMap<String, String>> grStudentMap) throws Exception {

		logger.info("=========getMarksheetGradewise Query============");
		String findQuery = "";
		String generalTypeDB = "";
		int srNo = 0;
		String firstName = "";
		String lastName = "";
		String fatherName = "";
		String name = "";
		String rollNo = "";
		String grNo = "", lcDate = "";
		String subTot = "";
		Double subMax = 0.0;
		String obt = "";
		String ora = "";
		String ass = "";
		String wri = "";
		String pra = "";
		String pre = "";
		String mca = "";
		String act = "";
		String pro = "";
		String oth = "";
		String ora1 = "";
		String pra1 = "";
		String wri1 = "";
		String examInitial = "", subject = "", sem = "", subjectTitle = "", column = "", optional = "",
				optionalSubject = "";
		boolean findFlag = false;
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		List generalDataExcelList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "F";
			sem = "sem1";
		} else {
			examInitial = "S";
			sem = "sem2";
		}

		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);

			if (!std.equalsIgnoreCase("")) {
				addToQuery = " AND STD_1='" + std + "' ";
			}
			if (!div.equalsIgnoreCase("")) {
				addToQuery = addToQuery + " AND DIV_1='" + div + "' ";
			}
			findQuery = "select * from " + sessionData.getDBName() + ".marks_entry where ACADEMIC_YEAR = '"
					+ academicYear + "' " + "and section_nm='" + sessionData.getSectionName() + "' " + addToQuery
					+ " ORDER BY ROLL_NO * 1 ";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			outerloop: while (resultSet.next()) {
				LinkedHashMap<String, String> marksDetails = new LinkedHashMap<String, String>();
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}

				grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				if (grStudentMap.get(grNo) == null) {
					continue;
				}
				lcDate = studentLCMap.get(grNo);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicYear)) {
					continue;
				}
				if (studentOptSubAllotMap.get(grNo) != null) {
					optionalSubject = studentOptSubAllotMap.get(grNo).get("optionalSubject");
				}
				firstName = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME").trim());
				lastName = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? ""
						: (resultSet.getString("FATHER_NAME").trim());
				name = lastName + " " + firstName + " " + fatherName;

				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNo.equalsIgnoreCase(""))
					grNo = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";
				if (subTot.equalsIgnoreCase(""))
					subTot = "-";

				if (marksDataMap.get(grNo) == null) {
					marksDetails.put("rollNo", rollNo);
					marksDetails.put("grNo", grNo);
					marksDetails.put("name", name);
					marksDetails.put("std", resultSet.getString("STD_1"));
					marksDetails.put("div", resultSet.getString("DIV_1"));
					marksDataMap.put(grNo, marksDetails);
				} else {
					marksDetails = marksDataMap.get(grNo);
				}

				Set set = subjectMap.entrySet();
				Iterator n = set.iterator();
				while (n.hasNext()) {
					Map.Entry me = (Map.Entry) n.next();
					LinkedHashMap subjectmap = new LinkedHashMap();
					subjectmap = (LinkedHashMap) me.getValue();
					subject = subjectmap.get("subject_name").toString();
					subjectTitle = subjectmap.get("subject_title").toString();
					optional = subjectmap.get("optional").toString();

					column = subject + "_" + examInitial + "TOT";
					subTot = resultSet.getString(column) == null ? "-" : (resultSet.getString(column).trim());
					if ((subTot.equalsIgnoreCase("") || subTot.equalsIgnoreCase("0")
							|| (subTot.equalsIgnoreCase("-")) && optional.equalsIgnoreCase("YES"))) {
						continue;
					} else if (!subTot.contains("+T") && !optionalSubject.equalsIgnoreCase("")) {
						marksDataMap.clear();
						JOptionPane.showMessageDialog(null,
								"Please click edit & save for subject : " + subject + " in marks entry module \n "
										+ "(Select type which don't have max marks zero & also validate marks.)");
						break outerloop;
					}

					if ((subTot.equalsIgnoreCase("") || subTot.equalsIgnoreCase("0")
							|| (subTot.equalsIgnoreCase("-")))) {
						continue;
					}
					subMax = Double.parseDouble(subTot.substring(subTot.indexOf("+T") + 2));
					subTot = subTot.substring(0, subTot.indexOf("+"));

					if (marksDetails.get(subjectTitle + "_MARKS") == null) {
						marksDetails.put(subjectTitle + "_MARKS", subTot);
						marksDetails.put(subjectTitle + "_TOTAL", subMax + "");
					} else {
						marksDetails.put(subjectTitle + "_MARKS", "" + (Double.parseDouble(subTot)
								+ Double.parseDouble(marksDetails.get(subjectTitle + "_MARKS"))));
						marksDetails.put(subjectTitle + "_TOTAL",
								"" + (subMax + Double.parseDouble(marksDetails.get(subjectTitle + "_TOTAL"))));
					}
					optionalSubject = "";
				}
				marksDataMap.put(grNo, marksDetails);
			}

			findFlag = true;
			logger.info("findFlag=" + findFlag);

		} catch (Exception e) {
			cm.logException(e);
		}
		return marksDataMap;
	}

	/////////// Obtained Marks Excel////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> obtainedMarksExcel(SessionData sessionData, String std,
			String div, String academicYear, String section, String print, String exam, String subject, String type)
			throws Exception {

		logger.info("=========obtainedMarksExcel Query============");
		String findQuery = "";
		String generalTypeDB = type;
		int srNo = 0, academicStart = 0;
		String name = "";
		String rollNo = "";
		String grNo = "";
		String dob = "";
		String obt = "";
		String ora = "";
		String ass = "";
		String wri = "";
		String pra = "";
		String pre = "";
		String mca = "";
		String act = "";
		String pro = "";
		String oth = "";
		String ora1 = "";
		String pra1 = "";
		String wri1 = "";
		String lis = "";
		String spe = "";
		String ass1 = "";
		String itot = "";
		String examInitial = "", sem = "";
		boolean findFlag = false;
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> maxSubMarks = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		List generalDataExcelList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");

		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "F";
			sem = "sem1";
		} else {
			examInitial = "S";
			sem = "sem2";
		}

		if (!type.equalsIgnoreCase("All")) {
			if (type.equalsIgnoreCase("FUT")) {
				generalTypeDB = "obt";
			} else if (type.equalsIgnoreCase("SUM_WRITE")) {
				generalTypeDB = "write1";
			} else if (type.equalsIgnoreCase("SUM_ORAL")) {
				generalTypeDB = "oral1";
			} else if (type.equalsIgnoreCase("SUM_PRACT")) {
				generalTypeDB = "pract1";
			}  else if (type.equalsIgnoreCase("ACT")) {
				generalTypeDB = "activity";
			}
		}

		if (!academicYear.equalsIgnoreCase("")) {
			academicStart = Integer.parseInt(academicYear.substring(0, 4));
		}

		try {
			maxSubMarks = findMaxMarks(sessionData, exam, type, std, subject, academicYear);

			findQuery = "select ROLL_NO,GR_NO,concat(MARKS_ENTRY.LAST_NAME,' ',MARKS_ENTRY.FIRST_NAME,' ',MARKS_ENTRY.FATHER_NAME) AS NAME,"
					+ subject + "_" + examInitial + "OBT," + subject + "_" + examInitial + "DOB," + subject + "_"
					+ examInitial + "ORA," + subject + "_" + examInitial + "ASS," + subject + "_" + examInitial + "WRI,"
					+ subject + "_" + examInitial + "PRA," + subject + "_" + examInitial + "PRE," + subject + "_"
					+ examInitial + "MCA," + subject + "_" + examInitial + "ACT," + subject + "_" + examInitial + "PRO,"
					+ subject + "_" + examInitial + "OTH," + subject + "_" + examInitial + "ORA1," + subject + "_"
					+ examInitial + "PRA1," + subject + "_" + examInitial + "WRI1," + subject + "_" + examInitial
					+ "LIS," + subject + "_" + examInitial + "SPE," + subject + "_" + examInitial + "ASS1," + subject
					+ "_" + examInitial + "ITOT " + "from marks_entry where ACADEMIC_YEAR = '" + academicYear + "' "
					+ "and section_nm='" + sessionData.getSectionName() + "' and STD_1='" + std + "' and DIV_1='" + div
					+ "' " + "ORDER BY ROLL_NO * 1 ";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			if (!std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI")
					&& !std.equalsIgnoreCase("XII")) {
				if (type.equalsIgnoreCase("All")) {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_DOB|" + subject
							+ "_ORAL|" + subject + "_PRACT|" + subject + "_ACT|" + subject + "_PROJECT|" + subject
							+ "_TEST|" + subject + "_ASSIGN|" + subject + "_OTHER|" + subject + "_SUM_ORAL|" + subject
							+ "_SUM_PRACT|" + subject + "_SUM_WRITE");

					generalDataExcelList.add(" | | | | |Max Marks|" + maxSubMarks.get(subject).get(sem + "_dobs") + "|"
							+ maxSubMarks.get(subject).get(sem + "_oral") + "|"
							+ maxSubMarks.get(subject).get(sem + "_pract") + "|"
							+ maxSubMarks.get(subject).get(sem + "_activity") + "|"
							+ maxSubMarks.get(subject).get(sem + "_project") + "|"
							+ maxSubMarks.get(subject).get(sem + "_obt") + "|"
							+ maxSubMarks.get(subject).get(sem + "_assign") + "|"
							+ maxSubMarks.get(subject).get(sem + "_other") + "|"
							+ maxSubMarks.get(subject).get(sem + "_oral1") + "|"
							+ maxSubMarks.get(subject).get(sem + "_pract1") + "|"
							+ maxSubMarks.get(subject).get(sem + "_write1"));
				} else {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + type.toUpperCase());
					generalDataExcelList.add(" | | | | |Max Marks|"
							+ maxSubMarks.get(subject).get(sem + "_" + generalTypeDB.toLowerCase()));
				}
			} else if (cm.is9thEvaluation(std, academicYear)) {
				if (type.equalsIgnoreCase("All")) {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_FUT|" + subject
							+ "_PRACT|" + subject + "_LISTEN|" + subject + "_SPEAK|" + subject + "_ASSIGN|" + subject
							+ "_PROJECT|" + subject + "_WRITE");

					generalDataExcelList.add(" | | | | |Max Marks|" + maxSubMarks.get(subject).get(sem + "_obt") + "|"
							+ maxSubMarks.get(subject).get(sem + "_pract") + "|"
							+ maxSubMarks.get(subject).get(sem + "_listen") + "|"
							+ maxSubMarks.get(subject).get(sem + "_speak") + "|"
							+ maxSubMarks.get(subject).get(sem + "_assign") + "|"
							+ maxSubMarks.get(subject).get(sem + "_project") + "|"
							+ maxSubMarks.get(subject).get(sem + "_write"));
				} else {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + type.toUpperCase());
					generalDataExcelList.add(" | | | | |Max Marks|"
							+ maxSubMarks.get(subject).get(sem + "_" + generalTypeDB.toLowerCase()));
				}
			} else if (std.equalsIgnoreCase("IX") || std.equalsIgnoreCase("X")) {
				if (type.equalsIgnoreCase("All")) {
					generalDataExcelList
							.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_FUT|" + subject + "_PRES|" + subject
									+ "_MCAP|" + subject + "_WRITE|" + subject + "_PRACT|" + subject + "_ACT");

					generalDataExcelList.add(" | | | | |Max Marks|" + maxSubMarks.get(subject).get(sem + "_obt") + "|"
							+ maxSubMarks.get(subject).get(sem + "_pres") + "|"
							+ maxSubMarks.get(subject).get(sem + "_mcap") + "|"
							+ maxSubMarks.get(subject).get(sem + "_write") + "|"
							+ maxSubMarks.get(subject).get(sem + "_pract") + "|"
							+ maxSubMarks.get(subject).get(sem + "_activity"));
				} else {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + type.toUpperCase());
					generalDataExcelList.add(" | | | | |Max Marks|"
							+ maxSubMarks.get(subject).get(sem + "_" + generalTypeDB.toLowerCase()));
				}
			} else {
				if (type.equalsIgnoreCase("All")) {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + examInitial + "UT|"
							+ subject + "_ORAL|" + subject + "_ASSIGN|" + subject + "_WRITE|" + subject + "_PRACT");

					generalDataExcelList.add(" | | | | |Max Marks|" + maxSubMarks.get(subject).get(sem + "_obt") + "|"
							+ maxSubMarks.get(subject).get(sem + "_oral") + "|"
							+ maxSubMarks.get(subject).get(sem + "_assign") + "|"
							+ maxSubMarks.get(subject).get(sem + "_write") + "|"
							+ maxSubMarks.get(subject).get(sem + "_pract"));
				} else {
					generalDataExcelList.add("Roll No.|GR No.|Name|Std|Div|Exam|" + subject + "_" + type.toUpperCase());

					generalDataExcelList.add(" | | | | |Max Marks|"
							+ maxSubMarks.get(subject).get(sem + "_" + generalTypeDB.toLowerCase()));
				}
			}

			while (resultSet.next()) {
				LinkedHashMap<String, String> marksDetails = new LinkedHashMap<String, String>();
				rollNo = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}

				grNo = resultSet.getString("GR_NO") == null ? "-" : (resultSet.getString("GR_NO").trim());
				name = resultSet.getString("NAME") == null ? "-" : (resultSet.getString("NAME").trim());
				marksDetails.put("rollNo", rollNo);
				marksDetails.put("grNo", grNo);
				marksDetails.put("name", name);
				dob = resultSet.getString(subject + "_" + examInitial + "DOB") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "DOB").trim());
				obt = resultSet.getString(subject + "_" + examInitial + "OBT") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "OBT").trim());
				ora = resultSet.getString(subject + "_" + examInitial + "ORA") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "ORA").trim());
				ass = resultSet.getString(subject + "_" + examInitial + "ASS") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "ASS").trim());
				wri = resultSet.getString(subject + "_" + examInitial + "WRI") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "WRI").trim());
				pra = resultSet.getString(subject + "_" + examInitial + "PRA") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "PRA").trim());
				pre = resultSet.getString(subject + "_" + examInitial + "PRE") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "PRE").trim());
				mca = resultSet.getString(subject + "_" + examInitial + "MCA") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "MCA").trim());
				act = resultSet.getString(subject + "_" + examInitial + "ACT") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "ACT").trim());
				pro = resultSet.getString(subject + "_" + examInitial + "PRO") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "PRO").trim());
				oth = resultSet.getString(subject + "_" + examInitial + "OTH") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "OTH").trim());
				ora1 = resultSet.getString(subject + "_" + examInitial + "ORA1") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "ORA1").trim());
				pra1 = resultSet.getString(subject + "_" + examInitial + "PRA1") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "PRA1").trim());
				wri1 = resultSet.getString(subject + "_" + examInitial + "WRI1") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "WRI1").trim());
				lis = resultSet.getString(subject + "_" + examInitial + "LIS") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "LIS").trim());
				spe = resultSet.getString(subject + "_" + examInitial + "SPE") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "SPE").trim());
				ass1 = resultSet.getString(subject + "_" + examInitial + "ASS1") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "ASS1").trim());
				itot = resultSet.getString(subject + "_" + examInitial + "ITOT") == null ? "-"
						: (resultSet.getString(subject + "_" + examInitial + "ITOT").trim());

				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNo.equalsIgnoreCase(""))
					grNo = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";
				if (dob.equalsIgnoreCase(""))
					dob = "-";
				if (obt.equalsIgnoreCase(""))
					obt = "-";
				if (ora.equalsIgnoreCase(""))
					ora = "-";
				if (ass.equalsIgnoreCase(""))
					ass = "-";
				if (wri.equalsIgnoreCase(""))
					wri = "-";
				if (pra.equalsIgnoreCase(""))
					pra = "-";
				if (pre.equalsIgnoreCase(""))
					pre = "-";
				if (mca.equalsIgnoreCase(""))
					mca = "-";
				if (act.equalsIgnoreCase(""))
					act = "-";
				if (pro.equalsIgnoreCase(""))
					pro = "-";
				if (oth.equalsIgnoreCase(""))
					oth = "-";
				if (ora1.equalsIgnoreCase(""))
					ora1 = "-";
				if (pra1.equalsIgnoreCase(""))
					pra1 = "-";
				if (wri1.equalsIgnoreCase(""))
					wri1 = "-";
				if (lis.equalsIgnoreCase(""))
					lis = "-";
				if (spe.equalsIgnoreCase(""))
					spe = "-";
				if (ass1.equalsIgnoreCase(""))
					ass1 = "-";
				if (itot.equalsIgnoreCase(""))
					itot = "-";

				if (!std.equalsIgnoreCase("IX") && !std.equalsIgnoreCase("X") && !std.equalsIgnoreCase("XI")
						&& !std.equalsIgnoreCase("XII")) {
					if (type.equalsIgnoreCase("All")) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + dob + "|" + ora + "|" + pra + "|" + act + "|" + pro + "|" + obt + "|" + ass
								+ "|" + oth + "|" + ora1 + "|" + pra1 + "|" + wri1);
					} else {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + cm.typeMarks(generalTypeDB, dob, obt, ora, ass, wri, pra, pre, mca, act, pro,
										oth, ora1, pra1, wri1, lis, spe, ass1));
					}
				} else if (cm.is9thEvaluation(std, academicYear)) {
					if (type.equalsIgnoreCase("All")) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + obt + "|" + pra + "|" + lis + "|" + spe + "|" + ass + "|" + pro + "|" + wri);
					} else {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + cm.typeMarks(generalTypeDB, dob, obt, ora, ass, wri, pra, pre, mca, act, pro,
										oth, ora1, pra1, wri1, lis, spe, ass1));
					}
				} else if (std.equalsIgnoreCase("IX") || std.equalsIgnoreCase("X")) {
					if (type.equalsIgnoreCase("All")) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + obt + "|" + pre + "|" + mca + "|" + wri + "|" + pra + "|" + act);
					} else {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + cm.typeMarks(generalTypeDB, dob, obt, ora, ass, wri, pra, pre, mca, act, pro,
										oth, ora1, pra1, wri1, lis, spe, ass1));
					}
				} else {
					if (type.equalsIgnoreCase("All")) {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + obt + "|" + ora + "|" + ass + "|" + wri + "|" + pra);
					} else {
						generalDataExcelList.add(rollNo + "|" + grNo + "|" + name + "|" + std + "|" + div + "|" + exam
								+ "|" + cm.typeMarks(generalTypeDB, dob, obt, ora, ass, wri, pra, pre, mca, act, pro,
										oth, ora1, pra1, wri1, lis, spe, ass1));
					}
				}

				marksDetails.put(subject + "_" + examInitial + "DOB", dob);
				marksDetails.put(subject + "_" + examInitial + "OBT", obt);
				marksDetails.put(subject + "_" + examInitial + "ORA", ora);
				marksDetails.put(subject + "_" + examInitial + "ASS", ass);
				marksDetails.put(subject + "_" + examInitial + "WRI", wri);
				marksDetails.put(subject + "_" + examInitial + "PRA", pra);
				marksDetails.put(subject + "_" + examInitial + "PRE", pre);
				marksDetails.put(subject + "_" + examInitial + "MCA", mca);
				marksDetails.put(subject + "_" + examInitial + "ACT", act);
				marksDetails.put(subject + "_" + examInitial + "PRO", pro);
				marksDetails.put(subject + "_" + examInitial + "OTH", oth);
				marksDetails.put(subject + "_" + examInitial + "ORA1", ora1);
				marksDetails.put(subject + "_" + examInitial + "PRA1", pra1);
				marksDetails.put(subject + "_" + examInitial + "WRI1", wri1);
				marksDetails.put(subject + "_" + examInitial + "LIS", lis);
				marksDetails.put(subject + "_" + examInitial + "SPE", spe);
				marksDetails.put(subject + "_" + examInitial + "ASS1", ass1);
				marksDetails.put(subject + "_" + examInitial + "INTOT", itot);

				marksDataMap.put(grNo, marksDetails);

				findFlag = true;
			}

			logger.info("findFlag=" + findFlag);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "MARKS_ENTRY",
						"OBTAINED MARKS_Std_" + std + "_Div_" + div + "_" + academicYear + "_" + subject + "_" + type
								+ "_",
						findQuery, generalDataExcelList, true,
						secName + " " + subject + " MARKS OBTAINED  STD:" + std + "  DIV:" + div + " " + academicYear,
						1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return marksDataMap;
	}

	/////////// Obtained Marks for All Excel////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> obtainedMarksForAllExcel(SessionData sessionData,
			String std, String div, String academicYear, String section, String print, String exam, String subject,
			String type, String grNo) throws Exception {

		logger.info("=========obtainedMarksForAllExcel Query============");
		String findQuery = "";
		String generalTypeDB = "";
		String actualType = type;
		int srNo = 0, stdInt = 0;
		String lastName = "";
		String firstName = "";
		String fatherName = "";
		String name = "";
		String rollNo = "", stdDb = "", divDb = "";
		String grNoDb = "";
		String dob = "";
		String obt = "";
		String ora = "";
		String ass = "";
		String wri = "";
		String pra = "";
		String pre = "";
		String mca = "";
		String act = "";
		String pro = "";
		String oth = "";
		String ora1 = "";
		String pra1 = "";
		String wri1 = "";
		String lis = "";
		String spe = "";
		String ass1 = "";
		String itot = "";

		String examInitial = "";
		boolean findFlag = false;
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> maxSubMarks = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		List generalDataExcelList = new ArrayList();
		List<String> findSubList = new ArrayList();
		List<String> typeArrayList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String headers = "Roll No.|GR No.|Name|Std|Div|Exam";
		String headersMax = " | | | | |Max Marks";
		String subjectMarksListDB = "";
		String subjectMarksDB = "";
		ResultSet resultSetData = null;
		String subjectName = "";
		String condition = "", sem = "", typeMax = "", typeList = "";
		String[] subjectArr = null, typeData = null;

		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "F";
			sem = "sem1";
		} else {
			examInitial = "S";
			sem = "sem2";
		}

		if (!grNo.equalsIgnoreCase("")) {
			condition = " AND GR_NO='" + grNo + "'";
		} else {
			condition = " AND STD_1='" + std + "' AND DIV_1='" + div + "'";
		}

		try {
			maxSubMarks = findMaxMarks(sessionData, exam, type, std, subject, academicYear);
			stdInt = cm.RomanToInteger(std);
			typeMax = cm.getActualLvType(type, stdInt);
			if (typeMax.equalsIgnoreCase("All")) {
				typeList = sessionData.getConfigMap().get(cm.getExamType(std, exam, academicYear));
				typeData = typeList.split(",");
				for (int i = 0; i < typeData.length; i++) {
					typeArrayList.add(cm.getActualLvType(typeData[i], stdInt));
				}
			}

			findQuery = "select * from " + sessionData.getDBName() + ".marks_entry where ACADEMIC_YEAR = '"
					+ academicYear + "' " + "and section_nm='" + sessionData.getSectionName() + "' " + condition
					+ " ORDER BY ROLL_NO * 1 ";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSetData = statement.executeQuery(findQuery);

			if (!std.equalsIgnoreCase("") && !std.equalsIgnoreCase("Select")) {
				String maxMarks = "";
				findSubList = findSubjectList(sessionData, std, academicYear);
				subjectArr = findSubList.toArray(new String[findSubList.size()]);
				for (int z = 0; z < subjectArr.length; z++) {
					addRemarkColumn(sessionData, subjectArr[z]);
					if (!typeMax.equalsIgnoreCase("All")) {
						headers = headers + "|" + subjectArr[z] + "_" + type;
						maxMarks = maxSubMarks.get(subjectArr[z]).get(sem + "_" + typeMax.toLowerCase());
						maxMarks = maxMarks == null ? "0" : maxMarks;
						headersMax = headersMax + "|" + maxMarks;
					} else {
						for (int i = 0; i < typeData.length; i++) {
							headers = headers + "|" + subjectArr[z] + "_" + typeData[i];
							maxMarks = maxSubMarks.get(subjectArr[z])
									.get(sem + "_" + cm.getActualLvType(typeData[i], stdInt).toLowerCase());
							maxMarks = maxMarks == null ? "0" : maxMarks;
							headersMax = headersMax + "|" + maxMarks;
						}
					}
				}
			}

			generalDataExcelList.add(headers);
			generalDataExcelList.add(headersMax);
			type = cm.getActualLvType(type, stdInt);

			while (resultSetData.next()) {
				LinkedHashMap<String, String> marksDetails = new LinkedHashMap<String, String>();
				rollNo = resultSetData.getString("ROLL_NO") == null ? "1" : (resultSetData.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				stdDb = resultSetData.getString("STD_1") == null ? "-" : (resultSetData.getString("STD_1").trim());
				divDb = resultSetData.getString("DIV_1") == null ? "-" : (resultSetData.getString("DIV_1").trim());
				grNoDb = resultSetData.getString("GR_NO") == null ? "-" : (resultSetData.getString("GR_NO").trim());
				lastName = resultSetData.getString("LAST_NAME") == null ? "-"
						: (resultSetData.getString("LAST_NAME").trim());
				firstName = resultSetData.getString("FIRST_NAME") == null ? "-"
						: (resultSetData.getString("FIRST_NAME").trim());
				fatherName = resultSetData.getString("FATHER_NAME") == null ? "-"
						: (resultSetData.getString("FATHER_NAME").trim());
				name = lastName + " " + firstName + " " + fatherName;
				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNoDb.equalsIgnoreCase(""))
					grNoDb = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";
				if (dob.equalsIgnoreCase(""))
					dob = "-";

				marksDetails.put("rollNo", rollNo);
				marksDetails.put("grNo", grNoDb);
				marksDetails.put("name", name);
				marksDetails.put("std", stdDb);
				marksDetails.put("div", divDb);

				if (subjectArr == null) {
					findSubList = findSubjectList(sessionData, stdDb, academicYear);
					subjectArr = findSubList.toArray(new String[findSubList.size()]);
					for (int z = 0; z < subjectArr.length; z++) {
						if (!type.equalsIgnoreCase("All")) {
							headers = headers + "|" + subjectArr[z] + "_" + type;
						} else {
							for (int i = 0; i < typeData.length; i++) {
								headers = headers + "|" + subjectArr[z] + "_" + cm.getActualLvType(typeData[i], stdInt);
							}
						}
					}
				}

				subjectMarksListDB = rollNo + "|" + grNoDb + "|" + name + "|" + std + "|" + div + "|" + exam;
				for (int z = 0; z < subjectArr.length; z++) {
					subjectName = subjectArr[z];

					if (!type.equalsIgnoreCase("All") && !type.equalsIgnoreCase("")) {
						String typeColumn = type.substring(0, 3);
						if (type.contains("1") || type.contains("_")) {
							typeColumn = type.substring(type.lastIndexOf("_") + 1);
							typeColumn = typeColumn.substring(0, 3) + "1";
						}
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + typeColumn) == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + typeColumn).trim());
						if (subjectMarksDB.equalsIgnoreCase(""))
							subjectMarksDB = "-";
						subjectMarksListDB = subjectMarksListDB + "|" + subjectMarksDB;
						marksDetails.put(subjectArr[z] + "_" + examInitial + type.substring(0, 3),
								cm.ifHyphenThenZero(subjectMarksDB));
					} else {
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "DOB") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "DOB").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "DOBS",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "DOB",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "OBT") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "OBT").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "OBT",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "OBT",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "ORA") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "ORA").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "ORAL",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "ORA",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "ASS") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "ASS").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "ASSIGN",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "ASS",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "WRI") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "WRI").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "WRITE",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "WRI",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRA") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRA").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "PRACT",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "PRA",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRE") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRE").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "PRES",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "PRE",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "MCA") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "MCA").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "MCAP",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "MCA",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "ACT") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "ACT").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "ACTIVITY",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "ACT",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRO") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRO").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "PRACT",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "PRO",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "OTH") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "OTH").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "OTHER",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "OTH",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "ORA1") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "ORA1").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "ORAL1",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "ORA1",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRA1") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "PRA1").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "PRACT1",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "PRA1",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "WRI1") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "WRI1").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "WRITE1",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "WRI1",
								cm.ifHyphenThenZero(subjectMarksDB));

						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "LIS") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "LIS").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "LISTEN",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "LIS",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "SPE") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "SPE").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "SPEAK",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "SPE",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "ASS1") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "ASS1").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "ASSIGN1",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "ASS1",
								cm.ifHyphenThenZero(subjectMarksDB));
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + examInitial + "ITOT") == null
								? "0"
								: (resultSetData.getString(subjectArr[z] + "_" + examInitial + "ITOT").trim());
						subjectMarksListDB = cm.getConcatString(subjectMarksDB, subjectMarksListDB, "|", "ITOT",
								typeArrayList);
						marksDetails.put(subjectArr[z] + "_" + examInitial + "ITOT",
								cm.ifHyphenThenZero(subjectMarksDB));
					}
				}
				generalDataExcelList.add(subjectMarksListDB);
				subjectMarksListDB = "";
				subjectMarksDB = "";

				marksDataMap.put(grNoDb, marksDetails);

				findFlag = true;
			}
			logger.info("findFlag=" + findFlag);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "MARKS_ENTRY",
						"OBTAINED MARKS_Std_" + std + "_Div_" + div + "_" + academicYear + "_" + subject + "_" + type
								+ "_",
						findQuery, generalDataExcelList, true,
						secName + " MARKS OBTAINED for type " + actualType + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return marksDataMap;
	}

	/////////// Obtained Remarks for All
	/////////// Excel////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> obtainedRemarksForAllExcel(SessionData sessionData,
			String std, String div, String academicYear, String section, String print, String exam, String subject,
			String type, String grNo) throws Exception {

		logger.info("=========obtainedRemarksForAllExcel Query============");
		String findQuery = "";
		String generalTypeDB = "";
		String actualType = type;
		int srNo = 0;
		String lastName = "";
		String firstName = "";
		String fatherName = "";
		String name = "";
		String rollNo = "", stdDb = "", divDb = "";
		String grNoDb = "";
		String examInitial = "";
		boolean findFlag = false;
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		List generalDataExcelList = new ArrayList();
		List<String> findSubList = new ArrayList();
		String addToQuery = "";
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		String headers = "Roll No.|GR No.|Name|Std|Div|Exam";
		String subjectMarksListDB = "";
		String subjectMarksDB = "";
		ResultSet resultSetData = null;
		String subjectName = "";
		String condition = "";
		String[] subjectArr = null;

		if (exam.equalsIgnoreCase("Semester 1")) {
			examInitial = "SEM1";
		} else if (exam.equalsIgnoreCase("Semester 2")) {
			examInitial = "SEM2";
		} else if (exam.equalsIgnoreCase("FINAL")) {
			examInitial = "FINAL";
		}

		if (!grNo.equalsIgnoreCase("")) {
			condition = " AND GR_NO='" + grNo + "'";
		} else {
			condition = " AND STD_1='" + std + "' AND DIV_1='" + div + "'";
		}

		try {
			findQuery = "select * from " + sessionData.getDBName() + ".result_data where ACADEMIC_YEAR = '"
					+ academicYear + "' " + "and section_nm='" + sessionData.getSectionName() + "' " + condition
					+ " ORDER BY ROLL_NO * 1 ";

			logger.info("findgeneralWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSetData = statement.executeQuery(findQuery);

			if (!std.equalsIgnoreCase("") && !std.equalsIgnoreCase("Select")) {
				findSubList = findSubjectTitleList(sessionData, std, "", academicYear);
				findSubList.remove("SELECT SUBJECT TITLE");
				findSubList.remove("CREATE NEW TITLE");

				subjectArr = findSubList.toArray(new String[findSubList.size()]);
				for (int z = 0; z < subjectArr.length; z++) {
					if (!subject.equalsIgnoreCase("All") && !subject.equalsIgnoreCase(subjectArr[z])) {
						findSubList.remove(subjectArr[z]);
					} else if (subject.equalsIgnoreCase("All")) {
						headers = headers + "|" + subjectArr[z] + "_" + type;
					} else if (subject.equalsIgnoreCase(subjectArr[z])) {
						headers = headers + "|" + subjectArr[z] + "_" + type;
					}
					addRemarkColumn(sessionData, subjectArr[z]);
				}
			}

			generalDataExcelList.add(headers);

			while (resultSetData.next()) {
				LinkedHashMap<String, String> remarksDetails = new LinkedHashMap<String, String>();
				rollNo = resultSetData.getString("ROLL_NO") == null ? "1" : (resultSetData.getString("ROLL_NO").trim());
				if (rollNo.equalsIgnoreCase("")) {
					rollNo = "1";
				}
				stdDb = resultSetData.getString("STD_1") == null ? "-" : (resultSetData.getString("STD_1").trim());
				divDb = resultSetData.getString("DIV_1") == null ? "-" : (resultSetData.getString("DIV_1").trim());
				grNoDb = resultSetData.getString("GR_NO") == null ? "-" : (resultSetData.getString("GR_NO").trim());
				lastName = resultSetData.getString("LAST_NAME") == null ? "-"
						: (resultSetData.getString("LAST_NAME").trim());
				firstName = resultSetData.getString("FIRST_NAME") == null ? "-"
						: (resultSetData.getString("FIRST_NAME").trim());
				fatherName = resultSetData.getString("FATHER_NAME") == null ? "-"
						: (resultSetData.getString("FATHER_NAME").trim());
				name = lastName + " " + firstName + " " + fatherName;
				if (rollNo.equalsIgnoreCase(""))
					rollNo = "-";
				if (grNoDb.equalsIgnoreCase(""))
					grNoDb = "-";
				if (name.equalsIgnoreCase(""))
					name = "-";

				remarksDetails.put("rollNo", rollNo);
				remarksDetails.put("grNo", grNoDb);
				remarksDetails.put("name", name);
				remarksDetails.put("std", stdDb);
				remarksDetails.put("div", divDb);

				if (subjectArr == null) {
					subjectArr = findSubList.toArray(new String[findSubList.size()]);
					for (int z = 0; z < subjectArr.length; z++) {
						headers = headers + "|" + subjectArr[z] + "_" + type;
					}
				} else {
					subjectArr = findSubList.toArray(new String[findSubList.size()]);
				}

				subjectMarksListDB = rollNo + "|" + grNoDb + "|" + name + "|" + std + "|" + div + "|" + exam;
				for (int z = 0; z < subjectArr.length; z++) {
					subjectName = subjectArr[z];

					String typeColumn = type.substring(0, 3).toUpperCase();
					if (type.contains("1") || type.contains("_")) {
						typeColumn = type.substring(type.lastIndexOf("_") + 1);
						typeColumn = typeColumn.substring(0, 3) + "1";
					}
					if (!type.equalsIgnoreCase("All") && !type.equalsIgnoreCase("")) {
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + typeColumn + examInitial) == null
								? " "
								: (resultSetData.getString(subjectArr[z] + "_" + typeColumn + examInitial).trim());
						if (subjectMarksDB.equalsIgnoreCase(""))
							subjectMarksDB = " ";
						subjectMarksListDB = subjectMarksListDB + "|" + subjectMarksDB;
						remarksDetails.put(subjectArr[z] + "_" + examInitial + type.substring(0, 3), subjectMarksDB);
					} else {
						subjectMarksDB = resultSetData.getString(subjectArr[z] + "_" + typeColumn + examInitial) == null
								? ""
								: (resultSetData.getString(subjectArr[z] + "_" + typeColumn + examInitial).trim());
						remarksDetails.put(subjectArr[z] + "_" + typeColumn + examInitial, subjectMarksDB);
					}
				}
				generalDataExcelList.add(subjectMarksListDB);
				subjectMarksListDB = "";
				subjectMarksDB = "";

				marksDataMap.put(grNoDb, remarksDetails);

				findFlag = true;
			}
			logger.info("findFlag=" + findFlag);

			if (!print.equalsIgnoreCase("")) {
				if (div.equalsIgnoreCase("")) {
					div = "All";
				}
				if (std.equalsIgnoreCase("")) {
					std = "All";
				}
				ce.generateExcel(sessionData, "REMARKS_ENTRY", "OBTAINED REMARKS", findQuery, generalDataExcelList,
						true, secName + " REMARKS OBTAINED for type " + actualType + " " + academicYear, 1);
				return null;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return marksDataMap;
	}

	public void updateBirthInWords(SessionData sessionData) throws SQLException {

		try {
			String grDB = "";
			String birthDate = "";
			String dd = "", mm = "", yyyy = "";
			String dobInWords = "";
			String query = "SELECT * FROM " + sessionData.getDBName() + "." + "HS_GENERAL_REGISTER WHERE SECTION_NM='"
					+ sessionData.getSectionName() + "'";
			logger.info(query);
			connectDatabase(sessionData);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO");
				birthDate = resultSet.getString("DOB");

				dd = birthDate.substring(birthDate.lastIndexOf("-") + 1, birthDate.lastIndexOf("-") + 3);
				mm = birthDate.substring(birthDate.indexOf("-") + 1, birthDate.indexOf("-") + 3);
				yyyy = birthDate.substring(0, 4);
				dobInWords = cm.dateToWords(Integer.parseInt(dd), Integer.parseInt(mm), Integer.parseInt(yyyy));

				String updateBirthWords = "UPDATE HS_GENERAL_REGISTER " + "SET DOB_WORDS = '"
						+ dobInWords.trim().toUpperCase() + "' " + "WHERE GR_NO='" + grDB.trim() + "' AND SECTION_NM='"
						+ sessionData.getSectionName().trim().toUpperCase() + "'";

				logger.info("updateBirthWords===>" + updateBirthWords);
				connectDatabase(sessionData);
				statement = connection.createStatement();
				logger.info(statement.executeUpdate(updateBirthWords));
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			connection.close();
			logger.info("Close connections...");
		}
		logger.info("admitflag 2 ::" + admitFormFlag);
	}

	// /////////////updateSubMarks///////////////////////////////
	public boolean updateFinalPercent(SessionData sessionData, List<String> subMarksList, String academic, String std,
			String div) throws Exception {

		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();
		boolean retFlag = true;
		try {
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "",
					sessionData.getSectionName());

			//// insert new students into result data
			String grNew, rollNew, firstNew, lastNew, fatherNew, divNew = null;
			String newStudentInResult = "SELECT GR_NO,ROLL_NO,FIRST_NAME,LAST_NAME,FATHER_NAME FROM "
					+ sessionData.getDBName() + "." + "MARKS_ENTRY " + "WHERE GR_NO NOT IN (SELECT GR_NO FROM "
					+ sessionData.getDBName() + "." + "RESULT_DATA " + "WHERE STD_1='" + std + "' AND DIV_1='" + div
					+ "' AND ACADEMIC_YEAR='" + academic + "' AND RESULT_DATA.SECTION_NM='"
					+ sessionData.getSectionName() + "') AND STD_1='" + std + "' " + "AND DIV_1='" + div
					+ "' AND ACADEMIC_YEAR='" + academic + "' AND MARKS_ENTRY.SECTION_NM='"
					+ sessionData.getSectionName() + "'";
			logger.info("newStudentInResult == " + newStudentInResult);
			statement = connection.createStatement();
			resultSet = statement.executeQuery(newStudentInResult);

			while (resultSet.next()) {
				grNew = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				rollNew = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNew.equalsIgnoreCase("")) {
					rollNew = "1";
				}
				firstNew = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim());
				lastNew = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				fatherNew = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());

				if (studentLCMap.containsKey(grNew)) {
					continue;
				}
				String updateNewResult = "INSERT INTO RESULT_DATA " + "(GR_NO,LAST_NAME,FIRST_NAME,FATHER_NAME,ROLL_NO,"
						+ "STD_1,DIV_1,ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES ('" + grNew + "','"
						+ lastNew.trim().toUpperCase() + "','" + firstNew.trim().toUpperCase() + "','"
						+ fatherNew.trim().toUpperCase() + "','" + rollNew.trim().toUpperCase() + "','" + std + "','"
						+ div + "','" + academic + "',null,'','" + sessionData.getSectionName().trim().toUpperCase()
						+ "')";

				logger.info("updateNewResult query===>" + updateNewResult);
				statement = connection.createStatement();
				statement.executeUpdate(updateNewResult);
			}
			///////////////// new insert in result data ends

			String[] marksArray = new String[subMarksList.size()];
			marksArray = subMarksList.toArray(marksArray);
			logger.info("marksArray === " + marksArray.length);

			for (int k = 0; k < marksArray.length; k++) {
				String updateSubMarks = "";
				logger.info("subject marks detail before update== " + marksArray[k].toString());
				String grNo = marksArray[k].substring(0, marksArray[k].indexOf("|"));
				String percentObtained = marksArray[k].substring(marksArray[k].lastIndexOf("|||") + 3);

				updateSubMarks = "UPDATE " + sessionData.getDBName() + ".RESULT_DATA SET FINAL_PERCENT = '"
						+ percentObtained + "' " + "WHERE ACADEMIC_YEAR='" + academic.trim() + "' AND GR_NO='" + grNo
						+ "'" + " AND STD_1='" + std + "' AND DIV_1='" + div + "' AND SECTION_NM='"
						+ sessionData.getSectionName().trim().toUpperCase() + "'";

				logger.info("updateSubMarks query===>" + updateSubMarks);
				statement = connection.createStatement();
				statement.executeUpdate(updateSubMarks);
			}
			cm.showMessageDialog("% obtained in board updation completed...");
		} catch (Exception e) {
			cm.logException(e);
			retFlag = false;
			cm.showMessageDialog("% obtained in board updation failed...");
		}
		return retFlag;
	}

	// /////////Find progress based on
	// result////////////////////////////////////////
	public TreeMap<String, String> getProgressBasedOnResult(SessionData sessionData, String std, String div,
			String academicYear, List<String> passGrList) throws Exception {

		logger.info("=========getProgressBasedOnResult Query============");
		String findQuery = "";
		String grNo = "";
		String finalPercent = "";
		String sme1Remark = "";
		String sme2Remark = "";
		String finalRemark = "";
		String progressOnPercent = "";
		String condition = "";
		boolean findFlag = false;
		TreeMap tm = new TreeMap();

		try {
			if (!passGrList.isEmpty()) {
				condition = " AND GR_NO IN (";
				for (int i = 0; i < passGrList.size(); i++) {
					condition = condition + "'" + passGrList.get(i) + "',";
				}
				condition = condition.substring(0, condition.length() - 1) + ")";
			} else if (!std.equalsIgnoreCase("")) {
				condition = " AND DIV_1 = '" + div + "' AND STD_1 = '" + std + "'";
			}

			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "RESULT_DATA WHERE " + "ACADEMIC_YEAR='"
					+ academicYear + "' AND (SECTION_NM='" + sessionData.getSectionName() + "')" + condition;
			logger.info("getProgressBasedOnResult query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grNo = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				finalPercent = resultSet.getString("FINAL_PERCENT") == null ? "0.0"
						: (resultSet.getString("FINAL_PERCENT").trim());
				sme1Remark = resultSet.getString("SEM1_REMARK") == null ? ""
						: (resultSet.getString("SEM1_REMARK").trim());
				sme2Remark = resultSet.getString("SEM2_REMARK") == null ? ""
						: (resultSet.getString("SEM2_REMARK").trim());
				finalRemark = resultSet.getString("FINAL_REMARK") == null ? ""
						: (resultSet.getString("FINAL_REMARK").trim());

				if (cm.RomanToInteger(std) >= 9
						&& (finalRemark.equalsIgnoreCase("") || finalRemark.equalsIgnoreCase("-"))) {
					finalRemark = cm.getProgressFromPercentage(Double.parseDouble(finalPercent));
				}
				if (!finalRemark.equalsIgnoreCase("") && !finalRemark.equalsIgnoreCase("-")) {
					progressOnPercent = finalRemark;
				} else if (!sme2Remark.equalsIgnoreCase("") && !sme2Remark.equalsIgnoreCase("-")) {
					progressOnPercent = sme2Remark;
				} else if (!sme1Remark.equalsIgnoreCase("") && !sme1Remark.equalsIgnoreCase("-")) {
					progressOnPercent = sme1Remark;
				} else {
					progressOnPercent = cm.getProgressFromPercentage(Double.parseDouble(finalPercent));
				}
				tm.put(grNo, progressOnPercent);
				findFlag = true;
			}
			logger.info("getProgressBasedOnResult findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return tm;
	}

	public boolean updateAdmitted_Since(SessionData sessionData, String gr, String admittedToken, String studyingSince)
			throws SQLException {

		boolean retFlag = true;
		try {
//			connectDatabase(sessionData);
			String updateAdmitted_Since = "UPDATE HS_GENERAL_REGISTER " + "SET ADMITTEDSTDBRANCH = '"
					+ admittedToken.trim() + "',STUDYING_SINCE='" + studyingSince + "' " + "WHERE GR_NO='" + gr.trim()
					+ "' AND SECTION_NM='" + sessionData.getSectionName().trim().toUpperCase() + "'";

			connectDatabase(sessionData);
			statement = connection.createStatement();
			logger.info(statement.executeUpdate(updateAdmitted_Since));
			retFlag = true;
		} catch (Exception e) {
			retFlag = false;
			cm.logException(e);
		} finally {
			retFlag = false;
//			connection.close();
			logger.info("Close connections...");
		}
		logger.info("admitflag 2 ::" + admitFormFlag);
		return retFlag;
	}

	public void alterStudyingSince(SessionData sessionData) throws SQLException {

		/// modify varchar size of column
		try {
			String modifyVarcharSizeCoulmn = "ALTER TABLE hs_general_register MODIFY COLUMN STUDYING_SINCE VARCHAR(300)";
			logger.info("modify varchar size Column query == " + modifyVarcharSizeCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(modifyVarcharSizeCoulmn);
		} catch (Exception e) {
			cm.logException(e);
		}

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".hs_general_register ADD (ADMITTEDSTDBRANCH  VARCHAR(100))";
			logger.info("insert admittedStdBranch Column query == " + insertCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
			if (!e.getMessage().toString().contains("Duplicate")) {
				cm.logException(e);
			}
		}
	}

	public void addPersonalDetailsColumns(SessionData sessionData) throws SQLException {

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".hs_general_register ADD (LAST_SCH_UDISE  VARCHAR(50),F_SURNAME VARCHAR(50),F_NAME VARCHAR(50),F_MIDDLE_NAME  VARCHAR(50),F_CONTACT  VARCHAR(20),"
					+ "M_SURNAME VARCHAR(50),M_NAME VARCHAR(50),M_MIDDLE_NAME VARCHAR(50),M_CONTACT VARCHAR(20),"
					+ "G_SURNAME VARCHAR(50),G_NAME VARCHAR(50),G_MIDDLE_NAME VARCHAR(50),G_CONTACT VARCHAR(20),G_RELATION VARCHAR(20),"
					+ "HEIGHT VARCHAR(20),WEIGHT VARCHAR(20),BLOOD VARCHAR(10),HANDICAP VARCHAR(50),"
					+ "BANK VARCHAR(50),BANK_BRANCH VARCHAR(100),BANK_ACCOUNT VARCHAR(30),BANK_IFSC VARCHAR(30))";
			logger.info("insert admittedStdBranch Column query == " + insertCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
			if (!e.getMessage().contains("Duplicate")) {
				cm.logException(e);
			}
		}
	}

	// /////////Find StudyingSinceAcad////////////////////////////////////////
	public String getStudyingSinceAcad(SessionData sessionData, String std, String gr, String academicYear)
			throws Exception {

		logger.info("=========getStudyingSinceAcad Query============");
		String findQuery = "";
		String studyingSinceAcad = "", prevStd = "", curStd = "";
		boolean findFlag = false;

		try {
			findQuery = "select * from " + sessionData.getDBName() + "." + "class_allotment where GR_NO='" + gr
					+ "' and " + "PRESENT_STD='" + std + "' and SECTION_NM='" + sessionData.getSectionName()
					+ "' order by CREATED_DATE DESC";
			logger.info("getStudyingSinceAcad query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				curStd = resultSet.getString("PRESENT_STD") == null ? "NA"
						: (resultSet.getString("PRESENT_STD").trim());
				if (!prevStd.equalsIgnoreCase(curStd) && !prevStd.equalsIgnoreCase("")) {
					findFlag = true;
					break;
				}
				prevStd = curStd;
				studyingSinceAcad = resultSet.getString("ACADEMIC_YEAR") == null ? "NA"
						: (resultSet.getString("ACADEMIC_YEAR").trim());
			}
			logger.info("getStudyingSinceAcad findFlag=" + findFlag);
		} catch (Exception e) {
			cm.logException(e);
		}
		return studyingSinceAcad;
	}

	// /////////insert sent sms data////////////////////////////
	public boolean insertSmsData(SessionData sessionData, String gr, String std, String div, String academic,
			String phone, String smsText, String sms_sender, String priority, String type, String status,
			String response, String messageId, String section, String scheduleTime, String apiKey, String smsCategory,
			String name, String rollNo, String moduleName, String templateId) throws Exception {

		logger.info("========insertSmsData==========");
		boolean insertFlag = false;
		String insertSmsData = "";
		int udpdateCount = 0;
		String smsSentDate = scheduleTime;
		if (!smsCategory.equalsIgnoreCase("Schedule SMS")) {
			smsSentDate = "" + cm.dateFormat_yyyymmddhhmin();
		}

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName() + "."
					+ "SMS_DATA ADD (MODULE_NAME  VARCHAR(20))";
			statement = connection.createStatement();
			logger.info(statement.executeUpdate(insertCoulmn));
		} catch (Exception e) {
		}
		
		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName() + "."
					+ "SMS_DATA ADD (TEMPLATE_ID  VARCHAR(30))";
			statement = connection.createStatement();
			logger.info(statement.executeUpdate(insertCoulmn));
		} catch (Exception e) {
		}

		try {
			smsText = cm.replaceCommaApostrophy(smsText);
			insertSmsData = "INSERT INTO " + sessionData.getDBName() + "." + "SMS_DATA "
					+ "(GR_NO,PRESENT_STD,PRESENT_DIV,ACADEMIC_YEAR,PHONE,MESSAGE,SENDER,PRIORITY,TYPE,STATUS,RESPONSE,MESSAGE_ID,"
					+ "API_KEY,SCHEDULED_DATE,CREATED_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY,SECTION_NM,NAME,ROLL_NO,MODULE_NAME,TEMPLATE_ID) "
					+ "VALUES ('" + gr + "','" + std + "'," + "'" + div + "','" + academic.trim().toUpperCase() + "','"
					+ phone + "','" + smsText + "'" + ",'" + sms_sender + "','" + priority + "','" + type + "','"
					+ status + "','" + response + "','" + messageId + "','" + apiKey + "','" + smsSentDate.trim()
					+ "',SYSDATE(),'" + sessionData.getUserName() + "'" + ",NULL,'','" + section + "','" + name + "','"
					+ rollNo + "','" + moduleName + "','" + templateId + "')";

			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(insertSmsData);
			if (udpdateCount > 0) {
				insertFlag = true;
			}
		} catch (Exception e) {
			logger.error("insertSmsData query===>" + insertSmsData);
			cm.logException(e);
		}
		return insertFlag;
	}

	// /////////update sms delivery status////////////////////////////
	public boolean updateSmsDeliveryStatus(SessionData sessionData, String gr, String result, String messageId,
			String section, String response) throws Exception {

		logger.info("========updateSmsDeliveryStatus==========");
		boolean insertFlag = false;
		String updateSmsDeliveryStatus = "";
		String responseInQuery = "";
		int udpdateCount = 0;
		try {
			if (gr.startsWith(",")) {
				gr = gr.substring(1);
			}
			responseInQuery = ",RESPONSE='" + response + "'";
			if (response.equalsIgnoreCase("")) {
				responseInQuery = "";
			}

			if (!gr.equalsIgnoreCase("")) {
				updateSmsDeliveryStatus = "UPDATE " + sessionData.getDBName() + "." + "SMS_DATA SET STATUS='" + result
						+ "'" + responseInQuery + " " + "where MESSAGE_ID='" + messageId + "' and GR_NO='" + gr
						+ "' and SECTION_NM='" + section + "'";
			} else if (gr.equalsIgnoreCase("")) {
				updateSmsDeliveryStatus = "UPDATE " + sessionData.getDBName() + "." + "SMS_DATA SET STATUS='" + result
						+ "'" + responseInQuery + " " + "where MESSAGE_ID='" + messageId + "'";
			}

			logger.info("updateSmsDeliveryStatus query===>" + updateSmsDeliveryStatus);
			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(updateSmsDeliveryStatus);
			if (udpdateCount > 0) {
				insertFlag = true;
//					logger.info(udpdateCount + " data for formName " + formName + " inserted successfully.");
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return insertFlag;
	}

	// /////////find and update undelivered
	// messages////////////////////////////////////////
	public void getUndeliveredSms(SessionData sessionData, String academicYear) throws Exception {

		String findQuery = "";
		String grNo = "";
		String status = "";
		String msgId = "";
		String phone = "";
		String msgType = "";
		String sender = "";
		String smsDate = "";
		boolean findFlag = false;
		int daysCheckStatus = Integer.parseInt(sessionData.getConfigMap().get("DAYS_STATUS_CHECK"));

		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "."
					+ "SMS_DATA WHERE STATUS != 'Delivered' AND STATUS != 'DELIVERED' "
					+ "AND STATUS != 'REJECTED' AND STATUS != 'REJECTED *' AND " + "ACADEMIC_YEAR='" + academicYear
					+ "' order by SCHEDULED_DATE DESC";
//				logger.info("getProgressBasedOnResult query == " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				status = resultSet.getString("STATUS") == null ? "NA" : (resultSet.getString("STATUS").trim());
				msgId = resultSet.getString("MESSAGE_ID") == null ? "NA" : (resultSet.getString("MESSAGE_ID").trim());
				phone = resultSet.getString("PHONE") == null ? "NA" : (resultSet.getString("PHONE").trim());
				msgType = resultSet.getString("TYPE") == null ? "NA" : (resultSet.getString("TYPE").trim());
				grNo = resultSet.getString("GR_NO") == null ? "NA" : (resultSet.getString("GR_NO").trim());
				sender = resultSet.getString("SENDER") == null ? " " : (resultSet.getString("SENDER").trim());
				smsDate = resultSet.getString("SCHEDULED_DATE") == null ? " "
						: (resultSet.getString("SCHEDULED_DATE").trim());

				int daysLeft = 0;
				SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
				Date todayDate = formatter.parse(cm.getCurrentDateInHHmm().toString());
				Date expiryDate = formatter.parse(cm.dateFormatFromyyyymmddhhmmToddmmyyyyhhmm(smsDate));
				daysLeft = cm.daysBetween(expiryDate, todayDate);
				boolean checkStatus = cm.dateDifferenceInMinutes(todayDate, expiryDate);
				if (checkStatus && daysLeft <= daysCheckStatus) {
					status = cm.checkHSPDeliveryStatus(sessionData, status, msgId, phone, msgType, grNo,
							sessionData.getSectionName());
				} else if (!checkStatus) {
					status = "SUBMITTED";
				} else if (daysLeft > daysCheckStatus) {
					if (!status.contains("*"))
						status = status + " *";
					updateSmsDeliveryStatus(sessionData, grNo, status, msgId, sessionData.getSectionName(), "");
				}

				findFlag = true;
			}
		} catch (Exception e) {
			logger.error(findQuery);
			cm.logException(e);
		}
	}

	// /////////updateOptionalSubject////////////////////////////
	public void updateOptionalSubject(SessionData sessionData) throws Exception {

		logger.info("========updateOptionalSubject==========");
		boolean updateFlag = false;
		String updateOptionalSubject = "";
		int udpdateCount = 0;
		try {
			updateOptionalSubject = "UPDATE " + sessionData.getDBName()
					+ ".optional_allotment SET OPTIONAL_SUBJECT = REPLACE (OPTIONAL_SUBJECT, ',', '|') "
					+ "WHERE OPTIONAL_SUBJECT IS NOT NULL AND OPTIONAL_SUBJECT != ''";

			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(updateOptionalSubject);
		} catch (Exception e) {
			cm.logException(e);
		}
	}

	// backup database to SQL file
	public boolean backupToSQLFile(SessionData sessionData, String bckPath, boolean showPopUp) {
		String dbName = sessionData.getDBName();
		String dbUserName = "";
		String dbPassword = "";
		String fileName = "backup.sql";
		String folderStatus = cm.createFolder(bckPath);

//		String url = sessionData.getConfigMap().get("DBURL_"+sessionData.getDBName());
		dbUserName = sessionData.getDBUser();
		dbPassword = sessionData.getDBPass();
		if (dbUserName.equalsIgnoreCase(null) || dbUserName.equalsIgnoreCase("")) {
			sessionData.setDBUser(encdec.decryptString(user));
			sessionData.setDBPass(encdec.decryptString(pwd));
			dbUserName = sessionData.getDBUser();
			dbPassword = sessionData.getDBPass();
		}

		try {
			String executeCmd = "";
//    		String executeCmd = "C:/Program Files/MySQL/MySQL Server 5.5/bin/mysqldump -u " + dbUserName + " -p" + dbPassword + " --add-drop-database -B " + dbName + " -r " + bckPath+"/"+fileName;

			if ((System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0)) {
				executeCmd = "/usr/local/mysql-8.0.26-macos11-arm64/bin/mysqldump -u " + dbUserName + " -p" + dbPassword
						+ " --add-drop-database -B " + dbName + " -r " + bckPath + "/" + fileName;
			} else {
				// If Path is set in environment variables
				executeCmd = "mysqldump -u " + dbUserName + " -p" + dbPassword + " --add-drop-database -B " + dbName
						+ " -r " + bckPath + "/" + fileName;
				// String executeCmd = "mysqldump -h MaauliGroup-PC -u " + dbUserName + " -p" +
				// dbPassword + " --add-drop-database -B " + dbName + " -r " +
				// bckPath+"/"+fileName;
			}
			Process runtimeProcess;

			runtimeProcess = Runtime.getRuntime().exec(executeCmd);
			int processComplete = runtimeProcess.waitFor();

			if (processComplete == 0 && showPopUp) {
				cm.showMessageDialog("Backup created successfully");
			} else if (showPopUp) {
				cm.showMessageDialog("Could not create the backup");
			}
		} catch (Exception ex) {
			if (showPopUp) {
				cm.showMessageDialog(ex.toString());
			}
			cm.logException(ex);
		}
		return true;
	}

	// /////////Bulk SMS Report////////////////////////////////////////
	public List<String> bulkSmsReport(SessionData sessionData, String academicYear, String section, String smsType,
			String grList, String fromDate, String toDate) throws Exception {
		logger.info("=========bulkSmsReport Query============");
		List reportDataList = new ArrayList();
		String grDB = "";
		String contact1DB = "";
		String contact2DB = "";
		String rollDB = "";
		String nameDB = "";
		String findQuery = "";
		String sender = "";
		String status = "";
		String messageId = "";
		String message = "";
		String messageType = "";
		String smsDate = "";
		boolean findFlag = false;
		ResultSet resultSetSms = null;
		String addToQuery = "";
		String grListFromResult = "";
		int daysCheckStatus = Integer.parseInt(sessionData.getConfigMap().get("DAYS_STATUS_CHECK"));

		reportDataList.add("Name|Phone|Sms Status|Message Sent|Message Id|Message Type|Sms Sent Date");

		if (!academicYear.equalsIgnoreCase("")) {
			addToQuery = " AND SMS_DATA.ACADEMIC_YEAR = '" + academicYear + "' AND SMS_DATA.SECTION_NM='" + section
					+ "'";
		}
		if (!fromDate.equalsIgnoreCase("")) {
			addToQuery = addToQuery + " AND (CREATED_DATE BETWEEN '" + fromDate + " 00:00:00' AND '" + toDate
					+ " 23:59:59')";
		}

		logger.info("addToQuery == " + addToQuery);
		try {
			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "sms_data WHERE PRESENT_STD = ''"
					+ addToQuery + " ORDER BY SCHEDULED_DATE DESC";
			logger.info("findQuery : " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			int i = 1;
			while (resultSet.next()) {
				nameDB = resultSet.getString("NAME") == null ? " " : (resultSet.getString("NAME").trim());
				if(nameDB.contains("|")) {
					nameDB = nameDB.substring(0, nameDB.indexOf("|"));
				}
				contact1DB = resultSet.getString("PHONE") == null ? " " : (resultSet.getString("PHONE").trim());
				sender = resultSet.getString("SENDER") == null ? " " : (resultSet.getString("SENDER").trim());
				status = resultSet.getString("STATUS") == null ? " " : (resultSet.getString("STATUS").trim());
				messageId = resultSet.getString("MESSAGE_ID") == null ? " "
						: (resultSet.getString("MESSAGE_ID").trim());
				message = resultSet.getString("MESSAGE") == null ? " " : (resultSet.getString("MESSAGE").trim());
				messageType = resultSet.getString("TYPE") == null ? " " : (resultSet.getString("TYPE").trim());
				smsDate = resultSet.getString("SCHEDULED_DATE") == null ? " "
						: (resultSet.getString("SCHEDULED_DATE").trim());

				if (!status.equalsIgnoreCase("Delivered") && !status.equalsIgnoreCase("DELIVRD")) {
					int daysLeft = 0;
					SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
					Date todayDate = formatter.parse(cm.getCurrentDateInHHmm().toString());
					Date expiryDate = formatter.parse(cm.dateFormatFromyyyymmddhhmmToddmmyyyyhhmm(smsDate));
					daysLeft = cm.daysBetween(expiryDate, todayDate);
					boolean checkStatus = cm.dateDifferenceInMinutes(todayDate, expiryDate);
					if (checkStatus && daysLeft <= daysCheckStatus) {
						status = cm.checkHSPDeliveryStatus(sessionData, status, messageId, contact1DB, messageType, "",
								section);
					} else if (!checkStatus) {
						status = "SUBMITTED";
					} else if (daysLeft > daysCheckStatus) {
						if (!status.contains("*"))
							status = status + " *";
						updateSmsDeliveryStatus(sessionData, "", status, messageId, section, "");
					}
				}
				reportDataList.add(nameDB + "|" + contact1DB + "|" + status + "|" + message + "|" + messageId + "|"
						+ messageType + "|" + smsDate);
				findFlag = true;
				i++;
			}
			ce.generateExcel(sessionData, "PRINTLIST", "Bulk SMS Report_", "", reportDataList, true, "Bulk SMS Report",
					1);
		} catch (Exception e) {
			cm.logException(e);
			if (e.getMessage().contains("sms_data' doesn't exist")) {
				cm.showMessageDialog("Table sms_data is missing. \n Please contact Maauli Software Solutions");
			}
		} finally {
			if (resultSetSms != null) {
				resultSetSms.close();
			}
		}
		return reportDataList;
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> getSujectDetails(SessionData sessionData, String std,
			String academic) {
		logger.info("==inside getSujectDetails===");
		LinkedHashMap subjectMap = new LinkedHashMap();
		String optional, subject_name, subject_title, marks_grade, condition = "";
		try {
			if (!std.equalsIgnoreCase("")) {
				condition = "STD_1='" + std + "' AND ";
			}
			String maxMarksQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "subject WHERE " + condition
					+ " ACADEMIC_YEAR='" + academic + "' " + "AND (SECTION_NM='" + sessionData.getSectionName()
					+ "') ORDER BY ORDER_NO ASC";
			logger.info("find maxMarksQuery == " + maxMarksQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(maxMarksQuery);

			while (resultSet.next()) {
				LinkedHashMap subjectDetail = new LinkedHashMap();
				optional = resultSet.getString("OPTIONAL") == null ? " " : (resultSet.getString("OPTIONAL").trim());
				subjectDetail.put("optional", optional);
				subject_name = resultSet.getString("SUBJECT_NAME") == null ? " "
						: (resultSet.getString("SUBJECT_NAME").trim());
				subjectDetail.put("subject_name", subject_name);
				subject_title = resultSet.getString("SUBJECT_TITLE") == null ? " "
						: (resultSet.getString("SUBJECT_TITLE").trim());
				subjectDetail.put("subject_title", subject_title);
				marks_grade = resultSet.getString("MARKS_GRADE") == null ? " "
						: (resultSet.getString("MARKS_GRADE").trim());
				subjectDetail.put("marks_grade", marks_grade);
				subjectMap.put(subject_name, subjectDetail);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return subjectMap;
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> printExcelResultMap(SessionData sessionData,
			String academic, String std, String div, String exam, String section, String last, String first,
			String father) {
		logger.info("==inside printResultMap===");
		LinkedHashMap resultMap = new LinkedHashMap();
		LinkedHashMap subjectTitleMap = new LinkedHashMap();
		String semInitial = "";
		String sem = "";
		String dispSem = "";
		String optional, grNo, totalMarks, fields, semesterMarks, subject_name, subject_title, marks_grade,
				marksEntrySubjects = "", resultDataSubjects = "";
		LinkedHashMap subjectMap = getSujectDetails(sessionData, std, academic);

		fields = "RollNo*1|";

		if (exam.equalsIgnoreCase("Semester 1")) {
			semInitial = "F";
			sem = "SEM1";
			dispSem = "FIRST SEMESTER";
		} else if (exam.equalsIgnoreCase("Semester 2")) {
			semInitial = "S";
			sem = "SEM2";
			dispSem = "SECOND SEMESTER";
		} else if (exam.equalsIgnoreCase("Semester 2")) {
			sem = "FINAL";
			dispSem = "ANNUAL";
		}

		try {
			String resultMapQuery = "SELECT RESULT_DATA.GR_NO,RESULT_DATA.STD_1,RESULT_DATA.DIV_1,RESULT_DATA.ACADEMIC_YEAR,"
					+ "OPTIONAL_ALLOTMENT.OPTIONAL_SUBJECT, RESULT_DATA.ROLL_NO,RESULT_DATA.FIRST_NAME,RESULT_DATA.LAST_NAME,"
					+ "RESULT_DATA.FATHER_NAME, RESULT_DATA." + sem + "_PERCENT,RESULT_DATA." + sem + "_PROGRESS,"
					+ "RESULT_DATA." + sem + "_MARKS,RESULT_DATA." + sem + "_TOTAL";

			Set set = subjectMap.entrySet();
			Iterator i = set.iterator();
			String title;
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				title = (((LinkedHashMap<String, String>) me.getValue()).get("subject_title"));
				subjectTitleMap.put(title, "");
				if (!fields.contains(title)) {
					fields = fields + title + "*2|";
				}
				marksEntrySubjects = marksEntrySubjects + ",IF(" + me.getKey() + "_" + semInitial + "TOT>=0, "
						+ me.getKey() + "_" + semInitial + "TOT, 0) AS " + me.getKey();
				if (!resultDataSubjects.contains("result_data." + title)) {
					resultDataSubjects = resultDataSubjects + ",result_data." + title + "_" + sem;
				}
			}
			fields = fields + "Total*1|Grade*1";
			resultMap.put("fields", fields);

			resultMapQuery = resultMapQuery + marksEntrySubjects + resultDataSubjects + " FROM "
					+ sessionData.getDBName() + ".MARKS_ENTRY LEFT JOIN " + sessionData.getDBName()
					+ ".OPTIONAL_ALLOTMENT ON " + "MARKS_ENTRY.GR_NO = OPTIONAL_ALLOTMENT.GR_NO LEFT JOIN "
					+ sessionData.getDBName() + ".result_data ON "
					+ "MARKS_ENTRY.GR_NO = result_data.GR_NO WHERE MARKS_ENTRY.STD_1='" + std
					+ "' AND MARKS_ENTRY.DIV_1='" + div + "' AND " + "MARKS_ENTRY.ACADEMIC_YEAR='" + academic
					+ "' AND OPTIONAL_ALLOTMENT.PRESENT_STD='" + std + "' AND " + "OPTIONAL_ALLOTMENT.PRESENT_DIV='"
					+ div + "' AND RESULT_DATA.ACADEMIC_YEAR='" + academic + "' AND "
					+ "OPTIONAL_ALLOTMENT.ACADEMIC_YEAR='" + academic + "' and " + "OPTIONAL_ALLOTMENT.section_nm='"
					+ sessionData.getSectionName() + "' ORDER BY result_data.ROLL_NO * 1";

			logger.info("find resultMapQuery ==> " + resultMapQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(resultMapQuery);

			while (resultSet.next()) {
				LinkedHashMap resultDetail = new LinkedHashMap();
				LinkedHashMap subjectDetail = new LinkedHashMap();
				grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				semesterMarks = resultSet.getString(sem + "_MARKS") == null ? "0"
						: (resultSet.getString(sem + "_MARKS").trim());
				totalMarks = resultSet.getString(sem + "_TOTAL") == null ? "0"
						: (resultSet.getString(sem + "_TOTAL").trim());

				Set set1 = subjectMap.entrySet();
				Iterator j = set1.iterator();
				String title1;
				String marks;
				String grade;
				int addMarks;
				while (j.hasNext()) {
					Map.Entry me = (Map.Entry) j.next();
					title1 = (((LinkedHashMap<String, String>) me.getValue()).get("subject_title"));
					marks = resultSet.getString(me.getKey().toString()) == null ? "NA"
							: (resultSet.getString(me.getKey().toString()).trim());
					if (marks.contains("+")) {
						marks = marks.substring(0, marks.indexOf("+"));
					}

					if (subjectDetail.get(title1 + "_MARKS") != null
							&& !subjectDetail.get(title1 + "_MARKS").toString().equalsIgnoreCase("NA")) {
						addMarks = (Integer.parseInt(marks)
								+ Integer.parseInt(subjectDetail.get(title1 + "_MARKS").toString()));
						subjectDetail.put(title1 + "_MARKS", addMarks);
					} else {
						grade = resultSet.getString(title1 + "_" + sem) == null ? "NA"
								: (resultSet.getString(title1 + "_" + sem).trim());
						if (grade.contains("RTE")) {
							grade = "RTE";
						} else if (grade.contains("+")) {
							grade = grade.substring(0, grade.lastIndexOf("+"));
						}
						if (grade.trim().equalsIgnoreCase("") || grade.trim().equalsIgnoreCase("NA")) {
							marks = "NA";
							grade = "NA";
						}
						subjectDetail.put(title1 + "_MARKS", marks);
						subjectDetail.put(title1 + "_GRADE", grade);
					}
				}
				resultDetail.put("grNo", grNo);
				resultDetail.put("rollNo",
						resultSet.getString("ROLL_NO") == null ? "" : (resultSet.getString("ROLL_NO").trim()));
				resultDetail.put("firstName",
						resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim()));
				resultDetail.put("lastName",
						resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim()));
				resultDetail.put("fatherName",
						resultSet.getString("FATHER_NAME") == null ? " " : (resultSet.getString("FATHER_NAME").trim()));
				resultDetail.put("std",
						resultSet.getString("STD_1") == null ? "" : (resultSet.getString("STD_1").trim()));
				resultDetail.put("div",
						resultSet.getString("DIV_1") == null ? "" : (resultSet.getString("DIV_1").trim()));
				resultDetail.put("academicYear", resultSet.getString("ACADEMIC_YEAR") == null ? ""
						: (resultSet.getString("ACADEMIC_YEAR").trim()));
				resultDetail.put("optionalSubject", resultSet.getString("OPTIONAL_SUBJECT") == null ? ""
						: (resultSet.getString("OPTIONAL_SUBJECT").trim()));
				resultDetail.put(sem + "Percent", resultSet.getString(sem + "_PERCENT") == null ? ""
						: (resultSet.getString(sem + "_PERCENT").trim()));
				resultDetail.put(sem + "Progress", resultSet.getString(sem + "_PROGRESS") == null ? ""
						: (resultSet.getString(sem + "_PROGRESS").trim()));
				resultDetail.put(sem + "Marks", semesterMarks);
				resultDetail.put(sem + "Total", totalMarks);
				resultDetail.put(sem + "Grade", cm.getGradeFromMarks(Double.parseDouble(totalMarks), "All",
						Double.parseDouble(semesterMarks), std));
				resultDetail.put("subjects", subjectDetail);
				resultMap.put(grNo, resultDetail);
			}
			cmge.generateExcel(sessionData, dispSem + " " + academic,
					dispSem + " " + academic + " Std." + std + "-" + div + "_", "", resultMap, subjectTitleMap, true,
					dispSem + " " + academic + " for Std." + std + "-" + div, 3, sem);
		} catch (Exception e) {
			cm.logException(e);
		}
		return resultMap;
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> printExcelFinalResultMap(SessionData sessionData,
			String academic, String std, String div, String exam, String section, String last, String first,
			String father) {
		logger.info("==inside printExcelFinalResultMap===");
		LinkedHashMap resultMap = new LinkedHashMap();
		LinkedHashMap subjectTitleMap = new LinkedHashMap();
		List resultDataList = new ArrayList();
		String semInitial = "";
		String sem = "";
		String dispSem = "";
		String optional, rollNo, firstName, lastName, fatherName, grNo, totalMarks, fields, sem1Fields = "",
				sem2Fields = "", semesterMarks, subject_name, subject_title, marks_grade, marksEntrySubjects = "",
				resultDataSubjects = "", attSem1 = "", attSem2 = "", dob = "", attendance = "", semester = "",
				semProgress = "";
		int present = 0, total = 0, stdInt = 0;
		LinkedHashMap subjectMap = getSujectDetails(sessionData, std, academic);
		LinkedHashMap<String, LinkedHashMap<String, String>> attendanceMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();

		fields = "RollNo|Gr. No.|Name|Date of Birth|Attendance";
		sem = "FINAL";
		dispSem = "ANNUAL";

		try {
			stdInt = cm.RomanToInteger(std);
			if (exam.equalsIgnoreCase("Semester 1")) {
				semester = "SEM1";
				semProgress = "SEM1";
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				semester = "SEM2";
				semProgress = "SEM2";
			} else {
				semester = "FINAL";
				semProgress = "SEM2";
			}
			attendanceMap = getAttendanceMap(sessionData, std, div, academic, semProgress);

			String resultMapQuery = "SELECT RESULT_DATA.GR_NO,RESULT_DATA.STD_1,RESULT_DATA.DIV_1,RESULT_DATA.ACADEMIC_YEAR,"
					+ "OPTIONAL_ALLOTMENT.OPTIONAL_SUBJECT, RESULT_DATA.ROLL_NO,RESULT_DATA.FIRST_NAME,RESULT_DATA.LAST_NAME,"
					+ "RESULT_DATA.FATHER_NAME,RESULT_DATA.SEM1_PERCENT,RESULT_DATA.SEM2_PERCENT,RESULT_DATA.SEM1_PROGRESS,"
					+ "RESULT_DATA.SEM2_PROGRESS,RESULT_DATA.SEM1_MARKS,RESULT_DATA.SEM2_MARKS,RESULT_DATA.SEM1_TOTAL,"
					+ "RESULT_DATA.SEM2_TOTAL,DATE_FORMAT(HS_GENERAL_REGISTER.DOB,'%d/%m/%Y') AS DOB,hs_general_register.ATT_SEM1,hs_general_register.ATT_SEM2";

			Set set = subjectMap.entrySet();
			Iterator i = set.iterator();
			String title;
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				title = (((LinkedHashMap<String, String>) me.getValue()).get("subject_title"));
				subjectTitleMap.put(title, title);
				if (!sem1Fields.contains(title)) {
					sem1Fields = sem1Fields + "|" + title + "-Sem1";
					sem2Fields = sem2Fields + "|" + title + "-Sem2";
				}
				marksEntrySubjects = marksEntrySubjects + ",IF(" + me.getKey() + "_FTOT>=0, " + me.getKey()
						+ "_FTOT, 0) AS " + me.getKey();
				marksEntrySubjects = marksEntrySubjects + ",IF(" + me.getKey() + "_STOT>=0, " + me.getKey()
						+ "_STOT, 0) AS " + me.getKey();
				if (!resultDataSubjects.contains("result_data." + title)) {
					resultDataSubjects = resultDataSubjects + ",result_data." + title + "_SEM1";
					resultDataSubjects = resultDataSubjects + ",result_data." + title + "_SEM2";
				}
			}
			fields = fields + sem1Fields + sem2Fields;
			resultDataList.add(fields);
			resultMap.put("fields", fields);

			resultMapQuery = resultMapQuery + marksEntrySubjects + resultDataSubjects + " FROM "
					+ sessionData.getDBName() + ".MARKS_ENTRY LEFT JOIN " + sessionData.getDBName()
					+ ".OPTIONAL_ALLOTMENT ON "
					+ "MARKS_ENTRY.GR_NO = OPTIONAL_ALLOTMENT.GR_NO AND MARKS_ENTRY.SECTION_NM = OPTIONAL_ALLOTMENT.SECTION_NM "
					+ "LEFT JOIN " + sessionData.getDBName()
					+ ".result_data ON MARKS_ENTRY.GR_NO = result_data.GR_NO AND "
					+ "MARKS_ENTRY.SECTION_NM = result_data.SECTION_NM " + "LEFT JOIN " + sessionData.getDBName()
					+ ".hs_general_register ON MARKS_ENTRY.GR_NO = hs_general_register.GR_NO AND "
					+ "MARKS_ENTRY.SECTION_NM = hs_general_register.SECTION_NM " + "WHERE MARKS_ENTRY.STD_1='" + std
					+ "' AND MARKS_ENTRY.DIV_1='" + div + "' AND " + "MARKS_ENTRY.ACADEMIC_YEAR='" + academic
					+ "' AND OPTIONAL_ALLOTMENT.PRESENT_STD='" + std + "' AND " + "OPTIONAL_ALLOTMENT.PRESENT_DIV='"
					+ div + "' AND result_data.ACADEMIC_YEAR='" + academic + "' and " + "result_data.section_nm='"
					+ sessionData.getSectionName() + "' ORDER BY result_data.ROLL_NO * 1";

			logger.info("find resultMapQuery ==> " + resultMapQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(resultMapQuery);

			String data, sem1Grade = "", sem2Grade = "", grade1, grade2, title1, marks = "";
			int addMarks;
			while (resultSet.next()) {
				sem1Grade = "";
				sem2Grade = "";
				LinkedHashMap resultDetail = new LinkedHashMap();
				LinkedHashMap subjectDetail = new LinkedHashMap();
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				rollNo = resultSet.getString("ROLL_NO") == null ? "-" : (resultSet.getString("ROLL_NO").trim());
				data = rollNo + "|" + grNo;
				firstName = resultSet.getString("FIRST_NAME") == null ? " "
						: (resultSet.getString("FIRST_NAME").trim());
				lastName = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				fatherName = resultSet.getString("FATHER_NAME") == null ? " "
						: (resultSet.getString("FATHER_NAME").trim());
				data = data + "|" + lastName + " " + firstName + " " + fatherName;
				dob = resultSet.getString("DOB") == null ? "-" : (resultSet.getString("DOB").trim());
//				attSem1 = resultSet.getString("ATT_SEM1") == null ? "0/0" : (resultSet.getString("ATT_SEM1").trim());
//				attSem2 = resultSet.getString("ATT_SEM2") == null ? "0/0" : (resultSet.getString("ATT_SEM2").trim());
//
//				if(attSem1.trim().equalsIgnoreCase("")){
//					attSem1 = "0/0";
//				}
//				present = present + Integer.parseInt(attSem1.substring(0,attSem1.indexOf("/")));
//				total = total + Integer.parseInt(attSem1.substring(attSem1.indexOf("/")+1));
//				attSem2 = resultSet.getString("ATT_SEM2") == null ? "0/0" : (resultSet.getString("ATT_SEM2").trim());
//				if(attSem2.trim().equalsIgnoreCase("")){
//					attSem2 = "0/0";
//				}
//				present = present + Integer.parseInt(attSem2.substring(0,attSem2.indexOf("/")));
//				total = total + Integer.parseInt(attSem2.substring(attSem2.indexOf("/")+1));
//				attendance = present+"/"+total;
//				present = 0;
//				total =  0;

				if (attendanceMap.get(grNo) != null && !attendanceMap.isEmpty()
						&& !attendanceMap.get("total").get("total").equalsIgnoreCase("0")) {
					attendance = attendanceMap.get(grNo).get("attended") + "/"
							+ attendanceMap.get("total").get("total");
				} else if (attendanceMap.get(grNo) != null && !attendanceMap.isEmpty()
						&& !semester.equalsIgnoreCase("FINAL")
						&& !attendanceMap.get("total").get(semester + "_TOT").equalsIgnoreCase("0")) {
					attendance = attendanceMap.get(grNo).get(semester) + "/"
							+ attendanceMap.get("total").get(semester + "_TOT");
				} else if (attendanceMap.get(grNo) != null && !attendanceMap.isEmpty()
						&& semester.equalsIgnoreCase("FINAL")
						&& !attendanceMap.get("total").get("YEARLY_TOT").equalsIgnoreCase("0")) {
					attendance = attendanceMap.get(grNo).get("YEARLY") + "/"
							+ attendanceMap.get("total").get("YEARLY_TOT");
				} else {
					attendance = "0/0";
				}

				data = data + "|" + dob + "|" + attendance;

				Set set1 = subjectTitleMap.entrySet();
				Iterator j = set1.iterator();
				while (j.hasNext()) {
					Map.Entry me = (Map.Entry) j.next();
					title1 = me.getValue().toString();
					grade1 = resultSet.getString(title1 + "_SEM1") == null ? "NA"
							: (resultSet.getString(title1 + "_SEM1").trim());
					if (grade1.trim().equalsIgnoreCase("") || grade1.trim().equalsIgnoreCase("NA")) {
						grade1 = "NA";
					} else if (grade1.contains("RTE")) {
						grade1 = "RTE";
					} else if (grade1.contains("+T")) {
						grade1 = grade1.substring(0, grade1.indexOf("+T"));
					}
					sem1Grade = sem1Grade + "|" + grade1;
					grade2 = resultSet.getString(title1 + "_SEM2") == null ? "NA"
							: (resultSet.getString(title1 + "_SEM2").trim());
					if (grade2.trim().equalsIgnoreCase("") || grade2.trim().equalsIgnoreCase("NA")) {
						grade2 = "NA";
					} else if (grade2.contains("RTE")) {
						grade2 = "RTE";
					} else if (grade2.contains("+T")) {
						grade2 = grade2.substring(0, grade2.indexOf("+T"));
					}
					sem2Grade = sem2Grade + "|" + grade2;
				}
				data = data + sem1Grade + sem2Grade;
				resultDataList.add(data);
			}
			ce.generateExcel(sessionData, "PRINTLIST", "ANNUAL RESULT_", "", resultDataList, true,
					"Annual Result for Std-" + std + " Div-" + div + " Academic Year " + academic, 1);
		} catch (Exception e) {
			cm.logException(e);
		}
		return resultMap;
	}

	// /////Add Fee Name///////////////////////////////////
	public boolean addFeeName(SessionData sessionData, String feeName, String feeCategory, String feeCatOther,
			String optional, String payFrequency, String amount, boolean isUpdate, String std, String academic,
			String section, String orderNo, boolean isAllSelected, String allStd, String shortName) throws Exception {

		logger.info("=======inside addFeeName========");
		String createdBy = sessionData.getUserName();
		String insertFeeName = "";
		String addUpdate = "added";
		boolean retFlag = false;
		boolean validateFeeName = false;

		if (feeCategory.equalsIgnoreCase("Other")) {
			feeCategory = feeCatOther;
		}
		if (shortName.equalsIgnoreCase("Select")) {
			shortName = "";
		}

		try {
			logger.info("DB Connection created : " + connectDatabase(sessionData));
			if (feeName.trim().contains(" ")) {
				feeName = feeName.trim().replace(" ", "_");
			} else if (feeName.trim().contains("-")) {
				feeName = feeName.trim().replace("-", "_");
			}

			/// insert fee name column
			insertFeeNameColumn(sessionData, feeName.trim().toUpperCase(), payFrequency.trim().toUpperCase(), optional);

			if (!isUpdate) {
				// ////////////////////////////////////////////////

				String findFeesQuery = "SELECT DISTINCT FEES_NAME " + "FROM " + sessionData.getDBName() + "."
						+ "FEES_HEAD WHERE FEES_NAME='" + feeName.toUpperCase() + "' AND STD_1='" + std
						+ "' AND ACADEMIC_YEAR='" + academic + "' " + "AND (SECTION_NM='" + section + "')";

				logger.info("findFeesQuery before dbConn == " + findFeesQuery);
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findFeesQuery);
				String feesNameDB = "";
				while (resultSet.next()) {
					feesNameDB = resultSet.getString("FEES_NAME");
					validateFeeName = true;
				}

				logger.info("validateFeeName=" + validateFeeName);
			}

			if (!validateFeeName) {
				if (isUpdate) {
					addUpdate = "updated";
					insertFeeName = "Update " + sessionData.getDBName() + "." + "FEES_HEAD set " + "FEES_NAME='"
							+ feeName.trim().toUpperCase() + "'," + "CATEGORY='" + feeCategory.trim() + "'," + "AMOUNT="
							+ amount.trim() + "," + "OPTIONAL='" + optional.trim() + "'," + "FREQUENCY='"
							+ payFrequency.trim() + "'," + "MODIFIED_BY='" + createdBy.trim() + "',SHORT_NAME='"
							+ shortName + "'," + "MODIFIED_DATE=SYSDATE() where (SECTION_NM='" + section.toUpperCase()
							+ "') " + "AND ORDER_NO='" + orderNo + "' " + "AND ACADEMIC_YEAR='" + academic
							+ "' AND STD_1='" + std + "'";

					statement = connection.createStatement();
					statement.executeUpdate(insertFeeName);
					logger.info("Fee Name " + feeName.trim() + " " + addUpdate + " successfully...");
					std = "'" + std + "'";

				} else if (isAllSelected) {
					std = "";
					allStd = allStd.replace("Select,", "");
					String[] stdList = allStd.split(",");
					for (int i = 0; i < stdList.length; i++) {
						insertFeeName += "('" + academic.trim() + "','" + stdList[i].trim().toUpperCase() + "','"
								+ feeName.trim().toUpperCase() + "'," + "'" + feeCategory.trim() + "'," + amount.trim()
								+ "," + "'" + payFrequency.trim() + "','" + optional.trim() + "','" + section + "',"
								+ "SYSDATE(),'" + createdBy.trim() + "','" + shortName + "'),";
						std = "'" + stdList[i].trim().toUpperCase() + "'" + "," + std;
					}
					insertFeeName = insertFeeName.substring(0, insertFeeName.length() - 1);
					insertFeeName = "INSERT INTO " + sessionData.getDBName() + "."
							+ "FEES_HEAD (ACADEMIC_YEAR,STD_1,FEES_NAME,CATEGORY,AMOUNT,"
							+ "FREQUENCY,OPTIONAL,SECTION_NM,CREATED_DATE,CREATED_BY,SHORT_NAME) VALUES "
							+ insertFeeName;

					statement = connection.createStatement();
					statement.executeUpdate(insertFeeName);
					logger.info("Fee Name " + feeName.trim() + " " + addUpdate + " successfully for Std " + allStd);
					std = std.substring(0, std.length() - 1);
					;
				} else {
					insertFeeName = "INSERT INTO " + sessionData.getDBName() + "." + "FEES_HEAD "
							+ "(ACADEMIC_YEAR,STD_1,FEES_NAME,CATEGORY,AMOUNT,"
							+ "FREQUENCY,OPTIONAL,SECTION_NM,CREATED_DATE,CREATED_BY,SHORT_NAME)  " + "VALUES ('"
							+ academic.trim() + "','" + std.trim().toUpperCase() + "','" + feeName.trim().toUpperCase()
							+ "'," + "'" + feeCategory.trim() + "'," + amount.trim() + "," + "'" + payFrequency.trim()
							+ "','" + optional.trim() + "','" + section + "'," + "SYSDATE(),'" + createdBy.trim()
							+ "','" + shortName + "')";

					logger.info("insertFeeName query===>" + insertFeeName);
					statement = connection.createStatement();
					statement.executeUpdate(insertFeeName);
					std = "'" + std + "'";
					logger.info("Fee Name " + feeName.trim() + " " + addUpdate + " successfully...");
				}

				String updateShortName = "Update " + sessionData.getDBName() + "." + "FEES_HEAD set " + "MODIFIED_BY='"
						+ createdBy.trim() + "',SHORT_NAME='" + shortName + "',"
						+ "MODIFIED_DATE=SYSDATE() where SECTION_NM='" + section.toUpperCase() + "' " + "AND CATEGORY='"
						+ feeCategory.trim() + "' " + "AND ACADEMIC_YEAR='" + academic + "' AND STD_1 IN (" + std + ")";
				statement = connection.createStatement();
				statement.executeUpdate(updateShortName);

				JOptionPane.showMessageDialog(null,
						"Fee Name " + cm.revertCommaApostrophy(feeName.trim().replace("$$", ".")) + " " + addUpdate
								+ " successfully for std " + std);
				retFlag = true;
			} else {
				retFlag = false;
				JOptionPane.showMessageDialog(null, "Fee Name " + feeName + " already exist for STD " + std);
			}

			return retFlag;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	// /////Add SMS Saff details///////////////////////////////////
	public boolean addSMSStaff(SessionData sessionData, String staffName, String designation, String contact,
			String std, String div, String sms, String academic, boolean isUpdate) throws Exception {

		String createdBy = sessionData.getUserName();
		String addUpdate = "added";
		boolean retFlag = false;
		boolean validateStaffName = false;

		try {
			connectDatabase(sessionData);

			if (!isUpdate) {
				try {
					String findStaffQuery = "SELECT DISTINCT STAFF_NAME " + "FROM " + sessionData.getDBName() + "."
							+ "STAFF_DATA WHERE ACADEMIC_YEAR='" + academic + "' " + "AND DESIGNATION='" + designation
							+ "' AND STD_1='" + std + "' AND DIV_1='" + div + "' AND SECTION_NM='"
							+ sessionData.getSectionName() + "' " + "AND (STATUS IS NULL OR STATUS='Enable')";

					statement = connection.createStatement();
					resultSet = statement.executeQuery(findStaffQuery);
					String staffNameDB = "";
					while (resultSet.next()) {
						staffNameDB = resultSet.getString("STAFF_NAME");
						if (staffNameDB.trim().equalsIgnoreCase(staffName.trim())) {
							validateStaffName = true;
							JOptionPane.showMessageDialog(null, "Staff " + staffName + " already exist for STD " + std
									+ " in academic year " + academic);
							break;
						}
					}

					// Proceed if staff name doesn't exist
					if (!validateStaffName) {
						String insertStaffName = "INSERT INTO " + sessionData.getDBName() + "."
								+ "STAFF_DATA (STAFF_NAME,DESIGNATION,CONTACT_1,STD_1,DIV_1,SMS_FEE_ENABLED,"
								+ "ACADEMIC_YEAR,SECTION_NM,CREATED_DATE,CREATED_BY) " + "VALUES ('" + staffName
								+ "', '" + designation + "', '" + contact + "', '" + std + "', '" + div + "', '" + sms
								+ "', '" + academic + "', " + "'" + sessionData.getSectionName() + "', SYSDATE(), '"
								+ sessionData.getUserName() + "')";
						statement = connection.createStatement();
						statement.executeUpdate(insertStaffName);
					}

					retFlag = true;

				} catch (Exception e) {
					cm.logException(e);
					return retFlag;
				}
			} else {
				try {
					String updateStaffSms = "Update " + sessionData.getDBName() + "." + "STAFF_DATA set "
							+ "MODIFIED_BY='" + createdBy.trim() + "',SMS_FEE_ENABLED='" + sms + "',CONTACT_1='"
							+ contact + "'," + "MODIFIED_DATE=SYSDATE() where SECTION_NM='"
							+ sessionData.getSectionName().toUpperCase() + "' " + "AND STAFF_NAME='"
							+ staffName.toUpperCase() + "' AND DESIGNATION='" + designation + "' " + "AND STD_1='" + std
							+ "' AND DIV_1='" + div + "' AND ACADEMIC_YEAR='" + academic + "' "
							+ "AND (STATUS IS NULL OR STATUS='Enable')";
					statement = connection.createStatement();
					statement.executeUpdate(updateStaffSms);

					retFlag = true;

				} catch (Exception e) {
					cm.logException(e);
					return retFlag;
				}
			}

			return retFlag;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}
	
	// /////Add SMS Template details///////////////////////////////////
	public boolean addSMSTemplate(SessionData sessionData, String senderName, String templateId, String templateName, 
    		String messageBody, boolean isUpdate) throws Exception {

		String createdBy = sessionData.getUserName();
		boolean retFlag = false;
		boolean validateStaffTemplate = true;

		try {
			connectDatabase(sessionData);

			if (!isUpdate) {
				try {
					senderName = cm.replaceCommaApostrophy(senderName).trim();
					templateId = cm.replaceCommaApostrophy(templateId).trim();
					templateName = cm.replaceCommaApostrophy(templateName).trim();
					messageBody = cm.replaceCommaApostrophy(messageBody).trim();
					
					String findSmsTemplateQuery = "SELECT DISTINCT MESSAGE_BODY " + "FROM " + sessionData.getDBName() + "."
							+ "SMS_TEMPLATE WHERE SECTION_NM='"+ sessionData.getSectionName() + "' " + "AND "
							+ "(STATUS IS NULL OR STATUS='Enable')";

					statement = connection.createStatement();
					resultSet = statement.executeQuery(findSmsTemplateQuery);
					String messageBodyDB = "";
					while (resultSet.next()) {
						messageBodyDB = resultSet.getString("MESSAGE_BODY");
						if (messageBodyDB.trim().equalsIgnoreCase(messageBody.trim())) {
							validateStaffTemplate = false;
							JOptionPane.showMessageDialog(null, "SMS template: " + messageBody + " already exist");
							break;
						}
					}

					// Proceed if sms template doesn't exist
					if (validateStaffTemplate) {
						String insertStaffName = "INSERT INTO " + sessionData.getDBName() + "."
								+ "SMS_TEMPLATE (SENDER_NAME,TEMPLATE_ID,TEMPLATE_NAME,MESSAGE_BODY,STATUS,"
								+ "SECTION_NM,CREATED_DATE,CREATED_BY) " + "VALUES ('" + senderName
								+ "', '" + templateId + "', '" + templateName + "', '" + messageBody + "', 'Enable', " 
								+ "'" + sessionData.getSectionName() + "', SYSDATE(), '"
								+ sessionData.getUserName() + "')";
						statement = connection.createStatement();
						statement.executeUpdate(insertStaffName);
					}
					retFlag = true;

				} catch (Exception e) {
					cm.logException(e);
					return retFlag;
				}
			} else {
				try {
					String updateSmsTemplate = "Update " + sessionData.getDBName() + "." + "SMS_TEMPLATE set STATUS='Disable', "
							+ "MODIFIED_BY='" + createdBy.trim() + "'," + "MODIFIED_DATE=SYSDATE() where SECTION_NM='"
							+ sessionData.getSectionName().toUpperCase() + "' " + "AND MESSAGE_BODY='"
							+ messageBody + "' AND (STATUS IS NULL OR STATUS='Enable')";
					statement = connection.createStatement();
					statement.executeUpdate(updateSmsTemplate);

					retFlag = true;

				} catch (Exception e) {
					cm.logException(e);
					return retFlag;
				}
			}

			return retFlag;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		} finally {
			closeDatabase(sessionData);
		}
	}

	// /////////Find insert fee name column////////////////////////////////////////
	public boolean insertFeeNameColumn(SessionData sessionData, String fee_name, String payFrequency, String optional)
			throws Exception {

		logger.info("=========insertFeeNameColumn Query============");
		String insertQuery = "";
		String coulmnNames = "", dateColumnStr = "", colName = "", alterDateColumn = "", defaultValue = "";
		String coulmnNamesReport = "";
		String findColumnListQuery = "";
		LinkedHashMap<String, String> columnMap = new LinkedHashMap<>();
		int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
		boolean retFlag = false;

		try {
			alterDateColumn = "ALTER TABLE " + sessionData.getDBName() + "." + "FEES_DATA_MANDATORY ";

			findColumnListQuery = "select COLUMN_NAME,COLUMN_DEFAULT from INFORMATION_SCHEMA.COLUMNS where "
					+ "TABLE_NAME='FEES_DATA_MANDATORY' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnListQuery);
			while (resultSet.next()) {
				colName = resultSet.getString("COLUMN_NAME");
				defaultValue = resultSet.getString("COLUMN_DEFAULT");
				columnMap.put(colName, colName);

				if (colName.contains("_DATE") && defaultValue != null
						&& !defaultValue.equalsIgnoreCase("CURRENT_TIMESTAMP")) {
					alterDateColumn = alterDateColumn + "CHANGE " + colName + " " + colName
							+ " TIMESTAMP NOT NULL DEFAULT NOW(),";
				}
			}

			if (alterDateColumn.length() > 45) {
				try {
					alterDateColumn = alterDateColumn.substring(0, alterDateColumn.length() - 1);
					statement = connection.createStatement();
					statement.executeUpdate(alterDateColumn);
				} catch (Exception e) {
					logger.warn(
							"failed to modify column name " + alterDateColumn + " in FEES_DATA_MANDATORY >> " + e);
				}
			}

			try {
				String getDataTypeQuery = "select column_name,data_type from information_schema.columns where "
						+ "table_schema = '"+sessionData.getDBName()+"' and table_name = 'fees_report_mandatory' "
						+ "and column_name='MODIFIED_DATE'";

				statement = connection.createStatement();
				resultSet = statement.executeQuery(getDataTypeQuery);
				String modifiedDateType = "";
				while (resultSet.next()) {
					modifiedDateType = resultSet.getString("DATA_TYPE");
				}
				
				if(!modifiedDateType.equalsIgnoreCase("DATETIME")){
					statement = connection.createStatement();
					statement.executeUpdate("ALTER TABLE "+sessionData.getDBName()+".fees_report_mandatory DROP COLUMN MODIFIED_DATE");
					
					alterDateColumn = "Alter Table "+sessionData.getDBName()+"."+"fees_report_mandatory ADD MODIFIED_DATE DATETIME ON UPDATE CURRENT_TIMESTAMP";
					statement = connection.createStatement();
					statement.executeUpdate(alterDateColumn);
				}
			}
			catch(Exception e) {
				logger.warn("failed to modify column name MODIFIED_DATE in FEES_REPORT_MANDATORY >> "+e);
			}

//			if(optional.equalsIgnoreCase("No")){
			if (payFrequency.equalsIgnoreCase("Monthly") || payFrequency.equalsIgnoreCase("Occasionally")) {
				if (!colName.contains(fee_name.toUpperCase() + "_JAN"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_JAN double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_JAN_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_JAN_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_FEB"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_FEB double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_FEB_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_FEB_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_MAR"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_MAR double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_MAR_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_MAR_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_APR"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_APR double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_APR_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_APR_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_MAY"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_MAY double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_MAY_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_MAY_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_JUN"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_JUN double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_JUN_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_JUN_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_JUL"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_JUL double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_JUL_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_JUL_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_AUG"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_AUG double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_AUG_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_AUG_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_SEP"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_SEP double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_SEP_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_SEP_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_OCT"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_OCT double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_OCT_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_OCT_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_NOV"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_NOV double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_NOV_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_NOV_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_DEC"))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_DEC double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_DEC_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_DEC_BANK  TEXT";

				coulmnNames = coulmnNames.substring(1);
			} else if (payFrequency.equalsIgnoreCase("Quarterly")) {
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "")))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "")
							+ " double DEFAULT NULL," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth(startMonth + "") + "_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "") + "_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 3) + "")))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 3) + "") + " double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 3) + "")
							+ "_DATE DATETIME," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 3) + "") + "_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 6) + "")))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 6) + "") + " double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 6) + "")
							+ "_DATE DATETIME," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 6) + "") + "_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 9) + "")))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 9) + "") + " double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 9) + "")
							+ "_DATE DATETIME," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 9) + "") + "_BANK  TEXT";

				coulmnNames = coulmnNames.substring(1);
			} else if (payFrequency.equalsIgnoreCase("Half Yearly")) {
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "")))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "")
							+ " double DEFAULT NULL," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth(startMonth + "") + "_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "") + "_BANK  TEXT";
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 6) + "")))
					coulmnNames = coulmnNames + "," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 6) + "") + " double DEFAULT NULL,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth((startMonth + 6) + "")
							+ "_DATE DATETIME," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth((startMonth + 6) + "") + "_BANK  TEXT";

				coulmnNames = coulmnNames.substring(1);
			} else if (payFrequency.equalsIgnoreCase("Yearly")) {
				if (!colName.contains(fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "")))
					coulmnNames = fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "")
							+ " double DEFAULT NULL," + fee_name.toUpperCase() + "_"
							+ cm.intgerToMonth(startMonth + "") + "_DATE DATETIME,"
							+ fee_name.toUpperCase() + "_" + cm.intgerToMonth(startMonth + "") + "_BANK  TEXT";
			}

			if (coulmnNames.length() > 1) {
				try {
					insertQuery = "ALTER TABLE " + sessionData.getDBName() + "." + "FEES_DATA_MANDATORY ADD ("
							+ coulmnNames + ")";
					logger.info("insert FEES_DATA_MANDATORY Column query == " + insertQuery);
					statement = connection.createStatement();
					statement.executeUpdate(insertQuery);
				}
				catch (Exception e) {
					logger.warn("failed to create column name for subect " + fee_name + " in FEES_DATA_MANDATORY >> " + e);
				}

				try {
					insertQuery = "ALTER TABLE " + sessionData.getDBName() + "." + "FEES_REPORT_MANDATORY ADD ("
							+ fee_name.toUpperCase() + " double UNSIGNED)";
					logger.info("insert FEES_REPORT_MANDATORY Column query == " + insertQuery);
					statement = connection.createStatement();
					statement.executeUpdate(insertQuery);
				}
				catch (Exception e) {
					logger.warn("failed to create column name for subect " + fee_name + " in FEES_REPORT_MANDATORY >> " + e);
				}
				
			}

//			}
//			else{
//				findColumnListQuery = "select COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where "
//						+ "TABLE_NAME='FEES_DATA_OPTIONAL' AND TABLE_SCHEMA='"+sessionData.getDBName()+"'";
//				statement = connection.createStatement();
//				resultSet = statement.executeQuery(findColumnListQuery);
//				while (resultSet.next()) {
//					columnList.add(resultSet.getString("COLUMN_NAME"));
//				}
//				
//				if(!columnList.contains(fee_name.toUpperCase()))
//					coulmnNames = coulmnNames + fee_name.toUpperCase() + " double DEFAULT NULL,"+fee_name.toUpperCase() + "_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',"+fee_name.toUpperCase() + "_BANK  TEXT";
//				
//				insertQuery = "ALTER TABLE "+sessionData.getDBName()+"."+"FEES_DATA_OPTIONAL ADD (" + coulmnNames + ")";
//				logger.info("insert FEES_DATA_OPTIONAL Column query == " + insertQuery);
//				statement = connection.createStatement();
//				statement.executeUpdate(insertQuery);
//				
//				insertQuery = "ALTER TABLE "+sessionData.getDBName()+"."+"FEES_REPORT_OPTIONAL ADD (" + fee_name.toUpperCase() + " double DEFAULT NULL)";
//				logger.info("insert FEES_REPORT_MANDATORY Column query == " + insertQuery);
//				statement = connection.createStatement();
//				statement.executeUpdate(insertQuery);
//			}

			logger.info("column for fees name " + fee_name + " & " + payFrequency + " inserted successfully..");
			retFlag = true;
		} catch (Exception e) {
			logger.warn("failed to create column name for subect " + fee_name + " in FEES_DATA_MANDATORY >> " + e);
		}
		return retFlag;
	}

	/////////// check if feeshead is valid to
	/////////// edit/delete////////////////////////////////////////
	public boolean isFeesEditable(SessionData sessionData, String academic, String std, String section, String optional,
			String feesHead) throws Exception {
		logger.info("=========isFeesEditable Query============");
		LinkedHashMap<String, LinkedHashMap<String, String>> retFeesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String findFeesHeadQuery, tableName = "";
		Double feeValue = 0.0;

		try {
			feesHead = cm.replaceCommaApostrophy(feesHead);

			if (optional.equalsIgnoreCase("No")) {
				tableName = "fees_report_mandatory";
			} else {
				tableName = "fees_report_optional";
			}
			findFeesHeadQuery = "SELECT " + feesHead + " FROM " + sessionData.getDBName() + "." + tableName
					+ " WHERE ACADEMIC_YEAR='" + academic + "' " + "AND STD_1='" + std + "' AND " + "SECTION_NM='"
					+ section + "' and " + feesHead + " > 0 limit 1";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFeesHeadQuery);

			while (resultSet.next()) {
//				LinkedHashMap<String, String> feesHeadDetailMap = new LinkedHashMap<String, String>();
//				feeValue = resultSet.getDouble(feesHead.toUpperCase());
//				if(feeValue > 0){
				return false;
//				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return true;
	}

	/////////// get Fees Head Data////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getFeesHeadData(SessionData sessionData,
			String academic, String std, String section, String category) throws Exception {
		LinkedHashMap<String, LinkedHashMap<String, String>> retFeesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String findFeesHeadQuery, addToCondition = "";
		String fees_name, categorydb, amount, frequency, optionaldb, order_no, shortName = "", stdDb = "";

		try {
//			retFeesHeadMap.put("Select", null);
			if (!category.equalsIgnoreCase("")) {
				addToCondition = " AND CATEGORY='" + category + "'";
			}
			if (std.contains(",")) {
				addToCondition += " AND STD_1 IN (" + std + ")";
			} else {
				addToCondition += " AND STD_1='" + std + "'";
			}

			findFeesHeadQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "FEES_HEAD WHERE ACADEMIC_YEAR='"
					+ academic + "' " + "AND SECTION_NM='" + section + "' " + addToCondition + " ORDER BY STD_1,ORDER_NO";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFeesHeadQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> feesHeadDetailMap = new LinkedHashMap<String, String>();
				stdDb = resultSet.getString("STD_1") == null ? "" : (resultSet.getString("STD_1").trim());
				feesHeadDetailMap.put("std", stdDb);
				fees_name = resultSet.getString("FEES_NAME") == null ? "" : (resultSet.getString("FEES_NAME").trim());
				fees_name = cm.replaceCommaApostrophy(fees_name);
				feesHeadDetailMap.put("fees_name", fees_name);
				categorydb = resultSet.getString("CATEGORY") == null ? "" : (resultSet.getString("CATEGORY").trim());
				feesHeadDetailMap.put("category", categorydb);
				amount = resultSet.getString("AMOUNT") == null ? "" : (resultSet.getString("AMOUNT").trim());
				feesHeadDetailMap.put("amount", amount);
				frequency = resultSet.getString("FREQUENCY") == null ? "" : (resultSet.getString("FREQUENCY").trim());
				feesHeadDetailMap.put("frequency", frequency);
				optionaldb = resultSet.getString("OPTIONAL") == null ? "" : (resultSet.getString("OPTIONAL").trim());
				feesHeadDetailMap.put("optional", optionaldb);
				order_no = resultSet.getString("ORDER_NO") == null ? "" : (resultSet.getString("ORDER_NO").trim());
				feesHeadDetailMap.put("order_no", order_no);
				shortName = resultSet.getString("SHORT_NAME") == null ? "" : (resultSet.getString("SHORT_NAME").trim());
				shortName = cm.replaceCommaApostrophy(shortName);
				feesHeadDetailMap.put("short_name", shortName);

				if (retFeesHeadMap.get(fees_name) == null) {
					retFeesHeadMap.put(fees_name, feesHeadDetailMap);
				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return retFeesHeadMap;
	}
	
//	/////////// get Fees Head Data with Std////////////////////////////////////////
//	public LinkedHashMap<String, String> getFeesHeadDataWithStd(SessionData sessionData,
//			String academic, String std, String section, String category) throws Exception {
//		LinkedHashMap<String, String> retFeesHeadMap = new LinkedHashMap<String, String>();
//		String findFeesHeadQuery, addToCondition = "";
//		String fees_name, categorydb, amount, frequency, optionaldb, order_no, shortName = "";
//	
//		try {
//			if (!category.equalsIgnoreCase("")) {
//				addToCondition = " AND CATEGORY='" + category + "'";
//			}
//			if (std.contains(",")) {
//				addToCondition += " AND STD_1 IN (" + std + ")";
//			} else {
//				addToCondition += " AND STD_1='" + std + "'";
//			}
//	
//			findFeesHeadQuery = "SELECT DISTINCT FEES_NAME,FREQUENCY FROM " + sessionData.getDBName() + "." + "FEES_HEAD WHERE ACADEMIC_YEAR='"
//					+ academic + "' " + "AND SECTION_NM='" + section + "' " + addToCondition + " ORDER BY ORDER_NO";
//			statement = connection.createStatement();
//			resultSet = statement.executeQuery(findFeesHeadQuery);
//	
//			while (resultSet.next()) {
//				fees_name = resultSet.getString("FEES_NAME") == null ? "" : (resultSet.getString("FEES_NAME").trim());
//				fees_name = cm.replaceCommaApostrophy(fees_name);
//				frequency = resultSet.getString("FREQUENCY") == null ? "" : (resultSet.getString("FREQUENCY").trim());
//	
//				if (retFeesHeadMap.get(fees_name) == null) {
//					retFeesHeadMap.put(fees_name, frequency);
//				} else if(retFeesHeadMap.get(fees_name).equalsIgnoreCase(frequency)) {
//					retFeesHeadMap = null;
//					JOptionPane.showMessageDialog(null, "Duplicate Fees with differet frequency. Please contact administrator.");
//					break;
//				}
//			}
//	
//		} catch (Exception e) {
//			cm.logException(e);
//		}
//		return retFeesHeadMap;
//	}

	/////////// get free student Data from HS General
	/////////// Register////////////////////////////////////////
	public LinkedHashMap<String, String> getFreeStudentData(SessionData sessionData, String academic, String std,
			String div, String section) throws Exception {
		LinkedHashMap<String, String> retFreeStudentDataMap = new LinkedHashMap<String, String>();
		String findFreeStudentQuery, addToCondition = "";
		String gr_no, paying_free = "";

		try {
			logger.info("=========getFreeStudentData============");
			if (!std.equalsIgnoreCase("") && !std.equalsIgnoreCase("All")) {
				addToCondition += " AND CLASS_ALLOTMENT.PRESENT_STD = '" + std + "'";
			}
			if (!div.equalsIgnoreCase("") && !div.equalsIgnoreCase("All")) {
				addToCondition += " AND CLASS_ALLOTMENT.PRESENT_DIV = '" + div + "'";
			}

//			findFreeStudentQuery = "SELECT GR_NO,PAYING_FREE FROM " + sessionData.getDBName() + "."
//					+ "hs_general_register WHERE ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='" + section
//					+ "' " + addToCondition + "";
			
			findFreeStudentQuery = "SELECT CLASS_ALLOTMENT.GR_NO,HS_GENERAL_REGISTER.PAYING_FREE "
					+ "FROM "+sessionData.getDBName()+".HS_GENERAL_REGISTER LEFT JOIN "+sessionData.getDBName()+".CLASS_ALLOTMENT ON "
					+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM  "
					+ "WHERE CLASS_ALLOTMENT.ACADEMIC_YEAR='" + academic + "' " + "AND CLASS_ALLOTMENT.SECTION_NM='" + section
					+ "' " + addToCondition + "";
			
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFreeStudentQuery);

			while (resultSet.next()) {
				gr_no = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				paying_free = resultSet.getString("PAYING_FREE") == null ? ""
						: (resultSet.getString("PAYING_FREE").trim());
				retFreeStudentDataMap.put(gr_no, paying_free);
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return retFreeStudentDataMap;
	}

	/////////// get Staff SMS Data////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getStaffSMSData(SessionData sessionData,
			String academic) throws Exception {
		LinkedHashMap<String, LinkedHashMap<String, String>> retStaffDetailsMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String findStaffDetailsQuery, addToCondition = "";
		String staffName, designation, contact, std, div, smsEnabled = "";

		try {
			findStaffDetailsQuery = "SELECT * FROM " + sessionData.getDBName() + "."
					+ "STAFF_DATA WHERE ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='"
					+ sessionData.getSectionName() + "' AND STATUS IS NULL ORDER BY CREATED_DATE ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findStaffDetailsQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> staffDetailMap = new LinkedHashMap<String, String>();
				staffName = resultSet.getString("STAFF_NAME") == null ? "" : (resultSet.getString("STAFF_NAME").trim());
				staffDetailMap.put("staffName", staffName);
				designation = resultSet.getString("DESIGNATION") == null ? ""
						: (resultSet.getString("DESIGNATION").trim());
				staffDetailMap.put("designation", designation);
				contact = resultSet.getString("CONTACT_1") == null ? "" : (resultSet.getString("CONTACT_1").trim());
				staffDetailMap.put("contact", contact);
				std = resultSet.getString("STD_1") == null ? "" : (resultSet.getString("STD_1").trim());
				staffDetailMap.put("std", std);
				div = resultSet.getString("DIV_1") == null ? "" : (resultSet.getString("DIV_1").trim());
				staffDetailMap.put("div", div);
				smsEnabled = resultSet.getString("SMS_FEE_ENABLED") == null ? ""
						: (resultSet.getString("SMS_FEE_ENABLED").trim());
				staffDetailMap.put("smsEnabled", smsEnabled);

				if (retStaffDetailsMap.get(staffName) == null) {
					retStaffDetailsMap.put(staffName, staffDetailMap);
				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return retStaffDetailsMap;
	}
	
	/////////// get SMS temaplate Data////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getSMSTemplateData(SessionData sessionData) throws Exception {
		LinkedHashMap<String, LinkedHashMap<String, String>> retSmsTemplateDetailsMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String findsmsTemplateDetailsQuery, addToCondition = "";
		String senderName, templateId, templateName, messageBody = "";
	
		try {
			findsmsTemplateDetailsQuery = "SELECT * FROM " + sessionData.getDBName() + "."
					+ "SMS_TEMPLATE WHERE SECTION_NM='"+ sessionData.getSectionName() + "' AND STATUS = 'Enable' ORDER BY CREATED_DATE ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findsmsTemplateDetailsQuery);
	
			while (resultSet.next()) {
				LinkedHashMap<String, String> smsTemplateDetailMap = new LinkedHashMap<String, String>();
				senderName = resultSet.getString("SENDER_NAME") == null ? "" : (resultSet.getString("SENDER_NAME").trim());
				senderName = cm.revertCommaApostrophy(senderName);
				smsTemplateDetailMap.put("senderName", senderName);
				templateId = resultSet.getString("TEMPLATE_ID") == null ? "" : (resultSet.getString("TEMPLATE_ID").trim());
				templateId = cm.revertCommaApostrophy(templateId);
				smsTemplateDetailMap.put("templateId", templateId);
				templateName = resultSet.getString("TEMPLATE_NAME") == null ? "" : (resultSet.getString("TEMPLATE_NAME").trim());
				templateName = cm.revertCommaApostrophy(templateName);
				smsTemplateDetailMap.put("templateName", templateName);
				messageBody = resultSet.getString("MESSAGE_BODY") == null ? "" : (resultSet.getString("MESSAGE_BODY").trim());
				messageBody = cm.revertCommaApostrophy(messageBody);
				smsTemplateDetailMap.put("messageBody", messageBody);
				
	
				if (retSmsTemplateDetailsMap.get(messageBody) == null) {
					retSmsTemplateDetailsMap.put(messageBody, smsTemplateDetailMap);
				}
			}
	
		} catch (Exception e) {
			cm.logException(e);
		}
		return retSmsTemplateDetailsMap;
	}

	/////////// get SMS temaplate String////////////////////////////////////////
	public String getSMSTemplateStr(SessionData sessionData) throws Exception {
		String findsmsTemplateDetailsQuery;
		String smsTemplateStr = "", messageTemplateName = "";
	
		try {
			findsmsTemplateDetailsQuery = "SELECT * FROM " + sessionData.getDBName() + "."
					+ "SMS_TEMPLATE WHERE SECTION_NM='"+ sessionData.getSectionName() + "' AND STATUS = 'Enable' ORDER BY CREATED_DATE ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findsmsTemplateDetailsQuery);
	
			while (resultSet.next()) {
				messageTemplateName = resultSet.getString("TEMPLATE_NAME") == null ? "" : (resultSet.getString("TEMPLATE_NAME").trim().toString());
				smsTemplateStr = smsTemplateStr + cm.revertCommaApostrophy(messageTemplateName) +"|";
			}
			smsTemplateStr = smsTemplateStr.substring(0, smsTemplateStr.length()-1);
		} catch (Exception e) {
			cm.logException(e);
		}
		return smsTemplateStr;
	}
	
	/////////// get SMS temaplate ID////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getSMSTemplateIdMap(SessionData sessionData) throws Exception {
		LinkedHashMap<String, LinkedHashMap<String, String>> retSmsTemplateIdMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String findsmsTemplateDetailsQuery;
		String tempId = "", messageBody = "", tempName = "";
	
		try {
			findsmsTemplateDetailsQuery = "SELECT * FROM " + sessionData.getDBName() + "."
					+ "SMS_TEMPLATE WHERE SECTION_NM='"+ sessionData.getSectionName() + "' AND STATUS = 'Enable' ORDER BY CREATED_DATE ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findsmsTemplateDetailsQuery);
	
			while (resultSet.next()) {
				LinkedHashMap<String, String> smsTemplateNameMap = new LinkedHashMap<String, String>();
				tempId = resultSet.getString("TEMPLATE_ID") == null ? "" : (resultSet.getString("TEMPLATE_ID").trim().toString());
				smsTemplateNameMap.put("templateId", tempId);
				tempName = resultSet.getString("TEMPLATE_NAME") == null ? "" : (resultSet.getString("TEMPLATE_NAME").trim().toString());
				smsTemplateNameMap.put("templateName", tempName);
				messageBody = resultSet.getString("MESSAGE_BODY") == null ? "" : (resultSet.getString("MESSAGE_BODY").trim().toString());
				messageBody =  cm.revertCommaApostrophy(messageBody);
				smsTemplateNameMap.put("messageBody", messageBody);
				retSmsTemplateIdMap.put(tempName, smsTemplateNameMap);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return retSmsTemplateIdMap;
	}

	/////////// get consolidated Fees Head
	/////////// Data////////////////////////////////////////
	public LinkedHashMap<String, String> getConsolidatedFeesHead(SessionData sessionData, String academic,
			String section, String category) throws Exception {
		logger.info("=========getConsolidatedFeesHead Query============");
		LinkedHashMap<String, String> retFeesHeadMap = new LinkedHashMap<String, String>();
		String findFeesHeadQuery = "";
		String fees_name, amount, frequency, optionaldb, order_no = "";

		try {
			findFeesHeadQuery = "SELECT FEES_NAME,FREQUENCY FROM " + sessionData.getDBName() + "." + "FEES_HEAD "
					+ "WHERE CATEGORY = '" + category + "' and SECTION_NM='" + section + "' and ACADEMIC_YEAR='"
					+ academic + "' ORDER BY FEES_NAME,FREQUENCY";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFeesHeadQuery);

			while (resultSet.next()) {
				fees_name = resultSet.getString("FEES_NAME") == null ? "" : (resultSet.getString("FEES_NAME").trim());
				fees_name = cm.replaceCommaApostrophy(fees_name);
				frequency = resultSet.getString("FREQUENCY") == null ? "" : (resultSet.getString("FREQUENCY").trim());

				if (retFeesHeadMap.get(fees_name) == null) {
					retFeesHeadMap.put(fees_name, frequency);
				} else if ((cm.frequencyToInteger(retFeesHeadMap.get(fees_name)) < cm.frequencyToInteger(frequency))) {
					retFeesHeadMap.put(fees_name, frequency);
				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return retFeesHeadMap;
	}

	/// delete fee name/////
	public boolean deleteFeeName(SessionData sessionData, String orderNo) throws Exception {

		boolean updateFlag = false;
		String deleteFeeName = "";
		int udpdateCount = 0;
		try {
			deleteFeeName = "DELETE FROM " + sessionData.getDBName() + "." + "FEES_HEAD WHERE order_no='" + orderNo
					+ "'";

			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(deleteFeeName);
			if (udpdateCount > 0) {
				updateFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return updateFlag;
	}

	/// delete staff name/////
	public boolean deleteStaffName(SessionData sessionData, String staffName, String designation, String contact,
			String std, String div, String sms, String academic) throws Exception {

		boolean updateFlag = false;
		String deleteStaffName = "";
		int udpdateCount = 0;
		String createdBy = sessionData.getUserName();
		try {
//			deleteStaffName = "DELETE FROM "+sessionData.getDBName()+"."+"STAFF_DATA WHERE order_no='" + orderNo + "'";

			deleteStaffName = "Update " + sessionData.getDBName() + "." + "STAFF_DATA set " + "MODIFIED_BY='"
					+ createdBy.trim() + "',STATUS='DELETE'," + "MODIFIED_DATE=SYSDATE() where SECTION_NM='"
					+ sessionData.getSectionName().toUpperCase() + "' " + "AND STAFF_NAME='" + staffName.toUpperCase()
					+ "' AND DESIGNATION='" + designation + "' " + "AND CONTACT_1='" + contact + "' AND STD_1='" + std
					+ "' AND DIV_1='" + div + "' AND STATUS IS NULL " + "AND ACADEMIC_YEAR='" + academic + "'";

			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(deleteStaffName);
			if (udpdateCount > 0) {
				updateFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return updateFlag;
	}
	
	/// delete sms template/////
	public boolean deleteSmsTemplate(SessionData sessionData, String sender, String tempId, String tempName,
			String messageBody) throws Exception {

		boolean updateFlag = false;
		String deleteSmsTemplate = "";
		int udpdateCount = 0;
		String createdBy = sessionData.getUserName();
		try {
			deleteSmsTemplate = "Update " + sessionData.getDBName() + "." + "SMS_TEMPLATE set " + "MODIFIED_BY='"
					+ createdBy.trim() + "',STATUS='Disable'," + "MODIFIED_DATE=SYSDATE() where SECTION_NM='"
					+ sessionData.getSectionName().toUpperCase() + "' " + "AND SENDER_NAME='" + sender
					+ "' AND TEMPLATE_ID='" + tempId + "' " + "AND TEMPLATE_NAME='" + tempName + "'";

			statement = connection.createStatement();
			udpdateCount = statement.executeUpdate(deleteSmsTemplate);
			if (udpdateCount > 0) {
				updateFlag = true;
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return updateFlag;
	}

	/////////// getFeesCategoryList////////////////////////////////////////
	public String getFeesCategoryList(SessionData sessionData, String academic, String std, String section,
			String columnName, String tableName) throws Exception {
		logger.info("=========getFeesCategoryList Query============");
		String findFeesCategoryList = "", category = "", condition = "";
		String feesCategoryList = "Select";
		String[] splitList;
		LinkedHashMap<String, String> retFeesMap = new LinkedHashMap<String, String>();

		try {
			if (columnName.equalsIgnoreCase("CATEGORY")) {
				feesCategoryList = sessionData.getConfigMap().get("FEE_CATEGORY");

				splitList = feesCategoryList.split(",");
				for (int i = 0; i < splitList.length; i++) {
					retFeesMap.put(splitList[i], "");
				}
			}
			if (!std.equalsIgnoreCase("") && !std.equalsIgnoreCase("All")) {
				condition = " AND STD_1='" + std + "'";
			}

			findFeesCategoryList = "SELECT DISTINCT(" + columnName + ") FROM " + sessionData.getDBName() + "."
					+ tableName + " WHERE ACADEMIC_YEAR='" + academic + "' " + condition + " AND SECTION_NM='" + section
					+ "' ORDER BY " + columnName + " ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFeesCategoryList);

			while (resultSet.next()) {
				category = resultSet.getString(columnName) == null ? "" : (resultSet.getString(columnName).trim());
				if (retFeesMap.get(category) == null) {
					feesCategoryList = feesCategoryList + "," + category;
					retFeesMap.put(category, "");
				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		if (columnName.equalsIgnoreCase("CATEGORY")) {
			feesCategoryList = feesCategoryList + ",Other";
		}
		return feesCategoryList;
	}

	/////////// getSMSStaffList////////////////////////////////////////
	public String getSMSStaffList(SessionData sessionData, String academic, String std, String section,
			String columnName, String tableName) throws Exception {
		logger.info("=========getFeesCategoryList Query============");
		String findFeesCategoryList = "", category = "", condition = "";
		String feesCategoryList = "Select";
		String[] splitList;
		LinkedHashMap<String, String> retFeesMap = new LinkedHashMap<String, String>();

		try {
			if (columnName.equalsIgnoreCase("CATEGORY")) {
				feesCategoryList = sessionData.getConfigMap().get("FEE_CATEGORY");

				splitList = feesCategoryList.split(",");
				for (int i = 0; i < splitList.length; i++) {
					retFeesMap.put(splitList[i], "");
				}
			}
			if (!std.equalsIgnoreCase("") && !std.equalsIgnoreCase("All")) {
				condition = " AND STD_1='" + std + "'";
			}

			findFeesCategoryList = "SELECT DISTINCT(" + columnName + ") FROM " + sessionData.getDBName() + "."
					+ tableName + " WHERE ACADEMIC_YEAR='" + academic + "' " + condition + " AND SECTION_NM='" + section
					+ "' ORDER BY " + columnName + " ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFeesCategoryList);

			while (resultSet.next()) {
				category = resultSet.getString(columnName) == null ? "" : (resultSet.getString(columnName).trim());
				if (retFeesMap.get(category) == null) {
					feesCategoryList = feesCategoryList + "," + category;
					retFeesMap.put(category, "");
				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		if (columnName.equalsIgnoreCase("CATEGORY")) {
			feesCategoryList = feesCategoryList + ",Other";
		}
		return feesCategoryList;
	}

	/////////// updateFeeData////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> updateSelectedFeeData(SessionData sessionData,
			LinkedHashMap<String, LinkedHashMap<String, String>> selectedStudentMap,
			LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap, String academic, String category,
			String frequency, String subFrequency, LinkedHashMap<String, LinkedHashMap<String, String>> feesPaymentMap,
			double totalAmount, String oldAcademic, String oldStd,
			LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMapTmp, String feesForMonths,
			double balanceAmount, double prevBalanceAmount) {

		boolean feeTableUpdated = false;
		boolean isUpdate = false;
		boolean isUpdateFeesReport = false;
		double totalReportAmount = 0, totalAmountTmp = 0;
		LinkedHashMap<String, String> feesTypeWhenMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> feesTypeSumMap = new LinkedHashMap<String, Double>();
		String chequeDetail = "", ddDetail = "";
		String checkStudentQuery = "";
		String insertFieldsCommon = "ACADEMIC_YEAR,CREATED_DATE,CREATED_BY,SECTION_NM,TOTAL_AMOUNT";
		String insertValuesCommon = "'" + academic + "',SYSDATE(),'" + sessionData.getUserName() + "','"
				+ sessionData.getSectionName() + "'," + totalAmount;
		String insertFields = "";
		String insertValues = "";
		String feeDataQuery = "";
		String insertReportFieldsCommon = "ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CREATED_DATE,CREATED_BY,SECTION_NM,FEE_DATE,CASH_TOTAL,CHEQUE_TOTAL_DD_TOTAL";
		String insertReportCommon = "'" + academic + "','Pending',IF(TOTAL_AMOUNT IS NULL, 0, TOTAL_AMOUNT) + "
				+ totalAmount + "," + "SYSDATE(),'" + sessionData.getUserName() + "','" + sessionData.getSectionName()
				+ "',SYSDATE()";
		String insertReportFields = "";
		String insertReport = "";
		String feeReportQuery = "";
		String updateFeeAmount = "";
		String grNo = "";
		String rollNo = "", optionalFee = "";
		String name = "";
		String std = "";
		String div = "";
		String paymentMode = "", subFee = "";
		boolean isOptional = false;
		String bank = "NA";
		String chequeDDNo = "NA";
		String chequeDDDate = "NA";
		String feesType = "", optional = "";
		double amount = 0;
		double feeAmount = 0;
		double cashAmount = 0, optionalAmt = 0;
		double chequeAmount = 0;
		double ddAmount = 0;
		Double multiOptAmt = 0.0;
		int count = 0, m = 1;
		String grList = "", stdList = "", divList = "", feeList = "", dateList = "", bankList = "";
		String currentDate = cm.dateToYYYYMMDD(new Date());
		LinkedHashMap studentDetailMap = new LinkedHashMap();
		LinkedHashMap monthMap = new LinkedHashMap();
		String paymentDetails = ""; // paymentMode +"^"+ bank +"^"+ chequeDDNo +"^"+ chequeDDDate +"^"+
									// penaltyAmount +"^"+ concessionAmount +"^"+ receiptNo +"^"+ feesForMonths
									// +"^"+ remark +"^A" +"^"+ balanceAmount +"^"+ prevBalanceAmount;
		List<String> passGrList = new ArrayList();
		LinkedHashMap foundStudentMap = new LinkedHashMap<>();
		LinkedHashMap grMap = new LinkedHashMap<>();
		String smsText = "", sms_fee_flag = "", smsTemplate = "", smsTemplateId = "", smsPeId = "";
		String smsType = "Send Sms";
		String grNoSms = "", stdSms = "", divSms = "", rollSms = "", nameSms = "", contact1Sms = "", contact2Sms = "",
				receiptNoSms = "";
		String mandate_opt = "MANDATORY";
		LinkedHashMap<String, String> studentMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, LinkedHashMap<String, String>> studentOptMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> multiFeeHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String[] optionalList;

		JFrame f = new JFrame();
		f.setBounds(sessionData.getScreenWidth() / 2 - 150, sessionData.getScreenHeight() / 2, 90, 25);
		f.setSize(500, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {

			Set setFees = feesPaymentMap.entrySet();
			// iterate students
			Set set = selectedStudentMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {

				bank = "NA";
				chequeDDNo = "NA";
				chequeDDDate = "NA";
				optionalFee = "";
				optionalList = null;
				feesHeadMapTmp.putAll(feesHeadMap);
				totalAmountTmp = totalAmount;
				Map.Entry me = (Map.Entry) i.next();
				grNo = me.getKey().toString();
				grList = grList + ",'" + grNo + "'";
				studentDetailMap = selectedStudentMap.get(grNo);
				f.setTitle("Update fee for " + m + " student");

				rollNo = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("rollNo").toString();
				name = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("name").toString();
				std = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("std").toString();
				multiFeeHeadMap = fetchMultipleHeadMap(sessionData, academic, std, "");
				stdList = stdList + ",'" + std + "'";
				div = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("div").toString();
				divList = divList + ",'" + div + "'";
				paymentMode = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("paymentMode").toString();
				studentOptMap = insertNewFeeAllotStudents(sessionData, std, div, academic, "", "");

				if (studentOptMap.get(grNo) != null) {
					optionalFee = ((LinkedHashMap<?, ?>) studentOptMap.get(grNo)).get("optional_fee").toString();
					optionalList = optionalFee.split("\\|");
				}

				if (!oldAcademic.equalsIgnoreCase("")) {
					String[] nameSplit = name.split(" ");
					String last = nameSplit[0];
					String first = nameSplit[1];
					String father = nameSplit[2];
					studentMap.put(grNo, name + "|" + grNo + "|" + rollNo + "|" + std + "|" + div + "|" + last + "|"
							+ first + "|" + father);
				}

				if (selectedStudentMap.get(me.getKey()).get("bank") != null)
					bank = selectedStudentMap.get(me.getKey()).get("bank") == null ? "NA"
							: ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("bank").toString();
				if (selectedStudentMap.get(me.getKey()).get("chequeDDNo") != null)
					chequeDDNo = selectedStudentMap.get(me.getKey()).get("chequeDDNo") == null ? "NA"
							: ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("chequeDDNo").toString();
				if (selectedStudentMap.get(me.getKey()).get("chequeDDDate") != null)
					chequeDDDate = selectedStudentMap.get(me.getKey()).get("chequeDDDate") == null ? "NA"
							: ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("chequeDDDate")
									.toString();

				count = updateCountData(sessionData, academic, sessionData.getSectionName(), "FEE_RECEIPT", "");
				paymentDetails = paymentMode + "^" + bank + "^" + chequeDDNo + "^" + chequeDDDate + "^0^0^" + count
						+ "^" + feesForMonths + "^ ^A" + "^" + balanceAmount + "^" + prevBalanceAmount;
				studentDetailMap.put("receiptNo", count + "");

				checkStudentQuery = "SELECT * from FEES_DATA_" + mandate_opt + " WHERE STD_1='" + std + "' AND DIV_1='"
						+ div + "' AND ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='"
						+ sessionData.getSectionName() + "' and GR_NO='" + grNo + "'";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(checkStudentQuery);
				while (resultSet.next()) {
					isUpdate = true;
				}

				if (isUpdate) {
					// iterate feesPaymentMap
					Iterator iFees = setFees.iterator();
					while (iFees.hasNext()) {
						Map.Entry meFees = (Map.Entry) iFees.next();
						feesType = meFees.getKey().toString();
						feeAmount = 0;
						subFee = "";
						isOptional = false;
						if (feesHeadMap.get(feesType) != null) {
							optional = ((LinkedHashMap<?, ?>) feesHeadMap.get(feesType)).get("optional").toString();
							optionalAmt = Double.parseDouble(
									((LinkedHashMap<?, ?>) feesHeadMap.get(feesType)).get("amount").toString())
									/ cm.frequencyToInteger(frequency);
						}

						if(optionalList != null) {
							for (int n = 0; n < optionalList.length; n++) {
								if (optionalList[n].contains(feesType + "^") && subFee.equalsIgnoreCase("")) {
									subFee = optionalList[n].substring(optionalList[n].indexOf("^") + 1);
									isOptional = true;
									if (!subFee.equalsIgnoreCase("")) {
										feesHeadMapTmp.get(feesType).put("amount",
												((LinkedHashMap<?, ?>) multiFeeHeadMap.get(subFee)).get("amount")
														.toString());
										multiOptAmt = Double.parseDouble(((LinkedHashMap<?, ?>) multiFeeHeadMap.get(subFee))
												.get("amount").toString()) / monthMap.size();
										totalAmountTmp = totalAmountTmp - optionalAmt
												+ (Double.parseDouble(((LinkedHashMap<?, ?>) multiFeeHeadMap.get(subFee))
														.get("amount").toString())) / cm.frequencyToInteger(frequency);
										optionalAmt = Double.parseDouble(((LinkedHashMap<?, ?>) multiFeeHeadMap.get(subFee))
												.get("amount").toString());
										subFee = " (" + subFee + ")";
									}
									break;
								}
							}
						}
						
						monthMap = (LinkedHashMap) meFees.getValue();

						if (optional.equalsIgnoreCase("No") || (optional.equalsIgnoreCase("Yes") && isOptional)) {
							if (paymentMode.equalsIgnoreCase("CASH")) {
								cashAmount = cashAmount + optionalAmt;
							} else if (paymentMode.equalsIgnoreCase("CHEQUE")) {
								chequeAmount = chequeAmount + optionalAmt;
								chequeDetail = chequeDetail + "|" + paymentDetails;
							} else if (paymentMode.equalsIgnoreCase("DD")) {
								ddAmount = ddAmount + optionalAmt;
								ddDetail = ddDetail + "|" + paymentDetails;
							}
						} else if (!optional.equalsIgnoreCase("")) {
							if (paymentMode.equalsIgnoreCase("CASH")) {
								cashAmount = cashAmount + optionalAmt;
							} else if (paymentMode.equalsIgnoreCase("CHEQUE")) {
								chequeAmount = chequeAmount + optionalAmt;
							} else if (paymentMode.equalsIgnoreCase("DD")) {
								ddAmount = ddAmount + optionalAmt;
							}
							continue;
						}
						// iterate month
						Set setMonth = monthMap.entrySet();
						Iterator iMonth = setMonth.iterator();
						while (iMonth.hasNext()) {
							Map.Entry meMonth = (Map.Entry) iMonth.next();
							amount = Double.parseDouble(
									((LinkedHashMap<?, ?>) monthMap.get(meMonth.getKey())).get("amount").toString());
							if (isOptional) {
								amount = Double.parseDouble(
										((LinkedHashMap<?, ?>) feesHeadMapTmp.get(feesType)).get("amount").toString())
										/ cm.frequencyToInteger(frequency);
							}
							feeAmount = feeAmount + amount;

							feeList = (feesTypeWhenMap.get(feesType + "_" + meMonth.getKey()) == null ? ""
									: feesTypeWhenMap.get(feesType + "_" + meMonth.getKey())) + " WHEN (GR_NO='" + grNo
									+ "' and STD_1='" + std + "' and DIV_1='" + div + "') THEN " + amount;
							feesTypeWhenMap.put(feesType + "_" + meMonth.getKey(), feeList);

							dateList = dateList + " WHEN (GR_NO='" + grNo + "' and STD_1='" + std + "' and DIV_1='"
									+ div + "') THEN " + "SYSDATE()";

							feesTypeWhenMap.put(feesType + "_" + meMonth.getKey() + "_DATE", dateList);

							bankList = bankList + " WHEN (GR_NO='" + grNo + "' and STD_1='" + std + "' and DIV_1='"
									+ div + "') THEN " + "'" + paymentDetails + "'";
							feesTypeWhenMap.put(feesType + "_" + meMonth.getKey() + "_BANK", bankList);
						}

						feesTypeSumMap.put(feesType, (feesTypeSumMap.get(feesType) == null ? amount
								: feesTypeSumMap.get(feesType) + amount));
					}
					feeDataQuery = feeDataQuery + " WHERE GR_NO='" + grNo + "' and STD_1='" + std
							+ "' and ACADEMIC_YEAR='" + academic + "' and SECTION_NM='" + sessionData.getSectionName()
							+ "',";
					feeReportQuery = feeReportQuery + " WHERE STD_1='" + std + "' and DIV_1='" + div
							+ "' and ACADEMIC_YEAR='" + academic + "' and " + "SECTION_NM='"
							+ sessionData.getSectionName() + "' and FEE_DATE BETWEEN '" + currentDate + "' AND '"
							+ currentDate + "'";
					feeAmount = 0;
				} else {
					insertFields = insertFieldsCommon + ",GR_NO,STD_1,DIV_1";
					insertValues = insertValues + "(" + insertValuesCommon + ",'" + grNo + "','" + std + "','" + div
							+ "'";
					totalReportAmount = totalReportAmount + totalAmountTmp;

					// iterate feesPaymentMap
					Iterator iFees = setFees.iterator();
					while (iFees.hasNext()) {
						Map.Entry meFees = (Map.Entry) iFees.next();
						feesType = meFees.getKey().toString();
						monthMap = (LinkedHashMap) meFees.getValue();

						subFee = "";
						isOptional = false;
						if (feesHeadMap.get(feesType) != null) {
							optional = ((LinkedHashMap<?, ?>) feesHeadMap.get(feesType)).get("optional").toString();
							optionalAmt = Double.parseDouble(
									((LinkedHashMap<?, ?>) feesHeadMap.get(feesType)).get("amount").toString())
									/ monthMap.size();
						}

						if (optionalList != null) {
							for (int n = 0; n < optionalList.length; n++) {
								if (optionalList[n].contains(feesType + "^") && subFee.equalsIgnoreCase("")) {
									subFee = optionalList[n].substring(optionalList[n].indexOf("^") + 1);
									isOptional = true;
									if (!subFee.equalsIgnoreCase("")) {
										feesHeadMapTmp.get(me.getKey()).put("amount",
												((LinkedHashMap<?, ?>) multiFeeHeadMap.get(subFee)).get("amount")
														.toString());
										multiOptAmt = Double
												.parseDouble(((LinkedHashMap<?, ?>) multiFeeHeadMap.get(subFee))
														.get("amount").toString())
												/ monthMap.size();
										subFee = " (" + subFee + ")";
									}
									break;
								}
							}
						}

						if (optional.equalsIgnoreCase("No") || (optional.equalsIgnoreCase("Yes") && isOptional)) {
						} else if (!optional.equalsIgnoreCase("")) {
							continue;
						}

						feeAmount = 0;

						insertReportFields = insertReportFields + "," + feesType;

						// iterate month
						Set setMonth = monthMap.entrySet();
						Iterator iMonth = setMonth.iterator();
						while (iMonth.hasNext()) {
							Map.Entry meMonth = (Map.Entry) iMonth.next();
							amount = Double.parseDouble(
									((LinkedHashMap<?, ?>) monthMap.get(meMonth.getKey())).get("amount").toString());

							if (optional.equalsIgnoreCase("No") || (optional.equalsIgnoreCase("Yes") && isOptional)) {
							} else if (!optional.equalsIgnoreCase("")) {
								totalAmountTmp = totalAmountTmp - optionalAmt + multiOptAmt;
								if (paymentMode.equalsIgnoreCase("CASH")) {
									cashAmount = cashAmount + optionalAmt;
								} else if (paymentMode.equalsIgnoreCase("CHEQUE")) {
									chequeAmount = chequeAmount + optionalAmt;
								} else if (paymentMode.equalsIgnoreCase("DD")) {
									ddAmount = ddAmount + optionalAmt;
								}
								continue;
							}
							feeAmount = feeAmount + amount;
							insertFields = insertFields + "," + feesType + "_" + meMonth.getKey() + "," + feesType + "_"
									+ meMonth.getKey() + "_DATE" + "," + feesType + "_" + meMonth.getKey() + "_BANK";
							insertValues = insertValues + "," + String.format("%.2f", amount) + ",SYSDATE(),'"
									+ paymentDetails + "'";
						}
						insertReport = insertReport + "," + String.format("%.2f", feeAmount);
						feesTypeSumMap.put(feesType, (feesTypeSumMap.get(feesType) == null ? amount
								: feesTypeSumMap.get(feesType) + amount));
					}
					insertValues = insertValues + "),";
					feeAmount = 0;
				}
				m++;
			}

			// check if date entry present in fees_report_mandatory
			if (!isUpdateFeesReport) {
				String query = "SELECT * from " + sessionData.getDBName() + ".FEES_REPORT_" + mandate_opt + " "
						+ "WHERE ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='" + sessionData.getSectionName()
						+ "' AND " + "FEE_DATE BETWEEN '" + currentDate + "' AND '" + currentDate + "'";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(query);

				while (resultSet.next()) {
					isUpdateFeesReport = true;
				}
			}

			if (isUpdate) {
				feeDataQuery = "UPDATE fees_data_" + mandate_opt + " SET MODIFIED_DATE=SYSDATE(),MODIFIED_BY='"
						+ sessionData.getUserName() + "'," + "TOTAL_AMOUNT=IF(TOTAL_AMOUNT IS NULL, 0, TOTAL_AMOUNT) + "
						+ totalAmountTmp + ",";

				Set setFeesWhen = feesTypeWhenMap.entrySet();
				Iterator iFees = setFeesWhen.iterator();
				while (iFees.hasNext()) {
					Map.Entry meFees = (Map.Entry) iFees.next();
					feeDataQuery = feeDataQuery + meFees.getKey() + " = CASE " + meFees.getValue() + " ELSE "
							+ meFees.getKey() + " END,";
					feeDataQuery = feeDataQuery + meFees.getKey() + " = CASE " + meFees.getValue() + " ELSE "
							+ meFees.getKey() + " END,";
				}

				feeDataQuery = feeDataQuery.substring(0, feeDataQuery.length() - 1);
				feeDataQuery = feeDataQuery + " WHERE GR_NO IN(" + grList.substring(1) + ") AND STD_1 IN("
						+ stdList.substring(1) + ") AND " + "DIV_1 IN(" + divList.substring(1)
						+ ") AND ACADEMIC_YEAR = '" + academic + "' AND SECTION_NM='" + sessionData.getSectionName()
						+ "'";

				if (chequeDetail.startsWith("|"))
					chequeDetail = chequeDetail.substring(1);
				if (ddDetail.startsWith("|"))
					ddDetail = ddDetail.substring(1);

				if (isUpdateFeesReport) {
					feeReportQuery = "UPDATE " + sessionData.getDBName() + ".FEES_REPORT_" + mandate_opt
							+ " SET MODIFIED_DATE=SYSDATE(),MODIFIED_BY='" + sessionData.getUserName() + "',"
							+ "TOTAL_AMOUNT = IF(TOTAL_AMOUNT IS NULL, 0, TOTAL_AMOUNT) + " + (totalAmountTmp)
							+ ",CASH_TOTAL = IF(CASH_TOTAL IS NULL, 0, CASH_TOTAL) + " + cashAmount
							+ ",CHEQUE_TOTAL = IF(CHEQUE_TOTAL IS NULL, 0, CHEQUE_TOTAL) + " + chequeAmount
							+ ",DD_TOTAL = IF(DD_TOTAL IS NULL, 0, DD_TOTAL) + " + ddAmount
							+ ",CHEQUE_DETAIL = if(CHEQUE_DETAIL is null, '" + chequeDetail
							+ "', concat(CHEQUE_DETAIL, '|" + chequeDetail + "'))"
							+ ",DD_DETAIL = if(DD_DETAIL is null, '" + ddDetail + "', concat(DD_DETAIL, '|" + ddDetail
							+ "'))";

					Set setFeesReort = feesTypeSumMap.entrySet();
					Iterator iFeesReport = setFeesReort.iterator();
					while (iFeesReport.hasNext()) {
						Map.Entry meFees = (Map.Entry) iFeesReport.next();
						feeReportQuery = feeReportQuery + "," + meFees.getKey() + " = IF(" + meFees.getKey()
								+ " IS NULL, 0, " + meFees.getKey() + ") + " + String.format("%.2f", meFees.getValue());
					}
					feeReportQuery = feeReportQuery + " WHERE STD_1='" + std + "' and DIV_1='" + div
							+ "' and ACADEMIC_YEAR='" + academic + "' and " + "SECTION_NM='"
							+ sessionData.getSectionName() + "' and FEE_DATE BETWEEN '" + currentDate + "' AND '"
							+ currentDate + "'";
				} else {
					insertReportFields = "INSERT INTO fees_report_" + mandate_opt
							+ " (STD_1,DIV_1,ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CREATED_DATE,CREATED_BY,SECTION_NM,FEE_DATE,"
							+ "CASH_TOTAL,CHEQUE_TOTAL,DD_TOTAL";
					insertReport = " VALUES ('" + std + "','" + div + "','" + academic + "','Pending','"
							+ (cashAmount + chequeAmount + ddAmount) + "',SYSDATE(),'" + sessionData.getUserName()
							+ "','" + sessionData.getSectionName() + "',SYSDATE()," + cashAmount + "," + chequeAmount
							+ "," + ddAmount;

					Set setFeesReort = feesTypeSumMap.entrySet();
					Iterator iFeesReport = setFeesReort.iterator();
					while (iFeesReport.hasNext()) {
						Map.Entry meFees = (Map.Entry) iFeesReport.next();
						insertReportFields = insertReportFields + "," + meFees.getKey();
						insertReport = insertReport + ",IF(" + meFees.getKey() + " IS NULL, 0, " + meFees.getKey()
								+ ") + " + String.format("%.2f", meFees.getValue());
					}
					feeReportQuery = insertReportFields + ")" + insertReport + ")";
				}
			} else {
				insertValues = insertValues.substring(0, insertValues.length() - 1);
				feeDataQuery = "INSERT INTO fees_data_" + mandate_opt + " ( " + insertFields + " ) VALUES "
						+ insertValues;

				insertReportFields = "INSERT INTO fees_report_" + mandate_opt
						+ " (STD_1,DIV_1,ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CREATED_DATE,CREATED_BY,SECTION_NM,FEE_DATE,"
						+ "CASH_TOTAL,CHEQUE_TOTAL,DD_TOTAL";
				insertReport = " VALUES ('" + std + "','" + div + "','" + academic + "','Pending','" + totalReportAmount
						+ "',SYSDATE(),'" + sessionData.getUserName() + "','" + sessionData.getSectionName()
						+ "',SYSDATE()," + cashAmount + "," + chequeAmount + "," + ddAmount;

				Set setFeesReort = feesTypeSumMap.entrySet();
				Iterator iFeesReport = setFeesReort.iterator();
				while (iFeesReport.hasNext()) {
					Map.Entry meFees = (Map.Entry) iFeesReport.next();
					insertReportFields = insertReportFields + "," + meFees.getKey();
					insertReport = insertReport + ",IF(" + meFees.getKey() + " IS NULL, 0, " + meFees.getKey() + ") + "
							+ String.format("%.2f", meFees.getValue());
				}
				feeReportQuery = insertReportFields + ")" + insertReport + ")";
			}

//			logger.info("feeDataQuery query ==>" + feeDataQuery);
			statement = connection.createStatement();
			statement.executeUpdate(feeDataQuery);

//			logger.info("feeReportQuery query ===>" + feeReportQuery);
			statement = connection.createStatement();
			statement.executeUpdate(feeReportQuery);

			if (!oldAcademic.equalsIgnoreCase("")) {
				promoteClass(sessionData, studentMap, sessionData.getSectionName(), academic, oldStd, div);
			}
			feeTableUpdated = true;

			// send sms to fee student////
			sms_fee_flag = sessionData.getConfigMap().get("SMS_FEE_FLAG");
			if (sms_fee_flag.equalsIgnoreCase("true") && feeTableUpdated) {
				smsTemplate = sessionData.getConfigMap().get("SMS_FEE") + "\nBy " + sessionData.getConfigMap().get("SMS_"+sessionData.getAppType()+"_FOOTER");
				smsTemplateId = sessionData.getConfigMap().get("SMS_FEE_TEMP_ID");
				smsPeId = sessionData.getConfigMap().get("SMS_PE_ID");

				// iterate students
				Set setForSms = selectedStudentMap.entrySet();
				Iterator j = setForSms.iterator();
				while (j.hasNext()) {
					passGrList.clear();
					foundStudentMap.clear();
					grMap.clear();

					Map.Entry me = (Map.Entry) j.next();
					grNoSms = me.getKey().toString();
					studentDetailMap = selectedStudentMap.get(grNoSms);

					rollSms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("rollNo").toString();
					nameSms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("name").toString();
					stdSms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("std").toString();
					divSms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("div").toString();
					contact1Sms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("contact1")
							.toString();
					contact2Sms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("contact2")
							.toString();
					receiptNoSms = ((LinkedHashMap<?, ?>) selectedStudentMap.get(me.getKey())).get("receiptNo")
							.toString();

					passGrList.add(grNoSms);
					grMap.put("gr_no", grNoSms);
					grMap.put("std", stdSms);
					grMap.put("div", divSms);
					grMap.put("roll_no", rollSms);
					grMap.put("name", nameSms);
					grMap.put("contact1", contact1Sms);
					grMap.put("contact2", contact2Sms);
					foundStudentMap.put(grNoSms, grMap);

					smsText = smsTemplate.replace("#name#", nameSms);
					smsText = smsText.replace("#std#", stdSms);
					smsText = smsText.replace("#div#", divSms);
					smsText = smsText.replace("#receipt#", receiptNoSms);
					smsText = smsText.replace("#amount#", totalAmountTmp + "");
					smsText = smsText.replace("#date#", cm.getCurrentDate());

					String smsResponse = cm.sendHspSms(sessionData, passGrList, foundStudentMap, smsText, smsTemplateId,
							sessionData.getSectionName(), smsType, academic, std, div, "", "FEE");
					logger.info("smsResponse for GR " + grNoSms + " :: " + smsResponse);
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		f.setVisible(false);

		if (feeTableUpdated) {
			return selectedStudentMap;
		} else {
			return null;
		}
	}

	/////////// updateFeeData////////////////////////////
	public boolean updateFeeData(SessionData sessionData,
			LinkedHashMap<String, LinkedHashMap<String, String>> feesPaymentMap, String penaltyAmount, String bank,
			String chequeDDNo, String paymentMode, String grNo, String std, String div, String academic,
			String feeStatus, double totalAmount, boolean isUpdate, String chequeDD_date, LinkedHashMap concessionMap,
			double concessionAmount, String category, int receiptNo, String feesForMonths, String contact1,
			String contact2, String name, String rollNo, String backDate, String remark,
			LinkedHashMap<String, String> studentFeesMap, double balanceAmount, double prevBalanceAmount,
			String firstName, String lastName, String fatherName) {

		logger.info("========updateFeeData==========");
		String feeDataQuery = "", feeReportQuery = "";
		int udpdateCount = 0;
		boolean isUpdateFeesReport = false, returnFlag = false, isFeeheadConcession = false;
		String feeHead = "";
		String insertFields = "", insertReportFields = "";
		String insertValues = "", insertReportValues = "";
		String month = "", concessionValue = "";
		double amount = 0;
		double feeHeadAmount = 0;
		String concessionPercent = concessionMap.toString();
		LinkedHashMap feesTypeMonthMap = new LinkedHashMap();
		String paymentDetails = paymentMode + "^" + bank + "^" + chequeDDNo + "^" + chequeDD_date + "^" + penaltyAmount
				+ "^" + concessionAmount + "^" + receiptNo + "^" + feesForMonths + "^" + remark + "^A" + "^"
				+ balanceAmount + "^" + prevBalanceAmount;
		List<String> passGrList = new ArrayList();
		LinkedHashMap foundStudentMap = new LinkedHashMap<>();
		LinkedHashMap grMap = new LinkedHashMap<>();
		String smsText = "", sms_fee_flag = "", staff_fee_sms_flag = "", smsTemplate = "", smsTemplateId = "";
		String smsType = "Send Sms";
		String currentDate = cm.dateToYYYYMMDD(new Date());
		String currentDate_DMY = cm.dateToDDMMYYYY(new Date());
		String mandate_opt = "MANDATORY";
		String insertDate = "SYSDATE()";
		String firstKey = "", smsPeId = "";

		try {
			smsTemplate = sessionData.getConfigMap().get("SMS_FEE") + "\nBy " + sessionData.getConfigMap().get("SMS_"+sessionData.getAppType()+"_FOOTER");
			smsTemplateId = sessionData.getConfigMap().get("SMS_FEE_TEMP_ID");
			smsPeId = sessionData.getConfigMap().get("SMS_PE_ID");
			sms_fee_flag = sessionData.getConfigMap().get("SMS_FEE_FLAG");
			staff_fee_sms_flag = sessionData.getConfigMap().get("STAFF_FEE_SMS");

			// check one time concession and not individual feehead
			Set setConcessionMap = concessionMap.entrySet();
			Iterator ic = setConcessionMap.iterator();
			while (ic.hasNext()) {
				Map.Entry me = (Map.Entry) ic.next();
				concessionValue = me.getValue().toString();
				if (!concessionValue.equalsIgnoreCase(null) && !concessionValue.equalsIgnoreCase("0")) {
					isFeeheadConcession = true;
					break;
				}
			}
			/////////////////////////////////////////////////////
			totalAmount = totalAmount - balanceAmount;
			Entry<String, LinkedHashMap<String, String>> entry = feesPaymentMap.entrySet().iterator().next();
			if (!feesPaymentMap.isEmpty()) {
				firstKey = entry.getKey();
			}

			if (studentFeesMap.get(firstKey + "_" + feesForMonths + "_BANK") != null) {
				paymentDetails = studentFeesMap.get(firstKey + "_" + feesForMonths + "_BANK") + "!" + paymentDetails;
			}
			if (!backDate.equalsIgnoreCase("")) {
				insertDate = "STR_TO_DATE('" + backDate + "', '%d/%m/%Y')";
			}

//			if(optional.equalsIgnoreCase("Yes")){
//				mandate_opt = "OPTIONAL";
//			}
			// check if date entry present in fees_report_mandatory
			if (!isUpdateFeesReport) {
				String query = "SELECT * from " + sessionData.getDBName() + ".FEES_REPORT_" + mandate_opt + " "
						+ "WHERE ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='" + sessionData.getSectionName()
						+ "' AND " + "FEE_DATE BETWEEN '" + currentDate + "' AND '" + currentDate + "'";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(query);

				while (resultSet.next()) {
					isUpdateFeesReport = true;
				}
			}

//			if(optional.equalsIgnoreCase("No")){
			if (isUpdate) {
				feeDataQuery = "UPDATE " + sessionData.getDBName()
						+ ".FEES_DATA_MANDATORY SET MODIFIED_DATE=SYSDATE(),MODIFIED_BY='" + sessionData.getUserName()
						+ "'," + "CONCESSION_AMOUNT = IF(CONCESSION_AMOUNT IS NULL, 0, CONCESSION_AMOUNT) + "
						+ String.format("%.2f", concessionAmount)
						+ ",TOTAL_AMOUNT = IF(TOTAL_AMOUNT IS NULL, 0, TOTAL_AMOUNT) + " + totalAmount
						+ ",PENALTY_AMOUNT = IF(PENALTY_AMOUNT IS NULL, 0, PENALTY_AMOUNT) + " + penaltyAmount
						+ ",CONCESSION_PERCENT='" + concessionPercent + "',BALANCE_AMOUNT=" + balanceAmount + "";

				if (isUpdateFeesReport) {
					feeReportQuery = "UPDATE " + sessionData.getDBName()
							+ ".FEES_REPORT_MANDATORY SET MODIFIED_DATE=SYSDATE(),MODIFIED_BY='"
							+ sessionData.getUserName() + "',"
							+ "CONCESSION_AMOUNT = IF(CONCESSION_AMOUNT IS NULL, 0, CONCESSION_AMOUNT) + "
							+ String.format("%.2f", concessionAmount)
							+ ",TOTAL_AMOUNT = IF(TOTAL_AMOUNT IS NULL, 0, TOTAL_AMOUNT) + " + totalAmount
							+ ",PENALTY_AMOUNT = IF(PENALTY_AMOUNT IS NULL, 0, PENALTY_AMOUNT) + " + penaltyAmount;

					if (paymentMode.equalsIgnoreCase("CASH")) {
						feeReportQuery = feeReportQuery + ",CASH_TOTAL = IF(CASH_TOTAL IS NULL, 0, CASH_TOTAL) + "
								+ totalAmount;
					} else if (paymentMode.equalsIgnoreCase("CHEQUE")) {
						feeReportQuery = feeReportQuery + ",CHEQUE_TOTAL = IF(CHEQUE_TOTAL IS NULL, 0, CHEQUE_TOTAL) + "
								+ totalAmount + ",CHEQUE_DETAIL = if(CHEQUE_DETAIL is null, '" + paymentDetails
								+ "', concat(CHEQUE_DETAIL, '|" + paymentDetails + "'))";
					} else if (paymentMode.equalsIgnoreCase("DD")) {
						feeReportQuery = feeReportQuery + ",DD_TOTAL = IF(DD_TOTAL IS NULL, 0, DD_TOTAL) + "
								+ totalAmount + ",DD_DETAIL = if(DD_DETAIL is null, '" + paymentDetails
								+ "', concat(DD_DETAIL, '|" + paymentDetails + "'))";
					}
				} else {
					feeReportQuery = "INSERT INTO "+sessionData.getDBName()+".FEES_REPORT_MANDATORY (";
					insertReportFields = "STD_1,DIV_1,ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CONCESSION_AMOUNT,CREATED_BY,SECTION_NM,FEE_DATE,PENALTY_AMOUNT,BALANCE_AMOUNT";
					insertReportValues = "'" + std + "','" + div + "','" + academic + "','" + feeStatus + "',"
							+ String.format("%.2f", totalAmount) + "," + String.format("%.2f", concessionAmount) + ",'"
							+ sessionData.getUserName() + "','" + sessionData.getSectionName() + "',STR_TO_DATE('"+currentDate_DMY+"', '%d/%m/%Y')" + ","
							+ penaltyAmount + "," + balanceAmount;

					if (paymentMode.equalsIgnoreCase("CASH")) {
						insertReportFields = insertReportFields + ",CASH_TOTAL";
						insertReportValues = insertReportValues + "," + totalAmount;
					} else if (paymentMode.equalsIgnoreCase("CHEQUE")) {
						insertReportFields = insertReportFields + ",CHEQUE_TOTAL,CHEQUE_DETAIL";
						insertReportValues = insertReportValues + "," + totalAmount + ",'" + paymentDetails + "'";
					} else if (paymentMode.equalsIgnoreCase("DD")) {
						insertReportFields = insertReportFields + ",DD_TOTAL,DD_DETAIL";
						insertReportValues = insertReportValues + "," + totalAmount + ",'" + paymentDetails + "'";
					}
				}
			} else {
				feeDataQuery = "INSERT INTO " + sessionData.getDBName() + ".FEES_DATA_MANDATORY (";
				insertFields = "GR_NO,ROLL_NO,FIRST_NAME,LAST_NAME,FATHER_NAME,STD_1,DIV_1,ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CREATED_BY,SECTION_NM,CONCESSION_PERCENT,CONCESSION_AMOUNT,PENALTY_AMOUNT,BALANCE_AMOUNT";
				insertValues = "'" + grNo + "','" + rollNo + "','" + firstName + "','" + lastName + "','" + fatherName
						+ "','" + std + "','" + div + "','" + academic + "','" + feeStatus + "',"
						+ String.format("%.2f", totalAmount) + ",'" + sessionData.getUserName() + "','"
						+ sessionData.getSectionName() + "','" + concessionPercent + "',"
						+ String.format("%.2f", concessionAmount) + "," + penaltyAmount + "," + balanceAmount;

				feeReportQuery = "INSERT INTO "+sessionData.getDBName()+".FEES_REPORT_MANDATORY (";
				insertReportFields = "STD_1,DIV_1,ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CONCESSION_AMOUNT,CREATED_BY,SECTION_NM,FEE_DATE,PENALTY_AMOUNT";
				insertReportValues = "'" + std + "','" + div + "','" + academic + "','" + feeStatus + "',"
						+ String.format("%.2f", totalAmount) + "," + String.format("%.2f", concessionAmount) + ",'"
						+ sessionData.getUserName() + "','" + sessionData.getSectionName() + "',STR_TO_DATE('"+currentDate_DMY+"', '%d/%m/%Y')" + ","
						+ penaltyAmount;

				if (paymentMode.equalsIgnoreCase("CASH")) {
					insertReportFields = insertReportFields + ",CASH_TOTAL";
					insertReportValues = insertReportValues + "," + totalAmount;
				} else if (paymentMode.equalsIgnoreCase("CHEQUE")) {
					insertReportFields = insertReportFields + ",CHEQUE_TOTAL,CHEQUE_DETAIL";
					insertReportValues = insertReportValues + "," + totalAmount + ",'" + paymentDetails + "'";
				} else if (paymentMode.equalsIgnoreCase("DD")) {
					insertReportFields = insertReportFields + ",DD_TOTAL,DD_DETAIL";
					insertReportValues = insertReportValues + "," + totalAmount + ",'" + paymentDetails + "'";
				}
			}
//			}
//			else{
//				if(isUpdateFeesReport){
//					feeReportQuery = "UPDATE "+sessionData.getDBName()+".FEES_REPORT_OPTIONAL SET MODIFIED_DATE=SYSDATE(),MODIFIED_BY='"+sessionData.getUserName()+"',"
//							+ "CONCESSION_AMOUNT = IF(CONCESSION_AMOUNT IS NULL, 0, CONCESSION_AMOUNT) + "+String.format("%.2f", concessionAmount) 
//							+ ",TOTAL_AMOUNT = IF(TOTAL_AMOUNT IS NULL, 0, TOTAL_AMOUNT) + "+totalAmount
//							+ ",PENALTY_AMOUNT = IF(PENALTY_AMOUNT IS NULL, 0, PENALTY_AMOUNT) + "+penaltyAmount+"";
//					
//					if(paymentMode.equalsIgnoreCase("CASH")){
//						feeReportQuery = feeReportQuery + ",CASH_TOTAL = IF(CASH_TOTAL IS NULL, 0, CASH_TOTAL) + "+totalAmount;
//					}
//					else if(paymentMode.equalsIgnoreCase("CHEQUE")){
//						feeReportQuery = feeReportQuery + ",CHEQUE_TOTAL = IF(CHEQUE_TOTAL IS NULL, 0, CHEQUE_TOTAL) + "+totalAmount +
//						",CHEQUE_DETAIL = if(CHEQUE_DETAIL is null, '"+paymentDetails+"', concat(CHEQUE_DETAIL, '|"+paymentDetails+"'))";
//					}
//					else if(paymentMode.equalsIgnoreCase("DD")){
//						feeReportQuery = feeReportQuery + ",DD_TOTAL = IF(DD_TOTAL IS NULL, 0, DD_TOTAL) + "+totalAmount +
//								",DD_DETAIL = if(DD_DETAIL is null, '"+paymentDetails+"', concat(DD_DETAIL, '|"+paymentDetails+"'))";
//					}
//				}
//				else{
//					feeReportQuery = "INSERT INTO FEES_REPORT_OPTIONAL (";
//					insertReportFields = "STD_1,DIV_1,ACADEMIC_YEAR,FEE_STATUS,TOTAL_AMOUNT,CONCESSION_AMOUNT,CREATED_BY,SECTION_NM,FEE_DATE,PENALTY_AMOUNT";
//					insertReportValues = "'"+std+"','"+div+"','"+academic+"','"+feeStatus+"',"+String.format("%.2f", totalAmount)+","
//					+String.format("%.2f", concessionAmount)+",'"+sessionData.getUserName()+"','"+sessionData.getSectionName()+"',SYSDATE()"+","+penaltyAmount;
//					
//					if(paymentMode.equalsIgnoreCase("CASH")){
//						insertReportFields = insertReportFields + ",CASH_TOTAL";
//						insertReportValues = insertReportValues + ","+totalAmount;
//					}
//					else if(paymentMode.equalsIgnoreCase("CHEQUE")){
//						insertReportFields = insertReportFields + ",CHEQUE_TOTAL,CHEQUE_DETAIL";
//						insertReportValues = insertReportValues + ","+totalAmount+",'"+paymentDetails+"'";
//					}
//					else if(paymentMode.equalsIgnoreCase("DD")){
//						insertReportFields = insertReportFields + ",DD_TOTAL,DD_DETAIL";
//						insertReportValues = insertReportValues + ","+totalAmount+",'"+paymentDetails+"'";
//					}
//				}
//				feeDataQuery = "INSERT INTO FEES_DATA_OPTIONAL (";
//				insertFields = "GR_NO,STD_1,DIV_1,ACADEMIC_YEAR,TOTAL_AMOUNT,CREATED_BY,SECTION_NM,CONCESSION_PERCENT,CONCESSION_AMOUNT,PENALTY_AMOUNT";
//				insertValues = "'"+grNo+"','"+std+"','"+div+"','"+academic+"',"+String.format("%.2f", totalAmount)+",'"
//						+sessionData.getUserName()+"','"+sessionData.getSectionName()+"','"+concessionPercent+"',"+String.format("%.2f", concessionAmount)+","+penaltyAmount;
//			}

			Double feeHeadConcession = 0.0;
			Set set = feesPaymentMap.entrySet();
			Iterator i = set.iterator();
			int oneTimeCount = 0;
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				feeHead = me.getKey().toString();
				feesTypeMonthMap = feesPaymentMap.get(feeHead);
				if (concessionMap.get(feeHead) != null) {
					feeHeadConcession = Double.parseDouble(concessionMap.get(feeHead).toString());
				}

				Set setMonth = feesTypeMonthMap.entrySet();
				Iterator j = setMonth.iterator();
				Double feeConcessionAmount = 0.0;
				int concessionCount = 0;
				while (j.hasNext()) {
					feeConcessionAmount = 0.0;
					Map.Entry monthEntry = (Map.Entry) j.next();
					month = monthEntry.getKey().toString();
					amount = Double
							.parseDouble(((LinkedHashMap<?, ?>) feesTypeMonthMap.get(month)).get("amount").toString());
					amount = Double.parseDouble(String.format("%.2f", amount));
					feeHeadAmount = feeHeadAmount + amount;
					if (feeHeadConcession <= 0 && concessionCount == 0 && !isFeeheadConcession && oneTimeCount == 0) {
						feeConcessionAmount = concessionAmount;
						concessionCount++;
					} else if (isFeeheadConcession) {
						feeConcessionAmount = feeHeadConcession;
					}

					paymentDetails = paymentMode + "^" + bank + "^" + chequeDDNo + "^" + chequeDD_date + "^"
							+ penaltyAmount + "^" + feeConcessionAmount + "^" + receiptNo + "^" + feesForMonths + "^"
							+ remark + "^A" + "^" + balanceAmount + "^" + prevBalanceAmount;

					if (studentFeesMap.get(feeHead + "_" + month + "_BANK") != null) {
						paymentDetails = studentFeesMap.get(feeHead + "_" + month + "_BANK") + "!" + paymentDetails;
					}

					if (isUpdate) {
						feeDataQuery = feeDataQuery + "," + feeHead + "_" + month + "=" + amount + "," + feeHead + "_"
								+ month + "_DATE=" + insertDate + "," + feeHead + "_" + month + "_BANK='"
								+ paymentDetails + "'";
					} else {
						insertFields = insertFields + "," + feeHead + "_" + month + "," + feeHead + "_" + month
								+ "_DATE," + feeHead + "_" + month + "_BANK";
						insertValues = insertValues + "," + amount + "," + insertDate + ",'" + paymentDetails + "'";
					}
//					else if(optional.equalsIgnoreCase("Yes")){
//						insertFields = insertFields +","+ feeHead+","+feeHead+"_DATE,"+feeHead+"_BANK";
//						insertValues = insertValues + ","+ amount +",SYSDATE(),'"+paymentDetails+"'";
//					}
				}

				//// for report queries
				if (isUpdateFeesReport) {
					if (feeReportQuery.contains(",")) {
						feeReportQuery = feeReportQuery + "," + feeHead + " = IF(" + feeHead + " IS NULL, 0, " + feeHead
								+ ") + " + String.format("%.2f", feeHeadAmount);
					} else {
						feeReportQuery = feeReportQuery + feeHead + " = IF(" + feeHead + " IS NULL, 0, " + feeHead
								+ ") + " + String.format("%.2f", feeHeadAmount);
					}
				} else {
					insertReportFields = insertReportFields + "," + feeHead;
					insertReportValues = insertReportValues + "," + String.format("%.2f", feeHeadAmount);
				}
				feeHeadAmount = 0;
				oneTimeCount++;
			}

//			if(optional.equalsIgnoreCase("No")){
			if (isUpdate) {
				feeDataQuery = feeDataQuery + " WHERE GR_NO='" + grNo + "' and STD_1='" + std + "' and ACADEMIC_YEAR='"
						+ academic + "' and SECTION_NM='" + sessionData.getSectionName() + "'";

				if (isUpdateFeesReport) {
					feeReportQuery = feeReportQuery + " WHERE STD_1='" + std + "' and DIV_1='" + div
							+ "' and ACADEMIC_YEAR='" + academic + "' and " + "SECTION_NM='"
							+ sessionData.getSectionName() + "' and FEE_DATE = '" + currentDate + "'";
				} else {
					feeReportQuery = feeReportQuery + insertReportFields + ") VALUES(" + insertReportValues + ")";
				}

			} else {
				feeDataQuery = feeDataQuery + insertFields + ") VALUES(" + insertValues + ")";
				feeReportQuery = feeReportQuery + insertReportFields + ") VALUES(" + insertReportValues + ")";
			}
//			}
//			else{
//				if(isUpdate){
//					feeDataQuery = feeDataQuery + insertFields + ") VALUES("+insertValues+")";
//					if(isUpdateFeesReport){
//						feeReportQuery = feeReportQuery + " WHERE STD_1='"+std+"' and DIV_1='"+div+"' and ACADEMIC_YEAR='"+academic+"' and "
//								+ "SECTION_NM='"+sessionData.getSectionName()+"' and FEE_DATE BETWEEN '"+currentDate+"' AND '"+currentDate+"'";
//					}
//					else{
//						feeReportQuery = feeReportQuery + insertReportFields + ") VALUES("+insertReportValues+")";
//					}
//				}
//				else{
//					feeDataQuery = feeDataQuery + insertFields + ") VALUES("+insertValues+")";
//					feeReportQuery = feeReportQuery + insertReportFields + ") VALUES("+insertReportValues+")";
//				}
//			}

			statement = connection.createStatement();
			statement.executeUpdate(feeReportQuery);
			
			statement = connection.createStatement();
			statement.executeUpdate(feeDataQuery);
			returnFlag = true;

			// update name & roll no in fees data
//			updateNameInFeesData(sessionData);

			// send sms to fee student////
			if (sms_fee_flag.equalsIgnoreCase("true")) {
				passGrList.clear();
				foundStudentMap.clear();
				grMap.clear();

				passGrList.add(grNo);
				grMap.put("gr_no", grNo);
				grMap.put("std", std);
				grMap.put("div", div);
				grMap.put("roll_no", rollNo);
				grMap.put("name", name);
				///// add eligible staff mobile numbers in contact1 as comma separated
				grMap.put("contact1", contact1);
				grMap.put("contact2", contact2);
				foundStudentMap.put(grNo, grMap);
				smsText = smsTemplate.replace("#name#", name);
				smsText = smsText.replace("#std#", std);
				smsText = smsText.replace("#div#", div);
				smsText = smsText.replace("#receipt#", receiptNo + "");
				smsText = smsText.replace("#amount#", totalAmount + "");
				smsText = smsText.replace("#date#", cm.getCurrentDate());

				String smsResponse = cm.sendHspSms(sessionData, passGrList, foundStudentMap, smsText, smsTemplateId,
						sessionData.getSectionName(), smsType, academic, std, div, "", "FEE");
				if (!smsResponse.contains("connecting")) {
					smsResponse = "SMS sent successfully..";

					// send same fee SMS to staff
					if (staff_fee_sms_flag.equalsIgnoreCase("true")) {
						smsResponse = cm.sendHspStaffFeeSms(sessionData, passGrList, foundStudentMap, smsText, smsTemplateId,
								sessionData.getSectionName(), "", academic, std, div, "", "SMS_FEE_STAFF");
					}
				}
			}

			returnFlag = true;
		} catch (Exception e) {
			if (e.getMessage().contains("Unknown column")) {
				String errorMesssage = e.getMessage();
				errorMesssage = errorMesssage.substring(errorMesssage.indexOf("'") + 1,
						errorMesssage.indexOf(" in") - 1);
				errorMesssage = cm.revertCommaApostrophy(errorMesssage);
				if(errorMesssage.contains("_")) {
					errorMesssage = errorMesssage.substring(0, errorMesssage.lastIndexOf("_"));
				}
				JOptionPane.showMessageDialog(null, "Click edit and save in fees head for " + errorMesssage);
			}
			cm.logException(e);
		}
		return returnFlag;
	}

	/////////// get Fees Data////////////////////////////////////////
	public LinkedHashMap<String, String> getStudentFeesData(SessionData sessionData, String academic, String std,
			String div, String grNo, String category, LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap)
			throws Exception {
		logger.info("=========getFeesData Query============");
		LinkedHashMap<String, String> retFeesDataMap = new LinkedHashMap<String, String>();
		List<String> columnList = new ArrayList<>();
		String findStudentFeesQuery, findColumnListQuery = "";
		String fees_data_field = "", feeName = "", concessionStr = "";
		String[] concessionArr = null;
		Double totalAmount = 0.0;
		String tableName = "FEES_DATA_MANDATORY";

		try {

			findColumnListQuery = "select COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where " + "TABLE_NAME='"
					+ tableName + "' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnListQuery);
			while (resultSet.next()) {
				columnList.add(resultSet.getString("COLUMN_NAME"));
			}

			findStudentFeesQuery = "SELECT * FROM " + sessionData.getDBName() + "." + tableName
					+ " WHERE ACADEMIC_YEAR='" + academic + "' AND STD_1='" + std + "' AND DIV_1='" + div + "' "
					+ "AND GR_NO='" + grNo + "' AND SECTION_NM='" + sessionData.getSectionName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findStudentFeesQuery);

			while (resultSet.next()) {
				for (int i = 0; i < columnList.size(); i++) {
					fees_data_field = resultSet.getString(columnList.get(i));
					if (fees_data_field != null && !fees_data_field.equalsIgnoreCase("")) {
						retFeesDataMap.put(columnList.get(i), fees_data_field);
					}

					/*
					 * if(columnList.get(i).contains("_")) { feeName =
					 * columnList.get(i).substring(0, columnList.get(i).lastIndexOf("_"));
					 * if(feesHeadMap.get(feeName) != null && fees_data_field != null) { totalAmount
					 * = totalAmount + Double.parseDouble(fees_data_field); }
					 * if(columnList.get(i).contains("_BANK") && fees_data_field != null) {
					 * concessionStr = fees_data_field; concessionArr = concessionStr.split("\\^");
					 * if(!concessionArr[5].equalsIgnoreCase("NA")) { totalAmount = totalAmount -
					 * Double.parseDouble(concessionArr[5]); } } }
					 */
					concessionArr = null;
				}
			}
//			retFeesDataMap.put("TOTAL_AMOUNT", totalAmount+"");
		} catch (Exception e) {
			cm.logException(e);
		}
		return retFeesDataMap;
	}

	/////////// get count Data////////////////////////////////////////
	public int getCountData(SessionData sessionData, String academic, String section, String module) throws Exception {
		logger.info("=========getCountData Query============");
		String findCountQuery = "";
		int count = 0;

		try {

			findCountQuery = "SELECT COUNT FROM COUNT_DATA WHERE MODULE_NAME='" + module + "' AND ACADEMIC_YEAR='"
					+ academic + "' " + "AND SECTION_NM='" + section + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findCountQuery);
			while (resultSet.next()) {
				count = resultSet.getInt("COUNT");
			}

		} catch (Exception e) {
			cm.logException(e);
			return count;
		}
		return count;
	}

	/////////// update count Data////////////////////////////////////////
	public int updateCountData(SessionData sessionData, String academic, String section, String module, String mode)
			throws Exception {
		logger.info("=========updateCountData Query============");
		String countQuery = "";
		boolean flag = false;
		int count = 0;

		try {
			boolean lc_count_sec = Boolean.parseBoolean(sessionData.getConfigMap().get("LC_COUNT_SEC"));
			if (!lc_count_sec && !module.equalsIgnoreCase("FEE_RECEIPT")) {
				section = "";
			}
			count = getCountData(sessionData, academic, section, module);
			count = count + 1;
			if (count == 1 && !mode.equalsIgnoreCase("VALIDATE")) {
				countQuery = "INSERT INTO COUNT_DATA (MODULE_NAME, ACADEMIC_YEAR,SECTION_NM,COUNT) VALUES('" + module
						+ "', '" + academic + "', '" + section + "'," + count + ")";
			} else if (!mode.equalsIgnoreCase("VALIDATE")) {
				countQuery = "UPDATE COUNT_DATA SET COUNT = IF(COUNT IS NULL, 0, COUNT) + 1 WHERE MODULE_NAME='"
						+ module + "' AND ACADEMIC_YEAR='" + academic + "' " + "AND SECTION_NM='" + section + "'";
			}

			statement = connection.createStatement();
			statement.executeUpdate(countQuery);
			flag = true;

		} catch (Exception e) {
			cm.logException(e);
			return count;
		}
		return count;
	}

	/////////// get Fees Head Data with frequency
	/////////// sum////////////////////////////////////////
	public double getFeesFrequencySum(SessionData sessionData, String academic, String std, String section,
			String optional, String frequency, String subFrequency) throws Exception {
		logger.info("=========getFeesFrequencySum Query============");
		LinkedHashMap<String, LinkedHashMap<String, String>> retFeesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String findFeesHeadQuery, addToCondition = "";
		String feesDb, categoryDb, frequencyDb, optionaldb, orderNoDb = "";
		double feesFrequencySum = 0, amountDb = 0;
		int monthInt = 0;
		int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

		try {
			if (frequency.equalsIgnoreCase("Monthly")) {
				monthInt = cm.MonthToIntger(subFrequency);
			}

			if (!optional.equalsIgnoreCase("")) {
				addToCondition = " AND OPTIONAL='" + optional + "'";
			}

			findFeesHeadQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "FEES_HEAD WHERE ACADEMIC_YEAR='"
					+ academic + "' AND STD_1='" + std + "' AND " + "SECTION_NM='" + section + "' " + addToCondition
					+ " ORDER BY ORDER_NO";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findFeesHeadQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> feesHeadDetailMap = new LinkedHashMap<String, String>();
				feesDb = resultSet.getString("FEES_NAME") == null ? "" : (resultSet.getString("FEES_NAME").trim());
				categoryDb = resultSet.getString("CATEGORY") == null ? "" : (resultSet.getString("CATEGORY").trim());
				amountDb = resultSet.getDouble("AMOUNT");
				frequencyDb = resultSet.getString("FREQUENCY") == null ? "" : (resultSet.getString("FREQUENCY").trim());
				optionaldb = resultSet.getString("OPTIONAL") == null ? "" : (resultSet.getString("OPTIONAL").trim());

				if (frequency.equalsIgnoreCase("Monthly")) {
					if (frequencyDb.equalsIgnoreCase("Monthly")) {
						feesFrequencySum = feesFrequencySum + (amountDb / 12);
					} else if (frequencyDb.equalsIgnoreCase("Quarterly")
							&& (monthInt == startMonth || monthInt == (startMonth + 3) || monthInt == (startMonth + 6)
									|| monthInt == (startMonth + 9))) {
						feesFrequencySum = feesFrequencySum + (amountDb / 4);
					} else if (frequencyDb.equalsIgnoreCase("Half Yearly")
							&& (monthInt == startMonth || monthInt == (startMonth + 6))) {
						feesFrequencySum = feesFrequencySum + (amountDb / 2);
					} else if (frequencyDb.equalsIgnoreCase("Yearly") && (monthInt == startMonth)) {
						feesFrequencySum = feesFrequencySum + amountDb;
					}
				} else if (frequency.equalsIgnoreCase("Quarterly")) {
					if (frequencyDb.equalsIgnoreCase("Monthly")) {
						feesFrequencySum = feesFrequencySum + (amountDb / 4);
					} else if (frequencyDb.equalsIgnoreCase("Quarterly")) {
						feesFrequencySum = feesFrequencySum + (amountDb / 4);
					} else if (frequencyDb.equalsIgnoreCase("Half Yearly")
							&& (subFrequency.equalsIgnoreCase("Q 1") || subFrequency.equalsIgnoreCase("Q 3"))) {
						feesFrequencySum = feesFrequencySum + (amountDb / 2);
					} else if (frequencyDb.equalsIgnoreCase("Yearly") && subFrequency.equalsIgnoreCase("Q 1")) {
						feesFrequencySum = feesFrequencySum + amountDb;
					}
				} else if (frequency.equalsIgnoreCase("Half Yearly")) {
					if (frequencyDb.equalsIgnoreCase("Monthly")) {
						feesFrequencySum = feesFrequencySum + (amountDb / 2);
					} else if (frequencyDb.equalsIgnoreCase("Quarterly")) {
						feesFrequencySum = feesFrequencySum + (amountDb / 2);
					} else if (frequencyDb.equalsIgnoreCase("Half Yearly")) {
						feesFrequencySum = feesFrequencySum + (amountDb / 2);
					} else if (frequencyDb.equalsIgnoreCase("Yearly") && (subFrequency.equalsIgnoreCase("Term 1"))) {
						feesFrequencySum = feesFrequencySum + amountDb;
					}
				} else if (frequency.equalsIgnoreCase("Yearly")) {
					if (frequencyDb.equalsIgnoreCase("Monthly")) {
						feesFrequencySum = feesFrequencySum + (amountDb);
					} else if (frequencyDb.equalsIgnoreCase("Quarterly")) {
						feesFrequencySum = feesFrequencySum + (amountDb);
					} else if (frequencyDb.equalsIgnoreCase("Half Yearly")) {
						feesFrequencySum = feesFrequencySum + (amountDb);
					} else if (frequencyDb.equalsIgnoreCase("Yearly")) {
						feesFrequencySum = feesFrequencySum + amountDb;
					}
				}
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return feesFrequencySum;
	}

	/////////// list of students whose fees is partially paid for that
	/////////// frequency////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, Double>> getPartialFeesData(SessionData sessionData,
			String academic, String section, String std, String div, String category, String frequency,
			String subFrequency, LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap) throws Exception {
		logger.info("=========getPartialFeesData Query============");
		String sumQuery = "";
		boolean flag = false;
		int monthInt = 0;
		int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
//		double feesFrequencySum = getFeesFrequencySum(sessionData, academic, std, section, option, frequency, subFrequency);
		int count = 0;
		LinkedHashMap<String, LinkedHashMap<String, Double>> studentPartialFeeMap = new LinkedHashMap<String, LinkedHashMap<String, Double>>();
		String feesHeadColumn = "";
		int frequencyInt = 0;
		String feesHead = "";
		String grDb = "";
		double feesSumDb = 0;
		double concessionDb = 0;

		try {
			if (frequency.equalsIgnoreCase("Monthly")) {
				monthInt = cm.MonthToIntger(subFrequency);
			}

			Set set = feesHeadMap.entrySet();
			Iterator i = set.iterator();
			ArrayList<Integer> frequencyList = new ArrayList<>();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				feesHead = me.getKey().toString();
				frequencyInt = cm.frequencyToInteger(
						((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());

				if (frequency.equalsIgnoreCase("Monthly")) {
					monthInt = cm.MonthToIntger(subFrequency);
					if (frequencyInt == 12) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + subFrequency + ">0, " + feesHead
								+ "_" + subFrequency + ", 0)) + ";
					} else if (frequencyInt == 4 && (monthInt == startMonth || monthInt == (startMonth + 3)
							|| monthInt == (startMonth + 6) || monthInt == (startMonth + 9))) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + cm.intgerToMonth(monthInt + "")
								+ ">0, " + feesHead + "_" + cm.intgerToMonth(monthInt + "") + ", 0)) + ";
					} else if (frequencyInt == 2 && (monthInt == startMonth || monthInt == (startMonth + 6))) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + cm.intgerToMonth(monthInt + "")
								+ ">0, " + feesHead + "_" + cm.intgerToMonth(monthInt + "") + ", 0)) + ";
					} else if (frequencyInt == 1 && (monthInt == startMonth)) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + cm.intgerToMonth(monthInt + "")
								+ ">0, " + feesHead + "_" + cm.intgerToMonth(monthInt + "") + ", 0)) + ";
					}
				} else if (frequency.equalsIgnoreCase("Quarterly")) {
					if (frequencyInt == 12) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ", 0))"
								+ " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 1) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 1) + "") + ", 0))"
								+ " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 2) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 2) + "")
								+ ", 0)) + ";
					} else if (frequencyInt == 4) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ", 0)) + ";
					} else if (frequencyInt == 2
							&& (subFrequency.equalsIgnoreCase("Q 1") || subFrequency.equalsIgnoreCase("Q 3"))) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + "")) + ", 0)) + ";
					} else if (frequencyInt == 1 && subFrequency.equalsIgnoreCase("Q 1")) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ", 0)) + ";
					}
				} else if (frequency.equalsIgnoreCase("Half Yearly")) {
					if (frequencyInt == 12) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "") + ", 0))"
								+ " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 1) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 1) + "")
								+ ", 0))" + " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 2) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 2) + "")
								+ ", 0))" + " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 3) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 3) + "")
								+ ", 0))" + " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 4) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 4) + "")
								+ ", 0))" + " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 5) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 5) + "")
								+ ", 0)) + ";
					} else if (frequencyInt == 4) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "") + ", 0))"
								+ " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 3) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency) + 3) + "")
								+ ", 0)) + ";
					} else if (frequencyInt == 2) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "")
								+ ", 0)) + ";
					} else if (frequencyInt == 1 && (subFrequency.equalsIgnoreCase("Term 1"))) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "") + ">0, "
								+ feesHead + "_"
								+ cm.intgerToMonth((startMonth + cm.HalfYearlyToIntger(subFrequency)) + "")
								+ ", 0)) + ";
					}
				} else if (frequency.equalsIgnoreCase("Yearly")) {
					if (frequencyInt == 12) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_JAN>0, " + feesHead + "_JAN, 0))"
								+ " + SUM(IF(" + feesHead + "_FEB>0, " + feesHead + "_FEB, 0))" + " + SUM(IF("
								+ feesHead + "_MAR>0, " + feesHead + "_MAR, 0))" + " + SUM(IF(" + feesHead + "_APR>0, "
								+ feesHead + "_APR, 0))" + " + SUM(IF(" + feesHead + "_MAY>0, " + feesHead + "_MAY, 0))"
								+ " + SUM(IF(" + feesHead + "_JUN>0, " + feesHead + "_JUN, 0))" + " + SUM(IF("
								+ feesHead + "_JUL>0, " + feesHead + "_JUL, 0))" + " + SUM(IF(" + feesHead + "_AUG>0, "
								+ feesHead + "_AUG, 0))" + " + SUM(IF(" + feesHead + "_SEP>0, " + feesHead + "_SEP, 0))"
								+ " + SUM(IF(" + feesHead + "_OCT>0, " + feesHead + "_OCT, 0))" + " + SUM(IF("
								+ feesHead + "_NOV>0, " + feesHead + "_NOV, 0))" + " + SUM(IF(" + feesHead + "_DEC>0, "
								+ feesHead + "_DEC, 0)) + ";
					} else if (frequencyInt == 4) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + cm.intgerToMonth(startMonth + "")
								+ ">0, " + feesHead + "_" + cm.intgerToMonth(startMonth + "") + ", 0))" + " + SUM(IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + 3) + "") + ">0, " + feesHead + "_"
								+ cm.intgerToMonth((startMonth + 3) + "") + ", 0))" + " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + 6) + "") + ">0, " + feesHead + "_"
								+ cm.intgerToMonth((startMonth + 6) + "") + ", 0))" + " + SUM(IF(" + feesHead + "_"
								+ cm.intgerToMonth((startMonth + 9) + "") + ">0, " + feesHead + "_"
								+ cm.intgerToMonth((startMonth + 9) + "") + ", 0)) + ";
					} else if (frequencyInt == 2) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + cm.intgerToMonth(startMonth + "")
								+ ">0, " + feesHead + "_" + cm.intgerToMonth(startMonth + "") + ", 0)) + " + "SUM(IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + 6) + "") + ">0, " + feesHead + "_"
								+ cm.intgerToMonth((startMonth + 6) + "") + ", 0)) + ";
					} else if (frequencyInt == 1) {
						feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_" + cm.intgerToMonth(startMonth + "")
								+ ">0, " + feesHead + "_" + cm.intgerToMonth(startMonth + "") + ", 0)) + ";
					}
				}
			}
			if (!feesHeadColumn.equalsIgnoreCase("")) {
				feesHeadColumn = feesHeadColumn.substring(0, feesHeadColumn.lastIndexOf("+"));
				sumQuery = "SELECT GR_NO,CONCESSION_AMOUNT," + feesHeadColumn + " AS FEES_SUM FROM "
						+ sessionData.getDBName() + ".FEES_DATA_MANDATORY WHERE STD_1='" + std + "' and DIV_1='" + div
						+ "' and ACADEMIC_YEAR='" + academic + "' " + "and SECTION_NM='" + sessionData.getSectionName()
						+ "' GROUP BY GR_NO,CONCESSION_AMOUNT";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(sumQuery);

				while (resultSet.next()) {
					LinkedHashMap feesTypeDetailMap = new LinkedHashMap();
					grDb = resultSet.getString("GR_NO");
					feesSumDb = Double.parseDouble(resultSet.getString("FEES_SUM"));
					concessionDb = resultSet.getDouble("CONCESSION_AMOUNT");

					if (feesSumDb != 0) {
						feesTypeDetailMap.put("feesPaid", feesSumDb);
					}
					if (concessionDb != 0) {
						feesTypeDetailMap.put("conecession", concessionDb);
					}
					if (feesTypeDetailMap != null && feesTypeDetailMap.size() > 0) {
						studentPartialFeeMap.put(grDb, feesTypeDetailMap);
					}
				}
				flag = true;
			}
		} catch (Exception e) {
			cm.logException(e);
			return studentPartialFeeMap;
		}
		return studentPartialFeeMap;
	}
	
	/////////// list of students whose fees is Quarterly paid for that frequency////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, Double>> getQuarterlyFeesData(SessionData sessionData,
			String academic, String section, String category, LinkedHashMap<String, LinkedHashMap<String, Double>> quarterlyFeeMap) throws Exception {
		logger.info("=========getQuarterlyFeesData Query============");
		String sumQuery = "", std = "", frequency = "Quarterly";
		boolean flag = false;
		int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
		int count = 0;
		LinkedHashMap<String, LinkedHashMap<String, Double>> stdDivQuarterlyFeeMap = new LinkedHashMap<String, LinkedHashMap<String, Double>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, Double> feesAllTotalMap = new LinkedHashMap<String, Double>();
		String feesHeadColumn = "";
		int frequencyInt = 0;
		String feesHead = "";
		String grDb = "", stdDb = "", divDb = "";
		int monthInt = 0;
		double q1StdCount = 0, q2StdCount = 0, q3StdCount = 0, q4StdCount = 0;
		double q1StdSum = 0, q2StdSum = 0, q3StdSum = 0, q4StdSum = 0, stdConcession = 0;
		
		double q1Sum = 0, q2Sum = 0, q3Sum = 0, q4Sum = 0, q1AllCount = 0, q2AllCount = 0, q3AllCount = 0, q4AllCount = 0;
		double concessionDb = 0, q1AllSum = 0, q2AllSum = 0, q3AllSum = 0, q4AllSum = 0, allConcession = 0;
	
		try {
	
			List<String>  quarterList = Arrays.asList("Q 1", "Q 2", "Q 3", "Q 4");
			std = sessionData.getConfigMap().get(section.toUpperCase() + "_STD");
			String[] stdList = std.split(",");
			
			for(String stdStr : stdList) {
				LinkedHashMap<String, Double> feesTotalMap = new LinkedHashMap<String, Double>();
				feesHeadMap = getFeesHeadData(sessionData, academic, stdStr, section, category);
				
				for(String subFrequency : quarterList) {
					
					Set set = feesHeadMap.entrySet();
					Iterator i = set.iterator();
					ArrayList<Integer> frequencyList = new ArrayList<>();
					while (i.hasNext()) {
						Map.Entry me = (Map.Entry) i.next();
						feesHead = me.getKey().toString();
						frequencyInt = cm.frequencyToInteger(
								((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());
						
						if (frequencyInt == 12) {
							feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
									+ feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ", 0))"
									+ " + SUM(IF(" + feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 1) + "") + ">0, "
									+ feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 1) + "") + ", 0))"
									+ " + SUM(IF(" + feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 2) + "") + ">0, "
									+ feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + 2) + "")
									+ ", 0)) + ";
						} else if (frequencyInt == 4) {
							feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
									+ feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ", 0)) + ";
						} else if (frequencyInt == 2
								&& (subFrequency.equalsIgnoreCase("Q 1") || subFrequency.equalsIgnoreCase("Q 3"))) {
							feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
									+ feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency) + "")) + ", 0)) + ";
						} else if (frequencyInt == 1 && subFrequency.equalsIgnoreCase("Q 1")) {
							feesHeadColumn = feesHeadColumn + "SUM(IF(" + feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ">0, "
									+ feesHead + "_"
									+ cm.intgerToMonth((startMonth + cm.QuarterToIntger(subFrequency)) + "") + ", 0)) + ";
						}
					}
					feesHeadColumn = feesHeadColumn.substring(0, feesHeadColumn.lastIndexOf("+")) + "AS "+subFrequency.replace(" ", "")+"_FEES_SUM,";
				}
				
				if (!feesHeadColumn.equalsIgnoreCase("")) {
					feesHeadColumn = feesHeadColumn.substring(0, feesHeadColumn.length()-1);
					sumQuery = "SELECT GR_NO,STD_1,DIV_1,CONCESSION_AMOUNT," + feesHeadColumn + " FROM "
							+ sessionData.getDBName() + ".FEES_DATA_MANDATORY WHERE ACADEMIC_YEAR='" + academic + "' " + " and "
							+ "SECTION_NM='" + sessionData.getSectionName() + "' and STD_1='"+stdStr+"' GROUP BY GR_NO,STD_1,DIV_1,CONCESSION_AMOUNT "
							+ "ORDER BY STD_1,DIV_1";
					
					statement = connection.createStatement();
					resultSet = statement.executeQuery(sumQuery);
					feesHeadColumn = "";
					sumQuery = "";
		
					while (resultSet.next()) {
						LinkedHashMap<String, Double> feesTypeDetailMap = new LinkedHashMap<String, Double>();
						grDb = resultSet.getString("GR_NO");
						stdDb = resultSet.getString("STD_1");
						divDb = resultSet.getString("DIV_1");
//						feesSumDb = Double.parseDouble(resultSet.getString("FEES_SUM") == null ? "0" : resultSet.getString("FEES_SUM"));
						
						q1Sum = Double.parseDouble(resultSet.getString("Q1_FEES_SUM") == null ? "0" : resultSet.getString("Q1_FEES_SUM"));
						q2Sum = Double.parseDouble(resultSet.getString("Q2_FEES_SUM") == null ? "0" : resultSet.getString("Q2_FEES_SUM"));
						q3Sum = Double.parseDouble(resultSet.getString("Q3_FEES_SUM") == null ? "0" : resultSet.getString("Q3_FEES_SUM"));
						q4Sum = Double.parseDouble(resultSet.getString("Q4_FEES_SUM") == null ? "0" : resultSet.getString("Q4_FEES_SUM"));
						concessionDb = resultSet.getDouble("CONCESSION_AMOUNT");
						
						q1AllSum += q1Sum;
						q2AllSum += q2Sum;
						q3AllSum += q3Sum;
						q4AllSum += q4Sum;
						allConcession += concessionDb;
						
						if (stdDivQuarterlyFeeMap != null && stdDivQuarterlyFeeMap.get(stdDb+"_"+divDb) != null) {
							feesTypeDetailMap = stdDivQuarterlyFeeMap.get(stdDb+"_"+divDb);
							
							if(quarterlyFeeMap.get(stdDb).get("q1") == q1Sum) {
								feesTypeDetailMap.put("q1Count", (feesTypeDetailMap.get("q1Count")+1.0));
								q1StdCount += 1;
								q1AllCount += 1;
								
								feesTypeDetailMap.put("q1Sum", (feesTypeDetailMap.get("q1Sum")+q1Sum));
								q1StdSum += q1Sum;
							}
							if(quarterlyFeeMap.get(stdDb).get("q2") == q2Sum) {
								feesTypeDetailMap.put("q2Count", (feesTypeDetailMap.get("q2Count")+1.0));
								q2StdCount += 1;
								q2AllCount += 1;
								
								feesTypeDetailMap.put("q2Sum", (feesTypeDetailMap.get("q2Sum")+q2Sum));
								q2StdSum += q2Sum;
							}
							if(quarterlyFeeMap.get(stdDb).get("q3") == q3Sum) {
								feesTypeDetailMap.put("q3Count", (feesTypeDetailMap.get("q3Count")+1.0));
								q3StdCount += 1;
								q3AllCount += 1;
								
								feesTypeDetailMap.put("q3Sum", (feesTypeDetailMap.get("q3Sum")+q3Sum));
								q3StdSum += q3Sum;
							}
							if(quarterlyFeeMap.get(stdDb).get("q4") == q4Sum) {
								feesTypeDetailMap.put("q4Count", (feesTypeDetailMap.get("q4Count")+1.0));
								q4StdCount += 1;
								q4AllCount += 1;
								
								feesTypeDetailMap.put("q4Sum", (feesTypeDetailMap.get("q4Sum")+q4Sum));
								q4StdSum += q4Sum;
							}
							
							feesTypeDetailMap.put("qStdDivConcession",(feesTypeDetailMap.get("qStdDivConcession")+concessionDb));
							stdConcession += concessionDb;
							
							stdDivQuarterlyFeeMap.put(stdDb+"_"+divDb, feesTypeDetailMap);
							
						} else {
							
							if(quarterlyFeeMap.get(stdDb).get("q1") == q1Sum) {
								feesTypeDetailMap.put("q1Count", 1.0);
								q1StdCount += 1;
								q1AllCount += 1;
								
								feesTypeDetailMap.put("q1Sum", q1Sum);
								q1StdSum += q1Sum;
							}
							else {
								feesTypeDetailMap.put("q1Count", 0.0);
								q1StdCount += 0;
								q1AllCount += 0;
								
								feesTypeDetailMap.put("q1Sum", 0.0);
								q1StdSum += 0.0;
							}
							if(quarterlyFeeMap.get(stdDb).get("q2") == q2Sum) {
								feesTypeDetailMap.put("q2Count", 1.0);
								q2StdCount += 1;
								q2AllCount += 1;
								
								feesTypeDetailMap.put("q2Sum", q2Sum);
								q2StdSum += q2Sum;
							}
							else {
								feesTypeDetailMap.put("q2Count", 0.0);
								q2StdCount += 0;
								q2AllCount += 0;
								
								feesTypeDetailMap.put("q2Sum", 0.0);
								q2StdSum += 0.0;
							}
							if(quarterlyFeeMap.get(stdDb).get("q3") == q3Sum) {
								feesTypeDetailMap.put("q3Count", 1.0);
								q3StdCount += 1;
								q3AllCount += 1;
								
								feesTypeDetailMap.put("q3Sum", q3Sum);
								q3StdSum += q3Sum;
							}
							else {
								feesTypeDetailMap.put("q3Count", 0.0);
								q3StdCount += 0;
								q3AllCount += 0;
								
								feesTypeDetailMap.put("q3Sum", 0.0);
								q3StdSum += 0.0;
							}
							if(quarterlyFeeMap.get(stdDb).get("q4") == q4Sum) {
								feesTypeDetailMap.put("q4Count", 1.0);
								q4StdCount += 1;
								q4AllCount += 1;
								
								feesTypeDetailMap.put("q4Sum", q4Sum);
								q4StdSum += q4Sum;
							}
							else {
								feesTypeDetailMap.put("q4Count", 0.0);
								q4StdCount += 0;
								q4AllCount += 0;
								
								feesTypeDetailMap.put("q4Sum", 0.0);
								q4StdSum += 0.0;
							}
							
							feesTypeDetailMap.put("qStdDivConcession",concessionDb);
							
							stdConcession += concessionDb;
							
							stdDivQuarterlyFeeMap.put(stdDb+"_"+divDb, feesTypeDetailMap);
						}
					}
					flag = true;
				}
				
				feesTotalMap.put("q1StdCount", q1StdCount);
				feesTotalMap.put("q2StdCount", q2StdCount);
				feesTotalMap.put("q3StdCount", q3StdCount);
				feesTotalMap.put("q4StdCount", q4StdCount);
				feesTotalMap.put("q1StdSum", q1StdSum);
				feesTotalMap.put("q2StdSum", q2StdSum);
				feesTotalMap.put("q3StdSum", q3StdSum);
				feesTotalMap.put("q4StdSum", q4StdSum);
				feesTotalMap.put("qStdConcession", stdConcession);
				stdDivQuarterlyFeeMap.put(stdDb+"_Total", feesTotalMap);
				
//				feesTotalMap.clear();
				feesHeadMap.clear();
				q1StdCount = 0; q2StdCount = 0; q3StdCount = 0; q4StdCount = 0;
				q1StdSum = 0; q2StdSum = 0; q3StdSum = 0; q4StdSum = 0; stdConcession = 0;
			}
			
			feesAllTotalMap.put("q1AllCount", q1AllCount);
			feesAllTotalMap.put("q2AllCount", q2AllCount);
			feesAllTotalMap.put("q3AllCount", q3AllCount);
			feesAllTotalMap.put("q4AllCount", q4AllCount);
			
			feesAllTotalMap.put("q1AllSum", q1AllSum);
			feesAllTotalMap.put("q2AllSum", q2AllSum);
			feesAllTotalMap.put("q3AllSum", q3AllSum);
			feesAllTotalMap.put("q4AllSum", q4AllSum);
			feesAllTotalMap.put("allConcession", allConcession);
			
			stdDivQuarterlyFeeMap.put("Grand_Total", feesAllTotalMap);
			
		} catch (Exception e) {
			cm.logException(e);
			return stdDivQuarterlyFeeMap;
		}
		return stdDivQuarterlyFeeMap;
	}

	//// getContact GR map from hs_general_register///
	public LinkedHashMap<String, String> getContactGrMap(SessionData sessionData, String academicYear, String std,
			String div) throws Exception {

		String contactdb = "", grdb = "", contactCondition = "";
		LinkedHashMap<String, String> contactDetailMap = new LinkedHashMap<String, String>();
		ResultSet contactData = null;

		if (!std.equalsIgnoreCase("All")) {
			contactCondition = "AND CLASS_ALLOTMENT.PRESENT_STD='" + std + "'";
		}
		if (!div.equalsIgnoreCase("All")) {
			contactCondition += " AND CLASS_ALLOTMENT.PRESENT_DIV='" + div + "'";
		}

		String getContactQuery = "Select CLASS_ALLOTMENT.GR_NO,HS_GENERAL_REGISTER.CONTACT_1 "
				+ "FROM "+sessionData.getDBName()+".HS_GENERAL_REGISTER LEFT JOIN "+sessionData.getDBName()+".CLASS_ALLOTMENT ON HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
				+ "AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM "
				+ "where CLASS_ALLOTMENT.academic_year='"+academicYear+"' and CLASS_ALLOTMENT.section_nm='"+sessionData.getSectionName()+"' "
				+ contactCondition + "order by CLASS_ALLOTMENT.GR_NO";
		statement = connection.createStatement();
		contactData = statement.executeQuery(getContactQuery);
		while (contactData.next()) {
			grdb = contactData.getString("GR_NO").trim();
			contactdb = contactData.getString("CONTACT_1").trim();
			contactDetailMap.put(grdb, contactdb);
		}
		return contactDetailMap;
	}
	////////////////////

/////Export from Fees_Data_Mandatory to Fees_Report_Mandatory////////////////
	public boolean exportFeesDataToReport(SessionData sessionData, String academicYear, String std, String div, 
			String category, String fromDateStr, String toDateStr, boolean deleteTable)
			throws Exception {
	//	logger.info("=========exportFeesDataToReport Query============");
		TreeMap<Integer, LinkedHashMap<String, String>> feesReportMap = new TreeMap<Integer, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> selFeesHeadMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
//		LinkedHashMap<String, String> contactDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> dateMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> columnMap = new LinkedHashMap<String, String>();
	
		String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
				whereCondition = "", bank = "", paymentMode = "", chequeDDNo = "", chequeDDDate = "", detailStr = "",
				feesHeadStr = "", feeData = "", nameDb = "", rollNoDb = "", prevStd = "", findColumnListQuery = "",
				columnList = "", columnName = "", tableName = "", insertFeeReport = "", feesStr = "", 
				feesValue = "", updateFeeReport = "";
		int frequencyInt = 0, receipt = 0, udpdateCount = 0;
		double feesHeadAmount = 0, studentTotalAmount = 0, penalty = 0, concession = 0, balanceAmount = 0,
				prevBalanceAmount = 0, cashTotal = 0, chequeTotal = 0, upiTotal = 0, otherTotal = 0, ddTotal = 0;
		List<String> studentReportList = new ArrayList<String>();
		String[] data = null, dataSplit = null;
		String colFees = "";
	
		try {
			if(deleteTable) {
				
				try {
					String alterQuery = "DROP TABLE " + sessionData.getDBName() + "." + "FEES_REPORT_MANDATORY";
					statement = connection.createStatement();
					statement.executeUpdate(alterQuery);
				} catch(Exception e) {
					cm.logException(e);
				}
				
				try {
					String feesHeadQuery = "SELECT DISTINCT FEES_NAME from " + sessionData.getDBName() + "." + "fees_head";
					String feeHead = "";
					statement = connection.createStatement();
					resultSet = statement.executeQuery(feesHeadQuery);
					while (resultSet.next()) {
						feeHead = resultSet.getString("FEES_NAME");
						feeHead = cm.replaceCommaApostrophy(feeHead);
						if(!columnMap.containsKey(feeHead)) {
							colFees = colFees + feeHead + " double,";
							columnMap.put(feeHead, feeHead);
						}
					}
				} catch(Exception e) {
					cm.logException(e);
				}
				
				try {
					String queryfees_data = "CREATE TABLE `fees_report_mandatory` ( `STD_1` varchar(10) DEFAULT NULL, `DIV_1` varchar(10) DEFAULT NULL, "
							+ "`ACADEMIC_YEAR` varchar(10) DEFAULT NULL,  `FEE_STATUS` varchar(20) DEFAULT NULL, `PENALTY_AMOUNT` double DEFAULT NULL, "
							+ "`TOTAL_AMOUNT` double DEFAULT NULL, `CONCESSION_AMOUNT` double DEFAULT NULL, `FEE_DATE` date DEFAULT NULL, "
							+ "`CASH_TOTAL` double DEFAULT NULL, `CHEQUE_TOTAL` double DEFAULT NULL, `UPI_TOTAL` double DEFAULT NULL, `OTHER_TOTAL` double DEFAULT NULL, "
							+ "`CHEQUE_DETAIL` varchar(5000) DEFAULT NULL, `DD_TOTAL` double DEFAULT NULL, `DD_DETAIL` varchar(5000) DEFAULT NULL, "
							+ "`CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `CREATED_BY` varchar(30) DEFAULT NULL, "
							+ "`MODIFIED_DATE` DATETIME ON UPDATE CURRENT_TIMESTAMP, `MODIFIED_BY` varchar(30) DEFAULT NULL, "
							+ "`SECTION_NM` varchar(10) DEFAULT NULL,"+colFees+" KEY `AcaSecIndex` (`ACADEMIC_YEAR`,`SECTION_NM`)) "
							+ "ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci";
					statement.executeUpdate(queryfees_data);
				} catch (Exception e) {
					cm.logException(e);
				}
			}
			
			tableName = "FEES_DATA_MANDATORY";
	
			int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
	
			findColumnListQuery = "select DISTINCT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where " + "TABLE_NAME='"
					+ tableName + "' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnListQuery);
			while (resultSet.next()) {
				columnName = resultSet.getString("COLUMN_NAME");
				if (columnName.contains("_DATE") && !columnName.equalsIgnoreCase("CREATED_DATE")
						&& !columnName.equalsIgnoreCase("MODIFIED_DATE")) {
					columnList += "DATE_FORMAT(" + resultSet.getString("COLUMN_NAME") + ", '%d/%m/%Y')" + " AS "
							+ resultSet.getString("COLUMN_NAME") + ",";
				} else {
					columnList += tableName + "." + resultSet.getString("COLUMN_NAME") + ",";
				}
			}
	
			if (!std.equalsIgnoreCase("All")) {
				whereCondition = " AND " + tableName + ".STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All")) {
				whereCondition += " AND " + tableName + ".DIV_1='" + div + "'";
			}
	
			/// Get contact Number
//			contactDetailMap = getContactGrMap(sessionData, academicYear, std, div);
	
			ResultSet resultSetFeesData = null;
			String query = "SELECT " + columnList
					+ "FEES_DATA_MANDATORY.ROLL_NO,concat(FEES_DATA_MANDATORY.LAST_NAME,' ',FEES_DATA_MANDATORY.FIRST_NAME,' ',FEES_DATA_MANDATORY.FATHER_NAME) AS NAME "
					+ "FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName + ".ACADEMIC_YEAR='"
					+ academicYear + "' " + "AND " + tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' "
					+ whereCondition + " ORDER BY " + tableName + ".STD_1";
			statement = connection.createStatement();
			resultSetFeesData = statement.executeQuery(query);
	
			while (resultSetFeesData.next()) {
				detailStr = "";
				studentTotalAmount = 0;
				LinkedHashMap<String, String> feesReportDetailMap = new LinkedHashMap<String, String>();
				grNoDb = resultSetFeesData.getString("GR_NO");
				stdDb = resultSetFeesData.getString("STD_1");
				divDb = resultSetFeesData.getString("DIV_1");
				nameDb = resultSetFeesData.getString("NAME") == null ? " "
						: (resultSetFeesData.getString("NAME").trim());
				rollNoDb = resultSetFeesData.getString("ROLL_NO");
				data = new String[20];
	
				if (!prevStd.equalsIgnoreCase(stdDb)) {
					feesHeadMap = getFeesHeadData(sessionData, academicYear, stdDb, sessionData.getSectionName(),
							category);
				}
	
				Set set = feesHeadMap.entrySet();
				Iterator j = set.iterator();
				while (j.hasNext()) {
					feesHeadAmount = 0;
					penalty = 0;
					concession = 0;
	
					Map.Entry me = (Map.Entry) j.next();
					feesHead = me.getKey().toString();
					frequencyInt = cm.frequencyToInteger(
							((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());
					if (frequencyInt == 12) {
						for (int i = 0; i < 12; i++) {
	
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feeData == null)
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;
	
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}
	
								updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
										feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
										paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
										balanceAmount, prevBalanceAmount);
							}
						}
					} else if (frequencyInt == 4) {
						for (int i = 0; i < 12; i += 3) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feeData == null)
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}
	
								updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
										feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
										paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
										balanceAmount, prevBalanceAmount);
							}
						}
					} else if (frequencyInt == 2) {
						for (int i = 0; i < 12; i += 6) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feeData == null || feeData.trim().equalsIgnoreCase(""))
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}
	
								updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
										feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
										paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
										balanceAmount, prevBalanceAmount);
							}
						}
					} else if (frequencyInt == 1) {
						feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
								+ cm.intgerToMonth(startMonth + "") + "_DATE");
						if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
							feesHeadAmount = resultSetFeesData
									.getDouble(feesHead + "_" + cm.intgerToMonth(startMonth + ""));
							feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth(startMonth + "") + "_BANK");
							if (feeData == null)
								continue;
							dataSplit = feeData.split("\\!");
							data = cm.toAddInReport(dataSplit);
							if (data == null)
								continue;
							paymentMode = data[0];
							bank = data[1];
							chequeDDNo = data[2];
							chequeDDDate = data[3];
							penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
							concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
							receipt = Integer.parseInt(data[6]);
							if (data.length > 10) {
								balanceAmount = Double.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
								prevBalanceAmount = Double
										.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
							}
	
							updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
									feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
									paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
									balanceAmount, prevBalanceAmount);
						}
					}
				}
	
				// clear fields for next student
				receipt = 0;
				paymentMode = "";
				bank = "";
				chequeDDNo = "";
				chequeDDDate = "";
				prevStd = stdDb;
			}
	
			Double feesHeadTotal = 0.0;
			Double feesHeadValue = 0.0;
			Double penaltyTotal = 0.0;
			Double concessionTotal = 0.0;
			Double balanceTotal = 0.0;
			Double grandTotal = 0.0;
	
			String headerStr = "GR NO|NAME|CONTACT|STD|DIV|ROLL|RECEIPT|DATE|";
			String totalStr = " |GRAND TOTAL| | | | | | |";
			Set set = selFeesHeadMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				headerStr += me.getKey().toString().replace("$$", ".") + "|";
			}
			headerStr += "PENALTY|CONCESSION|BALANCE|TOTAL|PAYMENT MODE|BANK|CHEQUE/DD NO|CHEQUE/DD DATE";
			studentReportList.add(cm.revertCommaApostrophy(headerStr));
	
			String valueStr = "";
			LinkedHashMap feesReceipt = new LinkedHashMap();
			Set setFees = feesReportMap.entrySet();
			Iterator j = setFees.iterator();
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				feesReceipt = new LinkedHashMap<String, String>();
	
				feesReceipt = (LinkedHashMap<String, String>) me.getValue();
	
//				contact = contactDetailMap.get(feesReceipt.get("grNo")) == null ? "0"
//						: contactDetailMap.get(feesReceipt.get("grNo")).toString();
//				if (contact.equalsIgnoreCase("")) {
//					contact = "0";
//				}
				valueStr = feesReceipt.get("grNo") + "|" + feesReceipt.get("name") + "| |"
						+ feesReceipt.get("std") + "|" + feesReceipt.get("div") + "|" + feesReceipt.get("rollNo") + "|"
						+ me.getKey() + "|" + feesReceipt.get("feesDate") + "|";
	
				Iterator k = set.iterator();
				while (k.hasNext()) {
					Map.Entry meFees = (Map.Entry) k.next();
					feesHeadValue = feesReceipt.get(meFees.getKey()) == null ? 0
							: Double.parseDouble(feesReceipt.get(meFees.getKey()).toString());
	
					feesHeadTotal = (Double.parseDouble(meFees.getValue().toString()) + feesHeadValue);
					valueStr += String.format("%.2f", feesHeadValue) + "|";
					meFees.setValue(String.format("%.2f", feesHeadTotal));
					
					if(dateMap.get(feesReceipt.get("feesDate").toString()) != null) {
						feesStr = feesStr + ""+meFees.getKey()+"="+meFees.getKey()+" + " + feesHeadValue +",";
					}
					else {
						feesStr = feesStr + meFees.getKey() + ",";
						feesValue = feesValue + feesHeadValue + ",";
					}
				}
				if(dateMap.get(feesReceipt.get("feesDate").toString()) == null) {
					feesStr = feesStr.substring(0, feesStr.length()-1);
					feesValue = feesValue.substring(0, feesValue.length()-1);
				}
				
				DecimalFormat f = new DecimalFormat("##.00");
				if(feesReceipt.get("paymentMode").toString().equalsIgnoreCase("Cash")) {
					cashTotal = Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))));
					chequeTotal = 0;
					upiTotal = 0;
					otherTotal = 0;
					ddTotal = 0;
				} else if(feesReceipt.get("paymentMode").toString().equalsIgnoreCase("Cheque")) {
					chequeTotal = Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))));
					cashTotal = 0;
					upiTotal = 0;
					otherTotal = 0;
					ddTotal = 0;
				} else if(feesReceipt.get("paymentMode").toString().equalsIgnoreCase("DD")) {
					ddTotal = Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))));
					cashTotal = 0;
					upiTotal = 0;
					otherTotal = 0;
					chequeTotal = 0;
				} else if(feesReceipt.get("paymentMode").toString().equalsIgnoreCase("UPI")) {
					upiTotal = Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))));
					cashTotal = 0;
					chequeTotal = 0;
					otherTotal = 0;
					ddTotal = 0;
				} else {
					otherTotal = Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))));
					cashTotal = 0;
					chequeTotal = 0;
					upiTotal = 0;
					ddTotal = 0;
				}
				
				if(dateMap.get(feesReceipt.get("feesDate").toString()) != null) {
					updateFeeReport = "UPDATE " + sessionData.getDBName() + ".fees_report_mandatory SET "+feesStr 
							+ "PENALTY_AMOUNT=PENALTY_AMOUNT+"+Double.parseDouble((String) feesReceipt.get("penalty"))
							+",TOTAL_AMOUNT=TOTAL_AMOUNT+"+ Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))))
							+",CONCESSION_AMOUNT=CONCESSION_AMOUNT+"+ Double.parseDouble((String) feesReceipt.get("concession")) 
							+",CASH_TOTAL=CASH_TOTAL+"+cashTotal+",CHEQUE_TOTAL=CHEQUE_TOTAL+"+chequeTotal
							+",UPI_TOTAL=UPI_TOTAL+"+upiTotal+",OTHER_TOTAL=OTHER_TOTAL+"+otherTotal+",DD_TOTAL=DD_TOTAL+"+ddTotal
							+" Where FEE_DATE=STR_TO_DATE('"+feesReceipt.get("feesDate")+"', '%d/%m/%Y') "
							+ "AND SECTION_NM='"+sessionData.getSectionName() +"' AND ACADEMIC_YEAR='" + academicYear.trim() + "' "
							+ "AND STD_1='"+feesReceipt.get("std")+"' AND DIV_1='"+feesReceipt.get("div")+"'";
					statement = connection.createStatement();
					udpdateCount = statement.executeUpdate(updateFeeReport);
				}
				else {
					insertFeeReport = "INSERT INTO " + sessionData.getDBName() + ".fees_report_mandatory "
							+ "(STD_1, DIV_1, ACADEMIC_YEAR, FEE_STATUS, PENALTY_AMOUNT, TOTAL_AMOUNT, CONCESSION_AMOUNT, FEE_DATE, "
							+ "CASH_TOTAL,CHEQUE_TOTAL,UPI_TOTAL,OTHER_TOTAL, CHEQUE_DETAIL, DD_TOTAL, DD_DETAIL, CREATED_DATE, CREATED_BY, MODIFIED_DATE, "
							+ "MODIFIED_BY,SECTION_NM, "+feesStr+") "
							+ "VALUES ('" + feesReceipt.get("std") + "','" + feesReceipt.get("div") + "','" + academicYear.trim() + "','Pending'," 
							+ Double.parseDouble((String) feesReceipt.get("penalty")) +","+ Double.parseDouble(f.format(Double.parseDouble((String) feesReceipt.get("total"))))+","
							+ Double.parseDouble((String) feesReceipt.get("concession")) +",STR_TO_DATE('"+feesReceipt.get("feesDate")+"', '%d/%m/%Y'),"+ cashTotal +","
							+ chequeTotal +","+ upiTotal +","+ otherTotal+ ",'',"+ ddTotal+",'',SYSDATE(),'"+sessionData.getUserName()+"',SYSDATE(),'"
							+ sessionData.getUserName()+"','"+sessionData.getSectionName() +"'," +feesValue  +")";
					
					statement = connection.createStatement();
					udpdateCount = statement.executeUpdate(insertFeeReport);
				}
				
				feesStr = "";
				feesValue = "";
				dateMap.put(feesReceipt.get("feesDate") + " : " +feesReceipt.get("std") +" - " + feesReceipt.get("div"),"");
			}
	
	
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
		return true;
	}

//	/////Export from Fees_Data_Mandatory to Fees_Report_Mandatory////////////////
//	public void exportFeesDataToReport(SessionData sessionData) {
//		String dataColumn = "", addColumnQuery = "ALTER TABLE FEES_REPORT_MANDATORY ADD (";
//		ArrayList<String> list=new ArrayList<String>();
//		
//		try {
//			
//			String trucateQuery = "TRUNCATE TABLE " + sessionData.getDBName() + ".FEES_REPORT_MANDATORY";
//			statement = connection.createStatement();
//			statement.executeQuery(trucateQuery);
//			
//			String findColumnListQuery = "select DISTINCT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS "
//					+ "where TABLE_NAME='FEES_REPORT_MANDATORY' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
//			statement = connection.createStatement();
//			resultSet = statement.executeQuery(findColumnListQuery);
//			while (resultSet.next()) {
//				dataColumn = resultSet.getString("COLUMN_NAME");
//				list.add(dataColumn);
//			}
//			
//			findColumnListQuery = "select DISTINCT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS "
//					+ "where TABLE_NAME='FEES_DATA_MANDATORY' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
//			statement = connection.createStatement();
//			resultSet = statement.executeQuery(findColumnListQuery);
//			while (resultSet.next()) {
//				dataColumn = resultSet.getString("COLUMN_NAME");
//				if(dataColumn.contains("_BANK")){
//					dataColumn = dataColumn.substring(0, dataColumn.length()-9);
//					if(!list.contains(dataColumn)) {
//						addColumnQuery = addColumnQuery + dataColumn+"  DOUBLE,";
//					}
//				}
//			}
//			addColumnQuery = addColumnQuery.substring(0, addColumnQuery.length()-1);
//			addColumnQuery =  addColumnQuery + ")";
//			
//			try {
//				statement = connection.createStatement();
//				statement.executeUpdate(addColumnQuery);
//			} catch (Exception e) {
//				logger.info("failed to create columns in Fees Report Mandatory table >> " + e);
//			}
//		}
//		catch(Exception e) {
//			cm.logException(e);
//		}
//	}
	
	/////////// getDailyFeesReport////////////////////////////////////////
	public TreeMap<Integer, LinkedHashMap<String, String>> getDailyFeesReport(SessionData sessionData,
			String academicYear, String std, String div, String category, String fromDateStr, String toDateStr)
			throws Exception {
//		logger.info("=========getDailyFeesReport Query============");
//		LinkedHashMap<String, LinkedHashMap<String, String>> feesReportMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		TreeMap<Integer, LinkedHashMap<String, String>> feesReportMap = new TreeMap<Integer, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> selFeesHeadMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> contactDetailMap = new LinkedHashMap<String, String>();

		String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
				whereCondition = "", bank = "", paymentMode = "", chequeDDNo = "", chequeDDDate = "", detailStr = "",
				feesHeadStr = "", feeData = "", nameDb = "", rollNoDb = "", prevStd = "", findColumnListQuery = "",
				columnList = "", columnName = "", tableName = "", contact = "";
		int frequencyInt = 0, receipt = 0;
		double feesHeadAmount = 0, studentTotalAmount = 0, penalty = 0, concession = 0, balanceAmount = 0,
				prevBalanceAmount = 0;
		List<String> studentReportList = new ArrayList<String>();
		String[] data = null, dataSplit = null;

		try {

//			if(optional.equalsIgnoreCase("NO")){
			tableName = "FEES_DATA_MANDATORY";
//			}
//			else if(optional.equalsIgnoreCase("YES")){
//				tableName = "FEES_DATA_OPTIONAL";
//			}

			int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

			findColumnListQuery = "select DISTINCT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where " + "TABLE_NAME='"
					+ tableName + "' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnListQuery);
			while (resultSet.next()) {
				columnName = resultSet.getString("COLUMN_NAME");
				if (columnName.contains("_DATE") && !columnName.equalsIgnoreCase("CREATED_DATE")
						&& !columnName.equalsIgnoreCase("MODIFIED_DATE")) {
					columnList += "DATE_FORMAT(" + resultSet.getString("COLUMN_NAME") + ", '%d/%m/%Y')" + " AS "
							+ resultSet.getString("COLUMN_NAME") + ",";
				} else {
					columnList += tableName + "." + resultSet.getString("COLUMN_NAME") + ",";
				}
			}

			if (!std.equalsIgnoreCase("All")) {
				whereCondition = " AND " + tableName + ".STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All")) {
				whereCondition += " AND " + tableName + ".DIV_1='" + div + "'";
			}

			/// Get contact Number
			contactDetailMap = getContactGrMap(sessionData, academicYear, std, div);

			ResultSet resultSetFeesData = null;
			String query = "SELECT " + columnList
					+ "FEES_DATA_MANDATORY.ROLL_NO,concat(FEES_DATA_MANDATORY.LAST_NAME,' ',FEES_DATA_MANDATORY.FIRST_NAME,' ',FEES_DATA_MANDATORY.FATHER_NAME) AS NAME "
					+ "FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName + ".ACADEMIC_YEAR='"
					+ academicYear + "' " + "AND " + tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' "
					+ whereCondition + " ORDER BY " + tableName + ".STD_1";
			statement = connection.createStatement();
			resultSetFeesData = statement.executeQuery(query);

			while (resultSetFeesData.next()) {
				detailStr = "";
				studentTotalAmount = 0;
				LinkedHashMap<String, String> feesReportDetailMap = new LinkedHashMap<String, String>();
				grNoDb = resultSetFeesData.getString("GR_NO");
				stdDb = resultSetFeesData.getString("STD_1");
				divDb = resultSetFeesData.getString("DIV_1");
				nameDb = resultSetFeesData.getString("NAME") == null ? " "
						: (resultSetFeesData.getString("NAME").trim());
				rollNoDb = resultSetFeesData.getString("ROLL_NO");
				data = new String[20];

				if (!prevStd.equalsIgnoreCase(stdDb)) {
					feesHeadMap = getFeesHeadData(sessionData, academicYear, stdDb, sessionData.getSectionName(),
							category);
				}

				Set set = feesHeadMap.entrySet();
				Iterator j = set.iterator();
				while (j.hasNext()) {
					feesHeadAmount = 0;
					penalty = 0;
					concession = 0;

					Map.Entry me = (Map.Entry) j.next();
					feesHead = me.getKey().toString();
					frequencyInt = cm.frequencyToInteger(
							((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());
					if (frequencyInt == 12) {
						for (int i = 0; i < 12; i++) {

							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feeData == null)
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;

								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}

								updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
										feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
										paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
										balanceAmount, prevBalanceAmount);
							}
						}
					} else if (frequencyInt == 4) {
						for (int i = 0; i < 12; i += 3) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feeData == null)
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}

								updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
										feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
										paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
										balanceAmount, prevBalanceAmount);
							}
						}
					} else if (frequencyInt == 2) {
						for (int i = 0; i < 12; i += 6) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feeData == null)
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}

								updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
										feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
										paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
										balanceAmount, prevBalanceAmount);
							}
						}
					} else if (frequencyInt == 1) {
						feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
								+ cm.intgerToMonth(startMonth + "") + "_DATE");
						if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
							feesHeadAmount = resultSetFeesData
									.getDouble(feesHead + "_" + cm.intgerToMonth(startMonth + ""));
							feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth(startMonth + "") + "_BANK");
							if (feeData == null)
								continue;
							dataSplit = feeData.split("\\!");
							data = cm.toAddInReport(dataSplit);
							if (data == null)
								continue;
							paymentMode = data[0];
							bank = data[1];
							chequeDDNo = data[2];
							chequeDDDate = data[3];
							penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
							concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
							receipt = Integer.parseInt(data[6]);
							if (data.length > 10) {
								balanceAmount = Double.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
								prevBalanceAmount = Double
										.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
							}

							updateFeesReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
									feesHead, feesHeadAmount, penalty, concession, grNoDb, nameDb, rollNoDb,
									paymentMode, bank, chequeDDNo, chequeDDDate, selFeesHeadMap, feesDate,
									balanceAmount, prevBalanceAmount);
						}
					}
				}

				// clear fields for next student
				receipt = 0;
				paymentMode = "";
				bank = "";
				chequeDDNo = "";
				chequeDDDate = "";
				prevStd = stdDb;
			}

			Double feesHeadTotal = 0.0;
			Double feesHeadValue = 0.0;
			Double penaltyTotal = 0.0;
			Double concessionTotal = 0.0;
			Double balanceTotal = 0.0;
			Double grandTotal = 0.0;

			String headerStr = "GR NO|NAME|CONTACT|STD|DIV|ROLL|RECEIPT|DATE|";
			String totalStr = " |GRAND TOTAL| | | | | | |";
			Set set = selFeesHeadMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				headerStr += me.getKey().toString().replace("$$", ".") + "|";
			}
			headerStr += "PENALTY|CONCESSION|BALANCE|TOTAL|PAYMENT MODE|BANK|CHEQUE/DD NO|CHEQUE/DD DATE";
			studentReportList.add(cm.revertCommaApostrophy(headerStr));

			String valueStr = "";
			LinkedHashMap feesReceipt = new LinkedHashMap();
			Set setFees = feesReportMap.entrySet();
			Iterator j = setFees.iterator();
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				feesReceipt = new LinkedHashMap<String, String>();

				feesReceipt = (LinkedHashMap<String, String>) me.getValue();

				contact = contactDetailMap.get(feesReceipt.get("grNo")) == null ? "0"
						: contactDetailMap.get(feesReceipt.get("grNo")).toString();
				if (contact.equalsIgnoreCase("")) {
					contact = "0";
				}
				valueStr = feesReceipt.get("grNo") + "|" + feesReceipt.get("name") + "|" + contact + "|"
						+ feesReceipt.get("std") + "|" + feesReceipt.get("div") + "|" + feesReceipt.get("rollNo") + "|"
						+ me.getKey() + "|" + feesReceipt.get("feesDate") + "|";

				Iterator k = set.iterator();
				while (k.hasNext()) {
					Map.Entry meFees = (Map.Entry) k.next();
					feesHeadValue = feesReceipt.get(meFees.getKey()) == null ? 0
							: Double.parseDouble(feesReceipt.get(meFees.getKey()).toString());

					feesHeadTotal = (Double.parseDouble(meFees.getValue().toString()) + feesHeadValue);
					valueStr += String.format("%.2f", feesHeadValue) + "|";
					meFees.setValue(String.format("%.2f", feesHeadTotal));
				}

				valueStr += String.format("%.2f", Double.parseDouble(feesReceipt.get("penalty").toString())) + "|"
						+ String.format("%.2f", Double.parseDouble(feesReceipt.get("concession").toString())) + "|"
						+ String.format("%.2f", Double.parseDouble(feesReceipt.get("balanceAmount").toString())) + "|"
						+ String.format("%.2f", Double.parseDouble(feesReceipt.get("total").toString())) + "|"
						+ feesReceipt.get("paymentMode") + "|" + feesReceipt.get("bank") + "|"
						+ feesReceipt.get("chequeDDNo") + "|" + feesReceipt.get("chequeDDDate");

				penaltyTotal += Double.parseDouble(String.format("%.2f", penaltyTotal));
				concessionTotal += Double.parseDouble(feesReceipt.get("concession").toString());
				balanceTotal += Double.parseDouble(feesReceipt.get("balanceAmount").toString());
				grandTotal += Double.parseDouble(feesReceipt.get("total").toString());
				studentReportList.add(valueStr);
			}

			Iterator m = set.iterator();
			while (m.hasNext()) {
				Map.Entry me = (Map.Entry) m.next();
				totalStr += me.getValue() + "|";
			}
			totalStr += String.format("%.2f", penaltyTotal) + "|" + String.format("%.2f", concessionTotal) + "|"
					+ String.format("%.2f", balanceTotal) + "|" + String.format("%.2f", grandTotal) + "| | | | ";
			studentReportList.add(totalStr);

			if (studentReportList.size() > 2) {
				ce.generateExcel(sessionData, "FEE REPORT",
						"DAY_STATUS_" + fromDateStr.replace("/", "-") + "_to_" + toDateStr.replace("/", "-"), "",
						studentReportList, true,
						"Daily Fee Report for " + fromDateStr + " to " + toDateStr + "  STD: " + std + "   DIV: " + div
								+ "    Year:" + academicYear + "   Category:" + category + "   "
								+ sessionData.getSectionFullName(),
						1);
			} else {
				JOptionPane.showMessageDialog(null, "No Data found..");
			}

		} catch (Exception e) {
			if (e.getMessage() != null && e.getMessage().contains("not found")) {
				String columnError = cm.revertCommaApostrophy(e.getMessage()).toString();
				columnError = columnError.substring(columnError.indexOf("'") + 1, columnError.lastIndexOf("'"));
				if (columnError.contains("_DATE")) {
					columnError = columnError.substring(0, columnError.length() - 9);
				}
				JOptionPane.showMessageDialog(null,
						"Please click edit & save for fee head " + columnError + " " + "\n academic year : "
								+ academicYear + " and std : " + std + " \n Then try again to generate report.");
			}
			cm.logException(e);
			return feesReportMap;
		}
		return feesReportMap;
	}

		/////////// getFeesCollectionReport////////////////////////////////////////
		public TreeMap<String, Double> getFeesCollectionReport(SessionData sessionData,
				String academicYear, String category, String fromDateStr, String toDateStr)
				throws Exception {
		//	logger.info("=========getFeesCollectionReport Query============");
			TreeMap<String, Double> feesReportMap = new TreeMap<String, Double>();
			LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
			LinkedHashMap<String, Double> selFeesHeadMap = new LinkedHashMap<String, Double>();
			LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
			LinkedHashMap<String, String> contactDetailMap = new LinkedHashMap<String, String>();
		
			String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
					whereCondition = "", bank = "", paymentMode = "", chequeDDNo = "", chequeDDDate = "", detailStr = "",
					feesHeadStr = "", feeData = "", nameDb = "", rollNoDb = "", prevStd = "", findColumnListQuery = "",
					columnList = "", columnName = "", tableName = "", contact = "";
			int frequencyInt = 0, receipt = 0;
			double feesHeadAmount = 0, studentTotalAmount = 0, penalty = 0, concession = 0, balanceAmount = 0,
					prevBalanceAmount = 0;
			List<String> feeCollectionReportList = new ArrayList<String>();
			String[] data = null, dataSplit = null;
		
			try {
		
				tableName = "FEES_DATA_MANDATORY";
		
				int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
		
				findColumnListQuery = "select DISTINCT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where " + "TABLE_NAME='"
						+ tableName + "' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findColumnListQuery);
				while (resultSet.next()) {
					columnName = resultSet.getString("COLUMN_NAME");
					if (columnName.contains("_DATE") && !columnName.equalsIgnoreCase("CREATED_DATE")
							&& !columnName.equalsIgnoreCase("MODIFIED_DATE")) {
						columnList += "DATE_FORMAT(" + resultSet.getString("COLUMN_NAME") + ", '%d/%m/%Y')" + " AS "
								+ resultSet.getString("COLUMN_NAME") + ",";
					} else {
						columnList += tableName + "." + resultSet.getString("COLUMN_NAME") + ",";
					}
				}
		
				/// Get contact Number
//				contactDetailMap = getContactGrMap(sessionData, academicYear, std, div);
		
				ResultSet resultSetFeesData = null;
				String query = "SELECT " + columnList
						+ "FEES_DATA_MANDATORY.ROLL_NO,concat(FEES_DATA_MANDATORY.LAST_NAME,' ',FEES_DATA_MANDATORY.FIRST_NAME,' ',FEES_DATA_MANDATORY.FATHER_NAME) AS NAME "
						+ "FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName + ".ACADEMIC_YEAR='"
						+ academicYear + "' " + "AND " + tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' "
						+ whereCondition + " ORDER BY " + tableName + ".STD_1";
				statement = connection.createStatement();
				resultSetFeesData = statement.executeQuery(query);
		
				while (resultSetFeesData.next()) {
					detailStr = "";
					studentTotalAmount = 0;
					LinkedHashMap<String, String> feesReportDetailMap = new LinkedHashMap<String, String>();
					grNoDb = resultSetFeesData.getString("GR_NO");
					stdDb = resultSetFeesData.getString("STD_1");
					divDb = resultSetFeesData.getString("DIV_1");
					nameDb = resultSetFeesData.getString("NAME") == null ? " "
							: (resultSetFeesData.getString("NAME").trim());
					rollNoDb = resultSetFeesData.getString("ROLL_NO");
					data = new String[20];
		
					if (!prevStd.equalsIgnoreCase(stdDb)) {
						feesHeadMap = getFeesHeadData(sessionData, academicYear, stdDb, sessionData.getSectionName(),
								category);
					}
		
					Set set = feesHeadMap.entrySet();
					Iterator j = set.iterator();
					while (j.hasNext()) {
						feesHeadAmount = 0;
						penalty = 0;
						concession = 0;
		
						Map.Entry me = (Map.Entry) j.next();
						feesHead = me.getKey().toString();
						frequencyInt = cm.frequencyToInteger(
								((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());
						if (frequencyInt == 12) {
							for (int i = 0; i < 12; i++) {
		
								feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
								if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
									feesHeadAmount = resultSetFeesData
											.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
									feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
											+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
									if (feeData == null)
										continue;
									dataSplit = feeData.split("\\!");
									data = cm.toAddInReport(dataSplit);
									if (data == null)
										continue;
		
									paymentMode = data[0];
									bank = data[1];
									chequeDDNo = data[2];
									chequeDDDate = data[3];
									penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
									concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
									receipt = Integer.parseInt(data[6]);
									if (data.length > 10) {
										balanceAmount = Double
												.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
										prevBalanceAmount = Double
												.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
									}
		
									updateFeesCollectionReportMap(sessionData, feesReportMap, stdDb, 
											feesHead, feesHeadAmount, penalty, concession, paymentMode, balanceAmount);
								}
							}
						} else if (frequencyInt == 4) {
							for (int i = 0; i < 12; i += 3) {
								feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
								if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
									feesHeadAmount = resultSetFeesData
											.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
									feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
											+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
									if (feeData == null)
										continue;
									dataSplit = feeData.split("\\!");
									data = cm.toAddInReport(dataSplit);
									if (data == null)
										continue;
									paymentMode = data[0];
									bank = data[1];
									chequeDDNo = data[2];
									chequeDDDate = data[3];
									penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
									concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
									receipt = Integer.parseInt(data[6]);
									if (data.length > 10) {
										balanceAmount = Double
												.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
										prevBalanceAmount = Double
												.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
									}
		
									updateFeesCollectionReportMap(sessionData, feesReportMap, stdDb, 
											feesHead, feesHeadAmount, penalty, concession, paymentMode, balanceAmount);
								}
							}
						} else if (frequencyInt == 2) {
							for (int i = 0; i < 12; i += 6) {
								feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
								if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
									feesHeadAmount = resultSetFeesData
											.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
									feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
											+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
									if (feeData == null)
										continue;
									dataSplit = feeData.split("\\!");
									data = cm.toAddInReport(dataSplit);
									if (data == null)
										continue;
									paymentMode = data[0];
									bank = data[1];
									chequeDDNo = data[2];
									chequeDDDate = data[3];
									penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
									concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
									receipt = Integer.parseInt(data[6]);
									if (data.length > 10) {
										balanceAmount = Double
												.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
										prevBalanceAmount = Double
												.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
									}
		
									updateFeesCollectionReportMap(sessionData, feesReportMap, stdDb, 
											feesHead, feesHeadAmount, penalty, concession, paymentMode, balanceAmount);
								}
							}
						} else if (frequencyInt == 1) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth(startMonth + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth(startMonth + ""));
								feeData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth(startMonth + "") + "_BANK");
								if (feeData == null)
									continue;
								dataSplit = feeData.split("\\!");
								data = cm.toAddInReport(dataSplit);
								if (data == null)
									continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}
		
								updateFeesCollectionReportMap(sessionData, feesReportMap, stdDb, 
										feesHead, feesHeadAmount, penalty, concession, paymentMode, balanceAmount);
								
							}
						}
					}
		
					// clear fields for next student
					receipt = 0;
					paymentMode = "";
					bank = "";
					chequeDDNo = "";
					chequeDDDate = "";
					prevStd = stdDb;
				}
		
				String[] stdList = sessionData.getConfigMap().get(sessionData.getSectionName().toUpperCase() + "_STD").split(",");
				String headerStr = "STD|FEES";
				feeCollectionReportList.add(headerStr);			
				for(String stdStr : stdList) {
					feeCollectionReportList.add(stdStr+"|"+(feesReportMap.get(stdStr) == null ? "0" : feesReportMap.get(stdStr)));	
				}
				
				feeCollectionReportList.add("Std Total|"+(feesReportMap.get("stdTotal") == null ? "0" : feesReportMap.get("stdTotal")));
				feeCollectionReportList.add("Cheque|"+(feesReportMap.get("chequeTotal") == null ? "0" : feesReportMap.get("chequeTotal")));
				feeCollectionReportList.add("DD|"+(feesReportMap.get("ddTotal") == null ? "0" : feesReportMap.get("ddTotal")));
				feeCollectionReportList.add("UPI|"+(feesReportMap.get("upiTotal") == null ? "0" : feesReportMap.get("upiTotal")));
				feeCollectionReportList.add("Cash|"+(feesReportMap.get("cashTotal") == null ? "0" : feesReportMap.get("cashTotal")));
				feeCollectionReportList.add("Concession|"+feesReportMap.get("concessionTotal"));
				feeCollectionReportList.add("Penalty|"+feesReportMap.get("penaltyTotal"));
//				feeCollectionReportList.add("Total|"+feesReportMap.get("allTotal"));
				
				if (feeCollectionReportList.size() > 2) {
//					ce.generateExcel(sessionData, "FEES",
//							"COLLECTION", "",
//							feeCollectionReportList, false,
//							"Fee Report for " + fromDateStr + " to " + toDateStr + "  Year:" + academicYear + "   Category:" + category, 1);
					
					ce.generateExcel(sessionData, "FEES", "COLLECTION", "", feeCollectionReportList, false,
							sessionData.getSectionName() + " Fee Report for " + fromDateStr + " to " + toDateStr + "  Year:" + academicYear + "   Category:" + category, 1);
					
				} else {
					JOptionPane.showMessageDialog(null, "No Data found..");
				}
		
			} catch (Exception e) {
				if (e.getMessage() != null && e.getMessage().contains("not found")) {
					String columnError = cm.revertCommaApostrophy(e.getMessage()).toString();
					columnError = columnError.substring(columnError.indexOf("'") + 1, columnError.lastIndexOf("'"));
					if (columnError.contains("_DATE")) {
						columnError = columnError.substring(0, columnError.length() - 9);
					}
					JOptionPane.showMessageDialog(null,
							"Please click edit & save for fee head " + columnError + " " + "\n academic year : "
									+ academicYear + " and std : All \n Then try again to generate report.");
				}
				cm.logException(e);
				return feesReportMap;
			}
			return feesReportMap;
		}

	/////////// getFeesAbstractReport////////////////////////////////////////
	public TreeMap<Integer, LinkedHashMap<String, Double>> getFeesAbstractReport(SessionData sessionData,
			String academicYear, String std, String div, String category, String fromDateStr, String toDateStr)
			throws Exception {
//		logger.info("=========getFeesAbstractReport Query============");
//		LinkedHashMap<String, LinkedHashMap<String, String>> feesReportMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		TreeMap<Integer, LinkedHashMap<String, Double>> feesReportMap = new TreeMap<Integer, LinkedHashMap<String, Double>>();
		LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> selFeesHeadMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> integerToAlphabetMap = new LinkedHashMap<String, String>();

		String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
				whereCondition = "", bank = "", paymentMode = "", chequeDDNo = "", chequeDDDate = "", detailStr = "",
				feesHeadStr = "", feesHeadData = "", nameDb = "", rollNoDb = "", prevStd = "", findColumnListQuery = "",
				columnList = "", columnName = "", tableName = "";
		int frequencyInt = 0, receipt = 0;
		double feesHeadAmount = 0, studentTotalAmount = 0, penalty = 0, concession = 0, balanceAmount = 0,
				prevBalanceAmount = 0;
		List<String> studentReportList = new ArrayList<String>();
		String[] data = null, dataSplit = null;

		try {
			integerToAlphabetMap = cm.IntegerToAlphabet();
			tableName = "FEES_DATA_MANDATORY";
			int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

			findColumnListQuery = "select DISTINCT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where " + "TABLE_NAME='"
					+ tableName + "' AND TABLE_SCHEMA='" + sessionData.getDBName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnListQuery);
			while (resultSet.next()) {
				columnName = resultSet.getString("COLUMN_NAME");
				if (columnName.contains("_DATE") && !columnName.equalsIgnoreCase("CREATED_DATE")
						&& !columnName.equalsIgnoreCase("MODIFIED_DATE")) {
					columnList += "DATE_FORMAT(" + resultSet.getString("COLUMN_NAME") + ", '%d/%m/%Y')" + " AS "
							+ resultSet.getString("COLUMN_NAME") + ",";
				} else {
					columnList += tableName + "." + resultSet.getString("COLUMN_NAME") + ",";
				}
			}

			if (!std.equalsIgnoreCase("All")) {
				whereCondition = " AND " + tableName + ".STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All")) {
				whereCondition += " AND " + tableName + ".DIV_1='" + div + "'";
			}

			ResultSet resultSetFeesData = null;
			String query = "SELECT " + columnList
					+ "CLASS_ALLOTMENT.ROLL_NO,concat(CLASS_ALLOTMENT.LAST_NAME,' ',CLASS_ALLOTMENT.FIRST_NAME,' ',CLASS_ALLOTMENT.FATHER_NAME) AS NAME "
					+ "FROM " + sessionData.getDBName() + "." + tableName + " LEFT JOIN " + sessionData.getDBName()
					+ "." + "CLASS_ALLOTMENT ON " + tableName + ".GR_NO=CLASS_ALLOTMENT.GR_NO AND " + tableName
					+ ".SECTION_NM=CLASS_ALLOTMENT.SECTION_NM  AND " + tableName
					+ ".ACADEMIC_YEAR=CLASS_ALLOTMENT.ACADEMIC_YEAR " + "WHERE " + tableName + ".ACADEMIC_YEAR='"
					+ academicYear + "' " + "AND " + tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' "
					+ whereCondition + " ORDER BY " + tableName + ".STD_1";
			statement = connection.createStatement();
			resultSetFeesData = statement.executeQuery(query);

			while (resultSetFeesData.next()) {
				detailStr = "";
				studentTotalAmount = 0;
				LinkedHashMap<String, String> feesReportDetailMap = new LinkedHashMap<String, String>();
				grNoDb = resultSetFeesData.getString("GR_NO");
				stdDb = resultSetFeesData.getString("STD_1");
				divDb = resultSetFeesData.getString("DIV_1");
				nameDb = resultSetFeesData.getString("NAME") == null ? " "
						: (resultSetFeesData.getString("NAME").trim());
				rollNoDb = resultSetFeesData.getString("ROLL_NO");
				data = new String[20];

				if (!prevStd.equalsIgnoreCase(stdDb)) {
					feesHeadMap = getFeesHeadData(sessionData, academicYear, stdDb, sessionData.getSectionName(),
							category);
				}

				Set set = feesHeadMap.entrySet();
				Iterator j = set.iterator();
				while (j.hasNext()) {
					feesHeadAmount = 0;
					penalty = 0;
					concession = 0;
					feesHeadData = "";

					Map.Entry me = (Map.Entry) j.next();
					feesHead = me.getKey().toString();
					frequencyInt = cm.frequencyToInteger(
							((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());

					if (frequencyInt == 12) {
						for (int i = 0; i < 12; i++) {

							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feesHeadData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feesHeadData != null) {
									dataSplit = feesHeadData.split("\\!");
								} else {
									continue;
								}
								data = cm.toAddInReport(dataSplit);
//								if(data == null) continue;

								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}

								updateFeesAbstractReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb,
										receipt, feesHead, feesHeadAmount, penalty, concession, selFeesHeadMap,
										feesDate);
							}
						}
					} else if (frequencyInt == 4) {
						for (int i = 0; i < 12; i += 3) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feesHeadData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feesHeadData != null) {
									dataSplit = feesHeadData.split("\\!");
								} else {
									continue;
								}
								data = cm.toAddInReport(dataSplit);
//								if(data == null) continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}

								updateFeesAbstractReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb,
										receipt, feesHead, feesHeadAmount, penalty, concession, selFeesHeadMap,
										feesDate);
							}
						}
					} else if (frequencyInt == 2) {
						for (int i = 0; i < 12; i += 6) {
							feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth((startMonth + i) + "") + "_DATE");
							if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
								feesHeadAmount = resultSetFeesData
										.getDouble(feesHead + "_" + cm.intgerToMonth((startMonth + i) + ""));
								feesHeadData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
										+ cm.intgerToMonth((startMonth + i) + "") + "_BANK");
								if (feesHeadData != null) {
									dataSplit = feesHeadData.split("\\!");
								} else {
									continue;
								}
								data = cm.toAddInReport(dataSplit);
//								if(data == null) continue;
								paymentMode = data[0];
								bank = data[1];
								chequeDDNo = data[2];
								chequeDDDate = data[3];
								penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
								concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
								receipt = Integer.parseInt(data[6]);
								if (data.length > 10) {
									balanceAmount = Double
											.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
									prevBalanceAmount = Double
											.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
								}

								updateFeesAbstractReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb,
										receipt, feesHead, feesHeadAmount, penalty, concession, selFeesHeadMap,
										feesDate);
							}
						}
					} else if (frequencyInt == 1) {
						feesDate = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
								+ cm.intgerToMonth(startMonth + "") + "_DATE");
						if (feesDate != null && cm.isDateBetween(fromDateStr, toDateStr, feesDate)) {
							feesHeadAmount = resultSetFeesData
									.getDouble(feesHead + "_" + cm.intgerToMonth(startMonth + ""));
							feesHeadData = resultSetFeesData.getString(cm.replaceCommaApostrophy(feesHead) + "_"
									+ cm.intgerToMonth(startMonth + "") + "_BANK");
							if (feesHeadData != null) {
								dataSplit = feesHeadData.split("\\!");
							} else {
								continue;
							}
							data = cm.toAddInReport(dataSplit);
//							if(data == null) continue;
							paymentMode = data[0];
							bank = data[1];
							chequeDDNo = data[2];
							chequeDDDate = data[3];
							penalty = Double.parseDouble(data[4].equalsIgnoreCase("NA") ? "0" : (data[4]));
							concession = Double.parseDouble(data[5].equalsIgnoreCase("NA") ? "0" : (data[5]));
							receipt = Integer.parseInt(data[6]);
							if (data.length > 10) {
								balanceAmount = Double.parseDouble(data[10].equalsIgnoreCase("NA") ? "0" : (data[10]));
								prevBalanceAmount = Double
										.parseDouble(data[11].equalsIgnoreCase("NA") ? "0" : (data[11]));
							}

							updateFeesAbstractReportMap(sessionData, feesReportMap, academicYear, stdDb, divDb, receipt,
									feesHead, feesHeadAmount, penalty, concession, selFeesHeadMap, feesDate);
						}
					}
				}

				// clear fields for next student
				receipt = 0;
				paymentMode = "";
				bank = "";
				chequeDDNo = "";
				chequeDDDate = "";
				prevStd = stdDb;
			}

			Double feesHeadTotal = 0.0;
			Double feesHeadValue = 0.0;
			Double penaltyTotal = 0.0;
			Double concessionTotal = 0.0;
			Double grandTotal = 0.0;

			String headerStr = "STD|DIV|";
			String totalStr = "GRAND TOTAL| |";
			Set set = selFeesHeadMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				headerStr += me.getKey().toString().replace("$$", ".") + "|";
			}
			headerStr += "PENALTY|CONCESSION|TOTAL";
			studentReportList.add(cm.revertCommaApostrophy(headerStr));

			String valueStr = "";
			double stdDouble = 0, divDouble = 0;
			LinkedHashMap feesReceipt = new LinkedHashMap();
			Set setFees = feesReportMap.entrySet();
			Iterator j = setFees.iterator();
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				feesReceipt = new LinkedHashMap<String, String>();

				feesReceipt = (LinkedHashMap<String, String>) me.getValue();
				stdDouble = (double) feesReceipt.get("std");
				if (feesReceipt.get("div") != null) {
					divDouble = (double) feesReceipt.get("div");
					valueStr = cm.IntegerToRoman("a" + (int) stdDouble) + "|"
							+ integerToAlphabetMap.get((int) divDouble + "") + "|";
				} else {
					valueStr = cm.IntegerToRoman("a" + (int) stdDouble) + "|Total|";
				}

				Iterator k = set.iterator();
				while (k.hasNext()) {
					Map.Entry meFees = (Map.Entry) k.next();
					feesHeadValue = feesReceipt.get(meFees.getKey()) == null ? 0
							: Double.parseDouble(feesReceipt.get(meFees.getKey()).toString());

					if (feesReceipt.get("div") != null) {
						feesHeadTotal = (Double.parseDouble(meFees.getValue().toString()) + feesHeadValue);
						valueStr += String.format("%.2f", feesHeadValue) + "|";
						meFees.setValue(String.format("%.2f", feesHeadTotal));
					} else {
						valueStr += String.format("%.2f", feesHeadValue) + "|";
//						meFees.setValue(String.format("%.2f", feesHeadTotal));
					}
				}

				valueStr += String.format("%.2f", Double.parseDouble(feesReceipt.get("penalty").toString())) + "|"
						+ String.format("%.2f", Double.parseDouble(feesReceipt.get("concession").toString())) + "|"
						+ String.format("%.2f", Double.parseDouble(feesReceipt.get("total").toString()));

				penaltyTotal += Double.parseDouble(String.format("%.2f", penaltyTotal));
				concessionTotal += Double.parseDouble(feesReceipt.get("concession").toString());
				if (feesReceipt.get("div") != null) {
					grandTotal += Double.parseDouble(feesReceipt.get("total").toString());
				}

				studentReportList.add(valueStr);
			}

			Iterator m = set.iterator();
			while (m.hasNext()) {
				Map.Entry me = (Map.Entry) m.next();
				totalStr += me.getValue() + "|";
			}
			totalStr += String.format("%.2f", penaltyTotal) + "|" + String.format("%.2f", concessionTotal) + "|"
					+ String.format("%.2f", grandTotal);
			studentReportList.add(totalStr);

			if (studentReportList.size() > 2) {
				ce.generateExcel(sessionData, "FEE REPORT",
						"FEE_ABSTRACT_" + fromDateStr.replace("/", "-") + "_to_" + toDateStr.replace("/", "-") + "_",
						"", studentReportList, true,
						"Fee Abstract Report for " + fromDateStr + " to " + toDateStr + "  STD: " + std + "   DIV: "
								+ div + "    Year:" + academicYear + "   Category:" + category + "   "
								+ sessionData.getSectionFullName(),
						1);
			} else {
				JOptionPane.showMessageDialog(null, "No Data found..");
			}

		} catch (Exception e) {
			if (e.getMessage().contains("not found")) {
				String columnError = cm.revertCommaApostrophy(e.getMessage()).toString();
				columnError = columnError.substring(columnError.indexOf("'") + 1, columnError.lastIndexOf("'"));
				if (columnError.contains("_DATE")) {
					columnError = columnError.substring(0, columnError.length() - 9);
				}
				JOptionPane.showMessageDialog(null,
						"Please click edit & save for fee head " + columnError + " " + "\n academic year : "
								+ academicYear + " and std : " + std + " \n Then try again to generate report.");
			}
			cm.logException(e);
			return feesReportMap;
		}
		return feesReportMap;
	}

	///////////findQuarterlyFeesAmount////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, Double>> findQuarterlyFeesAmount(SessionData sessionData, String std, String div, String academicYear,
			String section, String category) throws Exception {
		logger.info("=========findQuarterlyFeesAmount Query============");
		LinkedHashMap<String, LinkedHashMap<String, Double>> quarterlyFeeMap = new LinkedHashMap<String, LinkedHashMap<String, Double>>();
		String stddB = "";
		double q1 = 0, q2 = 0, q3 = 0, q4 = 0, total = 0;
		String feesQuery = "SELECT FEES_HEAD.STD_1, (SUM(IF(FREQUENCY='MONTHLY',AMOUNT*3,0)) + SUM(IF(FREQUENCY='QUARTERLY',AMOUNT/4,0)) + SUM(IF(FREQUENCY='HALF YEARLY',AMOUNT/2,0)) + SUM(IF(FREQUENCY='YEARLY',AMOUNT,0))) AS Q1, "
				+ "(SUM(IF(FREQUENCY='MONTHLY',AMOUNT*3,0)) + SUM(IF(FREQUENCY='QUARTERLY',AMOUNT/4,0))) AS Q2, "
				+ "(SUM(IF(FREQUENCY='MONTHLY',AMOUNT*3,0)) + SUM(IF(FREQUENCY='QUARTERLY',AMOUNT/4,0)) + SUM(IF(FREQUENCY='HALF YEARLY',AMOUNT/2,0))) AS Q3, "
				+ "(SUM(IF(FREQUENCY='MONTHLY',AMOUNT*3,0)) + SUM(IF(FREQUENCY='QUARTERLY',AMOUNT/4,0))) AS Q4, "
				+ "(SUM(IF(FREQUENCY='MONTHLY',AMOUNT,0)) + SUM(IF(FREQUENCY='QUARTERLY',AMOUNT,0)) + SUM(IF(FREQUENCY='HALF YEARLY',AMOUNT,0))  + SUM(IF(FREQUENCY='YEARLY',AMOUNT,0))) AS TOTAL "
				+ "from "+sessionData.getDBName()+".FEES_HEAD WHERE  FEES_HEAD.ACADEMIC_YEAR = '"+academicYear+"' AND "
				+ "FEES_HEAD.SECTION_NM = '"+sessionData.getSectionName()+"' AND FEES_HEAD.CATEGORY='"+category+"' GROUP BY FEES_HEAD.STD_1 WITH  ROLLUP";
		statement = connection.createStatement();
		resultSet = statement.executeQuery(feesQuery);

		while (resultSet.next()) {
			LinkedHashMap feesQuarterlyMap = new LinkedHashMap();
			stddB = resultSet.getString("STD_1");
			if(stddB == null) {
				stddB = "Grand Total";
			}
			q1 = resultSet.getDouble("Q1");
			q2 = resultSet.getDouble("Q2");
			q3 = resultSet.getDouble("Q3");
			q4 = resultSet.getDouble("Q4");
			total = resultSet.getDouble("TOTAL");
			
			feesQuarterlyMap.put("q1", q1);
			feesQuarterlyMap.put("q2", q2);
			feesQuarterlyMap.put("q3", q3);
			feesQuarterlyMap.put("q4", q4);
			feesQuarterlyMap.put("total", total);
			
			quarterlyFeeMap.put(stddB, feesQuarterlyMap);
			
		}
		
		return quarterlyFeeMap;
	}
	// /////////findPaymentFreeStrengthWise////////////////////////////////////////
	public List<String> findPaymentFreeStrengthWise(SessionData sessionData, String std, String div, String academicYear, 
			String category, String section, String tillDate) throws Exception {

		logger.info("=========findPaymentFreeStrengthWise Query============");
		String findQuery = "";
		String stdDb = "", stdForStrength= "";
		String divDb = "";
		String freeDB = "";
		String payableDB = "";
		String totalDB = "";
		String queryCondition = "", totalDuesStr = "";
		boolean findFlag = false;
		List catDataList = new ArrayList();
		String addToQuery = "";
		double q1amount = 0, q2amount = 0, q3amount = 0, q4amount = 0, totQrtAmount = 0;
		String secName = sessionData.getConfigMap().get(section.toUpperCase() + "_SEC");
		if (secName.contains("Section")) {
			secName = secName.substring(0, secName.indexOf("Section"));
		}
		if(std.equalsIgnoreCase("All")){
			std = "";
		}
		if(div.equalsIgnoreCase("All")){
			div = "";
		}
		if (!tillDate.equalsIgnoreCase("")) {
			addToQuery = "OR DATE_LEAVING >= '" + tillDate + "'";
		}
		TreeMap<Integer, String> sortRoman = new TreeMap();
		LinkedHashMap<String, LinkedHashMap<String, Double>> quarterlyFeeMap = new LinkedHashMap<String, LinkedHashMap<String, Double>>();
		quarterlyFeeMap = findQuarterlyFeesAmount(sessionData, std, div, academicYear, section, category);
		LinkedHashMap<String, LinkedHashMap<String, Double>> getQuarterlyFeesData = new LinkedHashMap<String, LinkedHashMap<String, Double>>();
		getQuarterlyFeesData = getQuarterlyFeesData(sessionData, academicYear, section, category, quarterlyFeeMap);

		if (!std.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (!std.equalsIgnoreCase("") && div.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "'  AND  CLASS_ALLOTMENT.PRESENT_STD = '" + std + "' AND HS_GENERAL_REGISTER.SECTION_NM = '"
					+ section + "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		} else if (std.equalsIgnoreCase("")) {
			queryCondition = "WHERE  CLASS_ALLOTMENT.ACADEMIC_YEAR = '" + academicYear
					+ "' AND HS_GENERAL_REGISTER.SECTION_NM = '" + section
					+ "' AND (ORIGINAL_LC IS NULL OR ORIGINAL_LC = 0 " + addToQuery + ")";
		}

		try {
			findQuery = "SELECT CLASS_ALLOTMENT.PRESENT_STD  AS  PRESENT_STD, CLASS_ALLOTMENT.PRESENT_DIV  AS  PRESENT_DIV, "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.PAYING_FREE = 'PAYING' THEN "
					+ "CLASS_ALLOTMENT.PRESENT_STD ELSE NULL END) AS PAYABLE,  "
					+ "COUNT(CASE WHEN HS_GENERAL_REGISTER.PAYING_FREE = 'FREE' THEN "
					+ "CLASS_ALLOTMENT.PRESENT_STD ELSE NULL END) AS FREE, COUNT(*) AS TOTAL  " + "FROM "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER  " + "LEFT  JOIN "
					+ sessionData.getDBName() + "." + "CLASS_ALLOTMENT  ON  "
					+ "HS_GENERAL_REGISTER.GR_NO=CLASS_ALLOTMENT.GR_NO "
					+ "AND HS_GENERAL_REGISTER.SECTION_NM=CLASS_ALLOTMENT.SECTION_NM " + queryCondition
					+ " GROUP BY CLASS_ALLOTMENT.PRESENT_STD,CLASS_ALLOTMENT.PRESENT_DIV  WITH  ROLLUP";

			logger.info("findPaymentFreeStrengthWise query :: " + findQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			catDataList.add("Class|Total Strength||Free|||Payable||||Dues=>|||||Q1||||||Q2||||||Q3||||||Q4|||||||Total Dues||||||||Paid Strength=>|||||||||Q1||||||||||Q2|||||||||||Q3||||||||||||Q4|||||||||||||Paid Fees=>||||||||||||||Q1|||||||||||||||Q2||||||||||||||||Q3|||||||||||||||||Q4||||||||||||||||||Concession");

			String stdDivInInt = "";
			int i = 0;
			int rowcount = 0;
			int grandTotal = 0;
			int freeTotal = 0;
			int payableTotal = 0;
			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}

			while (resultSet.next()) {
				stdDb = resultSet.getString("PRESENT_STD") == null ? " " : (resultSet.getString("PRESENT_STD").trim());
				stdForStrength = stdDb;
				if(stdForStrength.equalsIgnoreCase("JR KG")) {
					stdForStrength = "LOWER_KG";
				}
				else if(stdForStrength.equalsIgnoreCase("SR KG")) {
					stdForStrength = "UPPER_KG";
				}
				divDb = resultSet.getString("PRESENT_DIV") == null ? " " : (resultSet.getString("PRESENT_DIV").trim());
				freeDB = resultSet.getString("FREE") == null ? " " : (resultSet.getString("FREE").trim());
				payableDB = resultSet.getString("PAYABLE") == null ? " " : (resultSet.getString("PAYABLE").trim());
				totalDB = resultSet.getString("TOTAL") == null ? " " : (resultSet.getString("TOTAL").trim());

				if(stdDb != null && !stdDb.trim().equalsIgnoreCase("")) {
					q1amount = quarterlyFeeMap.get(stdDb).get("q1");
					q2amount = quarterlyFeeMap.get(stdDb).get("q2");
					q3amount = quarterlyFeeMap.get(stdDb).get("q3");
					q4amount = quarterlyFeeMap.get(stdDb).get("q4");
					totQrtAmount = quarterlyFeeMap.get(stdDb).get("total");
				}
				
				if (i == (rowcount - 2)) {
					grandTotal = grandTotal + Integer.parseInt(totalDB);
					freeTotal = freeTotal + Integer.parseInt(freeDB);
					payableTotal = payableTotal + Integer.parseInt(payableDB);
					divDb = "Total";
					stdDivInInt = cm.RomanToInteger(stdForStrength) + "" + cm.AlphabetToInteger("Total");
					int stdDivIntValue = Integer.parseInt(stdDivInInt);
					if(stdDivIntValue < 0) {
						stdDivIntValue = stdDivIntValue * (-1);
					}
					sortRoman.put(stdDivIntValue,
							stdDb + " Total |" + totalDB + "|" + freeDB + "|" + payableDB + "|           |" + (Double.parseDouble(payableDB)*q1amount) + "|" + (Double.parseDouble(payableDB)*q2amount) + "|" + (Double.parseDouble(payableDB)*q3amount) + "|" + (Double.parseDouble(payableDB)*q4amount) + "|" + (Double.parseDouble(payableDB)*totQrtAmount)+"|           |"+
							getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q1StdCount")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q2StdCount")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q3StdCount")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q4StdCount")+"|           |"+
							getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q1StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q2StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q3StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q4StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("qStdConcession"));
					
					stdDivInInt = cm.RomanToInteger(stdDb) + "" + cm.AlphabetToInteger("Grand_Total");
					stdDivIntValue = Integer.parseInt(stdDivInInt);
					if(stdDivIntValue < 0) {
						stdDivIntValue = stdDivIntValue * (-1);
					}
					
					q1amount = quarterlyFeeMap.get("Grand Total").get("q1");
					q2amount = quarterlyFeeMap.get("Grand Total").get("q2");
					q3amount = quarterlyFeeMap.get("Grand Total").get("q3");
					q4amount = quarterlyFeeMap.get("Grand Total").get("q4");
					totQrtAmount = quarterlyFeeMap.get("Grand Total").get("total");
					sortRoman.put(stdDivIntValue,
							"Grand Total |" + grandTotal + "|" + freeTotal + "|" + payableTotal + "|           |" + (Double.parseDouble(payableDB)*q1amount) + "|" + (Double.parseDouble(payableDB)*q2amount) + "|" + (Double.parseDouble(payableDB)*q3amount) + "|" + (Double.parseDouble(payableDB)*q4amount) + "|" + (Double.parseDouble(payableDB)*totQrtAmount)+"|           |"+
							getQuarterlyFeesData.get("Grand_Total").get("q1AllCount")+"|"+getQuarterlyFeesData.get("Grand_Total").get("q2AllCount")+"|"+getQuarterlyFeesData.get("Grand_Total").get("q3AllCount")+"|"+getQuarterlyFeesData.get("Grand_Total").get("q4AllCount")+"|           |"+
							getQuarterlyFeesData.get("Grand_Total").get("q1AllSum")+"|"+getQuarterlyFeesData.get("Grand_Total").get("q2AllSum")+"|"+getQuarterlyFeesData.get("Grand_Total").get("q3AllSum")+"|"+getQuarterlyFeesData.get("Grand_Total").get("q4AllSum")+"|"+getQuarterlyFeesData.get("Grand_Total").get("allConcession"));
				} else if (i < (rowcount - 2)) {
					if (divDb.trim().equalsIgnoreCase("")) {
						divDb = "Total";
						grandTotal = grandTotal + Integer.parseInt(totalDB);
						freeTotal = freeTotal + Integer.parseInt(freeDB);
						payableTotal = payableTotal + Integer.parseInt(payableDB);
					}
					stdDivInInt = cm.RomanToInteger(stdForStrength) + "" + cm.AlphabetToInteger(divDb);
					int stdDivIntValue = Integer.parseInt(stdDivInInt);
					if(stdDivIntValue < 0) {
						stdDivIntValue = stdDivIntValue * (-1);
					}
					
					if(divDb.equalsIgnoreCase("Total")) {
						sortRoman.put(stdDivIntValue,
								stdDb + " Total |" + totalDB + "|" + freeDB + "|" + payableDB + "|           |" + (Double.parseDouble(payableDB)*q1amount) + "|" + (Double.parseDouble(payableDB)*q2amount) + "|" + (Double.parseDouble(payableDB)*q3amount) + "|" + (Double.parseDouble(payableDB)*q4amount) + "|" + (Double.parseDouble(payableDB)*totQrtAmount)+"|           |"+
								getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q1StdCount")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q2StdCount")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q3StdCount")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q4StdCount")+"|           |"+
								getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q1StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q2StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q3StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q4StdSum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("qStdConcession"));
					}
					else {
						sortRoman.put(stdDivIntValue,
								stdDb + " " + divDb + "|" + totalDB + "|" + freeDB + "|" + payableDB + "|           |" + 
						(Double.parseDouble(payableDB)*q1amount) + "|" + (Double.parseDouble(payableDB)*q2amount) + "|" + (Double.parseDouble(payableDB)*q3amount) + "|" + (Double.parseDouble(payableDB)*q4amount) + "|" + (Double.parseDouble(payableDB)*totQrtAmount) + "|           |"+
						getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q1Count")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q2Count")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q3Count")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q4Count")+"|           |"+
						getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q1Sum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q2Sum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q3Sum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("q4Sum")+"|"+getQuarterlyFeesData.get(stdDb+"_"+divDb).get("qStdDivConcession"));
					}
					
//					sortRoman.put(stdDivIntValue,
//							stdDb + " " + divDb + "|" + totalDB + "|" + freeDB + "|" + payableDB );
				}
				findFlag = true;
				i++;
			}
			Set set = sortRoman.entrySet();
			// Get an iterator
			Iterator j = set.iterator();
			// Display elements
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				catDataList.add(me.getValue());
			}

//				if (!print.equalsIgnoreCase("")) {
					if (div.equalsIgnoreCase("")) {
						div = "All";
					}
					if (std.equalsIgnoreCase("")) {
						std = "All";
					}
					ce.generateExcel(sessionData, "FEES", "QUARTERLY", "", catDataList, false,
							secName + " Quarterly Fees Report  STD:" + std + "  DIV:" + div + " " + academicYear, 1);
					return null;
//				}

		} catch (Exception e) {
			cm.logException(e);
		}
		return catDataList;
	}
		
	/////////// getFeesQuarterlyReport////////////////////////////////////////
	public void getFeesQuarterlyReport(SessionData sessionData,
			String academicYear, String std, String div, String category, String fromDateStr, String toDateStr)
			throws Exception {
		//	logger.info("=========getFeesQuarterlyReport Query============");
		List findPaymentFreeStrengthWise = new ArrayList();
		String dateTillSelected = cm.dateFormat_yyyymmdd(toDateStr);
		findPaymentFreeStrengthWise = findPaymentFreeStrengthWise(sessionData, std, div, academicYear, category, sessionData.getSectionName(), dateTillSelected);
		
		
	}
	/////////// getClasswiseFeeReport////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getClasswiseFeeReport(SessionData sessionData,
			String academicYear, String std, String div, String category,
			LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap, String reportName) throws Exception {
		logger.info("=========getClasswiseFeeReport Query============");
		LinkedHashMap<String, LinkedHashMap<String, String>> feesReportMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> contactDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> feesHeadTotalMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, Double> unpaidTotalMap = new LinkedHashMap<String, Double>();

		String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
				whereCondition = "", bank = "", paymentMode = "", receipt = "", chequeDDNo = "", chequeDDDate = "",
				detailStr = "", feesHeadStr = "", nameDb = "", rollNoDb = "", prevStd = "", findColumnListQuery = "",
				columnList = "", unpaidList = "", columnName = "", tableName = "", concessionMapStr = "",
				concessionValue = "", unpaidStr = "", freqFromMap = "", paidStr = "", dueStr = "", unPaidCount = "",
				totalAmmountList = "";
		int frequencyInt = 0;
		double feesHeadAmount = 0, studentTotalDb = 0, penaltyDb = 0, concessionDb = 0, studentGrandTotal = 0,
				grandTotal = 0, penaltyTotal = 0, concessionTotal = 0, freqDivisor = 0, feesTotalamount = 0,
				unpaidFeeAmount = 0, concessionDue = 0, concessionDueFeeTotal = 0, concessionDueGrandTotal = 0,
				dueTotal = 0, dueGrandTotal = 0;
		List<String> studentReportList = new ArrayList<String>();
		String[] data;
		String[] concessionArr;
		String[] optionalList = null;
		LinkedHashMap<String, LinkedHashMap<String, String>> studentOptMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> freePayingData;
		LinkedHashMap<String, LinkedHashMap<String, String>> multiFeeHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		boolean isOptional = false;
		String optionalFee = "", optional = "", subFee = "", contact = "";

		try {

			freePayingData = getFreeStudentData(sessionData, academicYear, std, div, sessionData.getSectionName());
			studentOptMap = insertNewFeeAllotStudents(sessionData, std, div, academicYear, "", "");
			multiFeeHeadMap = fetchMultipleHeadMap(sessionData, academicYear, std, "");

//			if(optional.equalsIgnoreCase("NO")){
			tableName = "FEES_DATA_MANDATORY";
//			}
//			else if(optional.equalsIgnoreCase("YES")){
//				tableName = "FEES_DATA_OPTIONAL";
//			}

			int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

			if (!std.equalsIgnoreCase("All")) {
				whereCondition = " AND FEES_DATA_MANDATORY.STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All")) {
				whereCondition += " AND FEES_DATA_MANDATORY.DIV_1='" + div + "'";
			}

			// Get contact gr map
			contactDetailMap = getContactGrMap(sessionData, academicYear, std, div);

			String headerStr = "GR NO|STUDENT NAME|CONTACT|ROLL NO";
			String totalStr = " |GRAND TOTAL| | ";
			paidStr = " | | | ";

			Set set = feesHeadMap.entrySet();
			Iterator j = set.iterator();
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				feesHead = me.getKey().toString();
				feesHeadTotalMap.put(feesHead, 0.0);
				unpaidTotalMap.put(feesHead, 0.0);
				feesHeadStr += "|" + feesHead.replace("$$", ".");
				paidStr += "|PAID";
				dueStr += "|DUE";

				frequencyInt = cm.frequencyToInteger(
						((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());

//				if(optional.equalsIgnoreCase("No")){
				if (frequencyInt == 12) {
					for (int i = 0; i < 12; i++) {
						columnList += " IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0) +";
						totalAmmountList += " IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0) +";
						unpaidList += " IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">0, 0, 1) +";
						feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ","
								+ feesHeadColumn;
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 4) {
					for (int i = 0; i < 12; i += 3) {
						columnList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0) +";
						totalAmmountList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0) +";
						unpaidList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">0, 0, 1) +";
						feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ","
								+ feesHeadColumn;
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 2) {
					for (int i = 0; i < 12; i += 6) {
						columnList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0) +";
						totalAmmountList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0) +";
						unpaidList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">0, 0, 1) +";
						feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ","
								+ feesHeadColumn;
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 1) {
					columnList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">=0, " + feesHead
							+ "_" + cm.intgerToMonth((startMonth) + "") + ", 0)";
					totalAmmountList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">=0, "
							+ feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ", 0) +";
					unpaidList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">0, 0, 1)";
					feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth) + "") + "," + feesHeadColumn;
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				}
			}

			totalAmmountList = "(" + totalAmmountList.substring(0, totalAmmountList.lastIndexOf("+")) + ")";

//			if(optional.equalsIgnoreCase("No")){
			headerStr += feesHeadStr + "|PENALTY|CONCESSION|TOTAL" + feesHeadStr + "|TOTAL";
			paidStr += "|PAID|PAID|PAID" + dueStr + "|DUE";
//			}
//			else{
//				headerStr += feesHeadStr+"|PENALTY|CONCESSION|TOTAL";
//				paidStr += "|PAID|PAID|PAID";
//			}

			studentReportList.add(cm.revertCommaApostrophy(headerStr));
			studentReportList.add(paidStr);

			String query = "SELECT " + columnList + unpaidList + feesHeadColumn + totalAmmountList
					+ "  AS TOTAL_AMOUNT,CONCESSION_AMOUNT,CONCESSION_PERCENT,PENALTY_AMOUNT,FEES_DATA_MANDATORY.GR_NO,"
					+ "FEES_DATA_MANDATORY.ROLL_NO,concat(FEES_DATA_MANDATORY.LAST_NAME,' ',FEES_DATA_MANDATORY.FIRST_NAME,' ',FEES_DATA_MANDATORY.FATHER_NAME) AS NAME "
					+ "FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName + ".ACADEMIC_YEAR='"
					+ academicYear + "' " + "AND " + tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' "
					+ whereCondition + " " + "ORDER BY ROLL_NO * 1";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				detailStr = "";
				unpaidStr = "";
				dueTotal = 0;
				optionalFee = "";
				optionalList = null;

				LinkedHashMap<String, String> feesReportDetailMap = new LinkedHashMap<String, String>();
				LinkedHashMap concessionMap = new LinkedHashMap();
				grNoDb = resultSet.getString("GR_NO");
				if (freePayingData.get(grNoDb) !=null && 
						(freePayingData.get(grNoDb) == null || freePayingData.get(grNoDb).toString().equalsIgnoreCase("Free"))) {
					continue;
				}
				nameDb = resultSet.getString("NAME");
				rollNoDb = resultSet.getString("ROLL_NO");
				if (studentOptMap.get(grNoDb) != null) {
					optionalFee = ((LinkedHashMap<?, ?>) studentOptMap.get(grNoDb)).get("optional_fee").toString();
					optionalList = optionalFee.split("\\|");
				}
//				studentTotalDb = resultSet.getDouble("TOTAL_AMOUNT");
//				grandTotal += studentTotalDb;
				penaltyDb = resultSet.getDouble("PENALTY_AMOUNT");
				penaltyTotal += penaltyDb;
				concessionDb = resultSet.getDouble("CONCESSION_AMOUNT");
				concessionTotal += concessionDb;
				concessionMapStr = resultSet.getString("CONCESSION_PERCENT") == null ? "0"
						: resultSet.getString("CONCESSION_PERCENT").trim();
				if (!concessionMapStr.equalsIgnoreCase("0")) {
					concessionMapStr = concessionMapStr.substring(1, concessionMapStr.length() - 1);
					concessionArr = concessionMapStr.split(",");
					for (int i = 0; i < concessionArr.length; i++) {
						concessionValue = concessionArr[i].trim();
						concessionMap.put(concessionValue.substring(0, concessionValue.indexOf("=")),
								concessionValue.substring(concessionValue.lastIndexOf("=") + 1));
					}
				}

				contact = contactDetailMap.get(grNoDb) == null ? "0" : contactDetailMap.get(grNoDb).toString();
				if (contact.equalsIgnoreCase("")) {
					contact = "0";
				}
				detailStr = grNoDb + "|" + nameDb + "|" + contact + "|" + rollNoDb;

				Iterator k = set.iterator();
				while (k.hasNext()) {
					Map.Entry me = (Map.Entry) k.next();
					feesHead = me.getKey().toString();
					subFee = "";
					optional = ((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("optional").toString();

					if (optionalList != null) {
						for (int n = 0; n < optionalList.length; n++) {
							if (optionalList[n].contains(feesHead + "^") && subFee.equalsIgnoreCase("")) {
								subFee = optionalList[n].substring(optionalList[n].indexOf("^") + 1);
								isOptional = true;
							}
						}
					}

					if (optional.equalsIgnoreCase("No") || (optional.equalsIgnoreCase("Yes") && isOptional)) {
						feesHeadAmount = Double.parseDouble(resultSet.getString(feesHead));
						feesHeadTotalMap.put(feesHead, Double
								.parseDouble(String.format("%.2f", (feesHeadTotalMap.get(feesHead) + feesHeadAmount))));
						detailStr += "|" + String.format("%.2f", feesHeadAmount);

						studentTotalDb += feesHeadAmount;
						studentGrandTotal += studentTotalDb;

						freqFromMap = ((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("frequency").toString();
						freqDivisor = cm.frequencyToInteger(freqFromMap);
						feesTotalamount = (Double.parseDouble(
								((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("amount").toString())
								/ freqDivisor);
						unPaidCount = resultSet.getString(feesHead + "_UNPAID");
						unpaidFeeAmount = Double.parseDouble(resultSet.getString(feesHead + "_UNPAID"))
								* feesTotalamount;
						dueTotal += unpaidFeeAmount - concessionDue;
						dueGrandTotal += unpaidFeeAmount - concessionDue;
						unpaidStr += "|" + String.format("%.2f", unpaidFeeAmount);

						unpaidTotalMap.put(feesHead, Double
								.parseDouble(String.format("%.2f", (unpaidTotalMap.get(feesHead) + unpaidFeeAmount))));
					} else {
						feesHeadTotalMap.put(feesHead, 0.00);
						detailStr += "|" + String.format("%.2f", 0.00);
						unpaidStr += "|" + String.format("%.2f", 0.0);
					}
				}
				detailStr += "|" + penaltyDb + "|" + concessionDb + "|" + String.format("%.2f", studentTotalDb)
						+ unpaidStr + "|" + String.format("%.2f", dueTotal);
				if (reportName.equalsIgnoreCase("Classwise")) {
					studentReportList.add(detailStr);
				}
				grandTotal += studentTotalDb;
				concessionDueFeeTotal = 0;
				studentTotalDb = 0;
				studentGrandTotal = 0;
			}

			Set setFeeTotal = feesHeadTotalMap.entrySet();
			Iterator m = setFeeTotal.iterator();
			while (m.hasNext()) {
				Map.Entry me = (Map.Entry) m.next();
				totalStr += "|" + me.getValue();
			}
			totalStr += "|" + String.format("%.2f", penaltyTotal) + "|" + String.format("%.2f", concessionTotal) + "|"
					+ String.format("%.2f", grandTotal);

//			if(optional.equalsIgnoreCase("No")){
			Set setFeeUnpaidTotal = unpaidTotalMap.entrySet();
			Iterator n = setFeeUnpaidTotal.iterator();
			while (n.hasNext()) {
				Map.Entry me = (Map.Entry) n.next();
				totalStr += "|" + me.getValue();
			}
			totalStr += "|" + String.format("%.2f", dueGrandTotal);
//			}
			studentReportList.add(totalStr);

			if (studentReportList.size() > 3 || reportName.equalsIgnoreCase("Fee Abstract")) {
				ce.generateExcel(sessionData, "FEE REPORT", "FEE_REPORT_" + reportName.replace(" ", "_") + "_", "",
						studentReportList, true,
						reportName + " Report for  STD: " + std + "   DIV: " + div + "    Year:" + academicYear
								+ "   Category:" + category + "   " + sessionData.getSectionFullName(),
						1);
			} else {
				JOptionPane.showMessageDialog(null, "No Data found..");
			}
		} catch (Exception e) {
			cm.logException(e);
			return feesReportMap;
		}
		return feesReportMap;
	}

	/////////// getDefaulterFeeReport////////////////////////////////////////
	public List<String> getDefaulterFeeReport(SessionData sessionData, String academicYear, String std, String div,
			String category, LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap, String reportName,
			String grStr) throws Exception {
		logger.info("=========getDefaulterFeeReport Query============");
		LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Double> feesHeadTotalMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, Double> unpaidTotalMap = new LinkedHashMap<String, Double>();

		String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
				whereCondition = "", bank = "", paymentMode = "", receipt = "", chequeDDNo = "", chequeDDDate = "",
				detailStr = "", feesHeadStr = "", nameDb = "", rollNoDb = "", prevStd = "", findColumnListQuery = "",
				columnList = "", unpaidList = "", columnName = "", tableName = "", concessionMapStr = "",
				concessionValue = "", unpaidStr = "", freqFromMap = "", paidStr = "", dueStr = "", unPaidCount = "";
		int frequencyInt = 0;
		double feesHeadAmount = 0, studentTotalDb = 0, penaltyDb = 0, concessionDb = 0, grandTotal = 0,
				penaltyTotal = 0, concessionTotal = 0, freqDivisor = 0, feesTotalamount = 0, unpaidFeeAmount = 0,
				concessionDue = 0, concessionDueFeeTotal = 0, concessionDueGrandTotal = 0, dueTotal = 0,
				dueGrandTotal = 0;
		List<String> studentReportList = new ArrayList<String>();
		String[] data;
		String[] concessionArr;
		String[] optionalList = null;
		LinkedHashMap<String, LinkedHashMap<String, String>> studentOptMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> contactDetailMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> freePayingData = new LinkedHashMap<String, String>();
		LinkedHashMap<String, LinkedHashMap<String, String>> multiFeeHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		boolean isOptional = false, isData = false;
		String optionalFee = "", optional = "", subFee = "", contact = "";

		try {
			freePayingData = getFreeStudentData(sessionData, academicYear, std, div, sessionData.getSectionName());
			studentOptMap = insertNewFeeAllotStudents(sessionData, std, div, academicYear, "", "");
			multiFeeHeadMap = fetchMultipleHeadMap(sessionData, academicYear, std, "");

			tableName = "FEES_DATA_MANDATORY";

			int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

			if (!std.equalsIgnoreCase("All") && grStr.equalsIgnoreCase("")) {
				whereCondition = " AND FEES_DATA_MANDATORY.STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All") && grStr.equalsIgnoreCase("")) {
				whereCondition += " AND FEES_DATA_MANDATORY.DIV_1='" + div + "'";
			}
			if (!grStr.equalsIgnoreCase("")) {
				whereCondition = " AND FEES_DATA_MANDATORY.GR_NO IN (" + grStr + ")";
			}

			// Get contact gr map
			contactDetailMap = getContactGrMap(sessionData, academicYear, std, div);

			String headerStr = "GR NO|STUDENT NAME|CONTACT|ROLL NO|STD|DIV";
			String totalStr = " |GRAND TOTAL| | | | ";
			paidStr = " | | | | | ";

			Set set = feesHeadMap.entrySet();
			Iterator j = set.iterator();
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				feesHead = me.getKey().toString();
				feesHeadTotalMap.put(feesHead, 0.0);
				unpaidTotalMap.put(feesHead, 0.0);
				feesHeadStr += "|" + feesHead.replace("$$", ".");
				dueStr += "|DUE";

				frequencyInt = cm.frequencyToInteger(
						((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString());

				if (frequencyInt == 12) {
					for (int i = 0; i < 12; i++) {
						columnList += " SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0)) +";
						unpaidList += " SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
								+ ">0, 0, 1)) +";
						feesHeadColumn = "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0)) AS "+feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")+","
								+ feesHeadColumn;
//						feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ","
//								+ feesHeadColumn;
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 4) {
					for (int i = 0; i < 12; i += 3) {
						columnList += "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0)) +";
						unpaidList += "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
								+ ">0, 0, 1)) +";
						feesHeadColumn = "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0)) AS "+feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")+","
								+ feesHeadColumn;
//						feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ","
//								+ feesHeadColumn;
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 2) {
					for (int i = 0; i < 12; i += 6) {
						columnList += "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0)) +";
						unpaidList += "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
								+ ">0, 0, 1)) +";
						feesHeadColumn = "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, "
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ", 0)) AS "+feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")+","
								+ feesHeadColumn;
//						feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ","
//								+ feesHeadColumn;
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 1) {
					columnList += "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">=0, " + feesHead
							+ "_" + cm.intgerToMonth((startMonth) + "") + ", 0))";
					unpaidList += "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">0, 0, 1))";
					feesHeadColumn = "SUM(IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">=0, "
							+ feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ", 0)) AS "+feesHead + "_" + cm.intgerToMonth((startMonth) + "")+","
							+ feesHeadColumn;
//					feesHeadColumn = feesHead + "_" + cm.intgerToMonth((startMonth) + "") + "," + feesHeadColumn;
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				}
			}

			headerStr += feesHeadStr + "|TOTAL";
			paidStr += dueStr + "|DUE";

			studentReportList.add(cm.revertCommaApostrophy(headerStr));
			studentReportList.add(paidStr);

			String query = "SELECT STD_1,DIV_1," + columnList + unpaidList + feesHeadColumn
					+ "SUM(IF(TOTAL_AMOUNT>=0, TOTAL_AMOUNT, 0))  AS TOTAL_AMOUNT,"
					+ "SUM(IF(CONCESSION_AMOUNT>=0, CONCESSION_AMOUNT, 0)) AS CONCESSION_AMOUNT,"
					+ "SUM(IF(CONCESSION_PERCENT>=0, CONCESSION_PERCENT, 0)) AS CONCESSION_PERCENT,"
					+ "SUM(IF(PENALTY_AMOUNT>=0, PENALTY_AMOUNT, 0)) AS PENALTY_AMOUNT,FEES_DATA_MANDATORY.GR_NO,"
					+ "FEES_DATA_MANDATORY.ROLL_NO,concat(FEES_DATA_MANDATORY.LAST_NAME,' ',FEES_DATA_MANDATORY.FIRST_NAME,' ',FEES_DATA_MANDATORY.FATHER_NAME) AS NAME "
					+ "FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName + ".ACADEMIC_YEAR='"
					+ academicYear + "' " + "AND " + tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' "
					+ whereCondition + " " + "GROUP BY GR_NO,STD_1,DIV_1,ROLL_NO,NAME ORDER BY STD_1,DIV_1,GR_NO,ROLL_NO * 1";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				detailStr = "";
				unpaidStr = "";
				dueTotal = 0;
				optionalFee = "";
				optionalList = null;

				LinkedHashMap<String, String> feesReportDetailMap = new LinkedHashMap<String, String>();
				LinkedHashMap concessionMap = new LinkedHashMap();
				grNoDb = resultSet.getString("GR_NO");
				
				if (freePayingData.get(grNoDb) == null || freePayingData.get(grNoDb).toString().equalsIgnoreCase("Free")) {
					continue;
				}
				
				nameDb = resultSet.getString("NAME");
				rollNoDb = resultSet.getString("ROLL_NO");
				stdDb = resultSet.getString("STD_1");
				divDb = resultSet.getString("DIV_1");
				if (studentOptMap.get(grNoDb) != null && !studentOptMap.get(grNoDb).get("optional_fee").isEmpty()) {
					optionalFee = ((LinkedHashMap<?, ?>) studentOptMap.get(grNoDb)).get("optional_fee").toString();
					optionalList = optionalFee.split("\\|");
				}
				studentTotalDb = resultSet.getDouble("TOTAL_AMOUNT");
				grandTotal += studentTotalDb;
				penaltyDb = resultSet.getDouble("PENALTY_AMOUNT");
				penaltyTotal += penaltyDb;
				concessionDb = resultSet.getDouble("CONCESSION_AMOUNT");
				concessionTotal += concessionDb;
				concessionMapStr = resultSet.getString("CONCESSION_PERCENT") == null ? "0"
						: resultSet.getString("CONCESSION_PERCENT").trim();
				if (!concessionMapStr.equalsIgnoreCase("0")) {
					concessionMapStr = concessionMapStr.substring(1, concessionMapStr.length() - 1);
					concessionArr = concessionMapStr.split(",");
					for (int i = 0; i < concessionArr.length; i++) {
						concessionValue = concessionArr[i].trim();
						concessionMap.put(concessionValue.substring(0, concessionValue.indexOf("=")),
								concessionValue.substring(concessionValue.lastIndexOf("=") + 1));
					}
				}
				contact = contactDetailMap.get(grNoDb) == null ? "0" : contactDetailMap.get(grNoDb).toString();
				if (contact.equalsIgnoreCase("")) {
					contact = "0";
				}
				detailStr = grNoDb + "|" + nameDb + "|" + contact + "|" + rollNoDb + "|" + stdDb + "|" + divDb;

				Iterator k = set.iterator();
				while (k.hasNext()) {
					Map.Entry me = (Map.Entry) k.next();
					feesHead = me.getKey().toString();
					subFee = "";
					optional = ((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("optional").toString();

					if (optionalList != null) {
						for (int n = 0; n < optionalList.length; n++) {
							if (optionalList[n].contains(feesHead + "^") && subFee.equalsIgnoreCase("")) {
								subFee = optionalList[n].substring(optionalList[n].indexOf("^") + 1);
								isOptional = true;
							}
						}
					}

					if (optional.equalsIgnoreCase("No") || (optional.equalsIgnoreCase("Yes") && isOptional)) {
						feesHeadAmount = Double.parseDouble(resultSet.getString(feesHead));
						feesHeadTotalMap.put(feesHead, Double
								.parseDouble(String.format("%.2f", (feesHeadTotalMap.get(feesHead) + feesHeadAmount))));

						freqFromMap = ((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("frequency").toString();
						freqDivisor = cm.frequencyToInteger(freqFromMap);
						feesTotalamount = (Double.parseDouble(
								((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("amount").toString())
								/ freqDivisor);
						unPaidCount = resultSet.getString(feesHead + "_UNPAID");
						unpaidFeeAmount = Double.parseDouble(resultSet.getString(feesHead + "_UNPAID"))
								* feesTotalamount;

						dueTotal += unpaidFeeAmount - concessionDue;
						dueGrandTotal += unpaidFeeAmount - concessionDue;
						unpaidStr += "|" + String.format("%.2f", unpaidFeeAmount);

						unpaidTotalMap.put(feesHead, Double
								.parseDouble(String.format("%.2f", (unpaidTotalMap.get(feesHead) + unpaidFeeAmount))));
					} else {
						feesHeadTotalMap.put(feesHead, 0.00);
						unpaidStr += "|" + String.format("%.2f", 0.0);
					}
				}
				detailStr += unpaidStr + "|" + String.format("%.2f", dueTotal);
				if (reportName.equalsIgnoreCase("Defaulter") && dueTotal > 0.0) {
					isData = true;
					studentReportList.add(detailStr);
				} else if (reportName.equalsIgnoreCase("DefaulterCheck")) {
					isData = true;
					studentReportList.add(grNoDb);
				}
				concessionDueFeeTotal = 0;
				isOptional = false;
			}

			if(isData) {
				Set setFeeUnpaidTotal = unpaidTotalMap.entrySet();
				Iterator n = setFeeUnpaidTotal.iterator();
				while (n.hasNext()) {
					Map.Entry me = (Map.Entry) n.next();
					totalStr += "|" + me.getValue();
				}
				totalStr += "|" + String.format("%.2f", dueGrandTotal);
				studentReportList.add(totalStr);
			}
			else {
				studentReportList.clear();
			}

		} catch (Exception e) {
			logger.info("getConsolidateFeeReport error===>"+e.toString());
			cm.logException(e);
			return studentReportList;
		}
		return studentReportList;
	}

	/////////// getConsolidateFeeReport////////////////////////////////////////
	public TreeMap<Integer, LinkedHashMap<String, Double>> getConsolidateFeeReport(SessionData sessionData,
			String academicYear, String std, String div, String category) throws Exception {
		logger.info("=========getConsolidateFeeReport Query============");
		TreeMap<Integer, LinkedHashMap<String, Double>> feesReportMap = new TreeMap<Integer, LinkedHashMap<String, Double>>();
		LinkedHashMap<String, Double> feesHeadTotalMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, Double> feesDueTotalMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, Double> unpaidTotalMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, String> consolidatefeesMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> integerToAlphabetMap = new LinkedHashMap<String, String>();

		String feesHead = "", feesHeadColumn = "", grNoDb = "", stdDb = "", divDb = "", rollNo = "", feesDate = "",
				whereCondition = "", detailStr = "", feesHeadStr = "", nameDb = "", rollNoDb = "", prevStd = "",
				findColumnListQuery = "", columnList = "", unpaidList = "", columnName = "", tableName = "",
				concessionMapStr = "", concessionValue = "", unpaidStr = "", freqFromMap = "", paidStr = "",
				dueStr = "", intRoman = "", intAlpha = "", feeKey = "";
		int frequencyInt = 0, stdInt = 0, divInt = 0, stdDivInt = 0, stdTotalInt = 0;
		double feesHeadAmount = 0, studentTotalDb = 0, penaltyDb = 0, concessionDb = 0, grandTotal = 0,
				penaltyTotal = 0, concessionTotal = 0, freqDivisor = 0, feesTotalamount = 0, unpaidFeeAmount = 0,
				concessionDue = 0, concessionDueFeeTotal = 0, concessionDueGrandTotal = 0, dueTotal = 0,
				dueGrandTotal = 0;
		ResultSet resultSetData = null;
		List<String> studentReportList = new ArrayList<String>();
		String[] data;
		String[] concessionArr;
		String[] optionalList = null;
		LinkedHashMap<String, String> freePayingData;
		LinkedHashMap<String, LinkedHashMap<String, String>> studentOptMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		LinkedHashMap<String, LinkedHashMap<String, String>> multiFeeHeadMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
//	    LinkedHashMap<String, Double> feesReportTotalMap = new LinkedHashMap<String, Double>();
		boolean isOptional = false;
		String optionalFee = "", optional = "", subFee = "";

		try {
			freePayingData = getFreeStudentData(sessionData, academicYear, std, div, sessionData.getSectionName());
			studentOptMap = insertNewFeeAllotStudents(sessionData, std, div, academicYear, "", "");
			multiFeeHeadMap = fetchMultipleHeadMap(sessionData, academicYear, std, "");

			integerToAlphabetMap = cm.IntegerToAlphabet();
//			if(optional.equalsIgnoreCase("NO")){
			tableName = "FEES_DATA_MANDATORY";
//			}
//			else if(optional.equalsIgnoreCase("YES")){
//				tableName = "FEES_DATA_OPTIONAL";
//			}

			int startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

			if (!std.equalsIgnoreCase("All")) {
				whereCondition = " AND " + tableName + ".STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All")) {
				whereCondition += " AND " + tableName + ".DIV_1='" + div + "'";
			}

			String headerStr = "STD|DIV";
			String unpaidHeadStr = "";
			String totalStr = " |GRAND TOTAL";
			String totalDueStr = "";
			paidStr = " | ";

			consolidatefeesMap = getConsolidatedFeesHead(sessionData, academicYear, sessionData.getSectionName(),
					category);
			Set set = consolidatefeesMap.entrySet();
			Iterator j = set.iterator();
			while (j.hasNext()) {
				Map.Entry me = (Map.Entry) j.next();
				feesHead = me.getKey().toString();
				feesHeadTotalMap.put(feesHead, 0.0);
				feesDueTotalMap.put(feesHead, 0.0);
				headerStr += "|" + cm.revertCommaApostrophy(feesHead.replace("$$", "."));
				unpaidHeadStr += "|" + cm.revertCommaApostrophy(feesHead.replace("$$", "."));
				paidStr += "|PAID";
				dueStr += "|DUE";
				frequencyInt = cm.frequencyToInteger(me.getValue().toString());

//				if(optional.equalsIgnoreCase("No")){
				if (frequencyInt == 12) {
					for (int i = 0; i < 12; i++) {
						columnList += " IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK"
								+ " not like '%^C', " + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
								+ ", 0), 0) +";
						unpaidList += " IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">0, IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK"
								+ " not like '%^C', 0, 1), 1) +";
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 4) {
					for (int i = 0; i < 12; i += 3) {
						columnList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK"
								+ " not like '%^C', " + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
								+ ", 0), 0) +";
						unpaidList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">0, IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK"
								+ " not like '%^C', 0, 1), 1) +";
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 2) {
					for (int i = 0; i < 12; i += 6) {
						columnList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">=0, IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK"
								+ " not like '%^C', " + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "")
								+ ", 0), 0) +";
						unpaidList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + ">0, IF("
								+ feesHead + "_" + cm.intgerToMonth((startMonth + i) + "") + "_BANK"
								+ " not like '%^C', 0, 1), 1) +";
					}
					columnList = columnList.substring(0, columnList.lastIndexOf("+"));
					unpaidList = unpaidList.substring(0, unpaidList.lastIndexOf("+"));
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				} else if (frequencyInt == 1) {
					columnList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">=0, IF(" + feesHead
							+ "_" + cm.intgerToMonth((startMonth) + "") + "_BANK" + " not like '%^C', " + feesHead + "_"
							+ cm.intgerToMonth((startMonth) + "") + ", 0), 0)";
					unpaidList += "IF(" + feesHead + "_" + cm.intgerToMonth((startMonth) + "") + ">0, IF(" + feesHead
							+ "_" + cm.intgerToMonth((startMonth) + "") + "_BANK" + " not like '%^C', 0, 1), 1)";
					columnList += " AS " + feesHead + ",";
					unpaidList += " AS " + feesHead + "_UNPAID,";
				}

			}
			headerStr += "|PENALTY|CONCESSION|TOTAL";
			unpaidHeadStr += "|TOTAL";
			paidStr += "|PAID|PAID|PAID";
			dueStr += "|DUE";

			String query = "SELECT " + tableName + ".GR_NO,STD_1,DIV_1," + columnList + unpaidList
					+ "IF(TOTAL_AMOUNT>=0, TOTAL_AMOUNT, 0)  AS TOTAL_AMOUNT,CONCESSION_AMOUNT,CONCESSION_PERCENT,PENALTY_AMOUNT,"
					+ "" + tableName + ".STD_1," + tableName + ".DIV_1 " + "FROM " + sessionData.getDBName() + "."
					+ tableName + " WHERE " + tableName + ".ACADEMIC_YEAR='" + academicYear + "' " + "AND " + tableName
					+ ".SECTION_NM='" + sessionData.getSectionName() + "' " + whereCondition + " " + "ORDER BY "
					+ tableName + ".STD_1," + tableName + ".DIV_1 ASC";
			statement = connection.createStatement();
			resultSetData = statement.executeQuery(query);

			while (resultSetData.next()) {
				detailStr = "";
				unpaidStr = "";

				LinkedHashMap<String, Double> feesReportDetailMap = new LinkedHashMap<String, Double>();
				LinkedHashMap<String, Double> feesReportTotalMap = new LinkedHashMap<String, Double>();

				LinkedHashMap concessionMap = new LinkedHashMap();
				grNoDb = resultSetData.getString("GR_NO");
				
				if (freePayingData.get(grNoDb) == null || freePayingData.get(grNoDb).toString().equalsIgnoreCase("Free")) {
					continue;
				}
				if (studentOptMap.get(grNoDb) != null) {
					optionalFee = ((LinkedHashMap<?, ?>) studentOptMap.get(grNoDb)).get("optional_fee").toString();
					optionalList = optionalFee.split("\\|");
				}
				stdDb = resultSetData.getString("STD_1");
				stdInt = cm.RomanToInteger(stdDb);
				divDb = resultSetData.getString("DIV_1");
				divInt = cm.AlphabetToInteger(divDb);
				stdDivInt = Integer.parseInt(stdInt + "" + divInt);
				stdTotalInt = Integer.parseInt(stdInt + "" + 99);
				feesReportDetailMap.put("std", (double) stdInt);
				if (feesReportMap.get(stdTotalInt) == null) {
					feesReportTotalMap.put("std", (double) stdInt);
				} else {
					feesReportTotalMap = feesReportMap.get(stdTotalInt);
				}

				feesReportDetailMap.put("div", (double) divInt);

				if (!prevStd.equalsIgnoreCase(stdDb)) {
					dueTotal = 0;
					feesHeadMap = getFeesHeadData(sessionData, academicYear, stdDb, sessionData.getSectionName(),
							category);
				}

				if (feesReportMap.get(stdDivInt) != null) {
					feesReportDetailMap = feesReportMap.get(stdDivInt);
				} else {
					dueTotal = 0.0;
				}

				if (feesReportMap.get(stdTotalInt) != null) {
					feesReportTotalMap = feesReportMap.get(stdTotalInt);
				}

				/// concession ///////////////
				concessionMapStr = resultSetData.getString("CONCESSION_PERCENT") == null ? "0"
						: resultSetData.getString("CONCESSION_PERCENT").trim();
				if (!concessionMapStr.equalsIgnoreCase("0")) {
					concessionMapStr = concessionMapStr.substring(1, concessionMapStr.length() - 1);
					concessionArr = concessionMapStr.split(",");
					for (int i = 0; i < concessionArr.length; i++) {
						concessionValue = concessionArr[i].trim();
						concessionMap.put(concessionValue.substring(0, concessionValue.indexOf("=")),
								concessionValue.substring(concessionValue.lastIndexOf("=") + 1));
					}
				}

				Iterator k = set.iterator();
				while (k.hasNext()) {
					optionalFee = "";
					isOptional = false;
					Map.Entry me = (Map.Entry) k.next();
					feesHead = me.getKey().toString();
					subFee = "";
					if (feesHeadMap.get(me.getKey()) == null) {
						continue;
					}
					optional = ((LinkedHashMap<?, ?>) feesHeadMap.get(me.getKey())).get("optional").toString();
					for (int n = 0; n < optionalList.length; n++) {
						if (optionalList[n].contains(feesHead + "^") && subFee.equalsIgnoreCase("")) {
							subFee = optionalList[n].substring(optionalList[n].indexOf("^") + 1);
							isOptional = true;
						}
					}
					feesHeadAmount = resultSetData.getDouble(feesHead);
					unpaidFeeAmount = 0;

					//// for due concession
					if (feesHeadMap.get(feesHead) != null) {
						freqFromMap = ((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("frequency").toString();
						freqDivisor = cm.frequencyToInteger(freqFromMap);
						feesTotalamount = (Double
								.parseDouble(((LinkedHashMap<?, ?>) feesHeadMap.get(feesHead)).get("amount").toString())
								/ freqDivisor);
						unpaidFeeAmount = Double.parseDouble(resultSetData.getString(feesHead + "_UNPAID"))
								* feesTotalamount;
						if (optional.equalsIgnoreCase("No") || (optional.equalsIgnoreCase("Yes") && isOptional)) {

						} else {
							unpaidFeeAmount = 0.0;
						}
					}
					///////////////

					if (feesReportDetailMap.get(feesHead) != null) {
						feesReportDetailMap.put(feesHead, (feesReportDetailMap.get(feesHead) + feesHeadAmount));
						feesReportDetailMap.put(feesHead + "_due",
								(feesReportDetailMap.get(feesHead + "_due") + unpaidFeeAmount));
					} else {
						feesReportDetailMap.put(feesHead, feesHeadAmount);
						feesReportDetailMap.put(feesHead + "_due", unpaidFeeAmount);
					}

					if (feesReportTotalMap.get(feesHead) != null) {
						feesReportTotalMap.put(feesHead, (feesReportTotalMap.get(feesHead) + feesHeadAmount));
						feesReportTotalMap.put(feesHead + "_due",
								(feesReportTotalMap.get(feesHead + "_due") + unpaidFeeAmount));
					} else {
						feesReportTotalMap.put(feesHead, feesHeadAmount);
						feesReportTotalMap.put(feesHead + "_due", unpaidFeeAmount);
					}

					dueTotal += unpaidFeeAmount;
					dueGrandTotal += unpaidFeeAmount;
					feesHeadTotalMap.put(feesHead, (feesHeadTotalMap.get(feesHead) + feesHeadAmount));
					feesDueTotalMap.put(feesHead, (feesDueTotalMap.get(feesHead) + unpaidFeeAmount));

					studentTotalDb = feesHeadAmount;
					if (feesReportDetailMap.get("TOTAL_AMOUNT") != null) {
						feesReportDetailMap.put("TOTAL_AMOUNT",
								(feesReportDetailMap.get("TOTAL_AMOUNT") + studentTotalDb));
					} else {
						feesReportDetailMap.put("TOTAL_AMOUNT", studentTotalDb);
					}

					if (feesReportTotalMap.get("TOTAL_AMOUNT") != null) {
						feesReportTotalMap.put("TOTAL_AMOUNT",
								(feesReportTotalMap.get("TOTAL_AMOUNT") + studentTotalDb));
					} else {
						feesReportTotalMap.put("TOTAL_AMOUNT", studentTotalDb);
					}

					if (feesReportTotalMap.get("TOTAL_DUE") != null) {
						feesReportTotalMap.put("TOTAL_DUE", (feesReportTotalMap.get("TOTAL_DUE") + unpaidFeeAmount));
					} else {
						feesReportTotalMap.put("TOTAL_DUE", unpaidFeeAmount);
					}

					grandTotal += studentTotalDb;
				}

				feesReportDetailMap.put("TOTAL_DUE", dueTotal);
//				feesReportTotalMap.put("TOTAL_DUE", dueTotal);

				penaltyDb = resultSetData.getDouble("PENALTY_AMOUNT");
				if (feesReportDetailMap.get("PENALTY_AMOUNT") != null) {
					feesReportDetailMap.put("PENALTY_AMOUNT", (feesReportDetailMap.get("PENALTY_AMOUNT") + penaltyDb));
				} else {
					feesReportDetailMap.put("PENALTY_AMOUNT", penaltyDb);
				}

				if (feesReportTotalMap.get("PENALTY_AMOUNT") != null) {
					feesReportTotalMap.put("PENALTY_AMOUNT", (feesReportTotalMap.get("PENALTY_AMOUNT") + penaltyDb));
				} else {
					feesReportTotalMap.put("PENALTY_AMOUNT", penaltyDb);
				}

				concessionDb = resultSetData.getDouble("CONCESSION_AMOUNT");
				if (feesReportDetailMap.get("CONCESSION_AMOUNT") != null) {
					feesReportDetailMap.put("CONCESSION_AMOUNT",
							(feesReportDetailMap.get("CONCESSION_AMOUNT") + concessionDb));
				} else {
					feesReportDetailMap.put("CONCESSION_AMOUNT", concessionDb);
				}

				if (feesReportTotalMap.get("CONCESSION_AMOUNT") != null) {
					feesReportTotalMap.put("CONCESSION_AMOUNT",
							(feesReportTotalMap.get("CONCESSION_AMOUNT") + concessionDb));
				} else {
					feesReportTotalMap.put("CONCESSION_AMOUNT", concessionDb);
				}

//				grandTotal += studentTotalDb;
				penaltyTotal += penaltyDb;
				concessionTotal += concessionDb;
//				feesReportMap.put("a"+stdInt+"|"+divInt, feesReportDetailMap);
				feesReportMap.put(stdDivInt, feesReportDetailMap);
				feesReportMap.put(stdTotalInt, feesReportTotalMap);
				prevStd = stdDb;
			}

			studentReportList.add(headerStr + unpaidHeadStr);
			studentReportList.add(paidStr + dueStr);

			Set setReport = feesReportMap.entrySet();
			Iterator m = setReport.iterator();
			while (m.hasNext()) {
				LinkedHashMap<String, Double> feesReportDetailMap = new LinkedHashMap<String, Double>();
				detailStr = "";
				unpaidStr = "";
				Map.Entry me = (Map.Entry) m.next();
				feeKey = me.getKey().toString();
				feesReportDetailMap = (LinkedHashMap<String, Double>) me.getValue();

				if (feesReportDetailMap.get("div") != null) {
					detailStr = cm.IntegerToRoman("a" + feesReportDetailMap.get("std").intValue()) + "|"
							+ integerToAlphabetMap.get(feesReportDetailMap.get("div").intValue() + "") + "|";
				} else {
					detailStr = cm.IntegerToRoman("a" + feesReportDetailMap.get("std").intValue()) + "|Total|";
				}

				Iterator n = set.iterator();
				while (n.hasNext()) {
					Map.Entry meconsol = (Map.Entry) n.next();
					feesHead = meconsol.getKey().toString();
					detailStr += String.format("%.2f",
							feesReportDetailMap.get(feesHead) == null ? 0.00 : feesReportDetailMap.get(feesHead)) + "|";
					unpaidStr += String.format("%.2f", feesReportDetailMap.get(feesHead + "_due") == null ? 0.00
							: feesReportDetailMap.get(feesHead + "_due")) + "|";
				}
				detailStr += String.format("%.2f", feesReportDetailMap.get("PENALTY_AMOUNT")) + "|"
						+ String.format("%.2f", feesReportDetailMap.get("CONCESSION_AMOUNT")) + "|"
						+ String.format("%.2f", feesReportDetailMap.get("TOTAL_AMOUNT"));

				unpaidStr += String.format("%.2f",
						feesReportDetailMap.get("TOTAL_DUE") == null ? 0.00 : feesReportDetailMap.get("TOTAL_DUE"));

				studentReportList.add(detailStr + "|" + unpaidStr);
			}

			Set setFeeTotal = feesHeadTotalMap.entrySet();
			Iterator n = setFeeTotal.iterator();
			while (n.hasNext()) {
				Map.Entry me = (Map.Entry) n.next();
				totalStr += "|" + String.format("%.2f", me.getValue());
				totalDueStr += "|" + String.format("%.2f", feesDueTotalMap.get(me.getKey()));
			}
			totalStr += "|" + String.format("%.2f", penaltyTotal) + "|" + String.format("%.2f", concessionTotal) + "|"
					+ String.format("%.2f", grandTotal);
//			totalStr += totalDueStr + "|"+String.format("%.2f", concessionDueGrandTotal)+"|"+String.format("%.2f", dueGrandTotal);
			totalStr += totalDueStr + "|" + String.format("%.2f", dueGrandTotal);
			;
			studentReportList.add(totalStr);

			if (studentReportList.size() > 3) {
				ce.generateExcel(sessionData, "FEE REPORT", "FEE_REPORT_CONSOLIDATE_" + academicYear + "_", "",
						studentReportList, true, "Consolidated Fee Collection Report for    Year:" + academicYear
								+ "   Category:" + category + "   " + sessionData.getSectionFullName(),
						1);
			} else {
				JOptionPane.showMessageDialog(null, "No Data found..");
			}
		} catch (Exception e) {
			cm.logException(e);
			return feesReportMap;
		}
		return feesReportMap;
	}

	public TreeMap<Integer, LinkedHashMap<String, String>> updateFeesReportMap(SessionData sessionData,
			TreeMap<Integer, LinkedHashMap<String, String>> feesReportMap, String academicYear, String std, String div,
			int receipt, String feesHead, double feesHeadAmount, double penalty, double concession, String grNo,
			String name, String rollNo, String paymentMode, String bank, String chequeDDNo, String chequeDDDate,
			LinkedHashMap<String, Double> selFeesHeadMap, String feesDate, double balanceAmount,
			double prevBalanceAmount) throws Exception {

		LinkedHashMap<String, String> receiptDetailMap = new LinkedHashMap<String, String>();
		double feesHeadAmtFromMap = 0;
		try {
			if (!selFeesHeadMap.containsKey(feesHead)) {
				selFeesHeadMap.put(feesHead, 0.0);
			}

			DecimalFormat f = new DecimalFormat("##.00");
			feesHeadAmount = Double.parseDouble(f.format(feesHeadAmount));
			
			if (feesReportMap.containsKey(receipt)) {
				receiptDetailMap = feesReportMap.get(receipt);
				if (receiptDetailMap.get(feesHead) != null) {
					feesHeadAmtFromMap = Double.parseDouble(receiptDetailMap.get(feesHead));
				}
				
				double feesHeadAmountTotal = feesHeadAmtFromMap + feesHeadAmount;
		           
				receiptDetailMap.put(feesHead, f.format(feesHeadAmountTotal));
				receiptDetailMap.put("concession",
						(concession + Double.parseDouble(receiptDetailMap.get("concession"))) + "");
				if (receiptDetailMap.get("balanceAmount") == null) {
					receiptDetailMap.put("balanceAmount",
							(Double.parseDouble(receiptDetailMap.get("balanceAmount"))) + "");
					receiptDetailMap.put("total",
							(Double.parseDouble(receiptDetailMap.get("total")) - balanceAmount) + "");
				} else {
					receiptDetailMap.put("total",
							(Double.parseDouble(receiptDetailMap.get("total")) - balanceAmount) + "");
				}

				if (receiptDetailMap.get("penalty") == null) {
					receiptDetailMap.put("penalty", (Double.parseDouble(receiptDetailMap.get("penalty"))) + "");
					receiptDetailMap.put("total",
							(Double.parseDouble(receiptDetailMap.get("total")) + Double.parseDouble(f.format(feesHeadAmount + penalty - concession)))
									+ "");
				} else {
					receiptDetailMap.put("total",
							(Double.parseDouble(receiptDetailMap.get("total")) + Double.parseDouble(f.format(feesHeadAmount - concession))) + "");
				}
			} else {
				receiptDetailMap.put("receipt", receipt + "");
				receiptDetailMap.put("grNo", grNo);
				name = name.replace("null", "");
				receiptDetailMap.put("name", name);
				receiptDetailMap.put("std", std);
				receiptDetailMap.put("div", div);
				receiptDetailMap.put("rollNo", rollNo);
				receiptDetailMap.put("feesDate", feesDate);
				receiptDetailMap.put("paymentMode", paymentMode);
				receiptDetailMap.put("bank", bank);
				receiptDetailMap.put("chequeDDNo", chequeDDNo);
				receiptDetailMap.put("chequeDDDate", chequeDDDate);
				receiptDetailMap.put("penalty", penalty + "");
				receiptDetailMap.put("concession", concession + "");
				receiptDetailMap.put("balanceAmount", balanceAmount + "");
				receiptDetailMap.put(feesHead, feesHeadAmount + "");
				receiptDetailMap.put("total", f.format(feesHeadAmount + penalty - concession - balanceAmount) + "");
				feesReportMap.put(receipt, receiptDetailMap);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return feesReportMap;
	}
	
	public TreeMap<String, Double> updateFeesCollectionReportMap(SessionData sessionData,
			TreeMap<String, Double> feesReportMap, String std, String feesHead, double feesHeadAmount, double penalty, 
			double concession, String paymentMode,	double balanceAmount) throws Exception {

		double feesAmt = 0;
		try {
				DecimalFormat df = new DecimalFormat("####0.00");
				feesHeadAmount = Double.parseDouble(df.format(feesHeadAmount));
				penalty = Double.parseDouble(df.format(penalty));
				concession = Double.parseDouble(df.format(concession));
				balanceAmount = Double.parseDouble(df.format(balanceAmount));
				
				feesAmt = (feesHeadAmount + penalty - concession - balanceAmount);
				feesAmt = Double.parseDouble(df.format(feesAmt));
				
				cm.updateTreeMap(feesReportMap, std, feesAmt);
				cm.updateTreeMap(feesReportMap, "penaltyTotal", penalty);
				cm.updateTreeMap(feesReportMap, "concessionTotal", concession);
				cm.updateTreeMap(feesReportMap, "balanceTotal", balanceAmount);
				cm.updateTreeMap(feesReportMap, "stdTotal", feesAmt);
				
				if(paymentMode.equalsIgnoreCase("Cash")){
					cm.updateTreeMap(feesReportMap, "cashTotal", feesAmt);
				} else if(paymentMode.equalsIgnoreCase("Cheque")){
					cm.updateTreeMap(feesReportMap, "chequeTotal", feesAmt);
				} else if(paymentMode.equalsIgnoreCase("DD")){
					cm.updateTreeMap(feesReportMap, "ddTotal", feesAmt);
				} else if(paymentMode.equalsIgnoreCase("UPI")){
					cm.updateTreeMap(feesReportMap, "upiTotal", feesAmt);
				}
				
				cm.updateTreeMap(feesReportMap, "allTotal", feesAmt);
//			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return feesReportMap;
	}

	public TreeMap<Integer, LinkedHashMap<String, Double>> updateFeesAbstractReportMap(SessionData sessionData,
			TreeMap<Integer, LinkedHashMap<String, Double>> feesReportMap, String academicYear, String std, String div,
			int receipt, String feesHead, double feesHeadAmount, double penalty, double concession,
//			String grNo, String name, String rollNo, String paymentMode, String bank, String chequeDDNo, String chequeDDDate,
			LinkedHashMap<String, Double> selFeesHeadMap, String feesDate) throws Exception {

		LinkedHashMap<String, Double> receiptDetailMap = new LinkedHashMap<String, Double>();
		LinkedHashMap<String, Double> receiptTotalMap = new LinkedHashMap<String, Double>();
		double feesHeadAmtFromMap = 0;
		int stdInt = cm.RomanToInteger(std);
		int divInt = cm.AlphabetToInteger(div);
		int stdDivInt = Integer.parseInt(stdInt + "" + divInt);
		int stdTotalInt = Integer.parseInt(stdInt + "" + 99);
		try {
			if (!selFeesHeadMap.containsKey(feesHead)) {
				selFeesHeadMap.put(feesHead, 0.0);
			}

			if (feesReportMap.containsKey(stdDivInt)) {
				receiptDetailMap = feesReportMap.get(stdDivInt);
				if (receiptDetailMap.get(feesHead) != null) {
					feesHeadAmtFromMap = receiptDetailMap.get(feesHead);
				}
				receiptDetailMap.put(feesHead, (feesHeadAmtFromMap + feesHeadAmount));
				receiptDetailMap.put("concession", (concession + receiptDetailMap.get("concession")));
				receiptDetailMap.put("penalty", (penalty + receiptDetailMap.get("penalty")));
				receiptDetailMap.put("total", (receiptDetailMap.get("total") + feesHeadAmount - concession));
			} else {
				receiptDetailMap.put("std", (double) stdInt);
				receiptDetailMap.put("div", (double) divInt);
				receiptDetailMap.put("penalty", penalty);
				receiptDetailMap.put("concession", concession);
				receiptDetailMap.put(feesHead, feesHeadAmount);
				receiptDetailMap.put("total", (feesHeadAmount + penalty - concession));
				feesReportMap.put(stdDivInt, receiptDetailMap);
			}

			if (feesReportMap.containsKey(stdTotalInt)) {
				receiptTotalMap = feesReportMap.get(stdTotalInt);
				if (receiptTotalMap.get(feesHead) != null) {
					feesHeadAmtFromMap = receiptTotalMap.get(feesHead);
				}
				receiptTotalMap.put(feesHead, (feesHeadAmtFromMap + feesHeadAmount));
				receiptTotalMap.put("concession", (concession + receiptTotalMap.get("concession")));
				receiptTotalMap.put("penalty", (penalty + receiptTotalMap.get("penalty")));
				receiptTotalMap.put("total", (receiptTotalMap.get("total") + feesHeadAmount - concession));
			} else {
				receiptTotalMap.put("std", (double) stdInt);
				receiptTotalMap.put("penalty", penalty);
				receiptTotalMap.put("concession", concession);
				receiptTotalMap.put(feesHead, feesHeadAmount);
				receiptTotalMap.put("total", (feesHeadAmount + penalty - concession));
				feesReportMap.put(stdTotalInt, receiptTotalMap);
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return feesReportMap;
	}

	public double getFeesCollection(SessionData sessionData, String period, String fromDate, String toDate, String std,
			String div, String academicYear) {
		double totalAmount = 0;
		String condition = "";
		LinkedHashMap<String, String> dateMap = new LinkedHashMap<String, String>();

		try {
			dateMap = cm.getDateForADayInWeek(sessionData);
			if (period.equalsIgnoreCase("1")) {
				fromDate = toDate = cm.dateToYYYYMMDD(new Date());
			} else if (period.equalsIgnoreCase("2")) {
				fromDate = dateMap.get("firstDay");
				toDate = dateMap.get("lastDay");
			} else if (period.equalsIgnoreCase("3")) {
				fromDate = dateMap.get("firstDayOfMonth");
				toDate = dateMap.get("lastDayOfMonth");
			}

			if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
				condition = condition + " AND STD_1='" + std + "'";
			}
			if (!div.equalsIgnoreCase("All") && !div.equalsIgnoreCase("")) {
				condition = condition + " AND DIV_1='" + div + "'";
			}

			String queryMandatory = "select SUM(TOTAL_AMOUNT) AS TOTAL_AMOUNT from " + sessionData.getDBName()
					+ ".fees_report_mandatory " + "where FEE_DATE between '" + fromDate + "' and '" + toDate
					+ "' AND SECTION_NM='" + sessionData.getSectionName() + "' " + "AND ACADEMIC_YEAR='" + academicYear
					+ "' " + condition;
			statement = connection.createStatement();
			resultSet = statement.executeQuery(queryMandatory);
			while (resultSet.next()) {
				totalAmount = totalAmount + resultSet.getDouble("TOTAL_AMOUNT");
			}

//			if(totalAmount == 0) {
//				String queryOptional = "select SUM(TOTAL_AMOUNT) AS TOTAL_AMOUNT from "+sessionData.getDBName()+".fees_report_optional "
//						+ "where FEE_DATE between '"+fromDate+"' and '"+toDate+"'";
//				statement = connection.createStatement();
//				resultSet = statement.executeQuery(queryOptional);
//				while (resultSet.next()) {
//					totalAmount = totalAmount + resultSet.getDouble("TOTAL_AMOUNT");
//				}
//			}
		} catch (Exception e) {
			cm.logException(e);
		}

		return totalAmount;
	}

	public LinkedHashMap<String, String> getLeftStudentMap(SessionData sessionData, String academicYear, String std,
			String div) throws Exception {
		LinkedHashMap<String, String> leftDataMap = new LinkedHashMap<String, String>();
		String condition = "";
		if(!academicYear.equalsIgnoreCase("") && !std.equalsIgnoreCase("")){
			condition = "ACADEMIC_YEAR='" + academicYear + "' AND PRESENT_STD='" + std + "' AND PRESENT_DIV='" + div + "' " + "AND ";
		}

		String findQuery = "SELECT GR_NO FROM " + sessionData.getDBName() + "." + "hs_general_register "
				+ "WHERE "+condition+" SECTION_NM='" + sessionData.getSectionName() + "' AND DATE_LEAVING IS NOT NULL "
				+ "ORDER BY GR_NO";
		logger.info("fetch left student list query == " + findQuery);

		statement = connection.createStatement();
		resultSet = statement.executeQuery(findQuery);

		while (resultSet.next()) {
			leftDataMap.put(resultSet.getString("GR_NO"), "");
		}

		return leftDataMap;
	}

	public LinkedHashMap<String, String> getFeeStaffMap(SessionData sessionData, String academicYear, String std,
			String div) throws Exception {
		LinkedHashMap<String, String> staffMap = new LinkedHashMap<String, String>();
		String condition = "", findQuery = "";

		if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("")) {
			condition = condition + " AND (STD_1='" + std + "' OR STD_1='All')";
		}
		if (!div.equalsIgnoreCase("All") && !div.equalsIgnoreCase("")) {
			condition = condition + " AND (DIV_1='" + div + "' OR DIV_1='All')";
		}

		if (!std.equalsIgnoreCase("All") && !std.equalsIgnoreCase("") && !div.equalsIgnoreCase("All")
				&& !div.equalsIgnoreCase("")) {
			findQuery = "SELECT STAFF_NAME, CONTACT_1, DESIGNATION FROM " + sessionData.getDBName() + "."
					+ "staff_data " + "WHERE ACADEMIC_YEAR='" + academicYear + "' AND SECTION_NM='"
					+ sessionData.getSectionName() + "' " + "AND SMS_FEE_ENABLED='Enable' " + condition;
		} else {
			findQuery = "SELECT STAFF_NAME, CONTACT_1, DESIGNATION FROM " + sessionData.getDBName() + "."
					+ "staff_data " + "WHERE ACADEMIC_YEAR='" + academicYear + "' AND SECTION_NM='"
					+ sessionData.getSectionName() + "' "
					+ "AND SMS_FEE_ENABLED='Enable' AND DESIGNATION !='Class Teacher'";
		}

		statement = connection.createStatement();
		resultSet = statement.executeQuery(findQuery);

		while (resultSet.next()) {
			staffMap.put(resultSet.getString("STAFF_NAME") + "|" + resultSet.getString("DESIGNATION"),
					resultSet.getString("CONTACT_1"));
		}

		return staffMap;
	}

	public LinkedHashMap<String, String> deleteDuplicateData(SessionData sessionData, String academicYear, String std,
			String div, String tableName, String stdColumnName, String divColumnName, JFrame f) throws Exception {
		LinkedHashMap<String, String> listOfRecordsToKeep = new LinkedHashMap<String, String>();
		String keyName = "", deleteQuery = "";
		int rowcount = 0, i = 1;

		try {
			String findQuery = "select * from " + sessionData.getDBName() + "." + tableName + " where " + stdColumnName
					+ "='" + std + "' " + "and ACADEMIC_YEAR='" + academicYear + "' and section_nm='"
					+ sessionData.getSectionName() + "' and " + "GR_NO IN (SELECT GR_NO FROM " + sessionData.getDBName() + "." + tableName
					+ " where ACADEMIC_YEAR = '" + academicYear + "' AND " + "" + stdColumnName + " = '" + std
					+ "' AND SECTION_NM = '" + sessionData.getSectionName() + "' "
					+ "GROUP BY GR_NO HAVING COUNT(GR_NO) > 1) order by CREATED_DATE DESC";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}
			while (resultSet.next()) {
				f.setTitle("1) Updating " + i + " / " + rowcount);
				keyName = resultSet.getString("GR_NO") + "_" + resultSet.getString(stdColumnName) + "_"
						+ resultSet.getString("ACADEMIC_YEAR");
				if (listOfRecordsToKeep.get(keyName) == null) {
					listOfRecordsToKeep.put(keyName, "");
				} else {
					deleteQuery = "Delete from " + sessionData.getDBName() + "." + tableName + " where GR_NO='"
							+ resultSet.getString("GR_NO") + "' and " + stdColumnName + "='"
							+ resultSet.getString(stdColumnName) + "' and ACADEMIC_YEAR='"
							+ resultSet.getString("ACADEMIC_YEAR") + "' " + "and CREATED_DATE='"
							+ resultSet.getString("CREATED_DATE") + "' and section_nm='" + sessionData.getSectionName()
							+ "'";
					statement = connection.createStatement();
					statement.executeUpdate(deleteQuery);
				}
				i++;
			}
		} catch (Exception e) {
			cm.logException(e);
		}

		return listOfRecordsToKeep;
	}

	////// Add SchoolHead///////////////////////////////////
	public boolean addReceiptHead(SessionData sessionData, String inst_name, String school_name, String school_add,
			String short_name, String mode) throws Exception {

		String createdBy = sessionData.getUserName(), addUpdate = "", insertHead = "";
		boolean retFlag = false;
		boolean validateHead = false;

		try {
			if (mode.equalsIgnoreCase("insert")) {
				String findheadQuery = "SELECT DISTINCT SHORT_NAME " + "FROM " + sessionData.getDBName() + "."
						+ "SCHOOL_HEAD " + "WHERE SHORT_NAME='" + short_name + "'";

				logger.info("findheadQuery before dbConn == " + findheadQuery);
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findheadQuery);
				String subNameDB = "";
				while (resultSet.next()) {
					subNameDB = resultSet.getString("SHORT_NAME");
					validateHead = true;
				}
			}

			if (!validateHead) {
				if (mode.equalsIgnoreCase("update")) {
					addUpdate = "updated";
					insertHead = "Update school_head set HEAD_1='" + inst_name.trim() + "',HEAD_2='"
							+ school_name.trim() + "'," + "HEAD_3='" + school_add.trim() + "',MODIFIED_BY='"
							+ createdBy.trim() + "'," + "MODIFIED_DATE=SYSDATE() where SHORT_NAME='"
							+ short_name.toUpperCase() + "'";

					statement = connection.createStatement();
					statement.executeUpdate(insertHead);
				} else if (mode.equalsIgnoreCase("insert")) {
					addUpdate = "added";
					insertHead = "INSERT INTO school_head "
							+ "(HEAD_1,HEAD_2,HEAD_3,SHORT_NAME,CREATED_DATE,CREATED_BY) " + "VALUES ('"
							+ inst_name.trim() + "','" + school_name.trim() + "','" + school_add.trim() + "','"
							+ short_name.trim().toUpperCase() + "'," + "SYSDATE(),'" + createdBy.trim().toUpperCase()
							+ "')";

					statement = connection.createStatement();
					statement.executeUpdate(insertHead);
				} else if (mode.equalsIgnoreCase("delete")) {
					insertHead = "INSERT INTO school_head "
							+ "(HEAD_1,HEAD_2,HEAD_3,SHORT_NAME,CREATED_DATE,CREATED_BY) " + "VALUES ('"
							+ inst_name.trim() + "','" + school_name.trim() + "','" + school_add.trim() + "','"
							+ short_name.trim().toUpperCase() + "'," + "SYSDATE(),'" + createdBy.trim().toUpperCase()
							+ "')";

					statement = connection.createStatement();
					statement.executeUpdate(insertHead);

					insertHead = "DELETE FROM " + sessionData.getDBName() + "." + "school_head WHERE " + "SHORT_NAME='"
							+ short_name.trim().toUpperCase() + "'";

					statement = connection.createStatement();
					statement.executeUpdate(insertHead);
					addUpdate = "deleted";
				}

				JOptionPane.showMessageDialog(null,
						"Head with short name " + short_name.trim().toUpperCase() + " " + addUpdate + " successfully");
				retFlag = true;
			} else {
				retFlag = false;
				JOptionPane.showMessageDialog(null, "Short name " + short_name.toUpperCase() + " already exist");
			}
			return retFlag;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	////// Add Multiple Head///////////////////////////////////
	public boolean addMultipleHead(SessionData sessionData, String fee_name, String subFee_name, String amount,
			String academic, String std, String mode, String oldSubFee, boolean isAllSelected) throws Exception {

		String createdBy = sessionData.getUserName(), addUpdate = "", insertHead = "";
		String allStd = "";
		boolean retFlag = false;
		boolean validateHead = false;

		try {
			if (mode.equalsIgnoreCase("insert")) {
				String findheadQuery = "SELECT DISTINCT SUB_FEES_NAME " + "FROM " + sessionData.getDBName() + "."
						+ "MULTIPLE_HEAD " + "WHERE SUB_FEES_NAME='" + subFee_name + "'";

				statement = connection.createStatement();
				resultSet = statement.executeQuery(findheadQuery);
				String subNameDB = "";
				while (resultSet.next()) {
					subNameDB = resultSet.getString("SUB_FEES_NAME");
					validateHead = true;
				}
			}

			if (!validateHead) {
				if (mode.equalsIgnoreCase("update")) {
					addUpdate = "updated";
					insertHead = "Update multiple_head set SUB_FEES_NAME='" + subFee_name.trim() + "',AMOUNT='"
							+ amount.trim() + "'" + ",MODIFIED_BY='" + createdBy.trim()
							+ "',MODIFIED_DATE=SYSDATE() where " + "SUB_FEES_NAME='" + oldSubFee.toUpperCase()
							+ "' AND FEES_NAME='" + fee_name + "' and " + "SECTION_NM='" + sessionData.getSectionName()
							+ "'";

					statement = connection.createStatement();
					statement.executeUpdate(insertHead);
				} else if (mode.equalsIgnoreCase("insert")) {
					addUpdate = "added";
					if (isAllSelected) {
						allStd = sessionData.getConfigMap().get(sessionData.getSectionName().toUpperCase() + "_STD");
						String[] stdList = allStd.split(",");
						for (int i = 0; i < stdList.length; i++) {
							insertHead = "INSERT INTO multiple_head "
									+ "(STD_1,FEES_NAME,SUB_FEES_NAME,AMOUNT,ACADEMIC_YEAR,"
									+ "CREATED_DATE,CREATED_BY, SECTION_NM) " + "VALUES ('" + stdList[i].trim() + "','"
									+ fee_name.trim() + "','" + subFee_name.trim() + "','" + amount + "','" + academic
									+ "'," + "SYSDATE(),'" + createdBy.trim().toUpperCase() + "'," + "'"
									+ sessionData.getSectionName() + "')";

							statement = connection.createStatement();
							statement.executeUpdate(insertHead);
						}
					} else {
						insertHead = "INSERT INTO multiple_head "
								+ "(STD_1,FEES_NAME,SUB_FEES_NAME,AMOUNT,ACADEMIC_YEAR,"
								+ "CREATED_DATE,CREATED_BY, SECTION_NM) " + "VALUES ('" + std.trim() + "','"
								+ fee_name.trim() + "','" + subFee_name.trim() + "','" + amount + "','" + academic
								+ "'," + "SYSDATE(),'" + createdBy.trim().toUpperCase() + "'," + "'"
								+ sessionData.getSectionName() + "')";

						statement = connection.createStatement();
						statement.executeUpdate(insertHead);
					}
				} else if (mode.equalsIgnoreCase("delete")) {
					insertHead = "DELETE FROM " + sessionData.getDBName() + "." + "multiple_head "
							+ "WHERE SUB_FEES_NAME='" + oldSubFee + "' and FEES_NAME='" + fee_name + "' and "
							+ "SECTION_NM='" + sessionData.getSectionName() + "'";

					statement = connection.createStatement();
					statement.executeUpdate(insertHead);
					addUpdate = "deleted";
				}
//				
				JOptionPane.showMessageDialog(null,
						"Sub Fee Name " + cm.revertCommaApostrophy(subFee_name) + " " + addUpdate + " successfully");
				retFlag = true;
			} else {
				retFlag = false;
				JOptionPane.showMessageDialog(null,
						"Sub Fee Name " + subFee_name + " already exist for fee name " + fee_name);
			}
			return retFlag;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	// /////////Find list of columns////////////////////////////////////////
	public String getColumnList(SessionData sessionData, String tableName, String condition,
			LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap) throws Exception {

		String columnList = "";
		String addCondition = "", columnName = "";

		try {
			if (!condition.equalsIgnoreCase("")) {
				addCondition = " and column_name like '" + condition + "'";
			}
			String query = "select * from information_schema.columns where " + "table_name='" + tableName
					+ "'  AND TABLE_SCHEMA='" + sessionData.getDBName() + "'" + addCondition;

			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				columnName = resultSet.getString("COLUMN_NAME");
				if (columnName.endsWith("_BANK")
						&& !feesHeadMap.containsKey(columnName.substring(0, columnName.length() - 9))) {
					continue;
				}
				columnList = columnList + "," + columnName;
			}
			if (!columnList.equalsIgnoreCase("")) {
				columnList = columnList.substring(1);
			}

		} catch (Exception e) {
			cm.logException(e);
		}
		return columnList;
	}

	// /////////Find list of receipt numbers////////////////////////////////////////
	public TreeMap<Integer, String> getFeesReceiptList(SessionData sessionData, String academicYear, String std,
			String div, String gr, LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap) throws Exception {

		TreeMap<Integer, String> receiptMap = new TreeMap<Integer, String>();
		int receiptNo = 0;
		String status = "";

		try {

			String columnns = getColumnList(sessionData, "fees_data_mandatory", "%_BANK", feesHeadMap);
			String[] columnnArr = columnns.split(",");
			String query = "select " + columnns + " from fees_data_mandatory where ACADEMIC_YEAR='" + academicYear
					+ "' and STD_1='" + std + "' " + "and DIV_1='" + div + "' and SECTION_NM='"
					+ sessionData.getSectionName() + "' and GR_NO='" + gr + "'";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);
			String columnDetails = "", columnName = "";

			String[] columnSplit, dataSplit;
			while (resultSet.next()) {
				for (int i = 0; i < columnnArr.length; i++) {
					columnName = columnnArr[i].substring(0, columnnArr[i].length() - 9);
					if (feesHeadMap.get(columnName) == null) {
						continue;
					}
					columnDetails = resultSet.getString(columnnArr[i]);
					if (columnDetails != null) {
						dataSplit = columnDetails.toString().split("\\!");

						for (int j = 0; j < dataSplit.length; j++) {
							if (dataSplit[j] != null) {
								columnSplit = dataSplit[j].toString().split("\\^");
//								dataSplit[j] = dataSplit[j].substring(0, dataSplit[j].lastIndexOf("^"));
								if (!columnSplit[0].equalsIgnoreCase("null")) {
									receiptNo = Integer.parseInt(columnSplit[6].trim());
								}
								if (columnSplit.length > 8) {
									status = columnSplit[9].toString().trim();
								}
								if (receiptMap.get(receiptNo) == null && receiptNo != 0) {
									receiptMap.put(receiptNo, status);
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			cm.logException(e);
		}
		return receiptMap;
	}

	////// update receipt///////////////////////////////////
	public boolean updateReceipt(SessionData sessionData, String query) throws Exception {
		try {
			statement = connection.createStatement();
			statement.executeUpdate(query);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public byte[] getImage(SessionData sessionData, String grNo) throws Exception {
		byte b[] = null;
		try {
			Blob blob;

			PreparedStatement ps = (PreparedStatement) connection
					.prepareStatement("select * from student_imgs where gr_no='" + grNo + "'");
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				blob = rs.getBlob("img_data");
				b = blob.getBytes(1, (int) blob.length());
			}

			ps.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return b;
	}

	public boolean insertStudentImage(SessionData sessionData, String name, String grNo, String imgPath) throws Exception {
		PreparedStatement ps = null;
		FileInputStream inputStream = null;
		boolean flag = false, isUpdate = false;

		try {
			statement = connection.createStatement();
			String querystudent_imgs = "CREATE TABLE `student_imgs` (`img_id` int(10) unsigned NOT NULL AUTO_INCREMENT, `img_title` varchar(45) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,  `img_data` blob NOT NULL, `GR_NO` varchar(7) NOT NULL DEFAULT '0', `SECTION_NM` varchar(20) DEFAULT NULL, PRIMARY KEY (`img_id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1";
			statement.executeUpdate(querystudent_imgs);
		} catch (Exception e) {
			logger.warn("student_imgs table already exists");
		}

		try {
			File image = new File(imgPath);
			inputStream = new FileInputStream(image);

			String query = "select * from " + sessionData.getDBName() + ".student_imgs where " + "GR_NO='" + grNo
					+ "' AND SECTION_NM='" + sessionData.getSectionName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				isUpdate = true;
			}

			if (!isUpdate) {
				ps = (PreparedStatement) connection.prepareStatement("insert into " + sessionData.getDBName()
						+ ".student_imgs(img_title, img_data,GR_NO,SECTION_NM) " + "values(?,?,?,?)");
				ps.setString(1, name);
				ps.setBinaryStream(2, (InputStream) inputStream, (int) (image.length()));
				ps.setString(3, grNo);
				ps.setString(4, sessionData.getSectionName());
			} else {
				ps = (PreparedStatement) connection.prepareStatement("update " + sessionData.getDBName()
						+ ".student_imgs set img_data = ?, img_title = ? where GR_NO = ? and SECTION_NM = ?");
				ps.setBinaryStream(1, (InputStream) inputStream, (int) (image.length()));
				ps.setString(2, name);
				ps.setString(3, grNo);
				ps.setString(4, sessionData.getSectionName());
			}

			ps.executeUpdate();
			JOptionPane.showMessageDialog(null, "Image updated for GR_NO " + grNo);
			flag = true;
		} catch (Exception e) {
			cm.logException(e);
		}
		return flag;
	}

	public void update_max_allowed_packet(SessionData sessionData) {

		try {
			String updateQuery = "SET GLOBAL max_allowed_packet = 1073741824";
			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);

//			updateQuery = "SET GLOBAL innodb_buffer_pool_size = 402653184";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);
//			
//			updateQuery = "SET SQL_MODE='ALLOW_INVALID_DATES'";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);
//			
//			updateQuery = "SET GLOBAL innodb_default_row_format='dynamic'";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);

//			updateQuery = "SET SESSION innodb_strict_mode=ON";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);

//			updateQuery = "SET SESSION sql_mode=";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);

//			SET GLOBAL innodb_default_row_format='dynamic';
//			SET SESSION innodb_strict_mode=ON;

			/// To view run
			// show variables like '%max_allowed_packet%'
		} catch (Exception e) {
			cm.logException(e);
		}
	}

	public void update_global_sql_mode(SessionData sessionData) {

		try {
			String updateQuery = "set global sql_mode=''";
			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);
		} catch (Exception e) {
			cm.logException(e);
		}
	}

	public boolean updateConfigField(SessionData sessionData, boolean isUpdate, String fieldName, String fieldValue) {

		try {
			String configQuery = "";
			String query = "select * from " + sessionData.getDBName() + ".config_data where " + "CONFIG_NAME='"
					+ fieldName + "' AND SECTION_NM='" + sessionData.getSectionName() + "'";
			fieldValue = cm.replaceCommaApostrophy(fieldValue);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				isUpdate = true;
			}

			if (!isUpdate) {
				configQuery = "INSERT INTO " + sessionData.getDBName()
						+ ".config_data (CONFIG_NAME,CONFIG_VALUE,SECTION_NM,APP_TYPE)  VALUES ";
				configQuery = configQuery + " ('" + fieldName + "','" + cm.replaceCommaApostrophy(fieldValue) + "',"
						+ "'" + sessionData.getSectionName() + "','" + sessionData.getDBName() + "|"
						+ sessionData.getDBName() + "')";
			} else {
				configQuery = "UPDATE " + sessionData.getDBName() + ".config_data SET CONFIG_VALUE='" + fieldValue
						+ "' where " + "CONFIG_NAME='" + fieldName + "' AND SECTION_NM='" + sessionData.getSectionName()
						+ "'";
			}
			statement = connection.createStatement();
			statement.executeUpdate(configQuery);
			fieldValue = cm.revertCommaApostrophy(fieldValue);
			sessionData.getConfigMap().put(fieldName, fieldValue);
			logger.info("CONFIG_NAME " + fieldName + " with CONFIG_VALUE " + fieldValue);
			return true;

		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public boolean resolveDoubleConcession(SessionData sessionData) {
		String updateQuery = "", term_fees_jun_bank = "", exam_fees_jun_bank = "", term_fees_dec_bank = "",
				exam_fees_dec_bank = "", gr_no = "", audio$47$visual_fees_jun_bank = "",
				audio$47$visual_fees_dec_bank = "", query = "", computer_fees_jun_bank = "",
				computer_fees_dec_bank = "", admission_fees_jun_bank = "", monthly_fees_jan_bank = "",
				monthly_fees_feb_bank = "", monthly_fees_mar_bank = "", monthly_fees_apr_bank = "",
				monthly_fees_may_bank = "", monthly_fees_jun_bank = "", monthly_fees_jul_bank = "",
				monthly_fees_aug_bank = "", monthly_fees_sep_bank = "", monthly_fees_oct_bank = "",
				monthly_fees_nov_bank = "", monthly_fees_dec_bank = "", tempStr = "";
		String[] bankDetails = null, dataSplit = null;
		Double concession_amount = 0.0;
		boolean isConcessionAdded = false;
		String[] fee_column_arr = { "term_fees_jun_bank", "term_fees_dec_bank", "exam_fees_jun_bank",
				"exam_fees_dec_bank", "computer_fees_jun_bank", "computer_fees_dec_bank", "admission_fees_jun_bank",
				"monthly_fees_jan_bank", "monthly_fees_feb_bank", "monthly_fees_mar_bank", "monthly_fees_apr_bank",
				"monthly_fees_may_bank", "monthly_fees_jun_bank", "monthly_fees_jul_bank", "monthly_fees_aug_bank",
				"monthly_fees_sep_bank", "monthly_fees_oct_bank", "monthly_fees_nov_bank", "monthly_fees_dec_bank" };

		try {

			//// Std IX
			query = "select * from " + sessionData.getDBName() + ".fees_data_mandatory "
					+ "where STD_1='IX' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='" + sessionData.getSectionName()
					+ "' "
					+ "and CONCESSION_AMOUNT > 0 and gr_no in ('0000212','0000244','0000245','0000197','0000198',"
					+ "'0000199','0000200','0000201','0000209','0000217','0000220','0000221','0000225','0000226',"
					+ "'0000234','0000236','0000237','0000240','0000241','0000251','0000253','0000254',"
					+ "'0000255','0000256','0000258','0000259','0000262','0000263','0000270','0000264')";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(query);
			while (resultSet.next()) {
				updateQuery = "UPDATE " + sessionData.getDBName() + ".fees_data_mandatory SET ";

				gr_no = resultSet.getString("GR_NO");
				concession_amount = Double.parseDouble(resultSet.getString("CONCESSION_AMOUNT"));
				/// use for loop for columns and append in query
				for (String str : fee_column_arr) {
					tempStr = resultSet.getString(str.toUpperCase());

					if (tempStr == null || tempStr.equalsIgnoreCase(null)) {
						continue;
					}

					dataSplit = tempStr.split("\\!");
					for (int j = 0; j < dataSplit.length; j++) {
						bankDetails = dataSplit[j].split("\\^");
					}
					/// create variable for concession and check if getting same concession amount
					/// again if yes
					// then go to else if replace with 0.0
					if (true) {// if cash & 1200/5700/125/600/800 with concession 1200/5700 then no change

					} else if (true) {
						// if cash & !1200/!5700 but concession is 1200/5700/125/600/800
						// then replace Cash^NA^NA^NA^0^1200.0^ with Cash^NA^NA^NA^0^0.0^

					}

					// check if getting same concession amount again if yes
					// then go to else if replace with 0.0
					if (true) {// if cheque & 1200 with concession 1200 then no change

					} else if (true) {
						// if cheque & !1200 but concession is 1200
						// then substring till JUN - MAY and replace string with concession 0.0

					}

					updateQuery = updateQuery + str.toUpperCase() + "='" + tempStr + "',";
				}

				updateQuery = updateQuery.substring(0, updateQuery.length() - 1);
				updateQuery = updateQuery + " where STD_1='IX' and GR_NO='" + gr_no
						+ "' and ACADEMIC_YEAR='2020-21' AND " + "SECTION_NM='" + sessionData.getSectionName() + "'";

//			updateQuery = "UPDATE "+sessionData.getDBName()+".fees_data_mandatory "
//					+ "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+exam_fees_jun_bank+"',"
//					+ "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+exam_fees_dec_bank+"',"
//					+ "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+"',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' "
//					+ "where STD_1='IX' and GR_NO='"+gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.getSectionName()+"'";

//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);
			}

			/*
			 * query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='VI' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()
			 * +"' and (TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^350.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^200.0^%' or "
			 * +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^350.0^%' or AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or "
			 * + "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank = resultSet.getString("TERM_FEES_DEC_BANK");
			 * if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^200.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^350.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^350.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * updateQuery = "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='VI'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std III query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$_VISUAL_FEES_JUN_BANK,AUDIO$47$_VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='III' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()
			 * +"' and (TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%' or AUDIO$47$_VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or "
			 * + "AUDIO$47$_VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank = resultSet.getString("TERM_FEES_DEC_BANK");
			 * if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$_VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$_VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * updateQuery = "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$_VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$_VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='III'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std I query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$_VISUAL_FEES_JUN_BANK,AUDIO$47$_VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='I' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()
			 * +"' and (TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^150.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^150.0^%' or AUDIO$47$_VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or "
			 * + "AUDIO$47$_VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank = term_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } term_fees_dec_bank =
			 * resultSet.getString("TERM_FEES_DEC_BANK"); if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$_VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$_VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * updateQuery = "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$_VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$_VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='I'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std II query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='II' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"' and (" +
			 * "TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^100.0^%' or " +
			 * "TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "TERM_FEES_JUN_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^300.0 ^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^300.0 ^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^100.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^300.0 ^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^150.0 ^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^100.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^300.0 ^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^250.0 ^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^200.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank = term_fees_jun_bank.replace("Cash^NA^NA^NA^0^100.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^300.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } term_fees_dec_bank =
			 * resultSet.getString("TERM_FEES_DEC_BANK"); if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) { term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^300.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) { exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^100.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_jun_bank = exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^300.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } exam_fees_dec_bank =
			 * resultSet.getString("EXAM_FEES_DEC_BANK"); if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) { exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^150.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^100.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^300.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^250.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } updateQuery =
			 * "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='II' and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std IV query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='IV' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"' and " +
			 * "(TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^100.0^%' or TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^150.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^150.0^%' or AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or "
			 * + "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^100.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank = term_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } term_fees_dec_bank =
			 * resultSet.getString("TERM_FEES_DEC_BANK"); if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null"))
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * updateQuery = "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='IV'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std V query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='V' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"' and " +
			 * "(TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^100.0^%' or TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or "
			 * +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^350.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^200.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * + "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^350.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^100.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank = term_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } term_fees_dec_bank =
			 * resultSet.getString("TERM_FEES_DEC_BANK"); if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) { term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^200.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank = term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^350.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^350.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^150.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^150.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } updateQuery =
			 * "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='V'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std VI query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='VI' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"' and " +
			 * "(TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^450.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^1050.0^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^450.0^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^700.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * } term_fees_dec_bank = resultSet.getString("TERM_FEES_DEC_BANK");
			 * if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) { term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank = term_fees_dec_bank.replace("Cash^NA^NA^NA^0^450.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^1050.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) { exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^450.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^150.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^150.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^700.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } updateQuery =
			 * "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='VI'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std VII query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='VII' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"' and " +
			 * "(TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%' or TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or "
			 * + "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^200.0^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank = term_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } term_fees_dec_bank =
			 * resultSet.getString("TERM_FEES_DEC_BANK"); if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) { term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank = term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = resultSet.getString("EXAM_FEES_DEC_BANK");
			 * if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); } updateQuery =
			 * "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='VII'  and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 * 
			 * ///std VIII query =
			 * "select GR_NO,TERM_FEES_JUN_BANK,EXAM_FEES_JUN_BANK,TERM_FEES_DEC_BANK,EXAM_FEES_DEC_BANK,"
			 * + "AUDIO$47$VISUAL_FEES_JUN_BANK,AUDIO$47$VISUAL_FEES_DEC_BANK  from "
			 * +sessionData.getDBName()+".fees_data_mandatory " +
			 * "where STD_1='VIII' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData
			 * .getSectionName()+"' and (" +
			 * "TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "TERM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^400.0^%' or " +
			 * "TERM_FEES_JUN_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^250.0 ^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^400.0^%' or " +
			 * "TERM_FEES_DEC_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^250.0 ^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "EXAM_FEES_JUN_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^300.0 ^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^150.0^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "EXAM_FEES_DEC_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^300.0 ^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash^NA^NA^NA^0^350.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^250.0 ^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^200.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^250.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^300.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash^NA^NA^NA^0^350.0^%' or " +
			 * "AUDIO$47$VISUAL_FEES_DEC_BANK like '%Cash ^NA ^NA ^NA ^0.0 ^250.0 ^%')";
			 * 
			 * statement = connection.createStatement(); resultSet =
			 * statement.executeQuery(query); while (resultSet.next()) { gr_no =
			 * resultSet.getString("GR_NO"); term_fees_jun_bank =
			 * resultSet.getString("TERM_FEES_JUN_BANK"); if(term_fees_jun_bank != null &&
			 * !term_fees_jun_bank.equalsIgnoreCase("null")) { term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank = term_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash^NA^NA^NA^0^400.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_jun_bank =
			 * term_fees_jun_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^250.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } term_fees_dec_bank =
			 * resultSet.getString("TERM_FEES_DEC_BANK"); if(term_fees_dec_bank != null &&
			 * !term_fees_dec_bank.equalsIgnoreCase("null")) { term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^200.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank = term_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash^NA^NA^NA^0^400.0^", "Cash^NA^NA^NA^0^0.0^");
			 * term_fees_dec_bank =
			 * term_fees_dec_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^250.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * exam_fees_jun_bank = resultSet.getString("EXAM_FEES_JUN_BANK");
			 * if(exam_fees_jun_bank != null &&
			 * !exam_fees_jun_bank.equalsIgnoreCase("null")) { exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_jun_bank = exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_jun_bank =
			 * exam_fees_jun_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^300.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } exam_fees_dec_bank =
			 * resultSet.getString("EXAM_FEES_DEC_BANK"); if(exam_fees_dec_bank != null &&
			 * !exam_fees_dec_bank.equalsIgnoreCase("null")) { exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^150.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank = exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^", "Cash^NA^NA^NA^0^0.0^");
			 * exam_fees_dec_bank =
			 * exam_fees_dec_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^300.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); }
			 * 
			 * audio$47$visual_fees_jun_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_JUN_BANK");
			 * if(audio$47$visual_fees_jun_bank != null &&
			 * !audio$47$visual_fees_jun_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash^NA^NA^NA^0^350.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_jun_bank =
			 * audio$47$visual_fees_jun_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^250.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } audio$47$visual_fees_dec_bank =
			 * resultSet.getString("AUDIO$47$VISUAL_FEES_DEC_BANK");
			 * if(audio$47$visual_fees_dec_bank != null &&
			 * !audio$47$visual_fees_dec_bank.equalsIgnoreCase("null")) {
			 * audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^200.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^250.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^300.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash^NA^NA^NA^0^350.0^",
			 * "Cash^NA^NA^NA^0^0.0^"); audio$47$visual_fees_dec_bank =
			 * audio$47$visual_fees_dec_bank.replace("Cash ^NA ^NA ^NA ^0.0 ^250.0 ^",
			 * "Cash^NA^NA^NA^0^0.0^"); } updateQuery =
			 * "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET TERM_FEES_JUN_BANK='"+term_fees_jun_bank+"',EXAM_FEES_JUN_BANK='"+
			 * exam_fees_jun_bank+"'," +
			 * "TERM_FEES_DEC_BANK='"+term_fees_dec_bank+"',EXAM_FEES_DEC_BANK='"+
			 * exam_fees_dec_bank+"'," +
			 * "AUDIO$47$VISUAL_FEES_JUN_BANK='"+audio$47$visual_fees_jun_bank+
			 * "',AUDIO$47$VISUAL_FEES_DEC_BANK='"+audio$47$visual_fees_dec_bank+"' " +
			 * "where STD_1='VIII' and GR_NO='"
			 * +gr_no+"' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"+sessionData.
			 * getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery); }
			 */

			// Std VIII GR 0000902
			/*
			 * updateQuery = "UPDATE "+sessionData.getDBName()+".fees_data_mandatory " +
			 * "SET MONTHLY_FEES_JUN_BANK='Cash ^NA ^NA ^NA ^0.0 ^1600.0 ^36 ^JUN - MAY ^|23/03/2021 ^C^0.0^0.0!Cheque^ANDHRA BANK^7^23/03/2021^0^0.0^37^JUN - MAY^ ^A^0.0^0.0',CONCESSION_AMOUNT=1600 "
			 * +
			 * "where STD_1='VIII' and GR_NO='0000902' and ACADEMIC_YEAR='2020-21' AND SECTION_NM='"
			 * +sessionData.getSectionName()+"'";
			 * 
			 * statement = connection.createStatement();
			 * statement.executeUpdate(updateQuery);
			 */

			return true;

		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	////// getConfigMapDetails/////////////
	public LinkedHashMap<String, String> getConfigMap(SessionData sessionData, String dbName, String tableName, String app_type)
			throws Exception {

		LinkedHashMap<String, String> configMap = new LinkedHashMap<String, String>();
		String query = "", config_name = "", config_value = "", app_type_db = "", status = "", section_nm = "", schoolStr = "";

		try {
			query = "SELECT * FROM " + dbName + "." + tableName;
			if (!app_type.equalsIgnoreCase("")) {
				app_type = app_type.substring(app_type.indexOf("|"));
				query = query + " WHERE APP_TYPE LIKE '%" + app_type + "'";
			}
			statement = sessionData.getConnection().createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				config_name = resultSet.getString(1) == null ? "" : (resultSet.getString(1));
				config_value = resultSet.getString(2) == null ? "" : (resultSet.getString(2));
				app_type_db = resultSet.getString(3) == null ? "" : (resultSet.getString(3));
				if(!schoolStr.contains(app_type_db)) {
					schoolStr = schoolStr + "," + app_type_db;
				} else if(schoolStr.equalsIgnoreCase("")){
					schoolStr = app_type_db;
				}
				
				if (config_name.contains("DBURL_")) {
					config_value = "jdbc:mysql://" + sessionData.getSchoolApp_ip()
							+ config_value.substring(config_value.lastIndexOf("/"));
				}
				configMap.put(config_name, cm.revertCommaApostrophy(config_value));
			}
			
			if(schoolStr.contains(",")){
				schoolStr = schoolStr.substring(1);
			}
			
			configMap.put("SCHOOL_LIST", schoolStr);
		} catch (Exception e) {
			cm.logException(e);
		}
		return configMap;
	}

	////// attendanceMap/////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> getAttendanceMap(SessionData sessionData, String std,
			String div, String academicYear, String sem) throws Exception {

		LinkedHashMap<String, LinkedHashMap<String, String>> attendanceMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String grNo = "", query = "", configValue = "", column = "", columnTot = "", attended = "", totalStr = "",
				monthTotStr = "", attStr = "", yearly = "", sem1 = "", sem2 = "", jan = "", feb = "", mar = "",
				apr = "", may = "", jun = "", jul = "", aug = "", sep = "", oct = "", nov = "", dec = "";
		int startMonth = 1, endMonth = 12, j = 0;
		double totalAtt = 0.0;

		try {
//			startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
//			endMonth = startMonth + 5;
//			if(sem.equalsIgnoreCase("SEM2")) {
//				startMonth = startMonth + 6;
//				endMonth = startMonth + 5;
//			}

//			if(sessionData.getConfigMap().get("ATT_"+sem+"_"+academicYear) != null) {
//				configValue = sessionData.getConfigMap().get("ATT_"+sem+"_"+academicYear);
//				startMonth = Integer.parseInt(configValue.substring(0, configValue.indexOf("_")));
//				endMonth = Integer.parseInt(configValue.substring(configValue.indexOf("_")+1));
//			}

			if (endMonth > startMonth) {
				for (int i = startMonth; i <= endMonth; i++) {
					column = column + "(IF(" + cm.intgerToMonth(i + "") + "_>0, " + cm.intgerToMonth(i + "")
							+ "_, 0)) + ";
					columnTot = columnTot + cm.intgerToMonth(i + "") + "_TOT," + cm.intgerToMonth(i + "") + "_,";
				}
			}
			column = column.substring(0, column.length() - 2);
			columnTot = columnTot.substring(0, columnTot.length() - 1);
			query = "select GR_NO,(" + column + ") AS attended," + columnTot
					+ ",SEM1,SEM1_TOT,SEM2,SEM2_TOT,YEARLY,YEARLY_TOT " + "FROM " + sessionData.getDBName()
					+ ".ATTENDANCE_PERIOD " + "where ACADEMIC_YEAR='" + academicYear + "' and SECTION_NM='"
					+ sessionData.getSectionName() + "' and " + "GR_NO IN (SELECT GR_NO FROM " + sessionData.getDBName()
					+ ".CLASS_ALLOTMENT where PRESENT_STD='" + std + "' " + "AND PRESENT_DIV='" + div
					+ "' and ACADEMIC_YEAR='" + academicYear + "' and " + "SECTION_NM='" + sessionData.getSectionName()
					+ "')";

			statement = sessionData.getConnection().createStatement();
			resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				LinkedHashMap<String, String> grAttendance = new LinkedHashMap<String, String>();
				grNo = resultSet.getString("GR_NO") == null ? "0000000" : (resultSet.getString("GR_NO").trim());
				attended = resultSet.getString("attended") == null ? "0" : (resultSet.getString("attended").trim());
				if (attended.substring(attended.indexOf(".") + 1).equalsIgnoreCase("00")) {
					attended = attended.substring(0, attended.indexOf("."));
				}

				if (j == 0) {
					LinkedHashMap<String, String> totalAttendance = new LinkedHashMap<String, String>();
					if (sem.equalsIgnoreCase("SEM1")) {
						startMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));
						endMonth = startMonth + 5;
					}
					for (int i = startMonth; i <= endMonth; i++) {
						monthTotStr = resultSet.getString(cm.intgerToMonth(i + "") + "_TOT") == null ? "0"
								: resultSet.getString(cm.intgerToMonth(i + "") + "_TOT").trim();
						if (monthTotStr.substring(monthTotStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
							monthTotStr = monthTotStr.substring(0, monthTotStr.indexOf("."));
						}
						totalAtt = totalAtt + Double.parseDouble(monthTotStr);

						if (monthTotStr.equalsIgnoreCase("0")) {
							monthTotStr = "";
						}
						totalAttendance.put(cm.intgerToMonth(i + "") + "_TOT", monthTotStr);
					}
					totalStr = totalAtt + "";
					if (totalStr.substring(totalStr.indexOf(".") + 1).equalsIgnoreCase("0")) {
						totalStr = totalStr.substring(0, totalStr.indexOf("."));
					}
					totalAttendance.put("total", totalStr);

					totalStr = resultSet.getString("SEM1_TOT") == null ? "0" : (resultSet.getString("SEM1_TOT").trim());
					if (totalStr.substring(totalStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
						totalStr = totalStr.substring(0, totalStr.indexOf("."));
					}
					totalAttendance.put("SEM1_TOT", totalStr);

					totalStr = resultSet.getString("SEM2_TOT") == null ? "0" : (resultSet.getString("SEM2_TOT").trim());
					if (totalStr.substring(totalStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
						totalStr = totalStr.substring(0, totalStr.indexOf("."));
					}
					totalAttendance.put("SEM2_TOT", totalStr);

					totalStr = resultSet.getString("YEARLY_TOT") == null ? "0"
							: (resultSet.getString("YEARLY_TOT").trim());
					if (totalStr.substring(totalStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
						totalStr = totalStr.substring(0, totalStr.indexOf("."));
					}
					totalAttendance.put("YEARLY_TOT", totalStr);

					if ((!totalAttendance.get("SEM1_TOT").equalsIgnoreCase("0")
							|| !totalAttendance.get("SEM2_TOT").equalsIgnoreCase("0"))
							&& totalAttendance.get("YEARLY_TOT").equalsIgnoreCase("0")) {
						totalAttendance.put("YEARLY_TOT", (Integer.parseInt(totalAttendance.get("SEM1_TOT"))
								+ Integer.parseInt(totalAttendance.get("SEM2_TOT"))) + "");
					}

					attendanceMap.put("total", totalAttendance);
				}

				for (int i = startMonth; i <= endMonth; i++) {
					attStr = resultSet.getString(cm.intgerToMonth(i + "") + "_") == null ? "0"
							: (resultSet.getString(cm.intgerToMonth(i + "") + "_").trim());
					if (attStr.substring(attStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
						attStr = attStr.substring(0, attStr.indexOf("."));
					}
					if (attendanceMap.get("total").get(cm.intgerToMonth(i + "") + "_TOT").toString()
							.equalsIgnoreCase("")) {
						attStr = "";
					}
					grAttendance.put(cm.intgerToMonth(i + ""), attStr);
				}

				attStr = resultSet.getString("SEM1") == null ? "0" : (resultSet.getString("SEM1").trim());
				if (attStr.substring(attStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
					attStr = attStr.substring(0, attStr.indexOf("."));
				}
				grAttendance.put("SEM1", attStr);

				attStr = resultSet.getString("SEM2") == null ? "0" : (resultSet.getString("SEM2").trim());
				if (attStr.substring(attStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
					attStr = attStr.substring(0, attStr.indexOf("."));
				}
				grAttendance.put("SEM2", attStr);

				attStr = resultSet.getString("YEARLY") == null ? "0" : (resultSet.getString("YEARLY").trim());
				if (attStr.substring(attStr.indexOf(".") + 1).equalsIgnoreCase("00")) {
					attStr = attStr.substring(0, attStr.indexOf("."));
				}
				grAttendance.put("YEARLY", attStr);

				if ((!grAttendance.get("SEM1").equalsIgnoreCase("0") || !grAttendance.get("SEM2").equalsIgnoreCase("0"))
						&& grAttendance.get("YEARLY").equalsIgnoreCase("0")) {
					grAttendance.put("YEARLY",
							(Integer.parseInt(grAttendance.get("SEM1")) + Integer.parseInt(grAttendance.get("SEM2")))
									+ "");
				}

				grAttendance.put("attended", attended);
				attendanceMap.put(grNo, grAttendance);
				j++;
			}
		} catch (Exception e) {
			if (e.getMessage().contains("Table 'nesschool.attendance_period' doesn't exist")) {
				JOptionPane.showMessageDialog(null, "Please click on Periodly Attendance button in Help Page");
			}
			cm.logException(e);
		}
		return attendanceMap;
	}

	////// createAttendancePeriodly/////////////
	public boolean createAttendancePeriodly(SessionData sessionData) throws Exception {

		try {
			String query = "CREATE TABLE " + sessionData.getDBName()
					+ ".`ATTENDANCE_PERIOD` (`GR_NO` varchar(10) NOT NULL,  "
					+ "`ACADEMIC_YEAR` varchar(10) DEFAULT NULL,  `YEARLY` decimal(5,2) DEFAULT NULL,  `YEARLY_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`SEM1` decimal(5,2) DEFAULT NULL,  `SEM1_TOT` decimal(5,2) DEFAULT NULL,  `SEM2` decimal(5,2) DEFAULT NULL,  "
					+ "`SEM2_TOT` decimal(5,2) DEFAULT NULL, `EXAM1` decimal(5,2) DEFAULT NULL,  `EXAM1_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`EXAM2` decimal(5,2) DEFAULT NULL,  `EXAM2_TOT` decimal(5,2) DEFAULT NULL,  `EXAM3` decimal(5,2) DEFAULT NULL,  "
					+ "`EXAM3_TOT` decimal(5,2) DEFAULT NULL,  `EXAM4` decimal(5,2) DEFAULT NULL,  `EXAM4_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`JAN_` decimal(5,2) DEFAULT NULL,  `JAN_TOT` decimal(5,2) DEFAULT NULL,  `FEB_` decimal(5,2) DEFAULT NULL,  "
					+ "`FEB_TOT` decimal(5,2) DEFAULT NULL,  `MAR_` decimal(5,2) DEFAULT NULL,  `MAR_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`APR_` decimal(5,2) DEFAULT NULL,  `APR_TOT` decimal(5,2) DEFAULT NULL,  `MAY_` decimal(5,2) DEFAULT NULL,  "
					+ "`MAY_TOT` decimal(5,2) DEFAULT NULL,  `JUN_` decimal(5,2) DEFAULT NULL,  `JUN_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`JUL_` decimal(5,2) DEFAULT NULL,  `JUL_TOT` decimal(5,2) DEFAULT NULL,  `AUG_` decimal(5,2) DEFAULT NULL,  "
					+ "`AUG_TOT` decimal(5,2) DEFAULT NULL,  `SEP_` decimal(5,2) DEFAULT NULL,  `SEP_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`OCT_` decimal(5,2) DEFAULT NULL,  `OCT_TOT` decimal(5,2) DEFAULT NULL,  `NOV_` decimal(5,2) DEFAULT NULL,  "
					+ "`NOV_TOT` decimal(5,2) DEFAULT NULL,  `DEC_` decimal(5,2) DEFAULT NULL,  `DEC_TOT` decimal(5,2) DEFAULT NULL,  "
					+ "`CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,  `CREATED_BY` varchar(200) DEFAULT NULL,  "
					+ "`MODIFIED_DATE` date DEFAULT NULL,  `MODIFIED_BY` varchar(200) DEFAULT NULL,  `SECTION_NM` varchar(50) DEFAULT NULL,  "
					+ "`SUID` varchar(50) DEFAULT NULL,  KEY `AcaSecIndex` (`ACADEMIC_YEAR`,`SECTION_NM`)) ENGINE=InnoDB DEFAULT CHARSET=latin1";
			statement = sessionData.getConnection().createStatement();
			statement.executeUpdate(query);
			return true;
		} catch (Exception e) {
			logger.warn(e);
			return false;
		}
	}

	public String newStudents(SessionData sessionData, String academic, String std, String div, String section,
			String tableName) {
		// /////////newStudents//////////////////////////////////////////
		String academicDB = "", condition = "";
		String grNoDB = "";
		String response = "";
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		JFrame f = new JFrame("Add new students to attendance list in progress. Please Don't Close");
		screenWidth = cm.screeWidth();
		screenHeight = cm.screeHeight();
		mainCentre = (screenWidth - 150) / 2;

		try {
			f.setBounds(screenWidth / 2 - 250, screenHeight / 2, 90, 25);
			f.setSize(600, 0);
			f.setResizable(false);
			f.setVisible(true);
			f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academic, "", "", section);
			if (!std.equalsIgnoreCase("") && !div.equalsIgnoreCase("")) {
				condition = "AND PRESENT_STD='" + std + "' AND PRESENT_DIV='" + div + "'";
			}

			String findNewStudentQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT WHERE "
					+ "GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "." + tableName + " WHERE "
					+ "ACADEMIC_YEAR='" + academic + "' AND SECTION_NM='" + section + "') " + condition + " AND "
					+ "SECTION_NM='" + section + "' AND ACADEMIC_YEAR='" + academic + "' ORDER BY ROLL_NO * 1";
			logger.info("fetch new student list query == " + findNewStudentQuery);

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findNewStudentQuery);

			while (resultSet.next()) {
				String insertNewStud = "";
				academicDB = resultSet.getString("ACADEMIC_YEAR") == null ? ""
						: (resultSet.getString("ACADEMIC_YEAR").trim());
				grNoDB = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				if (studentLCMap.containsKey(grNoDB)) {
					continue;
				}

				insertNewStud = "INSERT INTO " + tableName
						+ " (ACADEMIC_YEAR,GR_NO,CREATED_DATE,CREATED_BY,SECTION_NM) " + "VALUES('" + academicDB + "','"
						+ grNoDB + "',SYSDATE(),'" + sessionData.getUserName() + "','" + section + "')";

				statement = connection.createStatement();
				statement.executeUpdate(insertNewStud);
			}
			response = "success";
			logger.info("insertNewStud data updated successfully in " + tableName + "...");
			f.setVisible(false);
		} catch (Exception e) {
			f.setVisible(false);
			response = "error";
			cm.logException(e);
			return response;
		}
		return response;
	}

	public List<String> findAtendancePeriodicList(SessionData sessionData, String gr, String std, String div,
			String last, String first, String middle, String academicYear, String rollFrom, String rollTo,
			String section, boolean isAttendance, String exam, String month, String downloadStr) throws Exception {

		logger.info("=========findAtendancePeriodicList Query============");
		String grDB = "", lcDate = "";
		String nameDB = "", dataStr = "";
		String findQuery = "";
		String rollNoDB = "";
		String presentDivDb = "";
		String presentStdDb = "";
		String previousDivDb = "";
		String remarkDivDb = "";
		String addYearToQuery = "";
		String addRollToQuery = "";
		String attendanceDB = "";
		String totalDB = "", totalStr = "";
		String attendanceColumn = "", monthCol = "", totCol = "";
		int academicStartMonth = 0;
		int present = 0, count = 0;
		int total = 0;
		boolean findFlag = false;
		List studentList = new ArrayList();
		String[] monthList = null, monthTotList = null;
		TreeMap<String, String> studentLCMap = new TreeMap<String, String>();

		if (!academicYear.equalsIgnoreCase("") && !academicYear.equalsIgnoreCase("Year")) {
			addYearToQuery = " AND CLASS_ALLOTMENT.SECTION_NM='" + section + "' AND CLASS_ALLOTMENT.ACADEMIC_YEAR = '"
					+ academicYear + "'";
		}
		logger.info("addYearToQuery == " + addYearToQuery);
		if (!rollFrom.equalsIgnoreCase("") && !rollTo.equalsIgnoreCase("")) {
			addRollToQuery = " AND CLASS_ALLOTMENT.ROLL_NO between " + rollFrom + " and " + rollTo + "";
		}
		logger.info("addRollToQuery == " + addRollToQuery);
		try {
			academicStartMonth = Integer.parseInt(sessionData.getConfigMap().get("ACADEMIC_START_MONTH"));

			connectDatabase(sessionData);
			studentLCMap = findStudentLCList(sessionData, "", std, div, "", "", "", academicYear, "", "", section);

			if (!month.equalsIgnoreCase("All") && !month.equalsIgnoreCase("")) {
				monthCol = month.substring(0, 3) + "_";
				totCol = monthCol + "TOT";
				if (downloadStr.equalsIgnoreCase("download")) {
					studentList.add("Name|Gr No|Roll No|Std|Div|" + month.substring(0, 3));
					monthList = monthCol.split(",");
					monthTotList = totCol.split(",");
				}
			} else if (month.equalsIgnoreCase("All") && downloadStr.equalsIgnoreCase("download")) {
				String monthHead = "Name|Gr No|Roll No|Std|Div", intTomonth = "";
				for (int i = academicStartMonth; i < (academicStartMonth + 12); i++) {
					intTomonth = cm.intgerToMonth(i + "");
					monthHead = monthHead + "|" + intTomonth;
					monthCol = monthCol + intTomonth + "_,";
					totCol = totCol + intTomonth + "_TOT,";
				}
				studentList.add(monthHead);
				monthCol = monthCol.substring(0, monthCol.length() - 1);
				totCol = totCol.substring(0, totCol.length() - 1);
				monthList = monthCol.split(",");
				monthTotList = totCol.split(",");
			} else if (exam.equalsIgnoreCase("Semester 1")) {
				exam = "SEM1";
				monthCol = exam;
				totCol = monthCol + "_TOT";
				if (downloadStr.equalsIgnoreCase("download")) {
					studentList.add("Name|Gr No|Roll No|Std|Div|" + exam);
					monthList = monthCol.split(",");
					monthTotList = totCol.split(",");
				}
			} else if (exam.equalsIgnoreCase("Semester 2")) {
				exam = "SEM2";
				monthCol = exam;
				totCol = monthCol + "_TOT";
				if (downloadStr.equalsIgnoreCase("download")) {
					studentList.add("Name|Gr No|Roll No|Std|Div|" + exam);
					monthList = monthCol.split(",");
					monthTotList = totCol.split(",");
				}
			} else if (exam.equalsIgnoreCase("Final")) {
				exam = "FINAL";
				monthCol = "YEARLY";
				totCol = monthCol + "_TOT";
				if (downloadStr.equalsIgnoreCase("download")) {
					exam = "SEM1,SEM2,YEARLY";
					monthCol = "SEM1,SEM2,YEARLY";
					totCol = "SEM1_TOT,SEM2_TOT,YEARLY_TOT";
					studentList.add("Name|Gr No|Roll No|Std|Div|SEM1|SEM2|FINAL");
					monthList = monthCol.split(",");
					monthTotList = totCol.split(",");
				}
			}
			attendanceColumn = monthCol + "," + totCol;

			if (!gr.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO," + attendanceColumn
						+ ", ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT WHERE "
						+ "GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE " + "ACADEMIC_YEAR='" + academicYear + "') AND GR_NO='" + gr.trim()
						+ "' " + addYearToQuery + " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 1 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")
					&& !middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO," + attendanceColumn
						+ ", UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE ACADEMIC_YEAR='" + academicYear
						+ "') AND UPPER (LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ "UPPER (FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND UPPER(FATHER_NAME) LIKE UPPER('%"
						+ middle.trim() + "%')" + " AND PRESENT_STD='" + std.trim() + "' AND PRESENT_DIV='" + div.trim()
						+ "'" + addYearToQuery + " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 2 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("") && !first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO," + attendanceColumn
						+ ", ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE ACADEMIC_YEAR='" + academicYear
						+ "') AND UPPER(LAST_NAME) LIKE UPPER('%" + last.trim() + "%') AND "
						+ " UPPER(FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND PRESENT_STD='" + std.trim()
						+ "' AND PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 3 == " + findQuery);
			} else if (!first.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO," + attendanceColumn
						+ ", ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE ACADEMIC_YEAR='" + academicYear
						+ "') AND UPPER(FIRST_NAME) LIKE UPPER('%" + first.trim() + "%') AND PRESENT_STD='" + std.trim()
						+ "' AND PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 4 == " + findQuery);
			} else if (!last.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO, ROLL_NO," + attendanceColumn
						+ ", UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE ACADEMIC_YEAR='" + academicYear
						+ "') AND UPPER (LAST_NAME) LIKE UPPER ('%" + last.trim() + "%') AND PRESENT_STD='" + std.trim()
						+ "' AND PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 5 == " + findQuery);
			} else if (!middle.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO," + attendanceColumn
						+ ", ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "."
						+ "CLASS_ALLOTMENT WHERE GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE ACADEMIC_YEAR='" + academicYear
						+ "') AND UPPER(FATHER_NAME) LIKE UPPER('%" + middle.trim() + "%') AND PRESENT_STD='"
						+ std.trim() + "' AND PRESENT_DIV='" + div.trim() + "'" + addYearToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 6 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("") && !isAttendance) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO,UPPER(GR_NO) AS GR_NO," + attendanceColumn
						+ ", ROLL_NO, UPPER(LAST_NAME) AS LAST_NAME, UPPER(REMARK_0) AS REMARK_0, "
						+ "UPPER(FIRST_NAME) AS FIRST_NAME , UPPER(FATHER_NAME) AS FATHER_NAME, UPPER(PREVIOUS_DIV) AS PREVIOUS_DIV, "
						+ "UPPER(PRESENT_STD) AS PRESENT_STD , UPPER(PRESENT_DIV) AS PRESENT_DIV, UPPER(ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT WHERE "
						+ "GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
						+ "ATTENDANCE_PERIOD WHERE ACADEMIC_YEAR='" + academicYear + "' " + ") AND  PRESENT_STD = '"
						+ std.trim() + "' AND PRESENT_DIV = '" + div.trim() + "'" + addYearToQuery + addRollToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 7 == " + findQuery);
			} else if (!std.trim().equalsIgnoreCase("") && !div.trim().equalsIgnoreCase("")) {
				findQuery = "SELECT DISTINCT CLASS_ALLOTMENT.GR_NO," + attendanceColumn
						+ ", UPPER(CLASS_ALLOTMENT.GR_NO) AS GR_NO, ROLL_NO, "
						+ "UPPER(CLASS_ALLOTMENT.LAST_NAME) AS LAST_NAME,UPPER(CLASS_ALLOTMENT.REMARK_0) AS REMARK_0,"
						+ "UPPER(CLASS_ALLOTMENT.FIRST_NAME) AS FIRST_NAME , UPPER(CLASS_ALLOTMENT.FATHER_NAME) AS FATHER_NAME,"
						+ "UPPER(CLASS_ALLOTMENT.PREVIOUS_DIV) AS PREVIOUS_DIV,UPPER(CLASS_ALLOTMENT.PRESENT_STD) AS PRESENT_STD, "
						+ "UPPER(CLASS_ALLOTMENT.PRESENT_DIV) AS PRESENT_DIV,UPPER(CLASS_ALLOTMENT.ACADEMIC_YEAR) AS ACADEMIC_YEAR"
						+ " FROM " + sessionData.getDBName() + "." + "CLASS_ALLOTMENT LEFT JOIN "
						+ sessionData.getDBName() + "." + "ATTENDANCE_PERIOD "
						+ "ON CLASS_ALLOTMENT.GR_NO=ATTENDANCE_PERIOD.GR_NO AND CLASS_ALLOTMENT.ACADEMIC_YEAR=ATTENDANCE_PERIOD.ACADEMIC_YEAR AND "
						+ "CLASS_ALLOTMENT.SECTION_NM=ATTENDANCE_PERIOD.SECTION_NM "
						+ "WHERE CLASS_ALLOTMENT.PRESENT_STD = '" + std.trim() + "' AND CLASS_ALLOTMENT.PRESENT_DIV = '"
						+ div.trim() + "' " + addYearToQuery + addRollToQuery
						+ " ORDER BY CONVERT(CLASS_ALLOTMENT.ROLL_NO, DECIMAL) ASC";
				logger.info("findClassAteendanceList 7 == " + findQuery);
			}

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grDB = resultSet.getString("GR_NO");
				lcDate = studentLCMap.get(grDB);
				// Check for final class allotment date
				if (lcDate != null
						&& sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear) != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE_" + academicYear),
								lcDate.substring(lcDate.indexOf("|") + 1))) {
					continue;
				} else if (lcDate != null && sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE") != null
						&& cm.isDateBetween(sessionData.getConfigMap().get("ACADEMIC_START_DATE"),
								sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"),
								lcDate.substring(lcDate.indexOf("|") + 1))
						&& cm.getAcademicYear(sessionData,sessionData.getConfigMap().get("FINAL_CLASS_ALLOTMENT_DATE"))
								.equalsIgnoreCase(academicYear)) {
					continue;
				}
				nameDB = resultSet.getString("LAST_NAME") + " " + resultSet.getString("FIRST_NAME") + " "
						+ resultSet.getString("FATHER_NAME");
				rollNoDB = resultSet.getString("ROLL_NO") == null ? "1" : (resultSet.getString("ROLL_NO").trim());
				if (rollNoDB.equalsIgnoreCase("")) {
					rollNoDB = "1";
				}
				presentStdDb = resultSet.getString("PRESENT_STD") == null ? ""
						: (resultSet.getString("PRESENT_STD").trim());
				presentDivDb = resultSet.getString("PRESENT_DIV") == null ? ""
						: (resultSet.getString("PRESENT_DIV").trim());
				previousDivDb = resultSet.getString("PREVIOUS_DIV") == null ? ""
						: (resultSet.getString("PREVIOUS_DIV").trim());
				remarkDivDb = resultSet.getString("REMARK_0") == null ? "" : (resultSet.getString("REMARK_0").trim());

				if (downloadStr.equalsIgnoreCase("download")) {
					for (int i = 0; i < monthList.length; i++) {
						attendanceDB = resultSet.getString(monthList[i]) == null ? "0"
								: (resultSet.getString(monthList[i]).trim());
						if (attendanceDB.substring(attendanceDB.indexOf(".") + 1).equalsIgnoreCase("00")) {
							attendanceDB = attendanceDB.substring(0, attendanceDB.indexOf("."));
						}

						if (count == 0) {
							totalDB = resultSet.getString(monthTotList[i]) == null ? "0"
									: (resultSet.getString(monthTotList[i]).trim());
							if (totalDB.substring(totalDB.indexOf(".") + 1).equalsIgnoreCase("00")) {
								totalDB = totalDB.substring(0, totalDB.indexOf("."));
							}
							totalStr = totalStr + "|" + totalDB;
						}
						dataStr = dataStr + "|" + attendanceDB;
					}
					if (count == 0) {
						studentList.add("Total Working Days| | | | " + totalStr);
					}
					studentList.add(
							nameDB + "|" + grDB + "|" + rollNoDB + "|" + presentStdDb + "|" + presentDivDb + dataStr);
					dataStr = "";
				} else if (!isAttendance) {
					studentList.add(nameDB + "|" + grDB + "||" + rollNoDB + "|||" + presentStdDb + "||||" + presentDivDb
							+ "|||||" + remarkDivDb);
				} else {
					attendanceDB = resultSet.getString(monthCol) == null ? "0" : (resultSet.getString(monthCol).trim());
					if (attendanceDB.substring(attendanceDB.indexOf(".") + 1).equalsIgnoreCase("00")) {
						attendanceDB = attendanceDB.substring(0, attendanceDB.indexOf("."));
					}
					totalDB = resultSet.getString(totCol) == null ? "0" : (resultSet.getString(totCol).trim());
					if (totalDB.substring(totalDB.indexOf(".") + 1).equalsIgnoreCase("00")) {
						totalDB = totalDB.substring(0, totalDB.indexOf("."));
					}
					attendanceDB = attendanceDB + "/" + totalDB;
					if (attendanceDB.equalsIgnoreCase("")) {
						attendanceDB = "0/0";
					}
					studentList.add(rollNoDB + "|" + grDB + "|" + nameDB + "|" + attendanceDB);
				}
				findFlag = true;
				count++;
			}
		} catch (Exception e) {
			cm.logException(e);
		} finally {
			closeDatabase(sessionData);
		}
		return studentList;
	}

	public void alterColumnLength(SessionData sessionData, String tableName, String condition,
			LinkedHashMap<String, LinkedHashMap<String, String>> feesHeadMap) {
		try {
			String modifyVarcharSizeColumn = "ALTER TABLE " + sessionData.getDBName() + "." + tableName + " ";
			String columnStr = getColumnList(sessionData, tableName, condition, feesHeadMap);
			String[] columnList = columnStr.split(",");
			for (int i = 15; i < columnList.length; i++) {
				modifyVarcharSizeColumn = modifyVarcharSizeColumn + " MODIFY COLUMN " + columnList[i] + " VARCHAR(30),";
			}
			modifyVarcharSizeColumn = modifyVarcharSizeColumn.substring(0, modifyVarcharSizeColumn.length() - 1);
			statement = connection.createStatement();
			statement.executeUpdate(modifyVarcharSizeColumn);
		} catch (Exception e) {
			logger.error("alterColumnLength => " + e);
		}
	}

	public void updateSubjectList(SessionData sessionData) {
		int screenWidth = cm.screeWidth();
		int screenHeight = cm.screeHeight();
		int i = 0;
		String sub_name = "", academic_year = "", std_1 = "", subject_title = "", optional = "", marks_grade = "",
				order_no = "", updateSubjectAllotment = "", section_nm = "";

		JFrame f = new JFrame("Update Subjects in progress. Don't Close");
		f.setBounds(screenWidth / 2 - 150, screenHeight / 2, 90, 25);
		f.setSize(400, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {
			String findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				sub_name = resultSet.getString("SUBJECT_NAME");
				academic_year = resultSet.getString("ACADEMIC_YEAR");
				std_1 = resultSet.getString("STD_1");
				subject_title = resultSet.getString("SUBJECT_TITLE");
				optional = resultSet.getString("OPTIONAL");
				marks_grade = resultSet.getString("MARKS_GRADE");
				order_no = resultSet.getString("ORDER_NO");
				section_nm = resultSet.getString("SECTION_NM");

				updateSubjectAllotment = "Update " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT set "
						+ "SUBJECT_NAME='" + sub_name.trim().toUpperCase() + "'," + "SUBJECT_TITLE='"
						+ subject_title.trim().toUpperCase() + "'," + "MARKS_GRADE='" + marks_grade.trim().toUpperCase()
						+ "',ORDER_NO=" + order_no + "," + "OPTIONAL='" + optional.trim().toUpperCase()
						+ "',SECTION_NM='" + section_nm + "'" + " where (SECTION_NM='" + section_nm
						+ "' OR SECTION_NM IS NULL) " + "AND SUBJECT_NAME='" + sub_name + "' " + "AND ACADEMIC_YEAR='"
						+ academic_year + "' AND STD_1='" + std_1 + "'";

				statement = connection.createStatement();
				statement.executeUpdate(updateSubjectAllotment);

				i++;
			}
			f.setVisible(false);
		} catch (Exception e) {
			logger.error("alterColumnLength => " + e);
		}
	}

	public void updateFeeReportIssue(SessionData sessionData) {
		int screenWidth = cm.screeWidth();
		int screenHeight = cm.screeHeight();
		int i = 0;
		String updateFeeRportIssue = "";

		try {
			updateFeeRportIssue = "UPDATE NESCOLLEGE.FEES_DATA_MANDATORY SET TUITION_FEE_DEC=0, TERM_FEE_DEC=0 "
					+ "WHERE FEES_DATA_MANDATORY.ACADEMIC_YEAR='2022-23' AND FEES_DATA_MANDATORY.SECTION_NM='SCI'  "
					+ "AND FEES_DATA_MANDATORY.STD_1='XII' AND FEES_DATA_MANDATORY.DIV_1='A' AND GR_NO='0002068'";

			statement = connection.createStatement();
			statement.executeUpdate(updateFeeRportIssue);

		} catch (Exception e) {
		}
	}
	
	public LinkedHashMap<String, String> getSchoolConfigFromDb(SessionData sessionData) {
		String getSchoolConfigFromDb = "", schoolConfigKeyStr = "Select Config", configKey = "", configValue = "";
		LinkedHashMap<String, String> configMap = new LinkedHashMap<String, String>();

		try {
			getSchoolConfigFromDb = "SELECT * FROM " + sessionData.getDBName()+ "." + "config_data order by CONFIG_NAME ASC";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(getSchoolConfigFromDb);

			while (resultSet.next()) {
				configKey = resultSet.getString("CONFIG_NAME");
				configValue = resultSet.getString("CONFIG_VALUE");
				
				if(!configKey.equalsIgnoreCase("DBUSER") && !configKey.equalsIgnoreCase("DBPASSWD") && !configKey.equalsIgnoreCase("EXCEL_SECURITY") && 
						!configKey.equalsIgnoreCase("ZIP_SECURITY") && !configKey.equalsIgnoreCase("EXCEL_READONLY")) {
					
					configValue = cm.revertCommaApostrophy(configValue);
					configMap.put(configKey, configValue);
					schoolConfigKeyStr += "," + configKey;
				}
			}
			configMap.put("schoolConfigKeyStr", schoolConfigKeyStr);
			
		} catch (Exception e) {
			cm.logException(e);
			return null;
		}
		return configMap;
	}

	public boolean updateConfigInDb(SessionData sessionData, String fieldName, String fieldValue, boolean isUpdate) {
		String updateConfigInDb = "";

		try {
			if(isUpdate) {
				fieldValue = cm.replaceCommaApostrophy(fieldValue);
				updateConfigInDb = "UPDATE " + sessionData.getDBName()+ "." + "config_data "
						+ "SET CONFIG_VALUE='"+fieldValue+"' where CONFIG_NAME='"+fieldName+"'";
				statement = connection.createStatement();
				statement.executeUpdate(updateConfigInDb);
			}
			else {
				String appType = "", sectionNm = "", fieldNameDb = "";
				boolean isFieldExist = false;
				
				String findConfigQuery = "SELECT DISTINCT CONFIG_NAME,APP_TYPE,SECTION_NM " + "FROM " + sessionData.getDBName() + ".config_data";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findConfigQuery);
				
				while (resultSet.next()) {
					fieldNameDb = resultSet.getString("CONFIG_NAME");
					appType = resultSet.getString("APP_TYPE");
					sectionNm = resultSet.getString("SECTION_NM");
					if(fieldNameDb.equalsIgnoreCase(fieldName)) {
						isFieldExist = true;
					}
				}
				
				if(!isFieldExist) {
					String insertConfigEntry = "INSERT INTO " + sessionData.getDBName() + ".config_data "
							+ "(CONFIG_NAME,CONFIG_VALUE,APP_TYPE,SECTION_NM) " 
							+ "VALUES ('"+ fieldName.trim() + "','" + fieldValue.trim() + "','"+ appType + "'," + "'" + sectionNm + "')";

					statement = connection.createStatement();
					statement.executeUpdate(insertConfigEntry);
				}

			}
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
		return true;
	}
	
	public void updateOriginalLCDate(SessionData sessionData) {

		try {
			String updateOriginalLCDate = "Update " + sessionData.getDBName() + "." + "hs_general_register set "
					+ "ORIGINAL_LC_DATE = STR_TO_DATE('24/06/2017', '%d/%m/%Y') where GR_NO='0016005' and SECTION_NM='HIGH' "
					+ "and ACADEMIC_YEAR='2016-17'";

			statement = connection.createStatement();
			statement.executeUpdate(updateOriginalLCDate);

		} catch (Exception e) {
			logger.error("updateOriginalLCDate => " + e);
		}
	}

	public void deleteDuplicateSubjectAllotment(SessionData sessionData) {
		int screenWidth = cm.screeWidth();
		int screenHeight = cm.screeHeight();
		int mainCentre = (screenWidth - 150) / 2;
		String sub_name = "", academic_year = "", std_1 = "", subject_title = "", optional = "", subject_name = "",
				section_name = "", marks_grade = "", order_no = "", updateSubjectAllotment = "", section_nm = "",
				academicYear = "";
		LinkedHashMap<String, LinkedHashMap<String, String>> subjectData = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		List columnList = new ArrayList();
		LinkedHashMap subjectMap = new LinkedHashMap();

		JFrame f = new JFrame("Update Subjects in progress. Don't Close");
		f.setBounds(screenWidth / 2 - 150, screenHeight / 2, 90, 25);
		f.setSize(400, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {
			String coulmnDb = "";
			String coulmnStr = "";
			int orderStr = 0;
			String findColumnQuery = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS " + "WHERE TABLE_SCHEMA='"
					+ sessionData.getDBName() + "' AND TABLE_NAME = 'SUBJECT_ALLOTMENT'";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnQuery);

			while (resultSet.next()) {
				coulmnDb = resultSet.getString("COLUMN_NAME");
				coulmnStr = coulmnStr + "," + coulmnDb;
				columnList.add(coulmnDb);
			}

			coulmnStr = coulmnStr.substring(1);

			String insertQuery = "INSERT INTO " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT (" + coulmnStr
					+ ") Values ";

//			String findQuery = "SELECT DISTINCT "+coulmnStr+" FROM "+sessionData.getDBName()+"."+"SUBJECT_ALLOTMENT ORDER BY ORDER_NO ASC";
			String findQuery = "SELECT DISTINCT " + coulmnStr + " FROM " + sessionData.getDBName() + "."
					+ "SUBJECT_ALLOTMENT";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			connection.setAutoCommit(true);
			PreparedStatement pstm = null;
			String sql = "TRUNCATE TABLE " + sessionData.getDBName() + ".subject_allotment";
			pstm = (PreparedStatement) connection.prepareStatement(sql);
			pstm.execute();

			while (resultSet.next()) {

				academicYear = resultSet.getString("ACADEMIC_YEAR");
				std_1 = resultSet.getString("STD_1");
				subject_name = resultSet.getString("SUBJECT_NAME");
				subject_title = resultSet.getString("SUBJECT_TITLE");
				section_name = resultSet.getString("SECTION_NM");

				if (subjectMap.containsKey(academicYear + std_1 + subject_name + subject_title + section_name)) {
					continue;
				}
				subjectMap.put(academicYear + std_1 + subject_name + subject_title + section_name, "");

				insertQuery = insertQuery + "(";
				for (int j = 0; j < columnList.size(); j++) {
					if (columnList.get(j).toString().equalsIgnoreCase("ORDER_NO")) {
						orderStr = resultSet.getString(columnList.get(j).toString()) == null ? 0
								: Integer.parseInt(resultSet.getString(columnList.get(j).toString()));
						insertQuery = insertQuery + orderStr + ",";
					} else if (!columnList.get(j).toString().equalsIgnoreCase("MODIFIED_DATE")) {
						insertQuery = insertQuery + "'" + resultSet.getString(columnList.get(j).toString()) + "'" + ",";
					} else {
						insertQuery = insertQuery + "null" + ",";
					}
				}

				insertQuery = insertQuery.substring(0, insertQuery.length() - 1);
				insertQuery = insertQuery + "),";
			}
			insertQuery = insertQuery.substring(0, insertQuery.length() - 1);
			statement = connection.createStatement();
			statement.executeUpdate(insertQuery);

//			String updateQuery = "UPDATE "+sessionData.getDBName()+"."+"SUBJECT_ALLOTMENT SET "
//					+ "SEM1_ORAL='0',SEM1_ORAL_CT='0',SEM1_ASSIGN='0',SEM1_ASSIGN_CT='0',"
//					+ "SEM2_ORAL='0',SEM2_ORAL_CT='0',SEM2_ASSIGN='0',SEM2_ASSIGN_CT='0' "
//					+ "where ACADEMIC_YEAR='"+cm.getAcademicYear(sessionData,cm.getCurrentDate())+"' and STD_1 IN ('IX','X')";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);
//			
//			updateQuery = "UPDATE "+sessionData.getDBName()+"."+"SUBJECT_ALLOTMENT SET "
//					+ "SEM1_ORAL1='0',SEM1_ORAL1_CT='0',SEM1_PRACT1='0',SEM1_PRACT1_CT='0',SEM1_WRITE1='0',SEM1_WRITE1_CT='0',"
//					+ "SEM2_ORAL1='0',SEM2_ORAL1_CT='0',SEM2_PRACT1='0',SEM2_PRACT1_CT='0',SEM2_WRITE1='0',SEM2_WRITE1_CT='0' "
//					+ "where ACADEMIC_YEAR='"+cm.getAcademicYear(sessionData,cm.getCurrentDate())+"' and STD_1 IN ('XI','XII')";
//			statement = connection.createStatement();
//			statement.executeUpdate(updateQuery);

			JOptionPane.showMessageDialog(null, "Duplicate subjects deleted from subject allotment...");
			f.setVisible(false);
		} catch (Exception e) {
			f.setVisible(false);
			logger.error("alterColumnLength => " + e);
		}
	}
	
	public void deleteDuplicateTableData(SessionData sessionData, String tableName) {
		int screenWidth = cm.screeWidth();
		int screenHeight = cm.screeHeight();
		int mainCentre = (screenWidth - 150) / 2;
		String gr_no = "", roll_no = "", academic_year = "", std = "", div = "", optional_subject = "", created_date, 
				created_by = "", modified_date = "", modified_by = "", section_name = "", suid = "";

		List columnList = new ArrayList();
		LinkedHashMap tableMap = new LinkedHashMap();

		JFrame f = new JFrame("Delete "+tableName+" data in progress. Don't Close");
		f.setBounds(screenWidth / 2 - 150, screenHeight / 2, 90, 25);
		f.setSize(500, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {
			String coulmnDb = "";
			String coulmnStr = "";
			int orderStr = 0;
			String findColumnQuery = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS " + "WHERE TABLE_SCHEMA='"
					+ sessionData.getDBName() + "' AND TABLE_NAME = '"+tableName+"'";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findColumnQuery);

			while (resultSet.next()) {
				coulmnDb = resultSet.getString("COLUMN_NAME");
				coulmnStr = coulmnStr + "," + coulmnDb;
				columnList.add(coulmnDb);
			}

			coulmnStr = coulmnStr.substring(1);

			String insertQuery = "INSERT INTO " + sessionData.getDBName() + "." + tableName+ " (" + coulmnStr
					+ ") Values ";

			String findQuery = "SELECT DISTINCT " + coulmnStr + " FROM " + sessionData.getDBName() + "."
					+ tableName;
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			connection.setAutoCommit(true);
			PreparedStatement pstm = null;
			String sql = "TRUNCATE TABLE " + sessionData.getDBName() + "."+tableName;
			pstm = (PreparedStatement) connection.prepareStatement(sql);
			pstm.execute();

			while (resultSet.next()) {

				gr_no = resultSet.getString("GR_NO");
				academic_year = resultSet.getString("ACADEMIC_YEAR");
				std = resultSet.getString("PRESENT_STD");
				div = resultSet.getString("PRESENT_DIV");
				section_name = resultSet.getString("SECTION_NM");
				suid = resultSet.getString("SUID");

				if (tableMap.containsKey(gr_no + academic_year + std + div + section_name + suid)) {
					continue;
				}
				tableMap.put(gr_no + academic_year + std + div + section_name + suid, "");

				insertQuery = insertQuery + "(";
				for (int j = 0; j < columnList.size(); j++) {
					if (!columnList.get(j).toString().equalsIgnoreCase("MODIFIED_DATE") && !columnList.get(j).toString().equalsIgnoreCase("DATE_ADMITTED")) {
						insertQuery = insertQuery + "'" + resultSet.getString(columnList.get(j).toString()) + "'" + ",";
					} else if(resultSet.getDate(columnList.get(j).toString()) != null){
						insertQuery = insertQuery + "NULL" + ",";
					} else {
//						insertQuery = insertQuery + "null" + ",";
						insertQuery = insertQuery + resultSet.getDate(columnList.get(j).toString()) + ",";
					}
				}

				insertQuery = insertQuery.substring(0, insertQuery.length() - 1);
				insertQuery = insertQuery + "),";
			}
			insertQuery = insertQuery.substring(0, insertQuery.length() - 1);
			statement = connection.createStatement();
			statement.executeUpdate(insertQuery);

			JOptionPane.showMessageDialog(null, "Duplicate " + tableName + " data deleted...");
			f.setVisible(false);
		} catch (Exception e) {
			f.setVisible(false);
			logger.error("alterColumnLength => " + e);
		}
	}

	public void deleteSubjectInvalidChar(SessionData sessionData) {
		int screenWidth = cm.screeWidth();
		int screenHeight = cm.screeHeight();
		int mainCentre = (screenWidth - 150) / 2;
		int i = 0;
		String sub_name = "", academic_year = "", std_1 = "", subject_title = "", optional = "", marks_grade = "",
				order_no = "", deleteQuery = "", section_nm = "";

		JFrame f = new JFrame("Update Subjects in progress. Don't Close");
		f.setBounds(screenWidth / 2 - 150, screenHeight / 2, 90, 25);
		f.setSize(400, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {

			String findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				sub_name = resultSet.getString("SUBJECT_NAME");
				academic_year = resultSet.getString("ACADEMIC_YEAR");
				std_1 = resultSet.getString("STD_1");
				subject_title = resultSet.getString("SUBJECT_TITLE");
				optional = resultSet.getString("OPTIONAL");
				marks_grade = resultSet.getString("MARKS_GRADE");
				order_no = resultSet.getString("ORDER_NO");
				section_nm = resultSet.getString("SECTION_NM");

				if (sub_name.contains(".") || subject_title.trim().equalsIgnoreCase("")) {
					deleteQuery = "Delete from " + sessionData.getDBName() + "." + "SUBJECT where " + "(SECTION_NM='"
							+ section_nm + "' OR SECTION_NM IS NULL) " + "AND SUBJECT_NAME='" + sub_name
							+ "' AND ORDER_NO=" + order_no + " " + "AND ACADEMIC_YEAR='" + academic_year
							+ "' AND STD_1='" + std_1 + "'";

					statement = connection.createStatement();
					statement.executeUpdate(deleteQuery);

					i++;
				}
			}

			findQuery = "SELECT * FROM " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				sub_name = resultSet.getString("SUBJECT_NAME");
				academic_year = resultSet.getString("ACADEMIC_YEAR");
				std_1 = resultSet.getString("STD_1");
				subject_title = resultSet.getString("SUBJECT_TITLE");
				optional = resultSet.getString("OPTIONAL");
				marks_grade = resultSet.getString("MARKS_GRADE");
				order_no = resultSet.getString("ORDER_NO");
				section_nm = resultSet.getString("SECTION_NM");

				if (sub_name.contains(".") || subject_title.trim().equalsIgnoreCase("")) {
					deleteQuery = "Delete from " + sessionData.getDBName() + "." + "SUBJECT_ALLOTMENT where "
							+ "(SECTION_NM='" + section_nm + "' OR SECTION_NM IS NULL) " + "AND SUBJECT_NAME='"
							+ sub_name + "' AND ORDER_NO=" + order_no + " " + "AND ACADEMIC_YEAR='" + academic_year
							+ "' AND STD_1='" + std_1 + "'";

					statement = connection.createStatement();
					statement.executeUpdate(deleteQuery);

					i++;
				}
			}

			JOptionPane.showMessageDialog(null, "deleted " + i + " subjects with invalid characters...");
			f.setVisible(false);
		} catch (Exception e) {
			logger.error("alterColumnLength => " + e);
		}
	}

	public void changeTimeZone(SessionData sessionData) {

		try {
			String timeZone = "";
			String findQuery = "SELECT @@global.time_zone as global, @@session.time_zone as session";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				timeZone = resultSet.getString("global");
			}

//			if(!timeZone.equalsIgnoreCase("-05:30")) {
//				findQuery = "set time_zone = '-05:30'";
//				findQuery = "SET GLOBAL time_zone = '+8:00'";
//				findQuery = "SET GLOBAL time_zone = 'Europe/Helsinki'";
			findQuery = "SET GLOBAL time_zone = '" + timeZoneClass + "'";
			statement = connection.createStatement();
			statement.execute(findQuery);

			// SELECT @@global.time_zone, @@session.time_zone;
			// SELECT NOW();
			findQuery = "SET time_zone='" + timeZoneClass + "'"; // this changes time zone in database
			statement = connection.createStatement();
			statement.execute(findQuery);
//			}

		} catch (Exception e) {
			logger.error("changeTimeZone => " + e);
		}
	}

	public void deletePeriodicAttendance(SessionData sessionData) {

		try {
			String findQuery = "Delete from " + sessionData.getDBName() + "." + "ATTENDANCE_PERIOD "
					+ "where YEARLY is null and YEARLY_TOT is null and SEM1 is null and SEM1_TOT is null and SEM2 is null and "
					+ "SEM2_TOT is null and EXAM1 is null and EXAM1_TOT is null and EXAM2 is null and "
					+ "EXAM2_TOT is null and EXAM3 is null and EXAM3_TOT is null and EXAM4 is null and "
					+ "EXAM4_TOT is null and JAN_ is null and FEB_ is null and MAR_ is null and APR_ is null and "
					+ "MAY_ is null and JUN_ is null and JUL_ is null and AUG_ is null and SEP_ is null and OCT_ is null and "
					+ "NOV_ is null and DEC_ is null";
			statement = connection.createStatement();
			statement.executeUpdate(findQuery);
		} catch (Exception e) {
			logger.warn("deletePeriodicAttendance => " + e);
		}
	}

	public void updateAttendanceToNewFormat(SessionData sessionData) {

		JFrame f = new JFrame("Update Attendance to new format in progress. Please Don't Close");
		screenWidth = cm.screeWidth();
		screenHeight = cm.screeHeight();
		mainCentre = (screenWidth - 150) / 2;

		f.setBounds(screenWidth / 2 - 250, screenHeight / 2, 90, 25);
		f.setSize(600, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {
			LinkedHashMap<String, LinkedHashMap<String, String>> registerAttMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
			String findQuery = "SELECT GR_NO,ATT_SEM1,ATT_SEM2,ATT_FINAL from " + sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				LinkedHashMap<String, String> grMap = new LinkedHashMap<String, String>();
				grMap.put("ATT_SEM1",
						resultSet.getString("ATT_SEM1") == null ? "0/0" : (resultSet.getString("ATT_SEM1")));
				grMap.put("ATT_SEM2",
						resultSet.getString("ATT_SEM2") == null ? "0/0" : (resultSet.getString("ATT_SEM2")));
				grMap.put("ATT_FINAL",
						resultSet.getString("ATT_FINAL") == null ? "0/0" : (resultSet.getString("ATT_FINAL")));
				registerAttMap.put(resultSet.getString("GR_NO") == null ? "0000000" : (resultSet.getString("GR_NO")),
						grMap);
			}

			String updateQuery = "", academic, gr, jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec, janA,
					junA, julA, augA, sepA, octA, novA, decA, janT, junT, julT, augT, sepT, octT, novT, decT, sem1,
					sem1A, sem1T, sem2, sem2A, sem2T, yearly, yearlyA, yearlyT, temp;
			try {
				findQuery = "SELECT * from " + sessionData.getDBName() + "." + "ATTENDANCE_PERIODLY LEFT JOIN "
						+ sessionData.getDBName() + "." + "ATTENDANCE_PERIOD "
						+ "ON ATTENDANCE_PERIODLy.GR_NO=ATTENDANCE_PERIOD.GR_NO AND ATTENDANCE_PERIODLY.SECTION_NM=ATTENDANCE_PERIOD.SECTION_NM "
						+ "AND ATTENDANCE_PERIODLY.ACADEMIC_YEAR=ATTENDANCE_PERIOD.ACADEMIC_YEAR";
				statement = connection.createStatement();
				resultSet = statement.executeQuery(findQuery);
				while (resultSet.next()) {
					updateQuery = "UPDATE " + sessionData.getDBName() + "." + "ATTENDANCE_PERIOD SET ";
					gr = resultSet.getString("GR_NO") == null ? "0000000" : (resultSet.getString("GR_NO"));
					academic = resultSet.getString("ACADEMIC_YEAR") == null ? ""
							: (resultSet.getString("ACADEMIC_YEAR"));
					jan = resultSet.getString("JAN_") == null ? resultSet.getString("JAN")
							: (resultSet.getString("JAN_"));
					feb = resultSet.getString("FEB_") == null ? resultSet.getString("FEB")
							: (resultSet.getString("FEB_"));
					mar = resultSet.getString("MAR_") == null ? resultSet.getString("MAR")
							: (resultSet.getString("MAR_"));
					apr = resultSet.getString("APR_") == null ? resultSet.getString("APR")
							: (resultSet.getString("APR_"));
					may = resultSet.getString("MAY_") == null ? resultSet.getString("MAY")
							: (resultSet.getString("MAY_"));
					jun = resultSet.getString("JUN_") == null ? resultSet.getString("JUN")
							: (resultSet.getString("JUN_"));
					jul = resultSet.getString("JUL_") == null ? resultSet.getString("JUL")
							: (resultSet.getString("JUL_"));
					aug = resultSet.getString("AUG_") == null ? resultSet.getString("AUG")
							: (resultSet.getString("AUG_"));
					sep = resultSet.getString("SEP_") == null ? resultSet.getString("SEP")
							: (resultSet.getString("SEP_"));
					oct = resultSet.getString("OCT_") == null ? resultSet.getString("OCT")
							: (resultSet.getString("OCT_"));
					nov = resultSet.getString("NOV_") == null ? resultSet.getString("NOV")
							: (resultSet.getString("NOV_"));
					dec = resultSet.getString("DEC_") == null ? resultSet.getString("DEC")
							: (resultSet.getString("DEC_"));
					sem1 = resultSet.getString("SEM11") == null ? resultSet.getString("SEM1")
							: (resultSet.getString("SEM11"));
					sem2 = resultSet.getString("SEM21") == null ? resultSet.getString("SEM2")
							: (resultSet.getString("SEM21"));
					yearly = resultSet.getString("YEARLY1") == null ? resultSet.getString("YEARLY")
							: (resultSet.getString("YEARLY1"));
					janA = jan.substring(0, jan.indexOf("/"));
					janT = jan.substring(jan.indexOf("/") + 1);
					junA = jun.substring(0, jun.indexOf("/"));
					junT = jun.substring(jun.indexOf("/") + 1);
					julA = jul.substring(0, jul.indexOf("/"));
					julT = jul.substring(jul.indexOf("/") + 1);
					augA = aug.substring(0, aug.indexOf("/"));
					augT = aug.substring(aug.indexOf("/") + 1);
					sepA = sep.substring(0, sep.indexOf("/"));
					sepT = sep.substring(sep.indexOf("/") + 1);
					octA = oct.substring(0, oct.indexOf("/"));
					octT = oct.substring(oct.indexOf("/") + 1);
					novA = nov.substring(0, nov.indexOf("/"));
					novT = nov.substring(nov.indexOf("/") + 1);
					decA = dec.substring(0, dec.indexOf("/"));
					decT = dec.substring(dec.indexOf("/") + 1);
					sem1A = sem1.substring(0, sem1.indexOf("/"));
					sem1T = sem1.substring(sem1.indexOf("/") + 1);
					sem2A = sem2.substring(0, sem2.indexOf("/"));
					sem2T = sem2.substring(sem2.indexOf("/") + 1);
					yearlyA = yearly.substring(0, yearly.indexOf("/"));
					yearlyT = yearly.substring(yearly.indexOf("/") + 1);

					updateQuery = updateQuery + " JUN_=" + junA + ",JUN_TOT=" + junT;
					updateQuery = updateQuery + " ,JUL_=" + julA + ",JUL_TOT=" + julT;
					updateQuery = updateQuery + " ,AUG_=" + augA + ",AUG_TOT=" + augT;
					updateQuery = updateQuery + " ,SEP_=" + sepA + ",SEP_TOT=" + sepT;
					updateQuery = updateQuery + " ,OCT_=" + octA + ",OCT_TOT=" + octT;
					updateQuery = updateQuery + " ,NOV_=" + novA + ",NOV_TOT=" + novT;
					updateQuery = updateQuery + " ,DEC_=" + decA + ",DEC_TOT=" + decT;
					if (jun.equalsIgnoreCase("0/0") && sem1.equalsIgnoreCase("0/0")) {
						temp = registerAttMap.get(gr).get("ATT_SEM1");
						updateQuery = updateQuery + " ,SEM1=" + temp.substring(0, temp.indexOf("/")) + ",SEM1_TOT="
								+ temp.substring(temp.indexOf("/") + 1);
					}
					if (jan.equalsIgnoreCase("0/0") && sem2.equalsIgnoreCase("0/0")) {
						temp = registerAttMap.get(gr).get("ATT_SEM2");
						updateQuery = updateQuery + " ,SEM2=" + temp.substring(0, temp.indexOf("/")) + ",SEM2_TOT="
								+ temp.substring(temp.indexOf("/") + 1);
					}
					if (jan.equalsIgnoreCase("0/0") && jun.equalsIgnoreCase("0/0") && yearly.equalsIgnoreCase("0/0")) {
						temp = registerAttMap.get(gr).get("ATT_FINAL");
						updateQuery = updateQuery + " ,YEARLY=" + temp.substring(0, temp.indexOf("/")) + ",YEARLY_TOT="
								+ temp.substring(temp.indexOf("/") + 1);
					}
					updateQuery = updateQuery + " where GR_NO='" + gr + "' and ACADEMIC_YEAR='" + academic + "'";
					statement = connection.createStatement();
					statement.executeUpdate(updateQuery);
				}
			} catch (Exception e) {
				logger.warn("updateAttendanceToNewFormat => " + e);
			}

			findQuery = "SELECT * from " + sessionData.getDBName() + "." + "ATTENDANCE_PERIOD";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				updateQuery = "UPDATE " + sessionData.getDBName() + "." + "ATTENDANCE_PERIOD SET ";
				gr = resultSet.getString("GR_NO") == null ? "0000000" : (resultSet.getString("GR_NO"));
				academic = resultSet.getString("ACADEMIC_YEAR") == null ? "" : (resultSet.getString("ACADEMIC_YEAR"));
				sem1 = resultSet.getString("SEM1") == null ? "0.00" : (resultSet.getString("SEM1"));
				sem2 = resultSet.getString("SEM2") == null ? "0.00" : (resultSet.getString("SEM2"));
				yearly = resultSet.getString("YEARLY") == null ? "0.00" : (resultSet.getString("YEARLY"));
				if (sem1.equalsIgnoreCase("0.00")) {
					temp = registerAttMap.get(gr) == null ? "0/0" : (registerAttMap.get(gr).get("ATT_SEM1"));
					if (temp.trim().equalsIgnoreCase("")) {
						temp = "0/0";
					}
					updateQuery = updateQuery + " SEM1=" + temp.substring(0, temp.indexOf("/")) + ",SEM1_TOT="
							+ temp.substring(temp.indexOf("/") + 1) + ",";
				}
				if (sem2.equalsIgnoreCase("0.00")) {
					temp = registerAttMap.get(gr) == null ? "0/0" : (registerAttMap.get(gr).get("ATT_SEM2"));
					if (temp.trim().equalsIgnoreCase("")) {
						temp = "0/0";
					}
					updateQuery = updateQuery + " SEM2=" + temp.substring(0, temp.indexOf("/")) + ",SEM2_TOT="
							+ temp.substring(temp.indexOf("/") + 1) + ",";
				}
				if (yearly.equalsIgnoreCase("0.00")) {
					temp = registerAttMap.get(gr) == null ? "0/0" : (registerAttMap.get(gr).get("ATT_FINAL"));
					if (temp.trim().equalsIgnoreCase("")) {
						temp = "0/0";
					}
					updateQuery = updateQuery + " YEARLY=" + temp.substring(0, temp.indexOf("/")) + ",YEARLY_TOT="
							+ temp.substring(temp.indexOf("/") + 1) + ",";
				}
				updateQuery = updateQuery.substring(0, updateQuery.length() - 1);
				updateQuery = updateQuery + " where GR_NO='" + gr + "' and ACADEMIC_YEAR='" + academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateQuery);
			}
			f.setVisible(false);
		} catch (Exception e) {
			logger.warn("updateAttendanceToNewFormat => " + e);
			f.setVisible(false);
			JOptionPane.showMessageDialog(null, "update Attendance To New Format failed");
		}
	}

	// /////////updateQueryToDB////////////////////////////
	public boolean updateQueryToDB(SessionData sessionData, String query) throws Exception {

		String updateNewUser = "";
		int udpdateCount = 0;
		try {
			statement = connection.createStatement();
			statement.executeUpdate(query);
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
		return true;
	}

	// /////////Sort Map by subject////////////////////////////////////////
	public LinkedHashMap<String, LinkedHashMap<String, String>> topperReportList(SessionData sessionData, String std,
			String div, String academicYear, String section, String catType, String print, String exam, String orderBy,
			String subjectTitle, LinkedHashMap<String, LinkedHashMap<String, String>> marksSemDataMap)
			throws Exception {

		String subTitle = subjectTitle + "_MARKS";
		String marks = "";
		if (exam.equalsIgnoreCase("Final")) {
			subTitle = subjectTitle + "_FINAL";
		}
		LinkedHashMap<String, LinkedHashMap<String, String>> marksDataMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		Map<String, Integer> sorted = new HashMap<>();
		Map<String, Integer> marksSubjectDataMap = new HashMap<>();
		if (exam.equalsIgnoreCase("Final") && subjectTitle.equalsIgnoreCase("All")) {
			subTitle = "semMarksObtained";
		} else if (subjectTitle.equalsIgnoreCase("All")) {
			subTitle = "semMarks";
		}
		Set setsc = marksSemDataMap.entrySet();
		Iterator isc = setsc.iterator();
		while (isc.hasNext()) {
			Map.Entry me = (Map.Entry) isc.next();
			if (((LinkedHashMap<?, ?>) marksSemDataMap.get(me.getKey())).get(subTitle) != null) {
				marks = ((LinkedHashMap<?, ?>) marksSemDataMap.get(me.getKey())).get(subTitle).toString();
			} else {
				continue;
			}
			if (marks.contains("+")) {
				marks = marks.substring(0, marks.indexOf("+"));
			} else if (marks.contains("(")) {
				marks = marks.substring(0, marks.indexOf("("));
			}
			if (cm.validateOnlyNumber(marks)) {
				marksSubjectDataMap.put(me.getKey().toString(), Integer.parseInt(marks));
			}
		}

		// let's sort this map by values first
		if (orderBy.equalsIgnoreCase("DESC")) {
			sorted = marksSubjectDataMap.entrySet().stream()
					.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
					.collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));
		} else {
			sorted = marksSubjectDataMap.entrySet().stream().sorted(comparingByValue())
					.collect(toMap(e -> e.getKey(), e -> e.getValue(), (e1, e2) -> e2, LinkedHashMap::new));
		}

		LinkedHashMap<String, String> headerMap = new LinkedHashMap<String, String>();
		headerMap.put("srNo", "Sr No.");
		headerMap.put("std", "Std");
		headerMap.put("rollNo", "Roll No.");
		headerMap.put("grNo", "Gr No.");
		headerMap.put("name", "Name");
		headerMap.put("percent", subjectTitle);
		headerMap.put("marks", subjectTitle);
		marksDataMap.put("0000000", headerMap);
		Set set = sorted.entrySet();
		Iterator i = set.iterator();
		int j = 1;
		while (i.hasNext()) {
			Map.Entry me = (Map.Entry) i.next();
			if (subjectTitle.equalsIgnoreCase("All")) {
				marksSemDataMap.get(me.getKey()).put("marks",
						me.getValue() + " (" + marksSemDataMap.get(me.getKey()).get("semPercent") + " %)");
			} else {
				marksSemDataMap.get(me.getKey()).put("marks", me.getValue() + "");
			}
			marksSemDataMap.get(me.getKey()).put("srNo", j + "");
			if (subjectTitle.equalsIgnoreCase("All")) {
				marksDataMap.put(me.getKey().toString(), marksSemDataMap.get(me.getKey()));
			} else {
				marksDataMap.put(me.getKey().toString(), marksSemDataMap.get(me.getKey()));
			}
			j++;
		}
		return marksDataMap;
	}

	public void updateFeesDivMismatch(SessionData sessionData) {

		String updateQuery = "", div = "", std = "", grNo = "", academic = "";
		JFrame f = new JFrame("Update Div mismatch in Fees data. Please Don't Close");
		screenWidth = cm.screeWidth();
		screenHeight = cm.screeHeight();
		mainCentre = (screenWidth - 150) / 2;

		f.setBounds(screenWidth / 2 - 250, screenHeight / 2, 90, 25);
		f.setSize(600, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {
			String findQuery = "select " + sessionData.getDBName()
					+ ".fees_data_mandatory.ACADEMIC_YEAR,hs_general_register.ACADEMIC_YEAR,fees_data_mandatory.GR_NO,"
					+ "fees_data_mandatory.SECTION_NM,PRESENT_STD,hs_general_register.PRESENT_DIV,fees_data_mandatory.DIV_1 "
					+ "from " + sessionData.getDBName() + ".fees_data_mandatory cross join " + sessionData.getDBName()
					+ ".hs_general_register on fees_data_mandatory.STD_1=hs_general_register.PRESENT_STD "
					+ "AND fees_data_mandatory.GR_NO=hs_general_register.GR_NO AND fees_data_mandatory.DIV_1 != hs_general_register.PRESENT_DIV "
					+ "AND fees_data_mandatory.ACADEMIC_YEAR = hs_general_register.ACADEMIC_YEAR AND "
					+ "fees_data_mandatory.SECTION_NM = hs_general_register.SECTION_NM";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			while (resultSet.next()) {
				academic = resultSet.getString("ACADEMIC_YEAR") == null ? "" : (resultSet.getString("ACADEMIC_YEAR"));
				grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO"));
				std = resultSet.getString("PRESENT_STD") == null ? "" : (resultSet.getString("PRESENT_STD"));
				div = resultSet.getString("PRESENT_DIV") == null ? "" : (resultSet.getString("PRESENT_DIV"));

				updateQuery = "UPDATE " + sessionData.getDBName() + "." + "FEES_DATA_MANDATORY SET DIV_1='" + div
						+ "' where " + "ACADEMIC_YEAR='" + academic + "' and GR_NO='" + grNo + "' and STD_1='" + std
						+ "' and SECTION_NM='" + sessionData.getSectionName() + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateQuery);
			}
			f.setVisible(false);
		} catch (Exception e) {
			logger.warn("updateAttendanceToNewFormat => " + e);
			f.setVisible(false);
			JOptionPane.showMessageDialog(null, "update div mismatch failed");
		}
	}

	public void addRemarkColumn(SessionData sessionData, String subject) throws SQLException {

		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName() + ".result_data ADD (" + subject
					+ "_REMSEM1  VARCHAR(100)," + subject + "_REMSEM2  VARCHAR(100)," + subject
					+ "_REMFINAL  VARCHAR(100))";
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}
	}

	public void createTable(SessionData sessionData) throws SQLException {
		try {
			String queryconfig_data = "CREATE TABLE " + sessionData.getDBName()
					+ ".config_data ( `CONFIG_NAME` varchar(100) NOT NULL DEFAULT '', `CONFIG_VALUE` varchar(1000) DEFAULT NULL, `APP_TYPE` varchar(100) DEFAULT NULL, `STATUS` varchar(30) DEFAULT NULL, `SECTION_NM` varchar(20) NOT NULL DEFAULT '', `CREATE_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `CREATED_BY` varchar(200) DEFAULT NULL, `MODIFIED_DATE` date DEFAULT NULL, `MODIFIED_BY` varchar(200) DEFAULT NULL, PRIMARY KEY (`SECTION_NM`,`CONFIG_NAME`), KEY `AcaSecIndex` (`CONFIG_NAME`,`SECTION_NM`)) ENGINE=InnoDB DEFAULT CHARSET=latin1";
			statement = connection.createStatement();
			statement.executeUpdate(queryconfig_data);
		} catch (Exception e) {
		}

		/// add column
		String insertCoulmn = "";
		try {
			insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".fee_status ADD (std_1  VARCHAR(10), div_1  VARCHAR(10),"
					+ "LAST_NAME  VARCHAR(25),FIRST_NAME  VARCHAR(25),FATHER_NAME  VARCHAR(25),ROLL_NO  VARCHAR(10))";
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}

		try {
			insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".fees_data_mandatory ADD (LAST_NAME  VARCHAR(25),FIRST_NAME  VARCHAR(25),"
					+ "FATHER_NAME  VARCHAR(25),ROLL_NO  VARCHAR(10))";
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}
	}

	public LinkedHashMap<String, LinkedHashMap<String, String>> getRemarkResultMap(SessionData sessionData,
			String academic, String std, String div, String exam, LinkedHashMap subjectTitleMap) {
//		logger.info("==inside getRemarkResultMap===");
		LinkedHashMap<String, LinkedHashMap<String, String>> resultMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		String grNo = "", rollNo = "", first = "", last = "", middle = "", name = "", remarkSem1 = "", remarkSem2 = "",
				remarkFinal = "", subjectName = "", progressSem1 = "", progressSem2 = "", progressFinal = "",
				improveSem1 = "", improveSem2 = "", improveFinal = "", hobbies = "";

		try {
			String resultMapQuery = "Select * FROM " + sessionData.getDBName() + ".RESULT_DATA " + "LEFT JOIN "
					+ sessionData.getDBName() + "."
					+ "HS_GENERAL_REGISTER ON RESULT_DATA.GR_NO = hs_general_register.GR_NO "
					+ "WHERE RESULT_DATA.STD_1='" + std + "' AND RESULT_DATA.DIV_1='" + div + "' AND "
					+ "RESULT_DATA.ACADEMIC_YEAR='" + academic + "' AND result_data.section_nm='"
					+ sessionData.getSectionName() + "' "
					+ "AND hs_general_register.PRESENT_DIV is not null ORDER BY result_data.ROLL_NO * 1";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(resultMapQuery);

			while (resultSet.next()) {
				LinkedHashMap<String, String> grDetail = new LinkedHashMap<String, String>();
				grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO").trim());
				rollNo = resultSet.getString("ROLL_NO") == null ? "" : (resultSet.getString("ROLL_NO").trim());
				first = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME").trim());
				last = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME").trim());
				middle = resultSet.getString("FATHER_NAME") == null ? "" : (resultSet.getString("FATHER_NAME").trim());
				grDetail.put("name", last + " " + first + " " + middle);
				grDetail.put("rollNo", rollNo);
				Set set1 = subjectTitleMap.entrySet();
				Iterator j = set1.iterator();
				while (j.hasNext()) {
					Map.Entry me = (Map.Entry) j.next();
					subjectName = me.getValue().toString();
					remarkSem1 = resultSet.getString(subjectName + "_REMSEM1") == null ? ""
							: (resultSet.getString(subjectName + "_REMSEM1").trim());
					remarkSem2 = resultSet.getString(subjectName + "_REMSEM2") == null ? ""
							: (resultSet.getString(subjectName + "_REMSEM2").trim());
					remarkFinal = resultSet.getString(subjectName + "_REMFINAL") == null ? ""
							: (resultSet.getString(subjectName + "_REMFINAL").trim());
					grDetail.put(subjectName + "_REMSEM1", remarkSem1);
					grDetail.put(subjectName + "_REMSEM2", remarkSem2);
					grDetail.put(subjectName + "_REMFINAL", remarkFinal);
				}
				progressSem1 = resultSet.getString("SEM1_PROGRESS") == null ? ""
						: resultSet.getString("SEM1_PROGRESS").equalsIgnoreCase("null") ? ""
								: resultSet.getString("SEM1_PROGRESS").trim();
				progressSem2 = resultSet.getString("SEM2_PROGRESS") == null ? ""
						: resultSet.getString("SEM2_PROGRESS").equalsIgnoreCase("null") ? ""
								: resultSet.getString("SEM2_PROGRESS").trim();
				progressFinal = resultSet.getString("FINAL_PROGRESS") == null ? ""
						: resultSet.getString("FINAL_PROGRESS").equalsIgnoreCase("null") ? ""
								: resultSet.getString("FINAL_PROGRESS").trim();
				grDetail.put("SPECIAL PROGRESS_SEM1", progressSem1);
				grDetail.put("SPECIAL PROGRESS_SEM2", progressSem2);
				grDetail.put("SPECIAL PROGRESS_FINAL", progressFinal);
				improveSem1 = resultSet.getString("SEM1_IMPROVE") == null ? ""
						: resultSet.getString("SEM1_IMPROVE").equalsIgnoreCase("null") ? ""
								: resultSet.getString("SEM1_IMPROVE").trim();
				improveSem2 = resultSet.getString("SEM2_IMPROVE") == null ? ""
						: resultSet.getString("SEM2_IMPROVE").equalsIgnoreCase("null") ? ""
								: resultSet.getString("SEM2_IMPROVE").trim();
				improveFinal = resultSet.getString("FINAL_IMPROVE") == null ? ""
						: resultSet.getString("FINAL_IMPROVE").equalsIgnoreCase("null") ? ""
								: resultSet.getString("FINAL_IMPROVE").trim();
				grDetail.put("IMPROVEMENT \n NEEDED_SEM1", cm.revertCommaApostrophy(improveSem1).replace("_", " "));
				grDetail.put("IMPROVEMENT \n NEEDED_SEM2", cm.revertCommaApostrophy(improveSem2).replace("_", " "));
				grDetail.put("IMPROVEMENT \n NEEDED_FINAL", cm.revertCommaApostrophy(improveFinal).replace("_", " "));
				grDetail.put("IMPROVEMENT-NEEDED_SEM1", cm.revertCommaApostrophy(improveSem1).replace("_", " "));
				grDetail.put("IMPROVEMENT-NEEDED_SEM2", cm.revertCommaApostrophy(improveSem2).replace("_", " "));
				grDetail.put("IMPROVEMENT-NEEDED_FINAL", cm.revertCommaApostrophy(improveFinal).replace("_", " "));
				hobbies = resultSet.getString("EXTRA_1") == null ? ""
						: resultSet.getString("EXTRA_1").equalsIgnoreCase("null") ? ""
								: resultSet.getString("EXTRA_1").trim();
				grDetail.put("Interest/Hobby", hobbies);

				resultMap.put(grNo, grDetail);
			}
//			ce.generateExcel(sessionData, "PRINTLIST", "ANNUAL RESULT_", "", resultDataList, true, "Annual Result for Std-"+std+ " Div-"+div+" Academic Year "+academic, 1);
		} catch (Exception e) {
			cm.logException(e);
		}
		return resultMap;
	}

	public void updateRemarkResultMapForSQL(String updateQuery) {

		try {
			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);

		} catch (Exception e) {
			logger.info("updateQuery: " + updateQuery);
			cm.logException(e);
		}
	}

	public void updateRemarkResultMap(SessionData sessionData, String academic, String std, String div, String exam,
			LinkedHashMap subjectTitleMap, LinkedHashMap<String, LinkedHashMap<String, String>> remarksMap) {

		String subjectName = "", grNo = "", updateQuery = "";
		try {
			Set set1 = remarksMap.entrySet();
			Iterator i = set1.iterator();
			while (i.hasNext()) {
				LinkedHashMap<String, String> grDetail = new LinkedHashMap<String, String>();
				Map.Entry me = (Map.Entry) i.next();
				grNo = me.getKey().toString();
				grDetail = (LinkedHashMap<String, String>) me.getValue();
				updateQuery = "Update " + sessionData.getDBName() + ".RESULT_DATA SET ";

				Set set2 = subjectTitleMap.entrySet();
				Iterator j = set2.iterator();
				while (j.hasNext()) {
					Map.Entry me2 = (Map.Entry) j.next();
					subjectName = me2.getValue().toString();
					updateQuery = updateQuery + subjectName + "_REM" + exam + "='"
							+ grDetail.get(subjectName + "_REM" + exam) + "',";
				}
				updateQuery = updateQuery.substring(0, updateQuery.length() - 1);
				updateQuery = updateQuery + " where STD_1='" + std + "' AND DIV_1='" + div + "' AND ACADEMIC_YEAR='"
						+ academic + "' AND " + "section_nm='" + sessionData.getSectionName() + "' and GR_NO='" + grNo
						+ "'";

				statement = connection.createStatement();
				statement.executeUpdate(updateQuery);
			}

//			ce.generateExcel(sessionData, "PRINTLIST", "ANNUAL RESULT_", "", resultDataList, true, "Annual Result for Std-"+std+ " Div-"+div+" Academic Year "+academic, 1);
		} catch (Exception e) {
			cm.logException(e);
		}
	}

	public void alterDBForMarathiFont(SessionData sessionData) throws SQLException {

		try {
			// For each database:
			String updateDB = "ALTER DATABASE " + sessionData.getDBName()
					+ " CHARACTER SET = utf8 COLLATE = utf8_unicode_ci";
			statement = connection.createStatement();
			statement.executeUpdate(updateDB);

			ResultSet resultSetColumn = connection.getMetaData().getCatalogs();
			resultSetColumn = statement
					.executeQuery("SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '"
							+ sessionData.getDBName() + "' ");

			// Preparing List of table Names
			List<String> tableNameList = new ArrayList<String>();
			while (resultSetColumn.next()) {
//				tableNameList.add(resultSetColumn.getString(1));
				// For each table:
				if (resultSetColumn.getString(1).equalsIgnoreCase("marks_entry")) {
					continue;
				}
				// ALTER DATABASE dbname CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
				String updateTable = "ALTER TABLE " + sessionData.getDBName() + "." + resultSetColumn.getString(1)
						+ " CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci";
				statement = connection.createStatement();
				statement.executeUpdate(updateTable);
			}
		} catch (Exception e) {
		}
	}

	public void truncateAllTablesForSQL() throws SQLException {

		try {
			// For each database:
			statement = connection.createStatement();

			ResultSet resultSetColumn = connection.getMetaData().getCatalogs();
			resultSetColumn = statement.executeQuery(
					"SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE " + "table_schema = 'nesschool' ");

			// Preparing List of table Names
			List<String> tableNameList = new ArrayList<String>();
			while (resultSetColumn.next()) {
				String truncateTable = "TRUNCATE TABLE nesschool." + resultSetColumn.getString(1);
				statement = connection.createStatement();
				statement.executeUpdate(truncateTable);
			}
		} catch (Exception e) {
		}
	}

	public void truncateAllTables(SessionData sessionData) throws SQLException {

		try {
			// For each database:
			statement = connection.createStatement();

			ResultSet resultSetColumn = connection.getMetaData().getCatalogs();
			resultSetColumn = statement
					.executeQuery("SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '"
							+ sessionData.getDBName() + "' ");

			// Preparing List of table Names
			List<String> tableNameList = new ArrayList<String>();
			while (resultSetColumn.next()) {
				String truncateTable = "TRUNCATE TABLE " + sessionData.getDBName() + "." + resultSetColumn.getString(1);
				statement = connection.createStatement();
				statement.executeUpdate(truncateTable);
			}
		} catch (Exception e) {
		}
	}

	public List<String> getTablesList(SessionData sessionData) throws SQLException {

		try {
			// For each database:
			statement = connection.createStatement();

			ResultSet resultSetColumn = connection.getMetaData().getCatalogs();
			resultSetColumn = statement
					.executeQuery("SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '"
							+ sessionData.getDBName() + "' ");

			// Preparing List of table Names
			List<String> tableNameList = new ArrayList<String>();
			while (resultSetColumn.next()) {
				tableNameList.add(resultSetColumn.getString(1));
			}
			return tableNameList;
		} catch (Exception e) {
			return null;
		}
	}

	public void deleteSummativeMarksAlloted(SessionData sessionData, String academicYear) throws SQLException {

		try {
			String query = "update " + sessionData.getDBName()
					+ ".subject_allotment set SEM1_ORAL1_CT=0, SEM1_WRITE1_CT=0,SEM1_PRACT1_CT=0,SEM2_ORAL1_CT=0,"
					+ "SEM2_WRITE1_CT=0,SEM2_PRACT1_CT=0 WHERE STD_1 IN ('IX','X','XI','XII') AND ACADEMIC_YEAR='"
					+ academicYear + "' " + "AND (SECTION_NM='" + sessionData.getSectionName() + "')";
			// For each database:
			statement = connection.createStatement();
			statement.executeUpdate(query);
		} catch (Exception e) {
		}
	}

	public boolean updateFeesReportMissingData(SessionData sessionData, String academic) throws SQLException {

		try {
			LinkedHashMap<String, String> studentMap = new LinkedHashMap<String, String>();
			String grNo, std, div, last, first, father, name, prevStd, prevDiv;
			String findQuery = "SELECT DISTINCT UPPER(HS_GENERAL_REGISTER.GR_NO) AS GR_NO, "
					+ "UPPER(HS_GENERAL_REGISTER.LAST_NAME) AS LAST_NAME, UPPER(HS_GENERAL_REGISTER.FIRST_NAME) AS FIRST_NAME , "
					+ "UPPER(HS_GENERAL_REGISTER.FATHER_NAME) AS FATHER_NAME, "
					+ "UPPER(HS_GENERAL_REGISTER.PRESENT_STD) AS PREVIOUS_STD , UPPER(HS_GENERAL_REGISTER.PRESENT_DIV) AS PREVIOUS_DIV, "
					+ "UPPER(FEES_DATA_MANDATORY.STD_1) AS PRESENT_STD , UPPER(FEES_DATA_MANDATORY.DIV_1) AS PRESENT_DIV "
					+ " FROM " + sessionData.getDBName() + "." + "FEES_DATA_MANDATORY LEFT JOIN "
					+ sessionData.getDBName() + "." + "HS_GENERAL_REGISTER "
					+ "ON FEES_DATA_MANDATORY.GR_NO=HS_GENERAL_REGISTER.GR_NO AND HS_GENERAL_REGISTER.SECTION_NM=FEES_DATA_MANDATORY.SECTION_NM "
					+ "WHERE FEES_DATA_MANDATORY.GR_NO NOT IN (SELECT GR_NO FROM " + sessionData.getDBName() + "."
					+ "CLASS_ALLOTMENT WHERE " + "CLASS_ALLOTMENT.SECTION_NM='" + sessionData.getSectionName()
					+ "' AND CLASS_ALLOTMENT.ACADEMIC_YEAR='" + academic + "') AND "
					+ "FEES_DATA_MANDATORY.SECTION_NM='" + sessionData.getSectionName()
					+ "' AND FEES_DATA_MANDATORY.ACADEMIC_YEAR='" + academic + "'";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			while (resultSet.next()) {
				grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO").trim());
				prevStd = resultSet.getString("PREVIOUS_STD") == null ? " "
						: (resultSet.getString("PREVIOUS_STD").trim());
				prevDiv = resultSet.getString("PREVIOUS_DIV") == null ? " "
						: (resultSet.getString("PREVIOUS_DIV").trim());
				std = resultSet.getString("PRESENT_STD") == null ? " " : (resultSet.getString("PRESENT_STD").trim());
				div = resultSet.getString("PRESENT_DIV") == null ? " " : (resultSet.getString("PRESENT_DIV").trim());
				last = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME").trim());
				first = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME").trim());
				father = resultSet.getString("FATHER_NAME") == null ? " " : (resultSet.getString("FATHER_NAME").trim());
				name = last + " " + first + " " + father;
				studentMap.put(grNo,
						name + "|" + grNo + "|1|" + std + "|" + div + "|" + last + "|" + first + "|" + father);
				promoteClass(sessionData, studentMap, sessionData.getSectionName(), academic, prevStd, prevDiv);
				studentMap.remove(grNo);
			}
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	public boolean deleteRecordFromTable(SessionData sessionData, String academic, String grNo, String tableName)
			throws SQLException {

		try {
			String deleteQuery = "DELETE FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName
					+ ".SECTION_NM='" + sessionData.getSectionName() + "' AND " + tableName + ".ACADEMIC_YEAR='"
					+ academic + "' " + "AND " + tableName + ".GR_NO='" + grNo + "'";

			statement = connection.createStatement();
			statement.executeUpdate(deleteQuery);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public boolean deleteBlankGr(SessionData sessionData, String academic, String tableName) throws SQLException {

		try {
			String deleteQuery = "DELETE FROM " + sessionData.getDBName() + "." + tableName + " WHERE " + tableName
					+ ".SECTION_NM='" + sessionData.getSectionName() + "' AND " + tableName + ".ACADEMIC_YEAR='"
					+ academic + "' " + "AND " + tableName + ".GR_NO=''";

			statement = connection.createStatement();
			statement.executeUpdate(deleteQuery);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public boolean updateRecordInTable(SessionData sessionData, String academic, String grNo, String tableName,
			String updateStr) throws SQLException {

		try {
			String updateQuery = "UPDATE " + sessionData.getDBName() + "." + tableName + " SET " + updateStr + " WHERE "
					+ tableName + ".SECTION_NM='" + sessionData.getSectionName() + "' AND " + tableName
					+ ".ACADEMIC_YEAR='" + academic + "' " + "AND " + tableName + ".GR_NO='" + grNo + "'";

			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public void updateNameInFeesData(SessionData sessionData) {

		String updateQuery = "", div = "", std = "", grNo = "", academic = "", insertCoulmn = "", firstName = "",
				lastName = "", fatherName = "", rollNo = "";
		int rowcount = 0, i = 1;

		JFrame f = new JFrame("Fees Update in Progress. Please Don't Close");
		screenWidth = cm.screeWidth();
		screenHeight = cm.screeHeight();
		mainCentre = (screenWidth - 150) / 2;

		f.setBounds(screenWidth / 2 - 250, screenHeight / 2, 90, 25);
		f.setSize(600, 0);
		f.setResizable(false);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		try {
			/// add column
			try {
				insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
						+ ".fee_status ADD (std_1  VARCHAR(10), div_1  VARCHAR(10),"
						+ "LAST_NAME  VARCHAR(25),FIRST_NAME  VARCHAR(25),FATHER_NAME  VARCHAR(25),ROLL_NO  VARCHAR(10))";
				statement.executeUpdate(insertCoulmn);
			} catch (Exception e) {
			}

			try {
				insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
						+ ".fees_data_mandatory ADD (LAST_NAME  VARCHAR(25),FIRST_NAME  VARCHAR(25),"
						+ "FATHER_NAME  VARCHAR(25),ROLL_NO  VARCHAR(10))";
				statement.executeUpdate(insertCoulmn);
			} catch (Exception e) {
			}

			String findQuery = "select FEES_DATA_MANDATORY.ACADEMIC_YEAR,FEES_DATA_MANDATORY.GR_NO,class_allotment.FIRST_NAME,"
					+ "class_allotment.LAST_NAME,class_allotment.FATHER_NAME,class_allotment.ROLL_NO " + "from "
					+ sessionData.getDBName() + "." + "FEES_DATA_MANDATORY LEFT JOIN " + sessionData.getDBName() + "."
					+ "class_allotment ON "
					+ "FEES_DATA_MANDATORY.GR_NO=class_allotment.GR_NO AND class_allotment.SECTION_NM=FEES_DATA_MANDATORY.SECTION_NM  "
					+ "AND class_allotment.ACADEMIC_YEAR=FEES_DATA_MANDATORY.ACADEMIC_YEAR where (FEES_DATA_MANDATORY.FIRST_NAME IS NULL OR "
					+ "FEES_DATA_MANDATORY.FIRST_NAME='') AND class_allotment.FIRST_NAME IS NOT NULL AND "
					+ "FEES_DATA_MANDATORY.SECTION_NM='" + sessionData.getSectionName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}
			if (rowcount > 0) {
				while (resultSet.next()) {
					f.setTitle("1) Updating " + i + " / " + rowcount);
					academic = resultSet.getString("ACADEMIC_YEAR") == null ? " "
							: (resultSet.getString("ACADEMIC_YEAR"));
					grNo = resultSet.getString("GR_NO") == null ? " " : (resultSet.getString("GR_NO"));
					firstName = resultSet.getString("FIRST_NAME") == null ? " " : (resultSet.getString("FIRST_NAME"));
					lastName = resultSet.getString("LAST_NAME") == null ? " " : (resultSet.getString("LAST_NAME"));
					fatherName = resultSet.getString("FATHER_NAME") == null ? " "
							: (resultSet.getString("FATHER_NAME"));
					rollNo = resultSet.getString("ROLL_NO") == null ? " " : (resultSet.getString("ROLL_NO"));

					updateQuery = "UPDATE " + sessionData.getDBName() + "." + "FEES_DATA_MANDATORY SET FIRST_NAME='"
							+ firstName + "'," + "LAST_NAME='" + lastName + "',FATHER_NAME='" + fatherName
							+ "',ROLL_NO='" + rollNo + "' where " + "ACADEMIC_YEAR='" + academic + "' and GR_NO='"
							+ grNo + "' and SECTION_NM='" + sessionData.getSectionName() + "'";
					statement = connection.createStatement();
					statement.executeUpdate(updateQuery);
					i++;
				}
			}

			i = 1;
			findQuery = "select fee_status.ACADEMIC_YEAR,fee_status.GR_NO,class_allotment.FIRST_NAME,"
					+ "class_allotment.LAST_NAME,class_allotment.FATHER_NAME,class_allotment.ROLL_NO,"
					+ "class_allotment.PRESENT_STD,class_allotment.PRESENT_DIV " + "from " + sessionData.getDBName()
					+ "." + "fee_status LEFT JOIN " + sessionData.getDBName() + "." + "class_allotment ON "
					+ "fee_status.GR_NO=class_allotment.GR_NO AND class_allotment.SECTION_NM=fee_status.SECTION_NM  "
					+ "AND class_allotment.ACADEMIC_YEAR=fee_status.ACADEMIC_YEAR "
					+ "where (fee_status.FIRST_NAME IS NULL OR fee_status.FIRST_NAME='') AND class_allotment.FIRST_NAME IS NOT NULL "
					+ "AND fee_status.SECTION_NM='" + sessionData.getSectionName() + "'";
			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);

			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}
			if (rowcount > 0) {
				while (resultSet.next()) {
					f.setTitle("2) Updating " + i + " / " + rowcount);
					academic = resultSet.getString("ACADEMIC_YEAR") == null ? ""
							: (resultSet.getString("ACADEMIC_YEAR"));
					grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO"));
					firstName = resultSet.getString("FIRST_NAME") == null ? "" : (resultSet.getString("FIRST_NAME"));
					lastName = resultSet.getString("LAST_NAME") == null ? "" : (resultSet.getString("LAST_NAME"));
					fatherName = resultSet.getString("FATHER_NAME") == null ? "" : (resultSet.getString("FATHER_NAME"));
					rollNo = resultSet.getString("ROLL_NO") == null ? "" : (resultSet.getString("ROLL_NO"));
					std = resultSet.getString("PRESENT_STD") == null ? "" : (resultSet.getString("PRESENT_STD"));
					div = resultSet.getString("PRESENT_DIV") == null ? "" : (resultSet.getString("PRESENT_DIV"));

					updateQuery = "UPDATE " + sessionData.getDBName() + "." + "fee_status SET FIRST_NAME='" + firstName
							+ "'," + "LAST_NAME='" + lastName + "',FATHER_NAME='" + fatherName + "',ROLL_NO='" + rollNo
							+ "'," + "STD_1='" + std + "',DIV_1='" + div + "' where " + "ACADEMIC_YEAR='" + academic
							+ "' and GR_NO='" + grNo + "' and SECTION_NM='" + sessionData.getSectionName() + "'";
					statement = connection.createStatement();
					statement.executeUpdate(updateQuery);
					i++;
				}
			}

			f.setVisible(false);
		} catch (Exception e) {
			cm.logException(e);
			f.setVisible(false);
			JOptionPane.showMessageDialog(null, "update name & roll no failed in fees data");
		}
	}

	public boolean deleteDuplicateRecordInTable(SessionData sessionData, String academic, String tableName, String std,
			JFrame f) throws SQLException {

		int rowcount = 0, i = 1;
		String grNo, createDate, createBy, modifiedDate, modifiedBy, deleteQuery = "";
		LinkedHashMap<String, String> studentMap = new LinkedHashMap<String, String>();

		try {
			deleteQuery = "delete from " + sessionData.getDBName() + "." + tableName + " where GR_NO = ''";
			statement = connection.createStatement();
			statement.executeUpdate(deleteQuery);
		} catch (Exception e) {
			cm.logException(e);
		}
		try {
			String findQuery = "select GR_NO,created_date,created_by,modified_date,modified_by from "
					+ sessionData.getDBName() + "." + tableName + " where " + "GR_NO IN (SELECT GR_NO FROM "
					+ sessionData.getDBName() + "." + tableName + " where " + tableName + ".ACADEMIC_YEAR = '"
					+ academic + "' AND " + tableName + ".PRESENT_STD = '" + std + "' AND " + tableName
					+ ".SECTION_NM = '" + sessionData.getSectionName()
					+ "' GROUP BY GR_NO HAVING COUNT(GR_NO) > 1) AND " + tableName + ".ACADEMIC_YEAR = '" + academic
					+ "' AND " + tableName + ".PRESENT_STD = '" + std + "' AND " + tableName + ".SECTION_NM = '"
					+ sessionData.getSectionName() + "' " + "order by created_date ASC";

			if (tableName.equalsIgnoreCase("MARKS_ENTRY") || tableName.equalsIgnoreCase("RESULT_DATA")) {
				findQuery = "select GR_NO,created_date,created_by,modified_date,modified_by from "
						+ sessionData.getDBName() + "." + tableName + " where " + "GR_NO IN (SELECT GR_NO FROM "
						+ sessionData.getDBName() + "." + tableName + " where " + tableName + ".ACADEMIC_YEAR = '"
						+ academic + "' AND " + tableName + ".STD_1 = '" + std + "' AND " + tableName
						+ ".SECTION_NM = '" + sessionData.getSectionName()
						+ "' GROUP BY GR_NO HAVING COUNT(GR_NO) > 1) AND " + tableName + ".ACADEMIC_YEAR = '" + academic
						+ "' AND " + tableName + ".STD_1 = '" + std + "' AND " + tableName + ".SECTION_NM = '"
						+ sessionData.getSectionName() + "' " + "order by GR_NO,created_date ASC";
			}

			statement = connection.createStatement();
			resultSet = statement.executeQuery(findQuery);
			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}
			while (resultSet.next()) {
				f.setTitle("1) Updating " + i + " / " + rowcount);
				grNo = resultSet.getString("GR_NO") == null ? "" : (resultSet.getString("GR_NO"));
				createDate = resultSet.getString("created_date") == null ? null : (resultSet.getString("created_date"));
				createBy = resultSet.getString("created_by") == null ? "" : (resultSet.getString("created_by"));
				modifiedDate = resultSet.getString("modified_date") == null ? null
						: (resultSet.getString("modified_date"));
				modifiedBy = resultSet.getString("modified_by") == null ? null : (resultSet.getString("modified_by"));
				if (studentMap.get(grNo) == null) {
					studentMap.put(grNo,
							grNo + "_" + createDate + "_" + createBy + "_" + modifiedDate + "_" + modifiedBy);
				} else if (!studentMap.get(grNo).equalsIgnoreCase(
						grNo + "_" + createDate + "_" + createBy + "_" + modifiedDate + "_" + modifiedBy)) {
					if (tableName.equalsIgnoreCase("MARKS_ENTRY") || tableName.equalsIgnoreCase("RESULT_DATA")) {
						deleteQuery = "Delete from " + sessionData.getDBName() + "." + tableName + " where " + tableName
								+ ".ACADEMIC_YEAR = '" + academic + "' AND " + tableName + ".STD_1 = '" + std + "' AND "
								+ tableName + ".GR_NO='" + grNo + "' AND " + tableName + ".SECTION_NM = '"
								+ sessionData.getSectionName() + "' AND " + "created_date='" + createDate
								+ "' AND created_by='" + createBy + "' AND (modified_date='" + modifiedDate
								+ "' OR modified_date is null)";
					} else {
						deleteQuery = "Delete from " + sessionData.getDBName() + "." + tableName + " where " + tableName
								+ ".ACADEMIC_YEAR = '" + academic + "' AND " + tableName + ".PRESENT_STD = '" + std
								+ "' AND " + tableName + ".GR_NO='" + grNo + "' AND " + tableName + ".SECTION_NM = '"
								+ sessionData.getSectionName() + "' AND " + "created_date='" + createDate
								+ "' AND created_by='" + createBy + "' AND (modified_date='" + modifiedDate
								+ "' OR modified_date is null) ";
					}

					statement = connection.createStatement();
					statement.executeUpdate(deleteQuery);
				} else if (studentMap.get(grNo).equalsIgnoreCase(
						grNo + "_" + createDate + "_" + createBy + "_" + modifiedDate + "_" + modifiedBy)) {
					if (tableName.equalsIgnoreCase("MARKS_ENTRY") || tableName.equalsIgnoreCase("RESULT_DATA")) {
						deleteQuery = "Delete from " + sessionData.getDBName() + "." + tableName + " where " + tableName
								+ ".ACADEMIC_YEAR = '" + academic + "' AND " + tableName + ".STD_1 = '" + std + "' AND "
								+ tableName + ".GR_NO='" + grNo + "' AND " + tableName + ".SECTION_NM = '"
								+ sessionData.getSectionName() + "' AND " + "created_date='" + createDate
								+ "' AND created_by='" + createBy + "' AND (modified_date='" + modifiedDate
								+ "' OR modified_date is null) limit 1";
					} else {
						deleteQuery = "Delete from " + sessionData.getDBName() + "." + tableName + " where " + tableName
								+ ".ACADEMIC_YEAR = '" + academic + "' AND " + tableName + ".PRESENT_STD = '" + std
								+ "' AND " + tableName + ".GR_NO='" + grNo + "' AND " + tableName + ".SECTION_NM = '"
								+ sessionData.getSectionName() + "' AND " + "created_date='" + createDate
								+ "' AND created_by='" + createBy + "' AND (modified_date='" + modifiedDate
								+ "' OR modified_date is null) limit 1";
					}

					statement = connection.createStatement();
					statement.executeUpdate(deleteQuery);
				}
				i++;
			}
			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public boolean updateStdFromNumber(SessionData sessionData) throws SQLException {

		try {
			String selectQuery, updateQuery = "", fieldName = "", fieldValue = "", stdRoman = "";
			List<String> tableNameList = new ArrayList<String>();
			tableNameList = getTablesList(sessionData);
			for (int i = 0; i < tableNameList.size(); i++) {
				fieldName = cm.getStdFieldFromTable(tableNameList.get(i));
				if (!fieldName.equalsIgnoreCase("")) {
					selectQuery = "select distinct " + fieldName + " FROM " + sessionData.getDBName() + "."
							+ tableNameList.get(i) + " " + "where " + fieldName
							+ " not in ('I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII')";

					statement = connection.createStatement();
					resultSet = statement.executeQuery(selectQuery);

					while (resultSet.next()) {
						LinkedHashMap<String, String> grDetail = new LinkedHashMap<String, String>();
						fieldValue = resultSet.getString(fieldName) == null ? ""
								: (resultSet.getString(fieldName).trim());

						if (cm.validateNumber(fieldValue)) {
							stdRoman = cm.IntegerToRoman("a" + fieldValue);
						}
						updateQuery = "UPDATE " + sessionData.getDBName() + "." + tableNameList.get(i) + " SET "
								+ fieldName + "='" + stdRoman + "' WHERE " + fieldName + "='" + fieldValue + "'";

						statement = connection.createStatement();
						statement.executeUpdate(updateQuery);
					}
				}
			}

			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean removeCautionMoney(SessionData sessionData, String academicYear) throws SQLException {

		try {
			String selectQuery, updateQuery = "", grNoList = "", grNo = "";
			String startDate = sessionData.getConfigMap().get("ACADEMIC_YEAR_START_" + sessionData.getDBName());
			startDate = academicYear.substring(0, 4) + "-" + startDate;// yyyy-mm-dd

			selectQuery = "Select GR_NO from " + sessionData.getDBName() + ".hs_general_register where "
					+ "GR_NO IN (select GR_NO from " + sessionData.getDBName() + ".fees_data_mandatory where "
					+ "(CAUTION_MONEY_JUN is not null) and " + "academic_year='" + academicYear + "') and section_nm='"
					+ sessionData.getSectionName() + "' and academic_year='" + academicYear + "' "
					+ "and DATE_ADMITTED < '" + startDate + "'";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(selectQuery);

			while (resultSet.next()) {
				grNo = resultSet.getString("GR_NO") == null ? "" : resultSet.getString("GR_NO");
				if (!grNo.trim().equalsIgnoreCase("")) {
					grNoList = grNoList + ",'" + grNo + "'";
				}
			}

			updateQuery = "UPDATE " + sessionData.getDBName()
					+ ".fees_data_mandatory SET CAUTION_MONEY_JUN=NULL,CAUTION_MONEY_JUN_DATE=NULL,CAUTION_MONEY_JUN_BANK=NULL "
					+ "WHERE GR_NO IN (" + grNoList.substring(1) + ")";

			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);

			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean clrFeeRecord(SessionData sessionData) throws SQLException {

		try {
			String deleteQuery = "DELETE FROM " + sessionData.getDBName() + ".fees_data_mandatory "
					+ "WHERE STD_1='XII' AND SECTION_NM IN ('" + sessionData.getSectionName()
					+ "') AND ACADEMIC_YEAR='2019-20'";

			statement = connection.createStatement();
			statement.executeUpdate(deleteQuery);

			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean deleteColumn(SessionData sessionData, String columnName) throws SQLException {

		try {
			String deleteQuery = "ALTER TABLE " + sessionData.getDBName() + ".fees_data_mandatory "
					+ "DROP COLUMN TUTITION_FEES_JAN, DROP COLUMN TUTITION_FEES_JAN_DATE, DROP COLUMN TUTITION_FEES_JAN_BANK, "
					+ "DROP COLUMN TUTITION_FEES_FEB, DROP COLUMN TUTITION_FEES_FEB_DATE, DROP COLUMN TUTITION_FEES_FEB_BANK, "
					+ "DROP COLUMN TUTITION_FEES_MAR, DROP COLUMN TUTITION_FEES_MAR_DATE, DROP COLUMN TUTITION_FEES_MAR_BANK, "
					+ "DROP COLUMN TUTITION_FEES_APR, DROP COLUMN TUTITION_FEES_APR_DATE, DROP COLUMN TUTITION_FEES_APR_BANK, "
					+ "DROP COLUMN TUTITION_FEES_MAY, DROP COLUMN TUTITION_FEES_MAY_DATE, DROP COLUMN TUTITION_FEES_MAY_BANK, "
					+ "DROP COLUMN TUTITION_FEES_JUN, DROP COLUMN TUTITION_FEES_JUN_DATE, DROP COLUMN TUTITION_FEES_JUN_BANK, "
					+ "DROP COLUMN TUTITION_FEES_JUL, DROP COLUMN TUTITION_FEES_JUL_DATE, DROP COLUMN TUTITION_FEES_JUL_BANK, "
					+ "DROP COLUMN TUTITION_FEES_AUG, DROP COLUMN TUTITION_FEES_AUG_DATE, DROP COLUMN TUTITION_FEES_AUG_BANK, "
					+ "DROP COLUMN TUTITION_FEES_SEP, DROP COLUMN TUTITION_FEES_SEP_DATE, DROP COLUMN TUTITION_FEES_SEP_BANK, "
					+ "DROP COLUMN TUTITION_FEES_OCT, DROP COLUMN TUTITION_FEES_OCT_DATE, DROP COLUMN TUTITION_FEES_OCT_BANK, "
					+ "DROP COLUMN TUTITION_FEES_NOV, DROP COLUMN TUTITION_FEES_NOV_DATE, DROP COLUMN TUTITION_FEES_NOV_BANK, "
					+ "DROP COLUMN TUTITION_FEES_DEC, DROP COLUMN TUTITION_FEES_DEC_DATE, DROP COLUMN TUTITION_FEES_DEC_BANK";

			statement = connection.createStatement();
			statement.executeUpdate(deleteQuery);

			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean changeColumnSize(SessionData sessionData) throws SQLException {

		boolean flag = false;
		try {
			String query = "ALTER TABLE " + sessionData.getDBName() + ".config_data MODIFY CONFIG_VALUE TEXT NOT NULL";
			statement = connection.createStatement();
			statement.executeUpdate(query);

			String columnns = getColumnList(sessionData, "marks_entry", "", null);
			String[] columnnArr = columnns.split(",");
			query = "ALTER TABLE " + sessionData.getDBName() + ".marks_entry ";

			for (int i = 0; i < columnnArr.length; i++) {
				if (columnnArr[i].equalsIgnoreCase("SUID")) {
					flag = true;
				}

				if (flag && !columnnArr[i].startsWith("MAR")) {
					query += "MODIFY " + columnnArr[i] + " TEXT,";
				} else {
					query += "MODIFY " + columnnArr[i] + " VARCHAR(200),";
				}
			}
			query = query.substring(0, query.length() - 1);
			statement = connection.createStatement();
			statement.executeUpdate(query);

			return true;
		} catch (Exception e) {
			cm.logException(e);
			return false;
		}
	}

	public boolean updateRollNoInFee(SessionData sessionData, String academic, JFrame f) throws SQLException {

		try {
			String updateRollNo = "", selectQuery = "", gr_no = "", std = "", div = "", class_roll = "", fee_roll = "";
			int rowcount = 0, i = 1;

			selectQuery = "SELECT class_allotment.GR_NO,PRESENT_STD,PRESENT_DIV,CLASS_ALLOTMENT.ROLL_NO AS CLASS_ROLL,"
					+ "FEES_DATA_MANDATORY.ROLL_NO AS FEE_ROLL FROM " + sessionData.getDBName()
					+ ".fees_data_mandatory LEFT " + "JOIN " + sessionData.getDBName()
					+ ".class_allotment ON class_allotment.GR_NO=fees_data_mandatory.GR_NO "
					+ "AND class_allotment.SECTION_NM=fees_data_mandatory.SECTION_NM AND class_allotment.ACADEMIC_YEAR=fees_data_mandatory.ACADEMIC_YEAR "
					+ "WHERE fees_data_mandatory.SECTION_NM='" + sessionData.getSectionName() + "' "
					+ "AND fees_data_mandatory.ACADEMIC_YEAR='" + academic
					+ "' AND class_allotment.ROLL_NO != fees_data_mandatory.ROLL_NO "
					+ "ORDER BY class_allotment.ROLL_NO * 1";

			statement = connection.createStatement();
			resultSet = statement.executeQuery(selectQuery);

			if (resultSet.last()) {
				rowcount = resultSet.getRow();
				resultSet.beforeFirst(); // not rs.first() because the rs.next() below will move on, missing the first
											// element
			}

			while (resultSet.next()) {
				f.setTitle("Updating " + i + " / " + rowcount + " data for Roll No in Fees. Please Don't Close");
				gr_no = resultSet.getString("GR_NO") == null ? "" : resultSet.getString("GR_NO");
				std = resultSet.getString("PRESENT_STD") == null ? "" : resultSet.getString("PRESENT_STD");
				div = resultSet.getString("PRESENT_DIV") == null ? "" : resultSet.getString("PRESENT_DIV");
				class_roll = resultSet.getString("CLASS_ROLL") == null ? "" : resultSet.getString("CLASS_ROLL");
				fee_roll = resultSet.getString("FEE_ROLL") == null ? "" : resultSet.getString("FEE_ROLL");

				updateRollNo = "UPDATE " + sessionData.getDBName() + ".FEE_STATUS SET ROLL_NO = "
						+ Integer.parseInt(class_roll) + "," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
						+ sessionData.getUserName().toUpperCase() + "' WHERE GR_NO='" + gr_no.trim() + "' "
						+ "AND ROLL_NO=" + fee_roll + " AND SECTION_NM='" + sessionData.getSectionName()
						+ "' AND ACADEMIC_YEAR='" + academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateRollNo);

				updateRollNo = "UPDATE " + sessionData.getDBName() + ".FEES_DATA_MANDATORY SET ROLL_NO = "
						+ Integer.parseInt(class_roll) + "," + "MODIFIED_DATE = SYSDATE(), MODIFIED_BY = '"
						+ sessionData.getUserName().trim().toUpperCase() + "' WHERE GR_NO='" + gr_no.trim() + "' "
						+ "AND ROLL_NO=" + fee_roll + " AND SECTION_NM='" + sessionData.getSectionName()
						+ "' AND ACADEMIC_YEAR='" + academic + "'";
				statement = connection.createStatement();
				statement.executeUpdate(updateRollNo);

				i++;
			}
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean deleteCancelledFee(SessionData sessionData, String academic, JFrame f) throws SQLException {

		try {
			String updateRollNo = "", updateQuery = "";
			int rowcount = 0, i = 1;

			updateQuery = "DELETE FROM  " + sessionData.getDBName()
					+ ".COUNT_DATA WHERE MODULE_NAME='FEE_RECEIPT' AND ACADEMIC_YEAR='2020-21' AND SECTION_NM='HIGH'";

			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);

			updateQuery = "DELETE FROM " + sessionData.getDBName()
					+ ".fees_data_mandatory WHERE GR_NO='0001764' AND ACADEMIC_YEAR='2020-21' AND SECTION_NM='HIGH'";

			statement = connection.createStatement();
			statement.executeUpdate(updateQuery);

			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public void addRenewCodeColumn(SessionData sessionData) throws SQLException {

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".administrator ADD (RENEW_CODE  text, RENEW_CODE_ON  date)";
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}
	}
	
	public void addPenNumberColumn(SessionData sessionData) throws SQLException {

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".hs_general_register ADD (PEN  text)";
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}
	}

	public void addBalanceFeeColumn(SessionData sessionData) throws SQLException {

		/// add column
		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".fees_data_mandatory ADD (BALANCE_AMOUNT double)";
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}

		try {
			String insertCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".fees_report_mandatory ADD (BALANCE_AMOUNT double)";
			statement = connection.createStatement();
			statement.executeUpdate(insertCoulmn);
		} catch (Exception e) {
		}

		try {
			String insertSectionCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".SUBJECT_ALLOTMENT ADD (SEM1_LISTEN  VARCHAR(10),SEM1_LISTEN_CT  VARCHAR(10),"
					+ "SEM2_LISTEN  VARCHAR(10),SEM2_LISTEN_CT  VARCHAR(10),"
					+ "SEM1_SPEAK  VARCHAR(10),SEM1_SPEAK_CT  VARCHAR(10),SEM2_SPEAK  VARCHAR(10),SEM2_SPEAK_CT  VARCHAR(10),"
					+ "SEM1_ASSIGN1  VARCHAR(10),SEM1_ASSIGN1_CT  VARCHAR(10),SEM2_ASSIGN1  VARCHAR(10),SEM2_ASSIGN1_CT  VARCHAR(10),"
					+ "SEM1_INTOT  VARCHAR(10),SEM1_INTOT_CT  VARCHAR(10),SEM2_INTOT  VARCHAR(10),SEM2_INTOT_CT  VARCHAR(10))";
			logger.info("insert Section Column query == " + insertSectionCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(insertSectionCoulmn);
		} catch (Exception e) {
		}

		try {
			String insertSectionCoulmn = "ALTER TABLE " + sessionData.getDBName()
					+ ".SUBJECT_ALLOTMENT ADD (SEM1_INTOT  VARCHAR(10),SEM1_INTOT_CT  VARCHAR(10),"
					+ "SEM2_INTOT  VARCHAR(10),SEM2_INTOT_CT  VARCHAR(10))";
			logger.info("insert Section Column query == " + insertSectionCoulmn);
			statement = connection.createStatement();
			statement.executeUpdate(insertSectionCoulmn);
		} catch (Exception e) {
		}
	}

	public void updateExpiryByCode(SessionData sessionData, String renewDate, String renew_code) throws SQLException {

		try {
			String queryUserUpdate = "update administrator set EXPIRY_DATE=STR_TO_DATE('" + renewDate
					+ "', '%d/%m/%Y'),EXPIRY_STATUS='ACTIVE'," + "RENEW_CODE='" + renew_code
					+ "',RENEW_CODE_ON=SYSDATE() WHERE SCHOOL_NAME='" + sessionData.getSchoolName() + "'";
			statement = connection.createStatement();
			statement.executeUpdate(queryUserUpdate);
		} catch (Exception e) {
			cm.logException(e);
		}
	}

	public void insertColumnForEvaluation(SessionData sessionData) {
		try {
			String subject = "", title = "";
			LinkedHashMap subjectMap = new LinkedHashMap<>();
			String todayDate = cm.getCurrentDate();
			String academic = cm.getAcademicYear(sessionData,todayDate);
			List<String> stdList = new ArrayList<String>();
//	        stdList.add("IX");
//	        stdList.add("X");

//	        for(int j = 0; j < stdList.size(); j++) {
			subjectMap = getSujectDetails(sessionData, "", academic);

			Set set = subjectMap.entrySet();
			Iterator i = set.iterator();
			while (i.hasNext()) {
				Map.Entry me = (Map.Entry) i.next();
				subject = (((LinkedHashMap<String, String>) me.getValue()).get("subject_name").toString())
						.toUpperCase();
				title = (((LinkedHashMap<String, String>) me.getValue()).get("subject_title").toString()).toUpperCase();

				insertColumn(sessionData, "", subject, title);
			}
//	        }
		} catch (Exception e) {
		}
	}
	
	public void UpdateDivLengthinTable(SessionData sessionData) {
		try {
			String modifyDivVarcharSizeColumn = "ALTER TABLE "+sessionData.getDBName()+".MARKS_ENTRY MODIFY COLUMN DIV_1 VARCHAR(10),MODIFY COLUMN STD_1 VARCHAR(10)";
			statement = connection.createStatement();
			statement.executeUpdate(modifyDivVarcharSizeColumn);
		} catch (Exception e) {
			logger.warn("failed to modify Div varchar size Column query in MARKS_ENTRY table >>> " + e);
		}
		
		try {
			String modifyDivVarcharSizeColumn = "ALTER TABLE "+sessionData.getDBName()+".RESULT_DATA MODIFY COLUMN DIV_1 VARCHAR(10),MODIFY COLUMN STD_1 VARCHAR(10)";
			statement = connection.createStatement();
			statement.executeUpdate(modifyDivVarcharSizeColumn);
		} catch (Exception e) {
			logger.warn("failed to modify Div varchar size Column query in RESULT_DATA table >>> " + e);
		}
	}
}